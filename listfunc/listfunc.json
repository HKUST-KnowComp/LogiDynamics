[
  {
    "id": "c102",
    "difficulty": 0,
    "function": "def c102(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        22,
        61,
        18,
        89,
        76
      ],
      "output": [
        22,
        61,
        18,
        89,
        76
      ]
    },
    "demos": [
      {
        "input": [
          64,
          47,
          44,
          37,
          37,
          91
        ],
        "output": [
          64,
          47,
          44,
          37,
          37,
          91
        ]
      },
      {
        "input": [
          8,
          60,
          62,
          53,
          40,
          9,
          57,
          12
        ],
        "output": [
          8,
          60,
          62,
          53,
          40,
          9,
          57,
          12
        ]
      },
      {
        "input": [
          56,
          72,
          88,
          70,
          80,
          19
        ],
        "output": [
          56,
          72,
          88,
          70,
          80,
          19
        ]
      }
    ]
  },
  {
    "id": "c170",
    "difficulty": 1,
    "function": "def c170(x):\n    # remove all but the first and last element\n    return [x[0], x[-1]]\n    \n",
    "data": {
      "input": [
        43,
        10,
        20,
        16,
        33
      ],
      "output": [
        43,
        33
      ]
    },
    "demos": [
      {
        "input": [
          68,
          26,
          100,
          46,
          16,
          40,
          45
        ],
        "output": [
          68,
          45
        ]
      },
      {
        "input": [
          37,
          69,
          35,
          68,
          97,
          23,
          5
        ],
        "output": [
          37,
          5
        ]
      },
      {
        "input": [
          11,
          67,
          55,
          85,
          6,
          17,
          71
        ],
        "output": [
          11,
          71
        ]
      }
    ]
  },
  {
    "id": "c121",
    "difficulty": 2,
    "function": "def c121(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        83,
        71,
        17
      ],
      "output": [
        17
      ]
    },
    "demos": [
      {
        "input": [
          88,
          34,
          84,
          95,
          76
        ],
        "output": [
          76
        ]
      },
      {
        "input": [
          58,
          23,
          61
        ],
        "output": [
          61
        ]
      },
      {
        "input": [
          5,
          63,
          22
        ],
        "output": [
          22
        ]
      }
    ]
  },
  {
    "id": "c045",
    "difficulty": 3,
    "function": "def c045(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        45,
        40,
        88,
        28,
        50,
        94,
        72,
        79
      ],
      "output": [
        45,
        40,
        88,
        28,
        50,
        94,
        72,
        79
      ]
    },
    "demos": [
      {
        "input": [
          34,
          6,
          86,
          95,
          98,
          23
        ],
        "output": [
          34,
          6,
          86,
          95,
          98,
          23
        ]
      },
      {
        "input": [
          45,
          81,
          83,
          19,
          82
        ],
        "output": [
          45,
          81,
          83,
          19,
          82
        ]
      },
      {
        "input": [
          21,
          87,
          87,
          10,
          71
        ],
        "output": [
          21,
          87,
          87,
          10,
          71
        ]
      }
    ]
  },
  {
    "id": "c072",
    "difficulty": 4,
    "function": "def c072(x):\n    # repeat every element twice\n    return [i for i in x for _ in (0, 1)]\n\n",
    "data": {
      "input": [
        49,
        49,
        77,
        36
      ],
      "output": [
        49,
        49,
        49,
        49,
        77,
        77,
        36,
        36
      ]
    },
    "demos": [
      {
        "input": [
          39,
          43,
          73,
          58,
          52,
          28
        ],
        "output": [
          39,
          39,
          43,
          43,
          73,
          73,
          58,
          58,
          52,
          52,
          28,
          28
        ]
      },
      {
        "input": [
          33,
          42,
          39,
          63,
          17
        ],
        "output": [
          33,
          33,
          42,
          42,
          39,
          39,
          63,
          63,
          17,
          17
        ]
      },
      {
        "input": [
          34,
          32,
          42
        ],
        "output": [
          34,
          34,
          32,
          32,
          42,
          42
        ]
      }
    ]
  },
  {
    "id": "c151",
    "difficulty": 5,
    "function": "def c151(x):\n    # repeat each element, M, M times, in order of appearance\n    return [i for i in x for _ in range(i)]\n\n",
    "data": {
      "input": [
        2,
        4,
        1,
        0
      ],
      "output": [
        2,
        2,
        4,
        4,
        4,
        4,
        1
      ]
    },
    "demos": [
      {
        "input": [
          1,
          3,
          1,
          3,
          3,
          5
        ],
        "output": [
          1,
          3,
          3,
          3,
          1,
          3,
          3,
          3,
          3,
          3,
          3,
          5,
          5,
          5,
          5,
          5
        ]
      },
      {
        "input": [
          3,
          5,
          1,
          0
        ],
        "output": [
          3,
          3,
          3,
          5,
          5,
          5,
          5,
          5,
          1
        ]
      },
      {
        "input": [
          5,
          3,
          1
        ],
        "output": [
          5,
          5,
          5,
          5,
          5,
          3,
          3,
          3,
          1
        ]
      }
    ]
  },
  {
    "id": "c080",
    "difficulty": 6,
    "function": "def c080(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        16,
        86,
        81,
        40,
        67,
        57
      ],
      "output": [
        57,
        67,
        40,
        81,
        86,
        16
      ]
    },
    "demos": [
      {
        "input": [
          23,
          24,
          48,
          43,
          66
        ],
        "output": [
          66,
          43,
          48,
          24,
          23
        ]
      },
      {
        "input": [
          25,
          4,
          25,
          9,
          32,
          69,
          12
        ],
        "output": [
          12,
          69,
          32,
          9,
          25,
          4,
          25
        ]
      },
      {
        "input": [
          79,
          1,
          40,
          75,
          19,
          18,
          89,
          97
        ],
        "output": [
          97,
          89,
          18,
          19,
          75,
          40,
          1,
          79
        ]
      }
    ]
  },
  {
    "id": "c061",
    "difficulty": 7,
    "function": "def c061(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        7,
        14,
        38,
        9,
        89,
        80
      ],
      "output": [
        80
      ]
    },
    "demos": [
      {
        "input": [
          1,
          15,
          42,
          92,
          95,
          7,
          50,
          31
        ],
        "output": [
          31
        ]
      },
      {
        "input": [
          58,
          60,
          44,
          15,
          14,
          53
        ],
        "output": [
          53
        ]
      },
      {
        "input": [
          87,
          69,
          68,
          75,
          79,
          71,
          4
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c189",
    "difficulty": 8,
    "function": "def c189(x):\n    # count from the smallest element to the largest element\n    return list(range(min(x), max(x)+1))\n\n",
    "data": {
      "input": [
        31,
        30,
        27
      ],
      "output": [
        27,
        28,
        29,
        30,
        31
      ]
    },
    "demos": [
      {
        "input": [
          49,
          47,
          52,
          54
        ],
        "output": [
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54
        ]
      },
      {
        "input": [
          88,
          91,
          92
        ],
        "output": [
          88,
          89,
          90,
          91,
          92
        ]
      },
      {
        "input": [
          78,
          76,
          73
        ],
        "output": [
          73,
          74,
          75,
          76,
          77,
          78
        ]
      }
    ]
  },
  {
    "id": "c050",
    "difficulty": 9,
    "function": "def c050(x):\n    # prepend first element to the list\n    return [x[0]] + x\n\n",
    "data": {
      "input": [
        8,
        75,
        63,
        61,
        15,
        38,
        45
      ],
      "output": [
        8,
        8,
        75,
        63,
        61,
        15,
        38,
        45
      ]
    },
    "demos": [
      {
        "input": [
          84,
          51,
          61
        ],
        "output": [
          84,
          84,
          51,
          61
        ]
      },
      {
        "input": [
          16,
          12,
          86,
          23,
          43,
          77
        ],
        "output": [
          16,
          16,
          12,
          86,
          23,
          43,
          77
        ]
      },
      {
        "input": [
          32,
          18,
          99,
          25
        ],
        "output": [
          32,
          32,
          18,
          99,
          25
        ]
      }
    ]
  },
  {
    "id": "c048",
    "difficulty": 10,
    "function": "def c048(x):\n    # remove all but the first element\n    return [x[0]]\n    \n",
    "data": {
      "input": [
        22,
        47,
        56,
        5,
        31
      ],
      "output": [
        22
      ]
    },
    "demos": [
      {
        "input": [
          44,
          22,
          69,
          59
        ],
        "output": [
          44
        ]
      },
      {
        "input": [
          17,
          3,
          27,
          72,
          5,
          53,
          86
        ],
        "output": [
          17
        ]
      },
      {
        "input": [
          42,
          42,
          27,
          94
        ],
        "output": [
          42
        ]
      }
    ]
  },
  {
    "id": "c147",
    "difficulty": 11,
    "function": "def c147(x):\n    # each element, followed by its index\n    res = []\n    for i, v in enumerate(x):\n        res.append(v)\n        res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        34,
        54,
        50,
        95,
        98,
        74,
        62
      ],
      "output": [
        34,
        0,
        54,
        1,
        50,
        2,
        95,
        3,
        98,
        4,
        74,
        5,
        62,
        6
      ]
    },
    "demos": [
      {
        "input": [
          78,
          54,
          4,
          83,
          76,
          51,
          40
        ],
        "output": [
          78,
          0,
          54,
          1,
          4,
          2,
          83,
          3,
          76,
          4,
          51,
          5,
          40,
          6
        ]
      },
      {
        "input": [
          18,
          35,
          91,
          70,
          85,
          70,
          27
        ],
        "output": [
          18,
          0,
          35,
          1,
          91,
          2,
          70,
          3,
          85,
          4,
          70,
          5,
          27,
          6
        ]
      },
      {
        "input": [
          54,
          0,
          20,
          92,
          69,
          20,
          40
        ],
        "output": [
          54,
          0,
          0,
          1,
          20,
          2,
          92,
          3,
          69,
          4,
          20,
          5,
          40,
          6
        ]
      }
    ]
  },
  {
    "id": "c120",
    "difficulty": 12,
    "function": "def c120(x):\n    # remove all but the first element\n    return [x[0]]\n\n",
    "data": {
      "input": [
        12,
        92,
        76,
        3,
        98
      ],
      "output": [
        12
      ]
    },
    "demos": [
      {
        "input": [
          30,
          63,
          52,
          46,
          20
        ],
        "output": [
          30
        ]
      },
      {
        "input": [
          64,
          81,
          30,
          56,
          61
        ],
        "output": [
          64
        ]
      },
      {
        "input": [
          27,
          89,
          97,
          83,
          83
        ],
        "output": [
          27
        ]
      }
    ]
  },
  {
    "id": "c127",
    "difficulty": 13,
    "function": "def c127(x):\n    # remove last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        62,
        70,
        2,
        89
      ],
      "output": [
        62,
        70,
        2
      ]
    },
    "demos": [
      {
        "input": [
          54,
          44,
          41
        ],
        "output": [
          54,
          44
        ]
      },
      {
        "input": [
          51,
          23,
          14,
          62,
          74,
          2
        ],
        "output": [
          51,
          23,
          14,
          62,
          74
        ]
      },
      {
        "input": [
          72,
          77,
          53,
          64,
          66
        ],
        "output": [
          72,
          77,
          53,
          64
        ]
      }
    ]
  },
  {
    "id": "c100",
    "difficulty": 14,
    "function": "def c100(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        96,
        40,
        21
      ],
      "output": [
        21,
        40,
        96
      ]
    },
    "demos": [
      {
        "input": [
          75,
          40,
          51
        ],
        "output": [
          51,
          40,
          75
        ]
      },
      {
        "input": [
          44,
          72,
          23,
          14
        ],
        "output": [
          14,
          23,
          72,
          44
        ]
      },
      {
        "input": [
          0,
          66,
          92
        ],
        "output": [
          92,
          66,
          0
        ]
      }
    ]
  },
  {
    "id": "c145",
    "difficulty": 15,
    "function": "def c145(x):\n    # replace every element with the first element\n    return [x[0]] * len(x)\n\n",
    "data": {
      "input": [
        49,
        30,
        72
      ],
      "output": [
        49,
        49,
        49
      ]
    },
    "demos": [
      {
        "input": [
          97,
          17,
          75,
          92,
          25,
          87
        ],
        "output": [
          97,
          97,
          97,
          97,
          97,
          97
        ]
      },
      {
        "input": [
          74,
          33,
          3,
          87,
          33
        ],
        "output": [
          74,
          74,
          74,
          74,
          74
        ]
      },
      {
        "input": [
          98,
          6,
          92,
          41,
          90,
          45,
          43
        ],
        "output": [
          98,
          98,
          98,
          98,
          98,
          98,
          98
        ]
      }
    ]
  },
  {
    "id": "c079",
    "difficulty": 16,
    "function": "def c079(x):\n    # sum of the list\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        10,
        18,
        9
      ],
      "output": [
        37
      ]
    },
    "demos": [
      {
        "input": [
          0,
          6,
          5,
          15,
          15
        ],
        "output": [
          41
        ]
      },
      {
        "input": [
          5,
          12,
          2,
          9,
          16,
          11
        ],
        "output": [
          55
        ]
      },
      {
        "input": [
          0,
          15,
          12,
          12,
          2,
          13,
          8
        ],
        "output": [
          62
        ]
      }
    ]
  },
  {
    "id": "c043",
    "difficulty": 17,
    "function": "def c043(x):\n    return [8, 2, 7, 0, 3]\n\n",
    "data": {
      "input": [
        94,
        57,
        78
      ],
      "output": [
        8,
        2,
        7,
        0,
        3
      ]
    },
    "demos": [
      {
        "input": [
          82,
          56,
          36,
          48,
          49,
          71,
          6
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          13,
          95,
          76
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          15,
          77,
          49,
          42
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      }
    ]
  },
  {
    "id": "c038",
    "difficulty": 18,
    "function": "def c038(x):\n    # append 9\n    return x + [9]\n\n",
    "data": {
      "input": [
        69,
        64,
        55,
        93,
        80,
        14
      ],
      "output": [
        69,
        64,
        55,
        93,
        80,
        14,
        9
      ]
    },
    "demos": [
      {
        "input": [
          76,
          47,
          27,
          24,
          90,
          2,
          79
        ],
        "output": [
          76,
          47,
          27,
          24,
          90,
          2,
          79,
          9
        ]
      },
      {
        "input": [
          10,
          91,
          65,
          77,
          67
        ],
        "output": [
          10,
          91,
          65,
          77,
          67,
          9
        ]
      },
      {
        "input": [
          3,
          38,
          35,
          85
        ],
        "output": [
          3,
          38,
          35,
          85,
          9
        ]
      }
    ]
  },
  {
    "id": "c042",
    "difficulty": 19,
    "function": "def c042(x):\n    return [5, 2]\n\n",
    "data": {
      "input": [
        64,
        59,
        94,
        62,
        60,
        78
      ],
      "output": [
        5,
        2
      ]
    },
    "demos": [
      {
        "input": [
          49,
          57,
          72,
          64
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          90,
          56,
          60,
          10
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          65,
          17,
          58,
          57,
          71,
          59
        ],
        "output": [
          5,
          2
        ]
      }
    ]
  },
  {
    "id": "c223",
    "difficulty": 20,
    "function": "def c223(x):\n    # swap the digits of each element\n    return [int(str(i)[::-1]) for i in x]\n\n",
    "data": {
      "input": [
        91,
        77,
        57,
        99
      ],
      "output": [
        19,
        77,
        75,
        99
      ]
    },
    "demos": [
      {
        "input": [
          70,
          14,
          44,
          15
        ],
        "output": [
          7,
          41,
          44,
          51
        ]
      },
      {
        "input": [
          4,
          46,
          99,
          70,
          89,
          11
        ],
        "output": [
          4,
          64,
          99,
          7,
          98,
          11
        ]
      },
      {
        "input": [
          40,
          39,
          4,
          92,
          86,
          47,
          78
        ],
        "output": [
          4,
          93,
          4,
          29,
          68,
          74,
          87
        ]
      }
    ]
  },
  {
    "id": "c137",
    "difficulty": 21,
    "function": "def c137(x):\n    # remove all 3\n    return [i for i in x if i != 3]\n\n",
    "data": {
      "input": [
        29,
        52,
        50,
        3,
        55,
        41,
        3
      ],
      "output": [
        29,
        52,
        50,
        55,
        41
      ]
    },
    "demos": [
      {
        "input": [
          76,
          3,
          3,
          74
        ],
        "output": [
          76,
          74
        ]
      },
      {
        "input": [
          96,
          16,
          13,
          62,
          34,
          3,
          56,
          33
        ],
        "output": [
          96,
          16,
          13,
          62,
          34,
          56,
          33
        ]
      },
      {
        "input": [
          93,
          72,
          3,
          24,
          34,
          94,
          3,
          13
        ],
        "output": [
          93,
          72,
          24,
          34,
          94,
          13
        ]
      }
    ]
  },
  {
    "id": "c238",
    "difficulty": 22,
    "function": "def c238(x):\n    # keep only elements that appear exactly once\n    return [i for i in x if x.count(i) == 1]\n\n",
    "data": {
      "input": [
        8,
        0,
        5,
        12,
        0,
        2
      ],
      "output": [
        8,
        5,
        12,
        2
      ]
    },
    "demos": [
      {
        "input": [
          12,
          34,
          12,
          56,
          78,
          12,
          34,
          34
        ],
        "output": [
          56,
          78
        ]
      },
      {
        "input": [
          9,
          9,
          6,
          0,
          13,
          12,
          12,
          12
        ],
        "output": [
          6,
          0,
          13
        ]
      },
      {
        "input": [
          5,
          3,
          1,
          6,
          6,
          3,
          4,
          4
        ],
        "output": [
          5,
          1
        ]
      }
    ]
  },
  {
    "id": "c108",
    "difficulty": 23,
    "function": "def c108(x):\n    # sum of elements\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        19,
        15,
        10,
        8,
        16,
        10,
        15
      ],
      "output": [
        93
      ]
    },
    "demos": [
      {
        "input": [
          19,
          19,
          4,
          8,
          20,
          6,
          12
        ],
        "output": [
          88
        ]
      },
      {
        "input": [
          4,
          5,
          1,
          19,
          7
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          17,
          2,
          13
        ],
        "output": [
          32
        ]
      }
    ]
  },
  {
    "id": "c126",
    "difficulty": 24,
    "function": "def c126(x):\n    # remove first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        3,
        31,
        40,
        45,
        9,
        4
      ],
      "output": [
        31,
        40,
        45,
        9,
        4
      ]
    },
    "demos": [
      {
        "input": [
          89,
          95,
          93
        ],
        "output": [
          95,
          93
        ]
      },
      {
        "input": [
          60,
          62,
          58,
          90,
          25,
          97
        ],
        "output": [
          62,
          58,
          90,
          25,
          97
        ]
      },
      {
        "input": [
          84,
          19,
          27
        ],
        "output": [
          19,
          27
        ]
      }
    ]
  },
  {
    "id": "c187",
    "difficulty": 25,
    "function": "def c187(x):\n    # concatenate input with itself, separated by 0\n    return x + [0] + x\n\n",
    "data": {
      "input": [
        87,
        90,
        65,
        97,
        66
      ],
      "output": [
        87,
        90,
        65,
        97,
        66,
        0,
        87,
        90,
        65,
        97,
        66
      ]
    },
    "demos": [
      {
        "input": [
          52,
          84,
          51
        ],
        "output": [
          52,
          84,
          51,
          0,
          52,
          84,
          51
        ]
      },
      {
        "input": [
          51,
          31,
          81
        ],
        "output": [
          51,
          31,
          81,
          0,
          51,
          31,
          81
        ]
      },
      {
        "input": [
          82,
          37,
          44,
          71,
          66
        ],
        "output": [
          82,
          37,
          44,
          71,
          66,
          0,
          82,
          37,
          44,
          71,
          66
        ]
      }
    ]
  },
  {
    "id": "c022",
    "difficulty": 26,
    "function": "def c022(x):\n    # insert a 5 as element 1\n    return x[:1] + [5] + x[1:]\n\n",
    "data": {
      "input": [
        41,
        83,
        77
      ],
      "output": [
        41,
        5,
        83,
        77
      ]
    },
    "demos": [
      {
        "input": [
          47,
          24,
          78,
          77,
          77
        ],
        "output": [
          47,
          5,
          24,
          78,
          77,
          77
        ]
      },
      {
        "input": [
          64,
          11,
          53,
          74,
          30,
          38
        ],
        "output": [
          64,
          5,
          11,
          53,
          74,
          30,
          38
        ]
      },
      {
        "input": [
          22,
          63,
          33
        ],
        "output": [
          22,
          5,
          63,
          33
        ]
      }
    ]
  },
  {
    "id": "c212",
    "difficulty": 27,
    "function": "def c212(x):\n    # insert 3 at index 2, 3 times\n    return x[:3] + [3,3,3] + x[3:]\n\n",
    "data": {
      "input": [
        48,
        99,
        86
      ],
      "output": [
        48,
        99,
        86,
        3,
        3,
        3
      ]
    },
    "demos": [
      {
        "input": [
          51,
          63,
          54,
          38,
          41,
          88
        ],
        "output": [
          51,
          63,
          54,
          3,
          3,
          3,
          38,
          41,
          88
        ]
      },
      {
        "input": [
          15,
          72,
          3,
          80,
          56,
          8
        ],
        "output": [
          15,
          72,
          3,
          3,
          3,
          3,
          80,
          56,
          8
        ]
      },
      {
        "input": [
          93,
          96,
          8,
          35
        ],
        "output": [
          93,
          96,
          8,
          3,
          3,
          3,
          35
        ]
      }
    ]
  },
  {
    "id": "c101",
    "difficulty": 28,
    "function": "def c101(x):\n    return [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]\n\n",
    "data": {
      "input": [
        75,
        73,
        69
      ],
      "output": [
        11,
        19,
        24,
        33,
        42,
        5,
        82,
        0,
        64,
        9
      ]
    },
    "demos": [
      {
        "input": [
          0,
          35,
          7
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          99,
          59,
          51,
          10,
          16
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          81,
          76,
          30,
          37,
          47,
          45,
          29
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      }
    ]
  },
  {
    "id": "c021",
    "difficulty": 29,
    "function": "def c021(x):\n    # insert 8 as element 1\n    return x[:1] + [8] + x[1:]\n\n",
    "data": {
      "input": [
        4,
        75,
        23,
        39,
        21,
        64,
        38
      ],
      "output": [
        4,
        8,
        75,
        23,
        39,
        21,
        64,
        38
      ]
    },
    "demos": [
      {
        "input": [
          42,
          70,
          53,
          89,
          23,
          74
        ],
        "output": [
          42,
          8,
          70,
          53,
          89,
          23,
          74
        ]
      },
      {
        "input": [
          43,
          43,
          31,
          6,
          42,
          6
        ],
        "output": [
          43,
          8,
          43,
          31,
          6,
          42,
          6
        ]
      },
      {
        "input": [
          97,
          89,
          41,
          36,
          47
        ],
        "output": [
          97,
          8,
          89,
          41,
          36,
          47
        ]
      }
    ]
  },
  {
    "id": "c105",
    "difficulty": 30,
    "function": "def c105(x):\n    # concatenate all but the last element with all but the first element\n    return x[:-1] + x[1:]\n\n",
    "data": {
      "input": [
        2,
        49,
        69,
        95,
        95
      ],
      "output": [
        2,
        49,
        69,
        95,
        49,
        69,
        95,
        95
      ]
    },
    "demos": [
      {
        "input": [
          19,
          16,
          49,
          89,
          36
        ],
        "output": [
          19,
          16,
          49,
          89,
          16,
          49,
          89,
          36
        ]
      },
      {
        "input": [
          49,
          3,
          22
        ],
        "output": [
          49,
          3,
          3,
          22
        ]
      },
      {
        "input": [
          43,
          84,
          26,
          71,
          87
        ],
        "output": [
          43,
          84,
          26,
          71,
          84,
          26,
          71,
          87
        ]
      }
    ]
  },
  {
    "id": "c041",
    "difficulty": 31,
    "function": "def c041(x):\n    return [9]\n\n",
    "data": {
      "input": [
        42,
        27,
        43
      ],
      "output": [
        9
      ]
    },
    "demos": [
      {
        "input": [
          93,
          19,
          31,
          4,
          16,
          32
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          60,
          80,
          81
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          77,
          82,
          11,
          61
        ],
        "output": [
          9
        ]
      }
    ]
  },
  {
    "id": "c070",
    "difficulty": 32,
    "function": "def c070(x):\n    # concatenate the input\n    return x + x\n\n",
    "data": {
      "input": [
        63,
        52,
        22,
        18,
        33,
        42
      ],
      "output": [
        63,
        52,
        22,
        18,
        33,
        42,
        63,
        52,
        22,
        18,
        33,
        42
      ]
    },
    "demos": [
      {
        "input": [
          27,
          24,
          55,
          74,
          4
        ],
        "output": [
          27,
          24,
          55,
          74,
          4,
          27,
          24,
          55,
          74,
          4
        ]
      },
      {
        "input": [
          62,
          26,
          22
        ],
        "output": [
          62,
          26,
          22,
          62,
          26,
          22
        ]
      },
      {
        "input": [
          94,
          22,
          12,
          72
        ],
        "output": [
          94,
          22,
          12,
          72,
          94,
          22,
          12,
          72
        ]
      }
    ]
  },
  {
    "id": "c052",
    "difficulty": 33,
    "function": "def c052(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        63,
        13,
        8
      ],
      "output": [
        63,
        63,
        63,
        63,
        63,
        63,
        63
      ]
    },
    "demos": [
      {
        "input": [
          74,
          17,
          88
        ],
        "output": [
          74,
          74,
          74,
          74,
          74,
          74,
          74
        ]
      },
      {
        "input": [
          76,
          40,
          2,
          22
        ],
        "output": [
          76,
          76,
          76,
          76,
          76,
          76,
          76
        ]
      },
      {
        "input": [
          95,
          89,
          89
        ],
        "output": [
          95,
          95,
          95,
          95,
          95,
          95,
          95
        ]
      }
    ]
  },
  {
    "id": "c044",
    "difficulty": 34,
    "function": "def c044(x):\n    return [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]\n\n",
    "data": {
      "input": [
        14,
        20,
        15,
        14,
        54,
        27,
        82
      ],
      "output": [
        1,
        9,
        4,
        3,
        2,
        5,
        8,
        0,
        4,
        9
      ]
    },
    "demos": [
      {
        "input": [
          84,
          2,
          21,
          72
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          59,
          78,
          73,
          74,
          51
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          19,
          22,
          87,
          14
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      }
    ]
  },
  {
    "id": "c190",
    "difficulty": 35,
    "function": "def c190(x):\n    # count by 2 from the first element to the last element\n    if x[0] < x[-1]:\n        return list(range(x[0], x[-1]+1, 2))\n    else:\n        return list(range(x[0], x[-1]-1, -2))\n\n",
    "data": {
      "input": [
        39,
        42,
        39
      ],
      "output": [
        39
      ]
    },
    "demos": [
      {
        "input": [
          99,
          72,
          24,
          85
        ],
        "output": [
          99,
          97,
          95,
          93,
          91,
          89,
          87,
          85
        ]
      },
      {
        "input": [
          54,
          48,
          48
        ],
        "output": [
          54,
          52,
          50,
          48
        ]
      },
      {
        "input": [
          78,
          82,
          84
        ],
        "output": [
          78,
          80,
          82,
          84
        ]
      }
    ]
  },
  {
    "id": "c037",
    "difficulty": 36,
    "function": "def c037(x):\n    # append 3\n    return x + [3]\n\n",
    "data": {
      "input": [
        50,
        32,
        99,
        32,
        83,
        54,
        90
      ],
      "output": [
        50,
        32,
        99,
        32,
        83,
        54,
        90,
        3
      ]
    },
    "demos": [
      {
        "input": [
          44,
          37,
          12,
          22,
          62,
          57,
          10
        ],
        "output": [
          44,
          37,
          12,
          22,
          62,
          57,
          10,
          3
        ]
      },
      {
        "input": [
          73,
          63,
          84,
          15,
          66
        ],
        "output": [
          73,
          63,
          84,
          15,
          66,
          3
        ]
      },
      {
        "input": [
          43,
          97,
          96,
          23,
          79
        ],
        "output": [
          43,
          97,
          96,
          23,
          79,
          3
        ]
      }
    ]
  },
  {
    "id": "c222",
    "difficulty": 37,
    "function": "def c222(x):\n    # remove each element with the input length\n    return [len(x) for _ in x]\n\n",
    "data": {
      "input": [
        27,
        55,
        72,
        20,
        73,
        94,
        49
      ],
      "output": [
        7,
        7,
        7,
        7,
        7,
        7,
        7
      ]
    },
    "demos": [
      {
        "input": [
          38,
          49,
          32,
          25,
          74
        ],
        "output": [
          5,
          5,
          5,
          5,
          5
        ]
      },
      {
        "input": [
          51,
          11,
          81,
          53
        ],
        "output": [
          4,
          4,
          4,
          4
        ]
      },
      {
        "input": [
          81,
          85,
          5,
          29,
          37,
          27
        ],
        "output": [
          6,
          6,
          6,
          6,
          6,
          6
        ]
      }
    ]
  },
  {
    "id": "c107",
    "difficulty": 38,
    "function": "def c107(x):\n    # unique elements, in order of appearance\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        22,
        40,
        35,
        17,
        22,
        60,
        31,
        17,
        31,
        59
      ],
      "output": [
        22,
        40,
        35,
        17,
        60,
        31,
        59
      ]
    },
    "demos": [
      {
        "input": [
          19,
          19,
          15,
          29,
          15,
          45
        ],
        "output": [
          19,
          15,
          29,
          45
        ]
      },
      {
        "input": [
          6,
          85,
          21,
          85,
          79,
          62
        ],
        "output": [
          6,
          85,
          21,
          79,
          62
        ]
      },
      {
        "input": [
          11,
          97,
          21,
          85,
          46,
          97,
          20,
          21,
          21
        ],
        "output": [
          11,
          97,
          21,
          85,
          46,
          20
        ]
      }
    ]
  },
  {
    "id": "c011",
    "difficulty": 39,
    "function": "def c011(x):\n    # [1:4] of the input\n    return x[1:4]\n\n",
    "data": {
      "input": [
        52,
        49,
        88,
        98,
        76,
        46,
        25
      ],
      "output": [
        49,
        88,
        98
      ]
    },
    "demos": [
      {
        "input": [
          57,
          75,
          72,
          75
        ],
        "output": [
          75,
          72,
          75
        ]
      },
      {
        "input": [
          12,
          48,
          57,
          48,
          71,
          20,
          96
        ],
        "output": [
          48,
          57,
          48
        ]
      },
      {
        "input": [
          64,
          53,
          59,
          97,
          39
        ],
        "output": [
          53,
          59,
          97
        ]
      }
    ]
  },
  {
    "id": "c104",
    "difficulty": 40,
    "function": "def c104(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        10,
        4,
        99,
        46,
        14
      ],
      "output": [
        99
      ]
    },
    "demos": [
      {
        "input": [
          99,
          40,
          74,
          22,
          76
        ],
        "output": [
          99
        ]
      },
      {
        "input": [
          26,
          27,
          79,
          0,
          79,
          14
        ],
        "output": [
          79
        ]
      },
      {
        "input": [
          9,
          87,
          31,
          15,
          69
        ],
        "output": [
          87
        ]
      }
    ]
  },
  {
    "id": "c192",
    "difficulty": 41,
    "function": "def c192(x):\n    # replace each element, M, with its tens digit, if no tens digit, replace with 0\n    return [int(str(i)[-2]) if len(str(i)) > 1 else 0 for i in x]\n\n",
    "data": {
      "input": [
        67,
        45,
        71,
        12,
        46
      ],
      "output": [
        6,
        4,
        7,
        1,
        4
      ]
    },
    "demos": [
      {
        "input": [
          27,
          21,
          51,
          83,
          2,
          27,
          41
        ],
        "output": [
          2,
          2,
          5,
          8,
          0,
          2,
          4
        ]
      },
      {
        "input": [
          30,
          40,
          94,
          57,
          7,
          73
        ],
        "output": [
          3,
          4,
          9,
          5,
          0,
          7
        ]
      },
      {
        "input": [
          16,
          66,
          90,
          23
        ],
        "output": [
          1,
          6,
          9,
          2
        ]
      }
    ]
  },
  {
    "id": "c182",
    "difficulty": 42,
    "function": "def c182(x):\n    # keep every third element\n    return x[::3]\n\n",
    "data": {
      "input": [
        50,
        51,
        59,
        50,
        77,
        35,
        57,
        6
      ],
      "output": [
        50,
        50,
        57
      ]
    },
    "demos": [
      {
        "input": [
          23,
          89,
          77,
          95,
          8,
          89
        ],
        "output": [
          23,
          95
        ]
      },
      {
        "input": [
          95,
          45,
          68,
          36,
          49
        ],
        "output": [
          95,
          36
        ]
      },
      {
        "input": [
          15,
          30,
          30,
          54,
          41,
          15,
          74,
          48
        ],
        "output": [
          15,
          54,
          74
        ]
      }
    ]
  },
  {
    "id": "c006",
    "difficulty": 43,
    "function": "def c006(x):\n    # the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        21,
        80,
        72,
        11,
        67,
        19
      ],
      "output": [
        21,
        80
      ]
    },
    "demos": [
      {
        "input": [
          5,
          90,
          58
        ],
        "output": [
          5,
          90
        ]
      },
      {
        "input": [
          24,
          46,
          44,
          23,
          98,
          38,
          16
        ],
        "output": [
          24,
          46
        ]
      },
      {
        "input": [
          31,
          95,
          67,
          66,
          93,
          69
        ],
        "output": [
          31,
          95
        ]
      }
    ]
  },
  {
    "id": "c046",
    "difficulty": 44,
    "function": "def c046(x):\n    # prepend 7\n    return [7] + x\n\n",
    "data": {
      "input": [
        83,
        6,
        59,
        62,
        28
      ],
      "output": [
        7,
        83,
        6,
        59,
        62,
        28
      ]
    },
    "demos": [
      {
        "input": [
          85,
          40,
          18,
          58,
          89,
          42
        ],
        "output": [
          7,
          85,
          40,
          18,
          58,
          89,
          42
        ]
      },
      {
        "input": [
          36,
          27,
          40
        ],
        "output": [
          7,
          36,
          27,
          40
        ]
      },
      {
        "input": [
          72,
          5,
          69,
          88
        ],
        "output": [
          7,
          72,
          5,
          69,
          88
        ]
      }
    ]
  },
  {
    "id": "c106",
    "difficulty": 45,
    "function": "def c106(x):\n    # elements in ascending order\n    return sorted(x)\n\n",
    "data": {
      "input": [
        62,
        95,
        41
      ],
      "output": [
        41,
        62,
        95
      ]
    },
    "demos": [
      {
        "input": [
          71,
          31,
          57
        ],
        "output": [
          31,
          57,
          71
        ]
      },
      {
        "input": [
          68,
          5,
          27,
          99,
          68,
          81,
          2
        ],
        "output": [
          2,
          5,
          27,
          68,
          68,
          81,
          99
        ]
      },
      {
        "input": [
          46,
          31,
          30,
          65,
          59,
          82
        ],
        "output": [
          30,
          31,
          46,
          59,
          65,
          82
        ]
      }
    ]
  },
  {
    "id": "c114",
    "difficulty": 46,
    "function": "def c114(x):\n    # prepend the last element\n    return [x[-1]] + x\n\n",
    "data": {
      "input": [
        81,
        46,
        28,
        41,
        52,
        55
      ],
      "output": [
        55,
        81,
        46,
        28,
        41,
        52,
        55
      ]
    },
    "demos": [
      {
        "input": [
          63,
          3,
          14,
          83,
          43,
          52
        ],
        "output": [
          52,
          63,
          3,
          14,
          83,
          43,
          52
        ]
      },
      {
        "input": [
          90,
          63,
          15,
          92,
          29,
          91,
          79
        ],
        "output": [
          79,
          90,
          63,
          15,
          92,
          29,
          91,
          79
        ]
      },
      {
        "input": [
          49,
          20,
          18
        ],
        "output": [
          18,
          49,
          20,
          18
        ]
      }
    ]
  },
  {
    "id": "c093",
    "difficulty": 47,
    "function": "def c093(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        1,
        9,
        85,
        89,
        86,
        12
      ],
      "output": [
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          32,
          0,
          35,
          37
        ],
        "output": [
          32,
          32,
          32,
          32,
          32,
          32,
          32
        ]
      },
      {
        "input": [
          41,
          68,
          45,
          8,
          74,
          66
        ],
        "output": [
          41,
          41,
          41,
          41,
          41,
          41,
          41
        ]
      },
      {
        "input": [
          19,
          53,
          62,
          49,
          56
        ],
        "output": [
          19,
          19,
          19,
          19,
          19,
          19,
          19
        ]
      }
    ]
  },
  {
    "id": "c195",
    "difficulty": 48,
    "function": "def c195(x):\n    # element 1, followed by 23, 68, 42, 99, 71, followed by last element\n    return [x[0], 23, 68, 42, 99, 71, x[-1]]\n\n",
    "data": {
      "input": [
        96,
        27,
        58
      ],
      "output": [
        96,
        23,
        68,
        42,
        99,
        71,
        58
      ]
    },
    "demos": [
      {
        "input": [
          69,
          7,
          64,
          3
        ],
        "output": [
          69,
          23,
          68,
          42,
          99,
          71,
          3
        ]
      },
      {
        "input": [
          38,
          42,
          28
        ],
        "output": [
          38,
          23,
          68,
          42,
          99,
          71,
          28
        ]
      },
      {
        "input": [
          96,
          84,
          94,
          25,
          19
        ],
        "output": [
          96,
          23,
          68,
          42,
          99,
          71,
          19
        ]
      }
    ]
  },
  {
    "id": "c196",
    "difficulty": 49,
    "function": "def c196(x):\n    # concatenate 17, 38, 82 input 1 55 27\n    return [17, 38, 82] + x + [1, 55, 27]\n\n",
    "data": {
      "input": [
        52,
        69,
        12,
        6,
        36
      ],
      "output": [
        17,
        38,
        82,
        52,
        69,
        12,
        6,
        36,
        1,
        55,
        27
      ]
    },
    "demos": [
      {
        "input": [
          91,
          36
        ],
        "output": [
          17,
          38,
          82,
          91,
          36,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          31,
          2,
          74,
          46,
          25,
          20
        ],
        "output": [
          17,
          38,
          82,
          31,
          2,
          74,
          46,
          25,
          20,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          3,
          44,
          13,
          90,
          5
        ],
        "output": [
          17,
          38,
          82,
          3,
          44,
          13,
          90,
          5,
          1,
          55,
          27
        ]
      }
    ]
  },
  {
    "id": "c095",
    "difficulty": 50,
    "function": "def c095(x):\n    # remove the first element and the last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        4,
        41,
        30,
        43,
        12
      ],
      "output": [
        41,
        30,
        43
      ]
    },
    "demos": [
      {
        "input": [
          99,
          42,
          82,
          16,
          70
        ],
        "output": [
          42,
          82,
          16
        ]
      },
      {
        "input": [
          87,
          62,
          96,
          95,
          2
        ],
        "output": [
          62,
          96,
          95
        ]
      },
      {
        "input": [
          28,
          21,
          64,
          79,
          73,
          40
        ],
        "output": [
          21,
          64,
          79,
          73
        ]
      }
    ]
  },
  {
    "id": "c016",
    "difficulty": 51,
    "function": "def c016(x):\n    # replace element 1 with 8\n    return [8] + x[1:]\n\n",
    "data": {
      "input": [
        85,
        18,
        81,
        53,
        53
      ],
      "output": [
        8,
        18,
        81,
        53,
        53
      ]
    },
    "demos": [
      {
        "input": [
          43,
          6,
          63,
          72,
          10
        ],
        "output": [
          8,
          6,
          63,
          72,
          10
        ]
      },
      {
        "input": [
          74,
          81,
          57,
          0
        ],
        "output": [
          8,
          81,
          57,
          0
        ]
      },
      {
        "input": [
          71,
          26,
          74,
          17,
          82,
          34,
          87
        ],
        "output": [
          8,
          26,
          74,
          17,
          82,
          34,
          87
        ]
      }
    ]
  },
  {
    "id": "c224",
    "difficulty": 52,
    "function": "def c224(x):\n    # reverse the list, then take every other element starting from the second element, then take every other element starting from the first element\n    return x[::-2] + x[(len(x) % 2)::2]\n\n",
    "data": {
      "input": [
        91,
        54,
        29
      ],
      "output": [
        29,
        91,
        54
      ]
    },
    "demos": [
      {
        "input": [
          84,
          87,
          67,
          29,
          59,
          28,
          82
        ],
        "output": [
          82,
          59,
          67,
          84,
          87,
          29,
          28
        ]
      },
      {
        "input": [
          87,
          94,
          55,
          40
        ],
        "output": [
          40,
          94,
          87,
          55
        ]
      },
      {
        "input": [
          43,
          15,
          35,
          6,
          39,
          56
        ],
        "output": [
          56,
          6,
          15,
          43,
          35,
          39
        ]
      }
    ]
  },
  {
    "id": "c116",
    "difficulty": 53,
    "function": "def c116(x):\n    # reflect the input on itself\n    return x[::-1] + x[1:]\n\n",
    "data": {
      "input": [
        75,
        70,
        36,
        28,
        59,
        0
      ],
      "output": [
        0,
        59,
        28,
        36,
        70,
        75,
        70,
        36,
        28,
        59,
        0
      ]
    },
    "demos": [
      {
        "input": [
          41,
          79,
          53
        ],
        "output": [
          53,
          79,
          41,
          79,
          53
        ]
      },
      {
        "input": [
          99,
          41,
          48,
          64,
          34,
          53
        ],
        "output": [
          53,
          34,
          64,
          48,
          41,
          99,
          41,
          48,
          64,
          34,
          53
        ]
      },
      {
        "input": [
          13,
          57,
          58,
          54,
          56,
          4
        ],
        "output": [
          4,
          56,
          54,
          58,
          57,
          13,
          57,
          58,
          54,
          56,
          4
        ]
      }
    ]
  },
  {
    "id": "c140",
    "difficulty": 54,
    "function": "def c140(x):\n    # replace element 1 with 9\n    return x[:1] + [9] + x[2:]\n\n",
    "data": {
      "input": [
        32,
        87,
        56,
        58,
        35,
        88,
        98
      ],
      "output": [
        32,
        9,
        56,
        58,
        35,
        88,
        98
      ]
    },
    "demos": [
      {
        "input": [
          24,
          42,
          88,
          7,
          35,
          62,
          26
        ],
        "output": [
          24,
          9,
          88,
          7,
          35,
          62,
          26
        ]
      },
      {
        "input": [
          81,
          12,
          65,
          65
        ],
        "output": [
          81,
          9,
          65,
          65
        ]
      },
      {
        "input": [
          87,
          96,
          8,
          87,
          18,
          66,
          8
        ],
        "output": [
          87,
          9,
          8,
          87,
          18,
          66,
          8
        ]
      }
    ]
  },
  {
    "id": "c049",
    "difficulty": 55,
    "function": "def c049(x):\n    # remove the first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        90,
        21,
        43
      ],
      "output": [
        21,
        43
      ]
    },
    "demos": [
      {
        "input": [
          68,
          85,
          54,
          7,
          15,
          70,
          24
        ],
        "output": [
          85,
          54,
          7,
          15,
          70,
          24
        ]
      },
      {
        "input": [
          88,
          85,
          27,
          44,
          95
        ],
        "output": [
          85,
          27,
          44,
          95
        ]
      },
      {
        "input": [
          83,
          1,
          42,
          23,
          24,
          23,
          69
        ],
        "output": [
          1,
          42,
          23,
          24,
          23,
          69
        ]
      }
    ]
  },
  {
    "id": "c071",
    "difficulty": 56,
    "function": "def c071(x):\n    # add 2 to each element\n    return [i+2 for i in x]\n\n",
    "data": {
      "input": [
        63,
        72,
        0,
        68,
        96,
        37
      ],
      "output": [
        65,
        74,
        2,
        70,
        98,
        39
      ]
    },
    "demos": [
      {
        "input": [
          98,
          65,
          28,
          34,
          32
        ],
        "output": [
          100,
          67,
          30,
          36,
          34
        ]
      },
      {
        "input": [
          82,
          84,
          92,
          18,
          62,
          84
        ],
        "output": [
          84,
          86,
          94,
          20,
          64,
          86
        ]
      },
      {
        "input": [
          5,
          52,
          42,
          31
        ],
        "output": [
          7,
          54,
          44,
          33
        ]
      }
    ]
  },
  {
    "id": "c161",
    "difficulty": 57,
    "function": "def c161(x):\n    # replace each element, M, with M + the input length - M index\n    return [i + len(x) - j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        46,
        42,
        1,
        70
      ],
      "output": [
        50,
        45,
        3,
        71
      ]
    },
    "demos": [
      {
        "input": [
          64,
          64,
          92,
          89,
          55,
          72,
          90
        ],
        "output": [
          71,
          70,
          97,
          93,
          58,
          74,
          91
        ]
      },
      {
        "input": [
          46,
          62,
          39,
          15,
          86,
          6
        ],
        "output": [
          52,
          67,
          43,
          18,
          88,
          7
        ]
      },
      {
        "input": [
          52,
          80,
          48,
          8,
          12,
          55,
          94
        ],
        "output": [
          59,
          86,
          53,
          12,
          15,
          57,
          95
        ]
      }
    ]
  },
  {
    "id": "c068",
    "difficulty": 58,
    "function": "def c068(x):\n    # concatenate the input with 7, 3, 8, 4, 3\n    return x + [7, 3, 8, 4, 3]\n\n",
    "data": {
      "input": [
        86,
        87,
        26,
        9,
        12
      ],
      "output": [
        86,
        87,
        26,
        9,
        12,
        7,
        3,
        8,
        4,
        3
      ]
    },
    "demos": [
      {
        "input": [
          46,
          77,
          13
        ],
        "output": [
          46,
          77,
          13,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          3,
          19,
          88,
          66
        ],
        "output": [
          3,
          19,
          88,
          66,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          27,
          40,
          25,
          0,
          69
        ],
        "output": [
          27,
          40,
          25,
          0,
          69,
          7,
          3,
          8,
          4,
          3
        ]
      }
    ]
  },
  {
    "id": "c103",
    "difficulty": 59,
    "function": "def c103(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        71,
        20,
        60,
        4,
        9,
        40
      ],
      "output": [
        6
      ]
    },
    "demos": [
      {
        "input": [
          30,
          59,
          55,
          13,
          71
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          37,
          36,
          44,
          69,
          83
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          19,
          41,
          88,
          97,
          95,
          72
        ],
        "output": [
          6
        ]
      }
    ]
  },
  {
    "id": "c001",
    "difficulty": 60,
    "function": "def c001(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        28,
        53,
        78,
        88,
        91,
        24,
        97
      ],
      "output": [
        78
      ]
    },
    "demos": [
      {
        "input": [
          14,
          56,
          0,
          69,
          34,
          19,
          37
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          99,
          67,
          17,
          30,
          7
        ],
        "output": [
          17
        ]
      },
      {
        "input": [
          73,
          45,
          53,
          21,
          4,
          74
        ],
        "output": [
          53
        ]
      }
    ]
  },
  {
    "id": "c090",
    "difficulty": 61,
    "function": "def c090(x):\n    return [18, 42, 77, 20, 36]\n\n",
    "data": {
      "input": [
        7,
        40,
        67,
        73,
        33,
        84
      ],
      "output": [
        18,
        42,
        77,
        20,
        36
      ]
    },
    "demos": [
      {
        "input": [
          37,
          95,
          46,
          7,
          57,
          94
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          44,
          6,
          14,
          93
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          93,
          45,
          69,
          72,
          10
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      }
    ]
  },
  {
    "id": "c097",
    "difficulty": 62,
    "function": "def c097(x):\n    # concatenate 11, 21, 43 input 7 89 0\n    return [11, 21, 43] + x + [7, 89, 0]\n\n",
    "data": {
      "input": [
        65,
        67,
        77
      ],
      "output": [
        11,
        21,
        43,
        65,
        67,
        77,
        7,
        89,
        0
      ]
    },
    "demos": [
      {
        "input": [
          88,
          39,
          97,
          70,
          46
        ],
        "output": [
          11,
          21,
          43,
          88,
          39,
          97,
          70,
          46,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          44,
          18,
          83,
          12,
          48
        ],
        "output": [
          11,
          21,
          43,
          44,
          18,
          83,
          12,
          48,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          10,
          91,
          64
        ],
        "output": [
          11,
          21,
          43,
          10,
          91,
          64,
          7,
          89,
          0
        ]
      }
    ]
  },
  {
    "id": "c142",
    "difficulty": 63,
    "function": "def c142(x):\n    # every digit in order of appearance\n    res = []\n    for i in x:\n        for j in str(i):\n            res.append(int(j))\n    return res\n\n",
    "data": {
      "input": [
        84,
        99,
        77,
        75,
        24,
        11,
        25
      ],
      "output": [
        8,
        4,
        9,
        9,
        7,
        7,
        7,
        5,
        2,
        4,
        1,
        1,
        2,
        5
      ]
    },
    "demos": [
      {
        "input": [
          84,
          98,
          34,
          90,
          55
        ],
        "output": [
          8,
          4,
          9,
          8,
          3,
          4,
          9,
          0,
          5,
          5
        ]
      },
      {
        "input": [
          2,
          27,
          41,
          94,
          8,
          10,
          2
        ],
        "output": [
          2,
          2,
          7,
          4,
          1,
          9,
          4,
          8,
          1,
          0,
          2
        ]
      },
      {
        "input": [
          47,
          91,
          8
        ],
        "output": [
          4,
          7,
          9,
          1,
          8
        ]
      }
    ]
  },
  {
    "id": "c091",
    "difficulty": 64,
    "function": "def c091(x):\n    return [81, 99, 41, 23, 22, 75, 68, 30]\n\n",
    "data": {
      "input": [
        21,
        64,
        11
      ],
      "output": [
        81,
        99,
        41,
        23,
        22,
        75,
        68,
        30
      ]
    },
    "demos": [
      {
        "input": [
          89,
          39,
          6,
          99
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          86,
          12,
          29
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          21,
          73,
          31,
          68
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      }
    ]
  },
  {
    "id": "c034",
    "difficulty": 65,
    "function": "def c034(x):\n    # swap element 1 and element 2\n    x[0], x[1] = x[1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        40,
        5,
        50,
        92
      ],
      "output": [
        5,
        40,
        50,
        92
      ]
    },
    "demos": [
      {
        "input": [
          62,
          3,
          83,
          39,
          75,
          58
        ],
        "output": [
          3,
          62,
          83,
          39,
          75,
          58
        ]
      },
      {
        "input": [
          81,
          27,
          86,
          8,
          66
        ],
        "output": [
          27,
          81,
          86,
          8,
          66
        ]
      },
      {
        "input": [
          35,
          32,
          32,
          83
        ],
        "output": [
          32,
          35,
          32,
          83
        ]
      }
    ]
  },
  {
    "id": "c244",
    "difficulty": 66,
    "function": "def c244(x):\n    # number of 3s\n    return [x.count(3)]\n\n",
    "data": {
      "input": [
        52,
        47,
        3,
        90,
        24,
        76,
        3
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          83,
          11,
          3,
          48,
          3,
          95
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          45,
          3,
          3,
          85,
          93,
          66
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          3,
          43,
          3,
          2,
          20,
          3,
          62
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c171",
    "difficulty": 67,
    "function": "def c171(x):\n    # cumulative sum\n    res = []\n    s = 0\n    for i in x:\n        s += i\n        res.append(s)\n    return res\n\n",
    "data": {
      "input": [
        13,
        5,
        2,
        15,
        11
      ],
      "output": [
        13,
        18,
        20,
        35,
        46
      ]
    },
    "demos": [
      {
        "input": [
          18,
          20,
          3,
          11,
          19
        ],
        "output": [
          18,
          38,
          41,
          52,
          71
        ]
      },
      {
        "input": [
          13,
          2,
          5
        ],
        "output": [
          13,
          15,
          20
        ]
      },
      {
        "input": [
          18,
          16,
          15,
          10,
          8,
          0
        ],
        "output": [
          18,
          34,
          49,
          59,
          67,
          67
        ]
      }
    ]
  },
  {
    "id": "c172",
    "difficulty": 68,
    "function": "def c172(x):\n    # cumulative product\n    res = []\n    p = 1\n    for i in x:\n        p *= i\n        res.append(p)\n    return res\n\n",
    "data": {
      "input": [
        5,
        7,
        2,
        9,
        8
      ],
      "output": [
        5,
        35,
        70,
        630,
        5040
      ]
    },
    "demos": [
      {
        "input": [
          0,
          2,
          3,
          8,
          1,
          8
        ],
        "output": [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          2,
          0,
          10,
          8,
          4,
          1
        ],
        "output": [
          2,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          3,
          4,
          6,
          7,
          5,
          2
        ],
        "output": [
          3,
          12,
          72,
          504,
          2520,
          5040
        ]
      }
    ]
  },
  {
    "id": "c062",
    "difficulty": 69,
    "function": "def c062(x):\n    # remove the last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        41,
        49,
        89,
        42,
        8,
        9,
        41
      ],
      "output": [
        41,
        49,
        89,
        42,
        8,
        9
      ]
    },
    "demos": [
      {
        "input": [
          61,
          50,
          81
        ],
        "output": [
          61,
          50
        ]
      },
      {
        "input": [
          73,
          78,
          17,
          64,
          92,
          71
        ],
        "output": [
          73,
          78,
          17,
          64,
          92
        ]
      },
      {
        "input": [
          49,
          50,
          1
        ],
        "output": [
          49,
          50
        ]
      }
    ]
  },
  {
    "id": "c096",
    "difficulty": 70,
    "function": "def c096(x):\n    # prepend 98 and append 37\n    return [98] + x + [37]\n\n",
    "data": {
      "input": [
        29,
        67,
        45
      ],
      "output": [
        98,
        29,
        67,
        45,
        37
      ]
    },
    "demos": [
      {
        "input": [
          48,
          24,
          76,
          55,
          93
        ],
        "output": [
          98,
          48,
          24,
          76,
          55,
          93,
          37
        ]
      },
      {
        "input": [
          14,
          42,
          10,
          20,
          37,
          98,
          99
        ],
        "output": [
          98,
          14,
          42,
          10,
          20,
          37,
          98,
          99,
          37
        ]
      },
      {
        "input": [
          5,
          76,
          97
        ],
        "output": [
          98,
          5,
          76,
          97,
          37
        ]
      }
    ]
  },
  {
    "id": "c081",
    "difficulty": 71,
    "function": "def c081(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        59,
        81,
        91
      ],
      "output": [
        91
      ]
    },
    "demos": [
      {
        "input": [
          29,
          46,
          38
        ],
        "output": [
          38
        ]
      },
      {
        "input": [
          3,
          47,
          71,
          33,
          78,
          9
        ],
        "output": [
          71
        ]
      },
      {
        "input": [
          48,
          45,
          81,
          34,
          87
        ],
        "output": [
          81
        ]
      }
    ]
  },
  {
    "id": "c109",
    "difficulty": 72,
    "function": "def c109(x):\n    # product of elements\n    p = 1\n    for i in x:\n        p *= i\n    return [p]\n\n",
    "data": {
      "input": [
        6,
        0,
        8,
        4,
        4,
        8,
        0
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          6,
          2,
          4,
          4,
          0
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          8,
          1,
          2
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          3,
          1,
          4,
          3
        ],
        "output": [
          36
        ]
      }
    ]
  },
  {
    "id": "c002",
    "difficulty": 73,
    "function": "def c002(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        80,
        80,
        11,
        85,
        71
      ],
      "output": [
        11
      ]
    },
    "demos": [
      {
        "input": [
          48,
          8,
          60
        ],
        "output": [
          60
        ]
      },
      {
        "input": [
          42,
          28,
          0,
          64,
          66
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          59,
          36,
          57,
          13,
          70
        ],
        "output": [
          57
        ]
      }
    ]
  },
  {
    "id": "c132",
    "difficulty": 74,
    "function": "def c132(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        55,
        96,
        27,
        20
      ],
      "output": [
        55,
        96,
        20
      ]
    },
    "demos": [
      {
        "input": [
          20,
          28,
          58,
          6,
          94
        ],
        "output": [
          20,
          28,
          6,
          94
        ]
      },
      {
        "input": [
          43,
          92,
          19,
          22
        ],
        "output": [
          43,
          92,
          22
        ]
      },
      {
        "input": [
          37,
          26,
          37,
          70,
          43,
          12,
          7
        ],
        "output": [
          37,
          26,
          70,
          43,
          12,
          7
        ]
      }
    ]
  },
  {
    "id": "c153",
    "difficulty": 75,
    "function": "def c153(x):\n    # each unique element followed by its number of occurrences\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    out = []\n    for k, v in res.items():\n        out.append(k)\n        out.append(v)\n    return out\n\n",
    "data": {
      "input": [
        4,
        36,
        63,
        4,
        4,
        4
      ],
      "output": [
        4,
        4,
        36,
        1,
        63,
        1
      ]
    },
    "demos": [
      {
        "input": [
          82,
          82,
          82,
          41,
          41,
          65,
          67
        ],
        "output": [
          82,
          3,
          41,
          2,
          65,
          1,
          67,
          1
        ]
      },
      {
        "input": [
          18,
          37,
          18,
          96,
          28,
          18,
          18,
          18
        ],
        "output": [
          18,
          5,
          37,
          1,
          96,
          1,
          28,
          1
        ]
      },
      {
        "input": [
          78,
          15,
          63,
          15,
          15
        ],
        "output": [
          78,
          1,
          15,
          3,
          63,
          1
        ]
      }
    ]
  },
  {
    "id": "c051",
    "difficulty": 76,
    "function": "def c051(x):\n    # prepend first element 4 times\n    return [x[0]] * 4 + x\n\n",
    "data": {
      "input": [
        21,
        85,
        67
      ],
      "output": [
        21,
        21,
        21,
        21,
        21,
        85,
        67
      ]
    },
    "demos": [
      {
        "input": [
          74,
          15,
          38
        ],
        "output": [
          74,
          74,
          74,
          74,
          74,
          15,
          38
        ]
      },
      {
        "input": [
          15,
          27,
          40,
          81,
          70
        ],
        "output": [
          15,
          15,
          15,
          15,
          15,
          27,
          40,
          81,
          70
        ]
      },
      {
        "input": [
          84,
          32,
          8,
          23,
          43,
          14,
          3
        ],
        "output": [
          84,
          84,
          84,
          84,
          84,
          32,
          8,
          23,
          43,
          14,
          3
        ]
      }
    ]
  },
  {
    "id": "c225",
    "difficulty": 77,
    "function": "def c225(x):\n    # remove first and last two elements\n    return x[2:-2]\n\n",
    "data": {
      "input": [
        37,
        33,
        53,
        55,
        45,
        17
      ],
      "output": [
        53,
        55
      ]
    },
    "demos": [
      {
        "input": [
          56,
          56,
          40,
          1,
          69,
          68,
          80
        ],
        "output": [
          40,
          1,
          69
        ]
      },
      {
        "input": [
          65,
          86,
          82,
          57,
          48,
          18,
          5
        ],
        "output": [
          82,
          57,
          48
        ]
      },
      {
        "input": [
          25,
          21,
          9,
          69,
          30,
          71,
          55
        ],
        "output": [
          9,
          69,
          30
        ]
      }
    ]
  },
  {
    "id": "c067",
    "difficulty": 78,
    "function": "def c067(x):\n    # swap the first and last element\n    x[0], x[-1] = x[-1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        87,
        63,
        61
      ],
      "output": [
        61,
        63,
        87
      ]
    },
    "demos": [
      {
        "input": [
          20,
          37,
          59,
          72,
          45
        ],
        "output": [
          45,
          37,
          59,
          72,
          20
        ]
      },
      {
        "input": [
          85,
          53,
          45,
          0
        ],
        "output": [
          0,
          53,
          45,
          85
        ]
      },
      {
        "input": [
          79,
          25,
          92
        ],
        "output": [
          92,
          25,
          79
        ]
      }
    ]
  },
  {
    "id": "c112",
    "difficulty": 79,
    "function": "def c112(x):\n    # count from 1 to the last element\n    return list(range(1, x[-1]+1))\n\n",
    "data": {
      "input": [
        91,
        45,
        8
      ],
      "output": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ]
    },
    "demos": [
      {
        "input": [
          69,
          87,
          41,
          97,
          74,
          3
        ],
        "output": [
          1,
          2,
          3
        ]
      },
      {
        "input": [
          49,
          20,
          50,
          3
        ],
        "output": [
          1,
          2,
          3
        ]
      },
      {
        "input": [
          48,
          52,
          23,
          12,
          8
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ]
      }
    ]
  },
  {
    "id": "c030",
    "difficulty": 80,
    "function": "def c030(x):\n    # remove the last 2 elements\n    return x[:-2]\n\n",
    "data": {
      "input": [
        33,
        43,
        23,
        70,
        73,
        33,
        40
      ],
      "output": [
        33,
        43,
        23,
        70,
        73
      ]
    },
    "demos": [
      {
        "input": [
          62,
          91,
          74,
          28,
          66
        ],
        "output": [
          62,
          91,
          74
        ]
      },
      {
        "input": [
          77,
          26,
          74,
          48,
          45,
          73
        ],
        "output": [
          77,
          26,
          74,
          48
        ]
      },
      {
        "input": [
          32,
          54,
          31,
          50
        ],
        "output": [
          32,
          54
        ]
      }
    ]
  },
  {
    "id": "c149",
    "difficulty": 81,
    "function": "def c149(x):\n    # replace each element, M with M * first element; remove the first element\n    return [i*x[0] for i in x[1:]]\n\n",
    "data": {
      "input": [
        4,
        18,
        13,
        11,
        16
      ],
      "output": [
        72,
        52,
        44,
        64
      ]
    },
    "demos": [
      {
        "input": [
          17,
          3,
          19,
          20,
          19,
          19
        ],
        "output": [
          51,
          323,
          340,
          323,
          323
        ]
      },
      {
        "input": [
          20,
          12,
          6,
          5,
          0,
          20,
          3
        ],
        "output": [
          240,
          120,
          100,
          0,
          400,
          60
        ]
      },
      {
        "input": [
          12,
          19,
          9
        ],
        "output": [
          228,
          108
        ]
      }
    ]
  },
  {
    "id": "c148",
    "difficulty": 82,
    "function": "def c148(x):\n    # count from 1 to each element\n    res = []\n    for i in x:\n        res += list(range(1, i+1))\n    return res\n\n",
    "data": {
      "input": [
        1,
        4,
        1
      ],
      "output": [
        1,
        1,
        2,
        3,
        4,
        1
      ]
    },
    "demos": [
      {
        "input": [
          2,
          0,
          4,
          1,
          1,
          3
        ],
        "output": [
          1,
          2,
          1,
          2,
          3,
          4,
          1,
          1,
          1,
          2,
          3
        ]
      },
      {
        "input": [
          5,
          4,
          4,
          5,
          2
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          4,
          5,
          1,
          2
        ]
      },
      {
        "input": [
          3,
          4,
          3,
          4
        ],
        "output": [
          1,
          2,
          3,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          1,
          2,
          3,
          4
        ]
      }
    ]
  },
  {
    "id": "c017",
    "difficulty": 83,
    "function": "def c017(x):\n    # replace x[1] with 8\n    x[1] = 8\n    return x\n\n",
    "data": {
      "input": [
        79,
        23,
        23,
        29,
        29,
        77,
        37
      ],
      "output": [
        79,
        8,
        23,
        29,
        29,
        77,
        37
      ]
    },
    "demos": [
      {
        "input": [
          53,
          63,
          0,
          93,
          27,
          14
        ],
        "output": [
          53,
          8,
          0,
          93,
          27,
          14
        ]
      },
      {
        "input": [
          37,
          91,
          17,
          95,
          83,
          42
        ],
        "output": [
          37,
          8,
          17,
          95,
          83,
          42
        ]
      },
      {
        "input": [
          56,
          37,
          39,
          42,
          39
        ],
        "output": [
          56,
          8,
          39,
          42,
          39
        ]
      }
    ]
  },
  {
    "id": "c092",
    "difficulty": 84,
    "function": "def c092(x):\n    # concatenate 92, 63, 34, 18, 55\n    return x + [92, 63, 34, 18, 55]\n\n",
    "data": {
      "input": [
        21,
        97,
        54,
        9
      ],
      "output": [
        21,
        97,
        54,
        9,
        92,
        63,
        34,
        18,
        55
      ]
    },
    "demos": [
      {
        "input": [
          90,
          56,
          37,
          40,
          12,
          95
        ],
        "output": [
          90,
          56,
          37,
          40,
          12,
          95,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          83,
          1,
          90,
          62
        ],
        "output": [
          83,
          1,
          90,
          62,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          6,
          96,
          6
        ],
        "output": [
          6,
          96,
          6,
          92,
          63,
          34,
          18,
          55
        ]
      }
    ]
  },
  {
    "id": "c077",
    "difficulty": 85,
    "function": "def c077(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        34,
        62,
        35,
        90,
        53,
        28,
        95
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          56,
          84,
          52,
          95,
          34,
          49
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          29,
          0,
          21,
          77,
          60,
          37,
          43
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          17,
          53,
          80,
          40,
          4,
          9
        ],
        "output": [
          6
        ]
      }
    ]
  },
  {
    "id": "c248",
    "difficulty": 87,
    "function": "def c248(x):\n    # elements after the first 0\n    return x[x.index(0)+1:]\n\n",
    "data": {
      "input": [
        18,
        91,
        89,
        21,
        0,
        53,
        40,
        93
      ],
      "output": [
        53,
        40,
        93
      ]
    },
    "demos": [
      {
        "input": [
          81,
          18,
          0,
          41,
          0,
          89
        ],
        "output": [
          41,
          0,
          89
        ]
      },
      {
        "input": [
          43,
          47,
          41,
          83,
          0,
          22
        ],
        "output": [
          22
        ]
      },
      {
        "input": [
          20,
          89,
          0,
          53,
          73
        ],
        "output": [
          53,
          73
        ]
      }
    ]
  },
  {
    "id": "c199",
    "difficulty": 88,
    "function": "def c199(x):\n    # elements in ascending order, each preceded by its rank\n    res = []\n    for i, v in enumerate(sorted(x)):\n        res.append(i+1)\n        res.append(v)\n    return res\n\n",
    "data": {
      "input": [
        91,
        77,
        62,
        83,
        5,
        96,
        98
      ],
      "output": [
        1,
        5,
        2,
        62,
        3,
        77,
        4,
        83,
        5,
        91,
        6,
        96,
        7,
        98
      ]
    },
    "demos": [
      {
        "input": [
          18,
          69,
          97,
          44,
          12,
          71
        ],
        "output": [
          1,
          12,
          2,
          18,
          3,
          44,
          4,
          69,
          5,
          71,
          6,
          97
        ]
      },
      {
        "input": [
          55,
          58,
          18,
          51,
          42,
          83,
          66
        ],
        "output": [
          1,
          18,
          2,
          42,
          3,
          51,
          4,
          55,
          5,
          58,
          6,
          66,
          7,
          83
        ]
      },
      {
        "input": [
          27,
          14,
          8,
          85,
          23,
          60
        ],
        "output": [
          1,
          8,
          2,
          14,
          3,
          23,
          4,
          27,
          5,
          60,
          6,
          85
        ]
      }
    ]
  },
  {
    "id": "c007",
    "difficulty": 89,
    "function": "def c007(x):\n    # remove all but the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        8,
        53,
        21,
        37,
        52
      ],
      "output": [
        8,
        53
      ]
    },
    "demos": [
      {
        "input": [
          67,
          42,
          45,
          63,
          53,
          89
        ],
        "output": [
          67,
          42
        ]
      },
      {
        "input": [
          99,
          77,
          50
        ],
        "output": [
          99,
          77
        ]
      },
      {
        "input": [
          96,
          96,
          58
        ],
        "output": [
          96,
          96
        ]
      }
    ]
  },
  {
    "id": "c176",
    "difficulty": 90,
    "function": "def c176(x):\n    # sum of each consecutive pair of elements\n    return [x[i] + x[i+1] for i in range(0, len(x)-1)]\n\n",
    "data": {
      "input": [
        57,
        60,
        55,
        14,
        39,
        16
      ],
      "output": [
        117,
        115,
        69,
        53,
        55
      ]
    },
    "demos": [
      {
        "input": [
          47,
          67,
          78,
          32,
          34,
          89
        ],
        "output": [
          114,
          145,
          110,
          66,
          123
        ]
      },
      {
        "input": [
          82,
          18,
          83,
          65,
          66,
          34,
          49
        ],
        "output": [
          100,
          101,
          148,
          131,
          100,
          83
        ]
      },
      {
        "input": [
          53,
          21,
          70
        ],
        "output": [
          74,
          91
        ]
      }
    ]
  },
  {
    "id": "c066",
    "difficulty": 91,
    "function": "def c066(x):\n    # left rotate the list by 1\n    return x[1:] + x[:1]\n\n",
    "data": {
      "input": [
        21,
        98,
        15
      ],
      "output": [
        98,
        15,
        21
      ]
    },
    "demos": [
      {
        "input": [
          44,
          90,
          78,
          42
        ],
        "output": [
          90,
          78,
          42,
          44
        ]
      },
      {
        "input": [
          61,
          65,
          63,
          39,
          63,
          45
        ],
        "output": [
          65,
          63,
          39,
          63,
          45,
          61
        ]
      },
      {
        "input": [
          87,
          78,
          58,
          20,
          38,
          20
        ],
        "output": [
          78,
          58,
          20,
          38,
          20,
          87
        ]
      }
    ]
  },
  {
    "id": "c053",
    "difficulty": 92,
    "function": "def c053(x):\n    # replace x[1] with x[0]\n    x[1] = x[0]\n    return x\n\n",
    "data": {
      "input": [
        6,
        71,
        80
      ],
      "output": [
        6,
        6,
        80
      ]
    },
    "demos": [
      {
        "input": [
          65,
          96,
          6,
          56,
          96,
          54,
          53
        ],
        "output": [
          65,
          65,
          6,
          56,
          96,
          54,
          53
        ]
      },
      {
        "input": [
          95,
          52,
          6
        ],
        "output": [
          95,
          95,
          6
        ]
      },
      {
        "input": [
          44,
          16,
          47,
          84,
          70
        ],
        "output": [
          44,
          44,
          47,
          84,
          70
        ]
      }
    ]
  },
  {
    "id": "c047",
    "difficulty": 93,
    "function": "def c047(x):\n    # concatenate 9, 6, 3, 8, 5\n    return [9, 6, 3, 8, 5] + x\n\n",
    "data": {
      "input": [
        45,
        12,
        68,
        54
      ],
      "output": [
        9,
        6,
        3,
        8,
        5,
        45,
        12,
        68,
        54
      ]
    },
    "demos": [
      {
        "input": [
          19,
          16,
          83,
          46
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          19,
          16,
          83,
          46
        ]
      },
      {
        "input": [
          81,
          49,
          59,
          20,
          60,
          24,
          89
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          81,
          49,
          59,
          20,
          60,
          24,
          89
        ]
      },
      {
        "input": [
          34,
          62,
          72,
          69
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          34,
          62,
          72,
          69
        ]
      }
    ]
  },
  {
    "id": "c064",
    "difficulty": 94,
    "function": "def c064(x):\n    # remove the first and last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        57,
        96,
        34,
        4,
        39
      ],
      "output": [
        96,
        34,
        4
      ]
    },
    "demos": [
      {
        "input": [
          53,
          90,
          14
        ],
        "output": [
          90
        ]
      },
      {
        "input": [
          62,
          69,
          40
        ],
        "output": [
          69
        ]
      },
      {
        "input": [
          48,
          15,
          83,
          54
        ],
        "output": [
          15,
          83
        ]
      }
    ]
  },
  {
    "id": "c078",
    "difficulty": 95,
    "function": "def c078(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        71,
        43,
        47
      ],
      "output": [
        71
      ]
    },
    "demos": [
      {
        "input": [
          16,
          21,
          44,
          14,
          8,
          20
        ],
        "output": [
          44
        ]
      },
      {
        "input": [
          69,
          90,
          86,
          70
        ],
        "output": [
          90
        ]
      },
      {
        "input": [
          26,
          30,
          23,
          12
        ],
        "output": [
          30
        ]
      }
    ]
  },
  {
    "id": "c119",
    "difficulty": 96,
    "function": "def c119(x):\n    # make the list begin and ends with 8\n    if x[0] != 8:\n        x = [8] + x\n    if x[-1] != 8:\n        x = x + [8]\n    return x\n\n",
    "data": {
      "input": [
        65,
        50,
        20,
        54
      ],
      "output": [
        8,
        65,
        50,
        20,
        54,
        8
      ]
    },
    "demos": [
      {
        "input": [
          92,
          33,
          47,
          84,
          77
        ],
        "output": [
          8,
          92,
          33,
          47,
          84,
          77,
          8
        ]
      },
      {
        "input": [
          86,
          30,
          59,
          26,
          42,
          63
        ],
        "output": [
          8,
          86,
          30,
          59,
          26,
          42,
          63,
          8
        ]
      },
      {
        "input": [
          57,
          73,
          72
        ],
        "output": [
          8,
          57,
          73,
          72,
          8
        ]
      }
    ]
  },
  {
    "id": "c135",
    "difficulty": 97,
    "function": "def c135(x):\n    # remove the first 7\n    x.remove(7)\n    return x\n\n",
    "data": {
      "input": [
        7,
        5,
        6,
        9,
        7,
        9,
        6
      ],
      "output": [
        5,
        6,
        9,
        7,
        9,
        6
      ]
    },
    "demos": [
      {
        "input": [
          1,
          8,
          6,
          3,
          7
        ],
        "output": [
          1,
          8,
          6,
          3
        ]
      },
      {
        "input": [
          3,
          9,
          3,
          5,
          7,
          3
        ],
        "output": [
          3,
          9,
          3,
          5,
          3
        ]
      },
      {
        "input": [
          5,
          7,
          6,
          5,
          5,
          7
        ],
        "output": [
          5,
          6,
          5,
          5,
          7
        ]
      }
    ]
  },
  {
    "id": "c198",
    "difficulty": 98,
    "function": "def c198(x):\n    # unique elements in descending order\n    res = set(x)\n    return sorted(res, reverse=True)\n\n",
    "data": {
      "input": [
        31,
        84,
        59,
        12,
        65,
        65,
        61,
        9,
        59
      ],
      "output": [
        84,
        65,
        61,
        59,
        31,
        12,
        9
      ]
    },
    "demos": [
      {
        "input": [
          51,
          87,
          42,
          70,
          87
        ],
        "output": [
          87,
          70,
          51,
          42
        ]
      },
      {
        "input": [
          83,
          10,
          44,
          10
        ],
        "output": [
          83,
          44,
          10
        ]
      },
      {
        "input": [
          35,
          27,
          88,
          85,
          85,
          88
        ],
        "output": [
          88,
          85,
          35,
          27
        ]
      }
    ]
  },
  {
    "id": "c219",
    "difficulty": 99,
    "function": "def c219(x):\n    # keep only every other element\n    return x[::2]\n\n",
    "data": {
      "input": [
        2,
        69,
        67,
        26,
        12,
        98,
        37
      ],
      "output": [
        2,
        67,
        12,
        37
      ]
    },
    "demos": [
      {
        "input": [
          81,
          36,
          34,
          39,
          45
        ],
        "output": [
          81,
          34,
          45
        ]
      },
      {
        "input": [
          22,
          99,
          67,
          34,
          82,
          3,
          13,
          65
        ],
        "output": [
          22,
          67,
          82,
          13
        ]
      },
      {
        "input": [
          38,
          45,
          43,
          15
        ],
        "output": [
          38,
          43
        ]
      }
    ]
  },
  {
    "id": "c075",
    "difficulty": 100,
    "function": "def c075(x):\n    # remove even index\n    return x[1::2]\n\n",
    "data": {
      "input": [
        31,
        83,
        54,
        81,
        71
      ],
      "output": [
        83,
        81
      ]
    },
    "demos": [
      {
        "input": [
          86,
          73,
          39,
          3,
          78,
          18,
          6,
          26,
          36
        ],
        "output": [
          73,
          3,
          18,
          26
        ]
      },
      {
        "input": [
          97,
          96,
          81,
          89
        ],
        "output": [
          96,
          89
        ]
      },
      {
        "input": [
          79,
          97,
          77,
          52
        ],
        "output": [
          97,
          52
        ]
      }
    ]
  },
  {
    "id": "c177",
    "difficulty": 101,
    "function": "def c177(x):\n    # interleave the input and the reversed input\n    return [i for pair in zip(x, x[::-1]) for i in pair]\n\n",
    "data": {
      "input": [
        58,
        23,
        6,
        43,
        93,
        7,
        1
      ],
      "output": [
        58,
        1,
        23,
        7,
        6,
        93,
        43,
        43,
        93,
        6,
        7,
        23,
        1,
        58
      ]
    },
    "demos": [
      {
        "input": [
          45,
          92,
          75,
          46,
          7,
          95,
          32
        ],
        "output": [
          45,
          32,
          92,
          95,
          75,
          7,
          46,
          46,
          7,
          75,
          95,
          92,
          32,
          45
        ]
      },
      {
        "input": [
          41,
          21,
          13,
          22,
          81,
          81
        ],
        "output": [
          41,
          81,
          21,
          81,
          13,
          22,
          22,
          13,
          81,
          21,
          81,
          41
        ]
      },
      {
        "input": [
          92,
          4,
          96,
          42,
          61
        ],
        "output": [
          92,
          61,
          4,
          42,
          96,
          96,
          42,
          4,
          61,
          92
        ]
      }
    ]
  },
  {
    "id": "c025",
    "difficulty": 102,
    "function": "def c025(x):\n    # remove element 1\n    return x[:1] + x[2:]\n\n",
    "data": {
      "input": [
        24,
        95,
        59,
        82,
        28,
        68,
        54
      ],
      "output": [
        24,
        59,
        82,
        28,
        68,
        54
      ]
    },
    "demos": [
      {
        "input": [
          35,
          48,
          45,
          10
        ],
        "output": [
          35,
          45,
          10
        ]
      },
      {
        "input": [
          1,
          95,
          38
        ],
        "output": [
          1,
          38
        ]
      },
      {
        "input": [
          61,
          54,
          89,
          43,
          25,
          8
        ],
        "output": [
          61,
          89,
          43,
          25,
          8
        ]
      }
    ]
  },
  {
    "id": "c125",
    "difficulty": 103,
    "function": "def c125(x):\n    # keep only elements whose tens digit equals the tens digit of the first element\n    return [i for i in x if len(str(i)) > 1 and str(i)[-2] == str(x[0])[-2]]\n\n",
    "data": {
      "input": [
        70,
        65,
        72,
        56,
        70,
        13,
        96,
        75,
        67
      ],
      "output": [
        70,
        72,
        70,
        75
      ]
    },
    "demos": [
      {
        "input": [
          25,
          27,
          47,
          84,
          26,
          29,
          47,
          1
        ],
        "output": [
          25,
          27,
          26,
          29
        ]
      },
      {
        "input": [
          87,
          61,
          95,
          4,
          45
        ],
        "output": [
          87
        ]
      },
      {
        "input": [
          93,
          97,
          34,
          74,
          31,
          84,
          68
        ],
        "output": [
          93,
          97
        ]
      }
    ]
  },
  {
    "id": "c087",
    "difficulty": 105,
    "function": "def c087(x):\n    # swap second and third element\n    x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        77,
        23,
        65,
        55,
        67,
        80,
        36
      ],
      "output": [
        77,
        65,
        23,
        55,
        67,
        80,
        36
      ]
    },
    "demos": [
      {
        "input": [
          69,
          22,
          54,
          38
        ],
        "output": [
          69,
          54,
          22,
          38
        ]
      },
      {
        "input": [
          21,
          82,
          64,
          66,
          51,
          68
        ],
        "output": [
          21,
          64,
          82,
          66,
          51,
          68
        ]
      },
      {
        "input": [
          99,
          15,
          25,
          25,
          29,
          94
        ],
        "output": [
          99,
          25,
          15,
          25,
          29,
          94
        ]
      }
    ]
  },
  {
    "id": "c013",
    "difficulty": 106,
    "function": "def c013(x):\n    # element 2 through 6\n    return x[2:6]\n\n",
    "data": {
      "input": [
        44,
        58,
        86,
        17,
        82,
        28,
        26
      ],
      "output": [
        86,
        17,
        82,
        28
      ]
    },
    "demos": [
      {
        "input": [
          68,
          65,
          99,
          84,
          99,
          61
        ],
        "output": [
          99,
          84,
          99,
          61
        ]
      },
      {
        "input": [
          89,
          57,
          65,
          0,
          84,
          77,
          0
        ],
        "output": [
          65,
          0,
          84,
          77
        ]
      },
      {
        "input": [
          83,
          26,
          43,
          97,
          86,
          91,
          25,
          74,
          47
        ],
        "output": [
          43,
          97,
          86,
          91
        ]
      }
    ]
  },
  {
    "id": "c069",
    "difficulty": 107,
    "function": "def c069(x):\n    # 9,3,4,0, input, 7,2,9,1\n    return [9,3,4,0] + x + [7,2,9,1]\n\n",
    "data": {
      "input": [
        99,
        79,
        71,
        74
      ],
      "output": [
        9,
        3,
        4,
        0,
        99,
        79,
        71,
        74,
        7,
        2,
        9,
        1
      ]
    },
    "demos": [
      {
        "input": [
          0,
          84,
          63,
          52
        ],
        "output": [
          9,
          3,
          4,
          0,
          0,
          84,
          63,
          52,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          64,
          12,
          98
        ],
        "output": [
          9,
          3,
          4,
          0,
          64,
          12,
          98,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          99,
          92,
          78,
          2
        ],
        "output": [
          9,
          3,
          4,
          0,
          99,
          92,
          78,
          2,
          7,
          2,
          9,
          1
        ]
      }
    ]
  },
  {
    "id": "c117",
    "difficulty": 108,
    "function": "def c117(x):\n    # left rotate by 3\n    return x[3:] + x[:3]\n\n",
    "data": {
      "input": [
        97,
        57,
        68,
        72,
        32,
        27
      ],
      "output": [
        72,
        32,
        27,
        97,
        57,
        68
      ]
    },
    "demos": [
      {
        "input": [
          95,
          45,
          70,
          19
        ],
        "output": [
          19,
          95,
          45,
          70
        ]
      },
      {
        "input": [
          75,
          12,
          79,
          41
        ],
        "output": [
          41,
          75,
          12,
          79
        ]
      },
      {
        "input": [
          50,
          30,
          32
        ],
        "output": [
          50,
          30,
          32
        ]
      }
    ]
  },
  {
    "id": "c228",
    "difficulty": 109,
    "function": "def c228(x):\n    # replace each element with the number of occurrences of that element so far\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        6,
        6,
        42,
        62,
        23,
        9,
        77,
        6
      ],
      "output": [
        1,
        2,
        1,
        1,
        1,
        1,
        1,
        3
      ]
    },
    "demos": [
      {
        "input": [
          60,
          45,
          38,
          9,
          6,
          38
        ],
        "output": [
          1,
          1,
          1,
          1,
          1,
          2
        ]
      },
      {
        "input": [
          81,
          81,
          81,
          24,
          13
        ],
        "output": [
          1,
          2,
          3,
          1,
          1
        ]
      },
      {
        "input": [
          73,
          34,
          10,
          73,
          10,
          70
        ],
        "output": [
          1,
          1,
          1,
          2,
          2,
          1
        ]
      }
    ]
  },
  {
    "id": "c197",
    "difficulty": 110,
    "function": "def c197(x):\n    # replace each element with the number of occurrences of that element\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in x:\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        79,
        43,
        79,
        37,
        79,
        54
      ],
      "output": [
        3,
        1,
        3,
        1,
        3,
        1
      ]
    },
    "demos": [
      {
        "input": [
          49,
          24,
          44,
          56,
          49,
          69,
          65
        ],
        "output": [
          2,
          1,
          1,
          1,
          2,
          1,
          1
        ]
      },
      {
        "input": [
          87,
          25,
          31,
          53,
          46,
          55,
          53,
          29
        ],
        "output": [
          1,
          1,
          1,
          2,
          1,
          1,
          2,
          1
        ]
      },
      {
        "input": [
          60,
          25,
          3,
          62,
          39,
          60,
          39
        ],
        "output": [
          2,
          1,
          1,
          1,
          2,
          2,
          2
        ]
      }
    ]
  },
  {
    "id": "c065",
    "difficulty": 111,
    "function": "def c065(x):\n    # prepend 9 and append 7\n    return [9] + x + [7]\n\n",
    "data": {
      "input": [
        6,
        38,
        79,
        36,
        31,
        58
      ],
      "output": [
        9,
        6,
        38,
        79,
        36,
        31,
        58,
        7
      ]
    },
    "demos": [
      {
        "input": [
          76,
          44,
          18,
          36,
          4,
          26,
          19
        ],
        "output": [
          9,
          76,
          44,
          18,
          36,
          4,
          26,
          19,
          7
        ]
      },
      {
        "input": [
          66,
          92,
          35,
          11,
          52
        ],
        "output": [
          9,
          66,
          92,
          35,
          11,
          52,
          7
        ]
      },
      {
        "input": [
          10,
          53,
          34,
          77
        ],
        "output": [
          9,
          10,
          53,
          34,
          77,
          7
        ]
      }
    ]
  },
  {
    "id": "c156",
    "difficulty": 112,
    "function": "def c156(x):\n    # reverse the input and add each element to its new index\n    x = x[::-1]\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        63,
        97,
        42
      ],
      "output": [
        42,
        98,
        65
      ]
    },
    "demos": [
      {
        "input": [
          72,
          80,
          14,
          76,
          76,
          33
        ],
        "output": [
          33,
          77,
          78,
          17,
          84,
          77
        ]
      },
      {
        "input": [
          38,
          84,
          94
        ],
        "output": [
          94,
          85,
          40
        ]
      },
      {
        "input": [
          71,
          32,
          99,
          42
        ],
        "output": [
          42,
          100,
          34,
          74
        ]
      }
    ]
  },
  {
    "id": "c110",
    "difficulty": 113,
    "function": "def c110(x):\n    # three largest elements in descending order\n    return sorted(x, reverse=True)[:3]\n\n",
    "data": {
      "input": [
        25,
        67,
        78,
        51,
        92,
        6,
        91
      ],
      "output": [
        92,
        91,
        78
      ]
    },
    "demos": [
      {
        "input": [
          67,
          53,
          58,
          9
        ],
        "output": [
          67,
          58,
          53
        ]
      },
      {
        "input": [
          99,
          12,
          23,
          69,
          85,
          47,
          99
        ],
        "output": [
          99,
          99,
          85
        ]
      },
      {
        "input": [
          42,
          22,
          29,
          19,
          81,
          97,
          5
        ],
        "output": [
          97,
          81,
          42
        ]
      }
    ]
  },
  {
    "id": "c233",
    "difficulty": 114,
    "function": "def c233(x):\n    # number of occurrences of each unique element, in order of appearance\n    numbers = []\n    res = []\n    for i in x:\n        if i not in numbers:\n            numbers.append(i)\n            res.append(x.count(i))\n    return res\n\n",
    "data": {
      "input": [
        0,
        8,
        3,
        9,
        9,
        0,
        9,
        8
      ],
      "output": [
        2,
        2,
        1,
        3
      ]
    },
    "demos": [
      {
        "input": [
          3,
          6,
          4,
          8,
          3,
          6
        ],
        "output": [
          2,
          2,
          1,
          1
        ]
      },
      {
        "input": [
          7,
          9,
          3,
          8,
          3,
          3,
          0,
          9,
          6
        ],
        "output": [
          1,
          2,
          3,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          8,
          4,
          4,
          3,
          1,
          0,
          8,
          8,
          3
        ],
        "output": [
          3,
          2,
          2,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c003",
    "difficulty": 115,
    "function": "def c003(x):\n    # remove all but seventh element\n    return [x[6]]\n\n",
    "data": {
      "input": [
        85,
        62,
        68,
        9,
        98,
        25,
        21,
        91,
        0,
        23
      ],
      "output": [
        21
      ]
    },
    "demos": [
      {
        "input": [
          45,
          36,
          76,
          21,
          96,
          91,
          53,
          27
        ],
        "output": [
          53
        ]
      },
      {
        "input": [
          58,
          52,
          38,
          19,
          11,
          26,
          12,
          61
        ],
        "output": [
          12
        ]
      },
      {
        "input": [
          25,
          91,
          15,
          16,
          65,
          80,
          84,
          60,
          15
        ],
        "output": [
          84
        ]
      }
    ]
  },
  {
    "id": "c230",
    "difficulty": 116,
    "function": "def c230(x):\n    # count by 2 from the smallest element to the largest element\n    return list(range(min(x), max(x)+1, 2))\n\n",
    "data": {
      "input": [
        39,
        40,
        22
      ],
      "output": [
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40
      ]
    },
    "demos": [
      {
        "input": [
          25,
          9,
          19
        ],
        "output": [
          9,
          11,
          13,
          15,
          17,
          19,
          21,
          23,
          25
        ]
      },
      {
        "input": [
          11,
          15,
          4
        ],
        "output": [
          4,
          6,
          8,
          10,
          12,
          14
        ]
      },
      {
        "input": [
          60,
          52,
          59
        ],
        "output": [
          52,
          54,
          56,
          58,
          60
        ]
      }
    ]
  },
  {
    "id": "c122",
    "difficulty": 117,
    "function": "def c122(x):\n    # remove all but penultimate element\n    return [x[-2]]\n\n",
    "data": {
      "input": [
        92,
        53,
        6,
        68,
        18,
        79,
        88
      ],
      "output": [
        79
      ]
    },
    "demos": [
      {
        "input": [
          61,
          61,
          37,
          71,
          17,
          16,
          61
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          49,
          88,
          41
        ],
        "output": [
          88
        ]
      },
      {
        "input": [
          7,
          44,
          41,
          69,
          51,
          80
        ],
        "output": [
          51
        ]
      }
    ]
  },
  {
    "id": "c020",
    "difficulty": 118,
    "function": "def c020(x):\n    # replace the first element with the last element\n    x[0] = x[-1]\n    return x\n\n",
    "data": {
      "input": [
        5,
        64,
        38,
        7,
        96,
        70
      ],
      "output": [
        70,
        64,
        38,
        7,
        96,
        70
      ]
    },
    "demos": [
      {
        "input": [
          85,
          3,
          92,
          53,
          74,
          46
        ],
        "output": [
          46,
          3,
          92,
          53,
          74,
          46
        ]
      },
      {
        "input": [
          81,
          43,
          72,
          58,
          32,
          13,
          56
        ],
        "output": [
          56,
          43,
          72,
          58,
          32,
          13,
          56
        ]
      },
      {
        "input": [
          73,
          0,
          22,
          78,
          93,
          35
        ],
        "output": [
          35,
          0,
          22,
          78,
          93,
          35
        ]
      }
    ]
  },
  {
    "id": "c235",
    "difficulty": 119,
    "function": "def c235(x):\n    # count up and down between elements\n    res = []\n    for i in range(len(x)-1):\n        if x[i] < x[i+1]:\n            res += list(range(x[i], x[i+1]+1))\n        else:\n            res += list(range(x[i], x[i+1]-1, -1))\n    return res\n\n",
    "data": {
      "input": [
        66,
        66,
        64
      ],
      "output": [
        66,
        66,
        65,
        64
      ]
    },
    "demos": [
      {
        "input": [
          41,
          43,
          44
        ],
        "output": [
          41,
          42,
          43,
          43,
          44
        ]
      },
      {
        "input": [
          95,
          90,
          91
        ],
        "output": [
          95,
          94,
          93,
          92,
          91,
          90,
          90,
          91
        ]
      },
      {
        "input": [
          32,
          35,
          34
        ],
        "output": [
          32,
          33,
          34,
          35,
          35,
          34
        ]
      }
    ]
  },
  {
    "id": "c157",
    "difficulty": 120,
    "function": "def c157(x):\n    # each element followed by 0 if even, 1 if odd\n    res = []\n    for i in x:\n        res.append(i)\n        res.append(i % 2)\n    return res\n\n",
    "data": {
      "input": [
        41,
        42,
        56,
        95,
        3
      ],
      "output": [
        41,
        1,
        42,
        0,
        56,
        0,
        95,
        1,
        3,
        1
      ]
    },
    "demos": [
      {
        "input": [
          78,
          4,
          43,
          45,
          36,
          7
        ],
        "output": [
          78,
          0,
          4,
          0,
          43,
          1,
          45,
          1,
          36,
          0,
          7,
          1
        ]
      },
      {
        "input": [
          91,
          39,
          77,
          6,
          60,
          55
        ],
        "output": [
          91,
          1,
          39,
          1,
          77,
          1,
          6,
          0,
          60,
          0,
          55,
          1
        ]
      },
      {
        "input": [
          27,
          80,
          22,
          81
        ],
        "output": [
          27,
          1,
          80,
          0,
          22,
          0,
          81,
          1
        ]
      }
    ]
  },
  {
    "id": "c185",
    "difficulty": 121,
    "function": "def c185(x):\n    # replace the sublist between the first and last with its sum\n    return x[:1] + [sum(x[1:-1])] + x[-1:]\n\n",
    "data": {
      "input": [
        15,
        13,
        3,
        17,
        4,
        20,
        9
      ],
      "output": [
        15,
        57,
        9
      ]
    },
    "demos": [
      {
        "input": [
          7,
          1,
          19,
          20
        ],
        "output": [
          7,
          20,
          20
        ]
      },
      {
        "input": [
          6,
          18,
          2,
          15
        ],
        "output": [
          6,
          20,
          15
        ]
      },
      {
        "input": [
          5,
          17,
          12,
          7,
          20,
          11
        ],
        "output": [
          5,
          56,
          11
        ]
      }
    ]
  },
  {
    "id": "c213",
    "difficulty": 122,
    "function": "def c213(x):\n    # three smallest elements in ascending order\n    return sorted(x)[:3]\n\n",
    "data": {
      "input": [
        63,
        57,
        21,
        39,
        54
      ],
      "output": [
        21,
        39,
        54
      ]
    },
    "demos": [
      {
        "input": [
          22,
          48,
          28,
          80,
          93,
          70
        ],
        "output": [
          22,
          28,
          48
        ]
      },
      {
        "input": [
          59,
          42,
          44,
          74
        ],
        "output": [
          42,
          44,
          59
        ]
      },
      {
        "input": [
          4,
          15,
          14,
          65
        ],
        "output": [
          4,
          14,
          15
        ]
      }
    ]
  },
  {
    "id": "c184",
    "difficulty": 123,
    "function": "def c184(x):\n    # keep only odd elements with an even index\n    return [i for i in x if i % 2 == 1 and x.index(i) % 2 == 0]\n\n",
    "data": {
      "input": [
        11,
        2,
        63,
        32,
        13,
        98,
        13,
        37,
        31,
        36
      ],
      "output": [
        11,
        63,
        13,
        13,
        31
      ]
    },
    "demos": [
      {
        "input": [
          3,
          55,
          61,
          83,
          80,
          27,
          18
        ],
        "output": [
          3,
          61
        ]
      },
      {
        "input": [
          99,
          40,
          5,
          66,
          72,
          57,
          53,
          71
        ],
        "output": [
          99,
          5,
          53
        ]
      },
      {
        "input": [
          7,
          49,
          28,
          53,
          80,
          57,
          40,
          4
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c155",
    "difficulty": 124,
    "function": "def c155(x):\n    # multiply each element by its index\n    return [i*j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        78,
        69,
        68
      ],
      "output": [
        0,
        69,
        136
      ]
    },
    "demos": [
      {
        "input": [
          20,
          31,
          11
        ],
        "output": [
          0,
          31,
          22
        ]
      },
      {
        "input": [
          79,
          51,
          36,
          80
        ],
        "output": [
          0,
          51,
          72,
          240
        ]
      },
      {
        "input": [
          19,
          28,
          84,
          6
        ],
        "output": [
          0,
          28,
          168,
          18
        ]
      }
    ]
  },
  {
    "id": "c082",
    "difficulty": 125,
    "function": "def c082(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        27,
        78,
        8
      ],
      "output": [
        8
      ]
    },
    "demos": [
      {
        "input": [
          57,
          40,
          16,
          3,
          19,
          0,
          63
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          48,
          90,
          36
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          12,
          96,
          54,
          92,
          3,
          47,
          16
        ],
        "output": [
          54
        ]
      }
    ]
  },
  {
    "id": "c231",
    "difficulty": 126,
    "function": "def c231(x):\n    # the number of occurrences of each unique element in ascending order\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    return sorted(res.values())\n\n",
    "data": {
      "input": [
        3,
        1,
        3,
        7,
        1,
        3,
        8,
        3,
        5
      ],
      "output": [
        1,
        1,
        1,
        2,
        4
      ]
    },
    "demos": [
      {
        "input": [
          6,
          6,
          10,
          5,
          5,
          5,
          6,
          5,
          10
        ],
        "output": [
          2,
          3,
          4
        ]
      },
      {
        "input": [
          9,
          1,
          10,
          9,
          10,
          10,
          10,
          8,
          10
        ],
        "output": [
          1,
          1,
          2,
          5
        ]
      },
      {
        "input": [
          8,
          6,
          7,
          10,
          10,
          2,
          8,
          7,
          7
        ],
        "output": [
          1,
          1,
          2,
          2,
          3
        ]
      }
    ]
  },
  {
    "id": "c099",
    "difficulty": 127,
    "function": "def c099(x):\n    # remove the lower half of the list\n    median = sorted(x)[len(x)//2]\n    return [i for i in x if i >= median]\n\n",
    "data": {
      "input": [
        97,
        22,
        73,
        90,
        7,
        72,
        4,
        44,
        48
      ],
      "output": [
        97,
        73,
        90,
        72,
        48
      ]
    },
    "demos": [
      {
        "input": [
          72,
          14,
          15,
          81,
          29,
          1,
          86
        ],
        "output": [
          72,
          81,
          29,
          86
        ]
      },
      {
        "input": [
          22,
          91,
          39,
          76,
          25,
          54
        ],
        "output": [
          91,
          76,
          54
        ]
      },
      {
        "input": [
          11,
          10,
          54,
          45,
          85,
          46,
          7
        ],
        "output": [
          54,
          45,
          85,
          46
        ]
      }
    ]
  },
  {
    "id": "c247",
    "difficulty": 128,
    "function": "def c247(x):\n    # elements before the first 0\n    return x[:x.index(0)]\n\n",
    "data": {
      "input": [
        5,
        0,
        11,
        0,
        85,
        0,
        0,
        66
      ],
      "output": [
        5
      ]
    },
    "demos": [
      {
        "input": [
          59,
          0,
          41,
          0,
          66,
          81,
          66
        ],
        "output": [
          59
        ]
      },
      {
        "input": [
          69,
          49,
          53,
          0,
          96,
          0
        ],
        "output": [
          69,
          49,
          53
        ]
      },
      {
        "input": [
          62,
          44,
          0,
          0,
          13,
          72,
          26,
          99,
          0
        ],
        "output": [
          62,
          44
        ]
      }
    ]
  },
  {
    "id": "c008",
    "difficulty": 129,
    "function": "def c008(x):\n    # the first 5 elements\n    return x[:5]\n\n",
    "data": {
      "input": [
        85,
        38,
        44,
        56,
        99,
        21
      ],
      "output": [
        85,
        38,
        44,
        56,
        99
      ]
    },
    "demos": [
      {
        "input": [
          14,
          29,
          76,
          13,
          61
        ],
        "output": [
          14,
          29,
          76,
          13,
          61
        ]
      },
      {
        "input": [
          39,
          41,
          52,
          44,
          62,
          7,
          10,
          85
        ],
        "output": [
          39,
          41,
          52,
          44,
          62
        ]
      },
      {
        "input": [
          79,
          55,
          76,
          90,
          63,
          89,
          72,
          59
        ],
        "output": [
          79,
          55,
          76,
          90,
          63
        ]
      }
    ]
  },
  {
    "id": "c055",
    "difficulty": 130,
    "function": "def c055(x):\n    # swap x[0], x[2] and x[1], x[3]\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        77,
        84,
        60,
        37,
        0
      ],
      "output": [
        60,
        37,
        77,
        84,
        0
      ]
    },
    "demos": [
      {
        "input": [
          29,
          74,
          40,
          78
        ],
        "output": [
          40,
          78,
          29,
          74
        ]
      },
      {
        "input": [
          48,
          72,
          31,
          25,
          55
        ],
        "output": [
          31,
          25,
          48,
          72,
          55
        ]
      },
      {
        "input": [
          12,
          35,
          4,
          79,
          72
        ],
        "output": [
          4,
          79,
          12,
          35,
          72
        ]
      }
    ]
  },
  {
    "id": "c029",
    "difficulty": 131,
    "function": "def c029(x):\n    # remove the first 2 elements\n    return x[2:]\n\n",
    "data": {
      "input": [
        3,
        91,
        95,
        26,
        26,
        8,
        7
      ],
      "output": [
        95,
        26,
        26,
        8,
        7
      ]
    },
    "demos": [
      {
        "input": [
          49,
          79,
          45,
          30,
          4,
          14
        ],
        "output": [
          45,
          30,
          4,
          14
        ]
      },
      {
        "input": [
          88,
          10,
          62,
          25
        ],
        "output": [
          62,
          25
        ]
      },
      {
        "input": [
          1,
          97,
          29,
          25,
          29,
          62
        ],
        "output": [
          29,
          25,
          29,
          62
        ]
      }
    ]
  },
  {
    "id": "c168",
    "difficulty": 132,
    "function": "def c168(x):\n    # count from 1 to 10, skipping the length of the input\n    return [i for i in range(1, 11) if i != len(x)]\n\n",
    "data": {
      "input": [
        39,
        34,
        72,
        58
      ],
      "output": [
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10
      ]
    },
    "demos": [
      {
        "input": [
          89,
          58,
          25,
          49,
          5
        ],
        "output": [
          1,
          2,
          3,
          4,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          46,
          92,
          52,
          48,
          0,
          34
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          8,
          86,
          17,
          6,
          69
        ],
        "output": [
          1,
          2,
          3,
          4,
          6,
          7,
          8,
          9,
          10
        ]
      }
    ]
  },
  {
    "id": "c009",
    "difficulty": 133,
    "function": "def c009(x):\n    # remove all but the first 3 elements\n    return x[:3]\n\n",
    "data": {
      "input": [
        18,
        44,
        53,
        17
      ],
      "output": [
        18,
        44,
        53
      ]
    },
    "demos": [
      {
        "input": [
          78,
          46,
          99,
          82
        ],
        "output": [
          78,
          46,
          99
        ]
      },
      {
        "input": [
          18,
          33,
          42,
          80,
          40,
          84,
          63
        ],
        "output": [
          18,
          33,
          42
        ]
      },
      {
        "input": [
          26,
          88,
          79,
          5
        ],
        "output": [
          26,
          88,
          79
        ]
      }
    ]
  },
  {
    "id": "c133",
    "difficulty": 134,
    "function": "def c133(x):\n    # remove elements 1 through 4\n    return x[:1] + x[5:]\n\n",
    "data": {
      "input": [
        8,
        3,
        20,
        91,
        97,
        58,
        15,
        38
      ],
      "output": [
        8,
        58,
        15,
        38
      ]
    },
    "demos": [
      {
        "input": [
          90,
          60,
          50,
          79,
          87,
          15,
          91,
          37
        ],
        "output": [
          90,
          15,
          91,
          37
        ]
      },
      {
        "input": [
          40,
          2,
          9,
          20,
          49,
          65,
          83,
          67
        ],
        "output": [
          40,
          65,
          83,
          67
        ]
      },
      {
        "input": [
          68,
          27,
          60,
          70,
          31,
          97
        ],
        "output": [
          68,
          97
        ]
      }
    ]
  },
  {
    "id": "c146",
    "difficulty": 135,
    "function": "def c146(x):\n    # absolute difference between each consecutive pair of elements\n    return [abs(x[i] - x[i+1]) for i in range(len(x)-1)]\n\n",
    "data": {
      "input": [
        64,
        41,
        72,
        43,
        84,
        36,
        51
      ],
      "output": [
        23,
        31,
        29,
        41,
        48,
        15
      ]
    },
    "demos": [
      {
        "input": [
          99,
          57,
          9,
          75,
          26,
          25,
          69,
          34,
          63
        ],
        "output": [
          42,
          48,
          66,
          49,
          1,
          44,
          35,
          29
        ]
      },
      {
        "input": [
          24,
          82,
          87,
          6,
          80
        ],
        "output": [
          58,
          5,
          81,
          74
        ]
      },
      {
        "input": [
          79,
          14,
          36,
          89,
          13,
          42,
          46,
          26
        ],
        "output": [
          65,
          22,
          53,
          76,
          29,
          4,
          20
        ]
      }
    ]
  },
  {
    "id": "c004",
    "difficulty": 136,
    "function": "def c004(x):\n    # remove all but element 3\n    return [x[2]]\n\n",
    "data": {
      "input": [
        95,
        90,
        97,
        10,
        40,
        35,
        2
      ],
      "output": [
        97
      ]
    },
    "demos": [
      {
        "input": [
          27,
          19,
          45,
          9
        ],
        "output": [
          45
        ]
      },
      {
        "input": [
          37,
          7,
          82,
          90
        ],
        "output": [
          82
        ]
      },
      {
        "input": [
          0,
          71,
          93,
          7,
          59,
          66,
          40
        ],
        "output": [
          93
        ]
      }
    ]
  },
  {
    "id": "c240",
    "difficulty": 137,
    "function": "def c240(x):\n    # number of elements equal to the input length\n    return [x.count(len(x))]\n\n",
    "data": {
      "input": [
        71,
        3,
        8,
        96,
        8,
        8,
        92,
        77
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          53,
          42,
          83,
          86,
          33,
          5,
          13,
          8
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          56,
          4,
          39,
          5,
          89
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          8,
          80,
          8,
          20,
          8,
          39,
          33,
          8
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c239",
    "difficulty": 138,
    "function": "def c239(x):\n    # number of repetitions in the input\n    res = {}\n    out = 0\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out += 1\n    return [out]\n\n",
    "data": {
      "input": [
        7,
        5,
        7,
        8,
        7,
        8,
        6
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          7,
          10,
          5,
          10,
          9,
          10,
          9,
          2,
          9,
          10
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          1,
          1,
          2,
          3,
          2,
          8,
          8
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          10,
          0,
          7,
          1,
          9,
          1,
          8,
          10,
          10
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c246",
    "difficulty": 139,
    "function": "def c246(x):\n    # number of unique elements\n    return [len(set(x))]\n\n",
    "data": {
      "input": [
        47,
        26,
        94,
        55,
        59,
        94,
        81,
        55,
        59,
        8
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          24,
          46,
          68,
          24,
          24,
          68,
          89,
          24,
          29,
          24
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          26,
          94,
          80,
          26,
          6,
          94,
          6
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          36,
          14,
          84,
          76,
          84,
          53,
          36,
          85,
          93,
          53
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c138",
    "difficulty": 140,
    "function": "def c138(x):\n    # remove all occurrences of the first element\n    return [i for i in x if i != x[0]]\n\n",
    "data": {
      "input": [
        23,
        65,
        77,
        77,
        79
      ],
      "output": [
        65,
        77,
        77,
        79
      ]
    },
    "demos": [
      {
        "input": [
          12,
          6,
          6,
          16,
          6,
          0,
          6,
          33,
          41
        ],
        "output": [
          6,
          6,
          16,
          6,
          0,
          6,
          33,
          41
        ]
      },
      {
        "input": [
          3,
          69,
          99,
          69,
          26,
          27,
          64,
          64
        ],
        "output": [
          69,
          99,
          69,
          26,
          27,
          64,
          64
        ]
      },
      {
        "input": [
          18,
          39,
          20,
          68,
          18,
          4,
          20,
          3,
          43,
          20
        ],
        "output": [
          39,
          20,
          68,
          4,
          20,
          3,
          43,
          20
        ]
      }
    ]
  },
  {
    "id": "c018",
    "difficulty": 141,
    "function": "def c018(x):\n    # replace element 1 with 9\n    x[1] = 9\n    return x\n\n",
    "data": {
      "input": [
        52,
        50,
        78,
        67,
        61
      ],
      "output": [
        52,
        9,
        78,
        67,
        61
      ]
    },
    "demos": [
      {
        "input": [
          94,
          60,
          78
        ],
        "output": [
          94,
          9,
          78
        ]
      },
      {
        "input": [
          95,
          69,
          12
        ],
        "output": [
          95,
          9,
          12
        ]
      },
      {
        "input": [
          52,
          10,
          28,
          85,
          28,
          2,
          74
        ],
        "output": [
          52,
          9,
          28,
          85,
          28,
          2,
          74
        ]
      }
    ]
  },
  {
    "id": "c012",
    "difficulty": 142,
    "function": "def c012(x):\n    # remove all but elements 1 through 3\n    return x[1:4]\n\n",
    "data": {
      "input": [
        26,
        6,
        64,
        33,
        96,
        38
      ],
      "output": [
        6,
        64,
        33
      ]
    },
    "demos": [
      {
        "input": [
          61,
          91,
          85,
          68,
          44
        ],
        "output": [
          91,
          85,
          68
        ]
      },
      {
        "input": [
          10,
          28,
          18,
          82,
          54
        ],
        "output": [
          28,
          18,
          82
        ]
      },
      {
        "input": [
          80,
          59,
          74,
          80,
          84,
          40
        ],
        "output": [
          59,
          74,
          80
        ]
      }
    ]
  },
  {
    "id": "c232",
    "difficulty": 143,
    "function": "def c232(x):\n    # mean of the list, rounded to the nearest integer\n    return [round(sum(x)/len(x))]\n\n",
    "data": {
      "input": [
        17,
        90,
        3,
        1,
        47,
        41
      ],
      "output": [
        33
      ]
    },
    "demos": [
      {
        "input": [
          49,
          35,
          61,
          83
        ],
        "output": [
          57
        ]
      },
      {
        "input": [
          46,
          47,
          48,
          61,
          23,
          22
        ],
        "output": [
          41
        ]
      },
      {
        "input": [
          54,
          13,
          68,
          42
        ],
        "output": [
          44
        ]
      }
    ]
  },
  {
    "id": "c094",
    "difficulty": 144,
    "function": "def c094(x):\n    # swap 0,2 and 1,3\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        10,
        46,
        34,
        46,
        0
      ],
      "output": [
        34,
        46,
        10,
        46,
        0
      ]
    },
    "demos": [
      {
        "input": [
          37,
          61,
          10,
          69,
          27,
          76,
          99
        ],
        "output": [
          10,
          69,
          37,
          61,
          27,
          76,
          99
        ]
      },
      {
        "input": [
          47,
          61,
          29,
          26,
          1,
          68
        ],
        "output": [
          29,
          26,
          47,
          61,
          1,
          68
        ]
      },
      {
        "input": [
          87,
          62,
          36,
          84,
          49,
          86,
          19
        ],
        "output": [
          36,
          84,
          87,
          62,
          49,
          86,
          19
        ]
      }
    ]
  },
  {
    "id": "c086",
    "difficulty": 145,
    "function": "def c086(x):\n    # swap elements 0 and 3\n    x[0], x[3] = x[3], x[0]\n    return x\n\n",
    "data": {
      "input": [
        79,
        35,
        60,
        67,
        80,
        67,
        31
      ],
      "output": [
        67,
        35,
        60,
        79,
        80,
        67,
        31
      ]
    },
    "demos": [
      {
        "input": [
          72,
          72,
          87,
          91,
          8,
          27
        ],
        "output": [
          91,
          72,
          87,
          72,
          8,
          27
        ]
      },
      {
        "input": [
          96,
          39,
          53,
          68,
          95,
          71
        ],
        "output": [
          68,
          39,
          53,
          96,
          95,
          71
        ]
      },
      {
        "input": [
          77,
          70,
          49,
          91,
          18,
          16,
          1
        ],
        "output": [
          91,
          70,
          49,
          77,
          18,
          16,
          1
        ]
      }
    ]
  },
  {
    "id": "c193",
    "difficulty": 146,
    "function": "def c193(x):\n    # remove the smallest element and the largest element, output in ascending order\n    return sorted(x[1:-1])\n\n",
    "data": {
      "input": [
        12,
        82,
        41,
        71,
        36,
        58,
        72
      ],
      "output": [
        36,
        41,
        58,
        71,
        82
      ]
    },
    "demos": [
      {
        "input": [
          7,
          99,
          86,
          11,
          95,
          87
        ],
        "output": [
          11,
          86,
          95,
          99
        ]
      },
      {
        "input": [
          4,
          94,
          98,
          15
        ],
        "output": [
          94,
          98
        ]
      },
      {
        "input": [
          12,
          9,
          26,
          80,
          52,
          54,
          41
        ],
        "output": [
          9,
          26,
          52,
          54,
          80
        ]
      }
    ]
  },
  {
    "id": "c056",
    "difficulty": 147,
    "function": "def c056(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        35,
        2,
        58,
        9
      ],
      "output": [
        35,
        2,
        9
      ]
    },
    "demos": [
      {
        "input": [
          14,
          43,
          81,
          60,
          35
        ],
        "output": [
          14,
          43,
          60,
          35
        ]
      },
      {
        "input": [
          0,
          74,
          89,
          90,
          17,
          76,
          25
        ],
        "output": [
          0,
          74,
          90,
          17,
          76,
          25
        ]
      },
      {
        "input": [
          97,
          47,
          11,
          85,
          99,
          20
        ],
        "output": [
          97,
          47,
          85,
          99,
          20
        ]
      }
    ]
  },
  {
    "id": "c028",
    "difficulty": 148,
    "function": "def c028(x):\n    # remove element 1 if element 0 > element 1, else remove element 2\n    if x[0] > x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        61,
        12,
        97,
        27
      ],
      "output": [
        61,
        97,
        27
      ]
    },
    "demos": [
      {
        "input": [
          13,
          90,
          25,
          58,
          0
        ],
        "output": [
          13,
          90,
          58,
          0
        ]
      },
      {
        "input": [
          38,
          78,
          96,
          46
        ],
        "output": [
          38,
          78,
          46
        ]
      },
      {
        "input": [
          92,
          79,
          37,
          29,
          42
        ],
        "output": [
          92,
          37,
          29,
          42
        ]
      }
    ]
  },
  {
    "id": "c220",
    "difficulty": 149,
    "function": "def c220(x):\n    # if input length is even, double each element, else triple each element\n    if len(x) % 2 == 0:\n        return [i*2 for i in x]\n    else:\n        return [i*3 for i in x]\n\n",
    "data": {
      "input": [
        33,
        24,
        30,
        8
      ],
      "output": [
        66,
        48,
        60,
        16
      ]
    },
    "demos": [
      {
        "input": [
          13,
          30,
          62,
          75,
          56
        ],
        "output": [
          39,
          90,
          186,
          225,
          168
        ]
      },
      {
        "input": [
          97,
          40,
          87,
          24,
          35
        ],
        "output": [
          291,
          120,
          261,
          72,
          105
        ]
      },
      {
        "input": [
          50,
          77,
          31,
          41,
          99,
          49
        ],
        "output": [
          100,
          154,
          62,
          82,
          198,
          98
        ]
      }
    ]
  },
  {
    "id": "c241",
    "difficulty": 150,
    "function": "def c241(x):\n    # number of even elements\n    return [len([i for i in x if i % 2 == 0])]\n\n",
    "data": {
      "input": [
        50,
        26,
        12,
        7,
        1
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          65,
          56,
          50,
          56,
          53
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          7,
          43,
          77,
          52
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          27,
          66,
          65,
          48
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c060",
    "difficulty": 151,
    "function": "def c060(x):\n    # element 2,1,0,3,4,6 remove the rest\n    return [x[2], x[1], x[0], x[3], x[4], x[6]]\n\n",
    "data": {
      "input": [
        56,
        59,
        48,
        74,
        8,
        88,
        58,
        86,
        36,
        36
      ],
      "output": [
        48,
        59,
        56,
        74,
        8,
        58
      ]
    },
    "demos": [
      {
        "input": [
          72,
          69,
          85,
          22,
          1,
          85,
          5,
          65
        ],
        "output": [
          85,
          69,
          72,
          22,
          1,
          5
        ]
      },
      {
        "input": [
          60,
          85,
          2,
          77,
          3,
          6,
          16,
          81,
          57,
          99
        ],
        "output": [
          2,
          85,
          60,
          77,
          3,
          16
        ]
      },
      {
        "input": [
          60,
          72,
          26,
          35,
          62,
          74,
          85,
          48,
          80
        ],
        "output": [
          26,
          72,
          60,
          35,
          62,
          85
        ]
      }
    ]
  },
  {
    "id": "c169",
    "difficulty": 152,
    "function": "def c169(x):\n    # second largest element\n    return [sorted(x)[-2]]\n\n",
    "data": {
      "input": [
        46,
        80,
        82,
        85,
        17,
        6
      ],
      "output": [
        82
      ]
    },
    "demos": [
      {
        "input": [
          25,
          50,
          57,
          68,
          68
        ],
        "output": [
          68
        ]
      },
      {
        "input": [
          77,
          82,
          85,
          36,
          63,
          27
        ],
        "output": [
          82
        ]
      },
      {
        "input": [
          99,
          25,
          70,
          91,
          41,
          88,
          46
        ],
        "output": [
          91
        ]
      }
    ]
  },
  {
    "id": "c057",
    "difficulty": 153,
    "function": "def c057(x):\n    # insert a 4 as element 2\n    return x[:2] + [4] + x[2:]\n\n",
    "data": {
      "input": [
        99,
        36,
        12,
        90,
        29
      ],
      "output": [
        99,
        36,
        4,
        12,
        90,
        29
      ]
    },
    "demos": [
      {
        "input": [
          10,
          71,
          98,
          45,
          1,
          9,
          1
        ],
        "output": [
          10,
          71,
          4,
          98,
          45,
          1,
          9,
          1
        ]
      },
      {
        "input": [
          78,
          22,
          78,
          4,
          24
        ],
        "output": [
          78,
          22,
          4,
          78,
          4,
          24
        ]
      },
      {
        "input": [
          5,
          64,
          37,
          22,
          6,
          49
        ],
        "output": [
          5,
          64,
          4,
          37,
          22,
          6,
          49
        ]
      }
    ]
  },
  {
    "id": "c150",
    "difficulty": 154,
    "function": "def c150(x):\n    # count from first element to each element if the element is greater than the first element\n    res = []\n    for i in x:\n        if i > x[0]:\n            res += list(range(x[0], i+1))\n        else:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        37,
        20,
        47,
        8,
        5
      ],
      "output": [
        37,
        20,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        8,
        5
      ]
    },
    "demos": [
      {
        "input": [
          33,
          32,
          20,
          36,
          38
        ],
        "output": [
          33,
          32,
          20,
          33,
          34,
          35,
          36,
          33,
          34,
          35,
          36,
          37,
          38
        ]
      },
      {
        "input": [
          1,
          2,
          3,
          4,
          5
        ],
        "output": [
          1,
          1,
          2,
          1,
          2,
          3,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          4,
          5
        ]
      },
      {
        "input": [
          89,
          50,
          91,
          75
        ],
        "output": [
          89,
          50,
          89,
          90,
          91,
          75
        ]
      }
    ]
  },
  {
    "id": "c033",
    "difficulty": 155,
    "function": "def c033(x):\n    # swap element 0 and 2\n    x[0], x[2] = x[2], x[0]\n    return x\n\n",
    "data": {
      "input": [
        94,
        26,
        75,
        47,
        6,
        64,
        43
      ],
      "output": [
        75,
        26,
        94,
        47,
        6,
        64,
        43
      ]
    },
    "demos": [
      {
        "input": [
          42,
          97,
          46,
          24
        ],
        "output": [
          46,
          97,
          42,
          24
        ]
      },
      {
        "input": [
          89,
          18,
          76,
          80,
          75,
          32,
          68
        ],
        "output": [
          76,
          18,
          89,
          80,
          75,
          32,
          68
        ]
      },
      {
        "input": [
          28,
          66,
          56,
          68,
          88,
          90,
          0
        ],
        "output": [
          56,
          66,
          28,
          68,
          88,
          90,
          0
        ]
      }
    ]
  },
  {
    "id": "c218",
    "difficulty": 156,
    "function": "def c218(x):\n    # keep only second element and following equal to the first element\n    return [x[1]] + [i for i in x[2:] if i == x[0]]\n\n",
    "data": {
      "input": [
        28,
        62,
        99,
        28,
        79,
        10,
        28,
        70,
        8,
        26
      ],
      "output": [
        62,
        28,
        28
      ]
    },
    "demos": [
      {
        "input": [
          65,
          16,
          65,
          65,
          65,
          6,
          13,
          99,
          32,
          25
        ],
        "output": [
          16,
          65,
          65,
          65
        ]
      },
      {
        "input": [
          72,
          62,
          23,
          72,
          32
        ],
        "output": [
          62,
          72
        ]
      },
      {
        "input": [
          52,
          58,
          40,
          84,
          85,
          5,
          52,
          44,
          48,
          52
        ],
        "output": [
          58,
          52,
          52
        ]
      }
    ]
  },
  {
    "id": "c136",
    "difficulty": 158,
    "function": "def c136(x):\n    # remove the first occurrence of the largest element, keep the rest\n    x.remove(max(x))\n    return x\n\n",
    "data": {
      "input": [
        9,
        23,
        35,
        49
      ],
      "output": [
        9,
        23,
        35
      ]
    },
    "demos": [
      {
        "input": [
          81,
          66,
          77,
          41,
          67,
          14
        ],
        "output": [
          66,
          77,
          41,
          67,
          14
        ]
      },
      {
        "input": [
          0,
          83,
          60,
          42,
          74,
          15,
          18,
          72
        ],
        "output": [
          0,
          60,
          42,
          74,
          15,
          18,
          72
        ]
      },
      {
        "input": [
          68,
          32,
          82,
          29,
          21
        ],
        "output": [
          68,
          32,
          29,
          21
        ]
      }
    ]
  },
  {
    "id": "c083",
    "difficulty": 159,
    "function": "def c083(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        69,
        64,
        74,
        15,
        15,
        38,
        14
      ],
      "output": [
        14
      ]
    },
    "demos": [
      {
        "input": [
          8,
          62,
          99,
          1,
          35,
          30,
          19,
          85,
          90
        ],
        "output": [
          19
        ]
      },
      {
        "input": [
          88,
          8,
          42,
          6,
          55,
          8,
          50,
          82
        ],
        "output": [
          50
        ]
      },
      {
        "input": [
          33,
          61,
          63,
          3,
          8,
          1,
          35,
          93
        ],
        "output": [
          35
        ]
      }
    ]
  },
  {
    "id": "c019",
    "difficulty": 160,
    "function": "def c019(x):\n    # replace element 5 with a 3 if there is an element 5\n    if len(x) > 5:\n        x[4] = 3\n    return x\n\n",
    "data": {
      "input": [
        62,
        74,
        3,
        54,
        47
      ],
      "output": [
        62,
        74,
        3,
        54,
        47
      ]
    },
    "demos": [
      {
        "input": [
          19,
          39,
          44,
          75,
          11,
          50
        ],
        "output": [
          19,
          39,
          44,
          75,
          3,
          50
        ]
      },
      {
        "input": [
          54,
          13,
          87,
          74,
          25
        ],
        "output": [
          54,
          13,
          87,
          74,
          25
        ]
      },
      {
        "input": [
          41,
          0,
          49,
          17,
          50
        ],
        "output": [
          41,
          0,
          49,
          17,
          50
        ]
      }
    ]
  },
  {
    "id": "c203",
    "difficulty": 161,
    "function": "def c203(x):\n    # the first M positive multiples of the smallest element, M is the length of the input\n    return [min(x)*i for i in range(1, len(x)+1)]\n\n",
    "data": {
      "input": [
        6,
        22,
        21,
        10,
        15,
        19,
        9
      ],
      "output": [
        6,
        12,
        18,
        24,
        30,
        36,
        42
      ]
    },
    "demos": [
      {
        "input": [
          6,
          11,
          12,
          20,
          3
        ],
        "output": [
          3,
          6,
          9,
          12,
          15
        ]
      },
      {
        "input": [
          3,
          20,
          1,
          23
        ],
        "output": [
          1,
          2,
          3,
          4
        ]
      },
      {
        "input": [
          6,
          23,
          13,
          25,
          17,
          3
        ],
        "output": [
          3,
          6,
          9,
          12,
          15,
          18
        ]
      }
    ]
  },
  {
    "id": "c115",
    "difficulty": 162,
    "function": "def c115(x):\n    # the unique elements, prepended and appended by their sum\n    res = list(set(x))\n    return [sum(res)] + res + [sum(res)]\n\n",
    "data": {
      "input": [
        12,
        6,
        14,
        12,
        5,
        26,
        14
      ],
      "output": [
        63,
        5,
        6,
        12,
        14,
        26,
        63
      ]
    },
    "demos": [
      {
        "input": [
          3,
          3,
          20,
          13,
          11,
          18,
          3
        ],
        "output": [
          65,
          3,
          11,
          13,
          18,
          20,
          65
        ]
      },
      {
        "input": [
          1,
          21,
          25,
          25
        ],
        "output": [
          47,
          1,
          21,
          25,
          47
        ]
      },
      {
        "input": [
          0,
          10,
          22,
          10,
          17,
          10,
          5
        ],
        "output": [
          54,
          0,
          5,
          10,
          17,
          22,
          54
        ]
      }
    ]
  },
  {
    "id": "c207",
    "difficulty": 163,
    "function": "def c207(x):\n    # element-wise sum of the input and the reverse of the input\n    return [i+j for i, j in zip(x, x[::-1])]\n\n",
    "data": {
      "input": [
        22,
        50,
        23,
        5,
        14
      ],
      "output": [
        36,
        55,
        46,
        55,
        36
      ]
    },
    "demos": [
      {
        "input": [
          48,
          10,
          47,
          44
        ],
        "output": [
          92,
          57,
          57,
          92
        ]
      },
      {
        "input": [
          45,
          31,
          15,
          32,
          7,
          18
        ],
        "output": [
          63,
          38,
          47,
          47,
          38,
          63
        ]
      },
      {
        "input": [
          9,
          45,
          10,
          25,
          35,
          45
        ],
        "output": [
          54,
          80,
          35,
          35,
          80,
          54
        ]
      }
    ]
  },
  {
    "id": "c088",
    "difficulty": 164,
    "function": "def c088(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        14,
        65,
        65,
        4,
        69
      ],
      "output": [
        4,
        65,
        65,
        14,
        69
      ]
    },
    "demos": [
      {
        "input": [
          10,
          7,
          7,
          36,
          64,
          53
        ],
        "output": [
          36,
          7,
          7,
          10,
          64,
          53
        ]
      },
      {
        "input": [
          42,
          5,
          27,
          51,
          53,
          49
        ],
        "output": [
          42,
          27,
          5,
          51,
          53,
          49
        ]
      },
      {
        "input": [
          89,
          67,
          67,
          65,
          64
        ],
        "output": [
          65,
          67,
          67,
          89,
          64
        ]
      }
    ]
  },
  {
    "id": "c040",
    "difficulty": 165,
    "function": "def c040(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        23,
        12,
        1,
        7,
        3,
        24,
        3
      ],
      "output": [
        23,
        12,
        1,
        7,
        3,
        24,
        3,
        3
      ]
    },
    "demos": [
      {
        "input": [
          20,
          6,
          9,
          9,
          17,
          10,
          28
        ],
        "output": [
          20,
          6,
          9,
          9,
          17,
          10,
          28,
          9
        ]
      },
      {
        "input": [
          12,
          3,
          29,
          28,
          23,
          12
        ],
        "output": [
          12,
          3,
          29,
          28,
          23,
          12,
          3
        ]
      },
      {
        "input": [
          8,
          20,
          21,
          29,
          11
        ],
        "output": [
          8,
          20,
          21,
          29,
          11
        ]
      }
    ]
  },
  {
    "id": "c085",
    "difficulty": 166,
    "function": "def c085(x):\n    # remove all but element N, N=first element\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        6,
        18,
        14,
        25,
        10,
        28,
        19
      ],
      "output": [
        19
      ]
    },
    "demos": [
      {
        "input": [
          6,
          46,
          14,
          39,
          25,
          21,
          14
        ],
        "output": [
          14
        ]
      },
      {
        "input": [
          3,
          32,
          24,
          8
        ],
        "output": [
          8
        ]
      },
      {
        "input": [
          5,
          34,
          14,
          49,
          4,
          2
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c111",
    "difficulty": 167,
    "function": "def c111(x):\n    # repeat the largest element N times, where N is the smallest element\n    return [max(x)] * min(x)\n\n",
    "data": {
      "input": [
        16,
        14,
        3,
        27,
        26,
        9,
        14
      ],
      "output": [
        27,
        27,
        27
      ]
    },
    "demos": [
      {
        "input": [
          12,
          13,
          6,
          3,
          15,
          26
        ],
        "output": [
          26,
          26,
          26
        ]
      },
      {
        "input": [
          28,
          10,
          16,
          10,
          19,
          17,
          4,
          15
        ],
        "output": [
          28,
          28,
          28,
          28
        ]
      },
      {
        "input": [
          1,
          9,
          21,
          10,
          26,
          16,
          6
        ],
        "output": [
          26
        ]
      }
    ]
  },
  {
    "id": "c073",
    "difficulty": 168,
    "function": "def c073(x):\n    # add the index to every element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        6,
        35,
        36,
        31,
        14,
        49
      ],
      "output": [
        6,
        36,
        38,
        34,
        18,
        54
      ]
    },
    "demos": [
      {
        "input": [
          7,
          1,
          13,
          25,
          30,
          27,
          16
        ],
        "output": [
          7,
          2,
          15,
          28,
          34,
          32,
          22
        ]
      },
      {
        "input": [
          5,
          9,
          34,
          24,
          32,
          25
        ],
        "output": [
          5,
          10,
          36,
          27,
          36,
          30
        ]
      },
      {
        "input": [
          23,
          37,
          41,
          14
        ],
        "output": [
          23,
          38,
          43,
          17
        ]
      }
    ]
  },
  {
    "id": "c027",
    "difficulty": 169,
    "function": "def c027(x):\n    # remove element 1 if element 0 = element 1, else remove element 2\n    if x[0] == x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        22,
        22,
        59,
        60,
        42,
        44
      ],
      "output": [
        22,
        59,
        60,
        42,
        44
      ]
    },
    "demos": [
      {
        "input": [
          52,
          76,
          73,
          48,
          42,
          79,
          1
        ],
        "output": [
          52,
          76,
          48,
          42,
          79,
          1
        ]
      },
      {
        "input": [
          11,
          11,
          43,
          85,
          73
        ],
        "output": [
          11,
          43,
          85,
          73
        ]
      },
      {
        "input": [
          48,
          48,
          71,
          80,
          34,
          8
        ],
        "output": [
          48,
          71,
          80,
          34,
          8
        ]
      }
    ]
  },
  {
    "id": "c234",
    "difficulty": 170,
    "function": "def c234(x):\n    # repetitions in order of first appearance\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out.append(i)\n    return out\n\n",
    "data": {
      "input": [
        35,
        35,
        12,
        53,
        7,
        53,
        97,
        12,
        28
      ],
      "output": [
        35,
        12,
        53
      ]
    },
    "demos": [
      {
        "input": [
          87,
          27,
          87,
          33,
          0,
          59,
          0
        ],
        "output": [
          87,
          0
        ]
      },
      {
        "input": [
          89,
          39,
          7,
          89,
          71,
          75,
          36,
          39
        ],
        "output": [
          89,
          39
        ]
      },
      {
        "input": [
          27,
          95,
          27,
          95,
          64,
          44,
          38,
          27
        ],
        "output": [
          27,
          95
        ]
      }
    ]
  },
  {
    "id": "c165",
    "difficulty": 171,
    "function": "def c165(x):\n    # reverse the input and keep only even elements\n    return [i for i in x[::-1] if i % 2 == 0]\n\n",
    "data": {
      "input": [
        98,
        29,
        53,
        73,
        37,
        40
      ],
      "output": [
        40,
        98
      ]
    },
    "demos": [
      {
        "input": [
          36,
          53,
          6,
          53,
          91,
          28,
          75,
          88
        ],
        "output": [
          88,
          28,
          6,
          36
        ]
      },
      {
        "input": [
          25,
          44,
          92,
          65,
          21,
          25,
          51
        ],
        "output": [
          92,
          44
        ]
      },
      {
        "input": [
          14,
          93,
          41,
          77,
          55,
          7,
          87
        ],
        "output": [
          14
        ]
      }
    ]
  },
  {
    "id": "c191",
    "difficulty": 172,
    "function": "def c191(x):\n    # repeat each element N times, where N is its tens digit\n    out = []\n    for i in x:\n        if len(str(i)) > 1:\n            out += [i] * int(str(i)[-2])\n    return out\n\n",
    "data": {
      "input": [
        16,
        40,
        12,
        27,
        27
      ],
      "output": [
        16,
        40,
        40,
        40,
        40,
        12,
        27,
        27,
        27,
        27
      ]
    },
    "demos": [
      {
        "input": [
          25,
          24,
          35,
          22,
          6,
          4,
          28
        ],
        "output": [
          25,
          25,
          24,
          24,
          35,
          35,
          35,
          22,
          22,
          28,
          28
        ]
      },
      {
        "input": [
          29,
          29,
          24,
          0,
          4
        ],
        "output": [
          29,
          29,
          29,
          29,
          24,
          24
        ]
      },
      {
        "input": [
          23,
          40,
          3,
          4,
          33,
          1
        ],
        "output": [
          23,
          23,
          40,
          40,
          40,
          40,
          33,
          33,
          33
        ]
      }
    ]
  },
  {
    "id": "c026",
    "difficulty": 173,
    "function": "def c026(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        96,
        76,
        76,
        62,
        64,
        1
      ],
      "output": [
        96,
        76,
        62,
        64,
        1
      ]
    },
    "demos": [
      {
        "input": [
          33,
          42,
          92,
          14,
          18,
          40,
          40
        ],
        "output": [
          33,
          42,
          14,
          18,
          40,
          40
        ]
      },
      {
        "input": [
          48,
          98,
          27,
          2,
          97,
          39
        ],
        "output": [
          48,
          98,
          2,
          97,
          39
        ]
      },
      {
        "input": [
          43,
          5,
          30,
          62,
          40,
          12,
          31
        ],
        "output": [
          43,
          5,
          62,
          40,
          12,
          31
        ]
      }
    ]
  },
  {
    "id": "c059",
    "difficulty": 174,
    "function": "def c059(x):\n    # swap element 2 and element 5\n    x[2], x[5] = x[5], x[2]\n    return x\n\n",
    "data": {
      "input": [
        8,
        95,
        97,
        56,
        23,
        1,
        76,
        91
      ],
      "output": [
        8,
        95,
        1,
        56,
        23,
        97,
        76,
        91
      ]
    },
    "demos": [
      {
        "input": [
          88,
          27,
          91,
          47,
          43,
          94,
          84,
          62
        ],
        "output": [
          88,
          27,
          94,
          47,
          43,
          91,
          84,
          62
        ]
      },
      {
        "input": [
          28,
          8,
          34,
          14,
          13,
          37,
          13
        ],
        "output": [
          28,
          8,
          37,
          14,
          13,
          34,
          13
        ]
      },
      {
        "input": [
          10,
          6,
          57,
          4,
          18,
          22,
          27,
          64
        ],
        "output": [
          10,
          6,
          22,
          4,
          18,
          57,
          27,
          64
        ]
      }
    ]
  },
  {
    "id": "c074",
    "difficulty": 175,
    "function": "def c074(x):\n    # remove every element whose value < 8\n    return [i for i in x if i >= 8]\n\n",
    "data": {
      "input": [
        7,
        1,
        21,
        16,
        21,
        9,
        14
      ],
      "output": [
        21,
        16,
        21,
        9,
        14
      ]
    },
    "demos": [
      {
        "input": [
          6,
          11,
          26,
          5,
          15,
          4,
          26
        ],
        "output": [
          11,
          26,
          15,
          26
        ]
      },
      {
        "input": [
          21,
          28,
          7,
          23,
          20,
          30
        ],
        "output": [
          21,
          28,
          23,
          20,
          30
        ]
      },
      {
        "input": [
          22,
          7,
          25,
          5,
          26,
          25,
          30,
          11
        ],
        "output": [
          22,
          25,
          26,
          25,
          30,
          11
        ]
      }
    ]
  },
  {
    "id": "c173",
    "difficulty": 176,
    "function": "def c173(x):\n    # replace element N with the largest element in element 0 through N\n    for i in range(len(x)):\n        x[i] = max(x[:i+1])\n    return x\n\n",
    "data": {
      "input": [
        80,
        28,
        68,
        99,
        73
      ],
      "output": [
        80,
        80,
        80,
        99,
        99
      ]
    },
    "demos": [
      {
        "input": [
          9,
          33,
          33,
          59,
          68,
          36,
          20,
          63
        ],
        "output": [
          9,
          33,
          33,
          59,
          68,
          68,
          68,
          68
        ]
      },
      {
        "input": [
          2,
          56,
          27,
          91,
          0,
          41,
          13,
          16
        ],
        "output": [
          2,
          56,
          56,
          91,
          91,
          91,
          91,
          91
        ]
      },
      {
        "input": [
          18,
          97,
          68,
          85,
          47
        ],
        "output": [
          18,
          97,
          97,
          97,
          97
        ]
      }
    ]
  },
  {
    "id": "c175",
    "difficulty": 177,
    "function": "def c175(x):\n    # keep only elements larger than any preceding element\n    res = [x[0]]\n    for i in x[1:]:\n        if i > res[-1]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        5,
        10,
        25,
        57,
        2,
        37,
        82,
        29
      ],
      "output": [
        5,
        10,
        25,
        57,
        82
      ]
    },
    "demos": [
      {
        "input": [
          63,
          74,
          48,
          91,
          25,
          9,
          91,
          69
        ],
        "output": [
          63,
          74,
          91
        ]
      },
      {
        "input": [
          46,
          79,
          72,
          83,
          41,
          49,
          47
        ],
        "output": [
          46,
          79,
          83
        ]
      },
      {
        "input": [
          46,
          24,
          88,
          10,
          68,
          64,
          84,
          24
        ],
        "output": [
          46,
          88
        ]
      }
    ]
  },
  {
    "id": "c204",
    "difficulty": 178,
    "function": "def c204(x):\n    # keep only elements followed by 0\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] == 0:\n            res.append(x[i])\n    return res\n\n",
    "data": {
      "input": [
        2,
        25,
        13,
        12,
        3,
        24,
        22
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          26,
          21,
          0,
          0,
          5,
          0,
          24,
          30,
          24,
          15
        ],
        "output": [
          21,
          0,
          5
        ]
      },
      {
        "input": [
          26,
          22,
          4,
          29,
          22,
          27,
          0
        ],
        "output": [
          27
        ]
      },
      {
        "input": [
          29,
          26,
          29,
          3,
          28,
          18,
          24,
          0
        ],
        "output": [
          24
        ]
      }
    ]
  },
  {
    "id": "c031",
    "difficulty": 179,
    "function": "def c031(x):\n    # remove whichever are equal, the first 2 elements or the last 2 elements\n    if x[0] == x[1]:\n        return x[2:]\n    elif x[-1] == x[-2]:\n        return x[:-2]\n    return x\n\n",
    "data": {
      "input": [
        58,
        58,
        32,
        48,
        1,
        14
      ],
      "output": [
        32,
        48,
        1,
        14
      ]
    },
    "demos": [
      {
        "input": [
          20,
          23,
          96,
          99,
          62,
          28,
          57
        ],
        "output": [
          20,
          23,
          96,
          99,
          62,
          28,
          57
        ]
      },
      {
        "input": [
          26,
          26,
          61,
          74,
          74
        ],
        "output": [
          61,
          74,
          74
        ]
      },
      {
        "input": [
          14,
          14,
          90,
          1,
          82,
          62
        ],
        "output": [
          90,
          1,
          82,
          62
        ]
      }
    ]
  },
  {
    "id": "c236",
    "difficulty": 180,
    "function": "def c236(x):\n    # even elements divided by 2\n    return [i//2 for i in x if i % 2 == 0]\n\n",
    "data": {
      "input": [
        33,
        10,
        76,
        72,
        1,
        26,
        53,
        39,
        87,
        78
      ],
      "output": [
        5,
        38,
        36,
        13,
        39
      ]
    },
    "demos": [
      {
        "input": [
          32,
          35,
          24,
          22,
          54,
          84,
          58,
          81,
          33,
          25
        ],
        "output": [
          16,
          12,
          11,
          27,
          42,
          29
        ]
      },
      {
        "input": [
          72,
          61,
          95,
          59,
          97,
          47,
          74
        ],
        "output": [
          36,
          37
        ]
      },
      {
        "input": [
          71,
          51,
          87,
          75,
          94,
          46,
          48,
          32,
          83,
          76
        ],
        "output": [
          47,
          23,
          24,
          16,
          38
        ]
      }
    ]
  },
  {
    "id": "c054",
    "difficulty": 181,
    "function": "def c054(x):\n    # replace element 0 and 1 with element 2\n    x[0] = x[2]\n    x[1] = x[2]\n    return x\n\n",
    "data": {
      "input": [
        20,
        12,
        38,
        12,
        50
      ],
      "output": [
        38,
        38,
        38,
        12,
        50
      ]
    },
    "demos": [
      {
        "input": [
          8,
          54,
          28,
          74,
          61
        ],
        "output": [
          28,
          28,
          28,
          74,
          61
        ]
      },
      {
        "input": [
          36,
          57,
          67,
          31,
          49
        ],
        "output": [
          67,
          67,
          67,
          31,
          49
        ]
      },
      {
        "input": [
          66,
          54,
          39,
          87,
          29,
          28
        ],
        "output": [
          39,
          39,
          39,
          87,
          29,
          28
        ]
      }
    ]
  },
  {
    "id": "c227",
    "difficulty": 182,
    "function": "def c227(x):\n    # interleave the input and reversed input, keep only unique elements in order of appearance\n    res = []\n    mid = len(x) // 2\n    for i in range(mid):\n        if x[i] not in res:\n            res.append(x[i])\n        if x[-i-1] not in res:\n            res.append(x[-i-1])\n    if len(x) % 2 == 1 and x[mid] not in res:\n        res.append(x[mid])\n    return res\n\n",
    "data": {
      "input": [
        98,
        98,
        85,
        53,
        34,
        34,
        85,
        76,
        41
      ],
      "output": [
        98,
        41,
        76,
        85,
        53,
        34
      ]
    },
    "demos": [
      {
        "input": [
          18,
          86,
          18,
          5,
          47,
          5
        ],
        "output": [
          18,
          5,
          86,
          47
        ]
      },
      {
        "input": [
          25,
          8,
          25,
          25,
          25,
          99,
          4
        ],
        "output": [
          25,
          4,
          8,
          99
        ]
      },
      {
        "input": [
          37,
          45,
          36,
          24,
          55,
          36,
          27,
          55
        ],
        "output": [
          37,
          55,
          45,
          27,
          36,
          24
        ]
      }
    ]
  },
  {
    "id": "c024",
    "difficulty": 183,
    "function": "def c024(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        9,
        11,
        5,
        20,
        7,
        20
      ],
      "output": [
        9,
        8,
        11,
        5,
        20,
        7,
        20
      ]
    },
    "demos": [
      {
        "input": [
          12,
          16,
          16,
          15,
          16,
          9,
          12,
          20
        ],
        "output": [
          12,
          8,
          16,
          16,
          15,
          16,
          9,
          12,
          20
        ]
      },
      {
        "input": [
          16,
          12,
          0,
          15
        ],
        "output": [
          16,
          8,
          12,
          0,
          15
        ]
      },
      {
        "input": [
          3,
          3,
          7,
          14,
          3,
          3,
          17
        ],
        "output": [
          3,
          5,
          3,
          7,
          14,
          3,
          3,
          17
        ]
      }
    ]
  },
  {
    "id": "c200",
    "difficulty": 184,
    "function": "def c200(x):\n    # tens digits of the elements in ascending order\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append(int(str(i)[-2]))\n        else:\n            res.append(0)\n    return sorted(res)\n\n",
    "data": {
      "input": [
        6,
        87,
        76,
        88,
        23,
        21
      ],
      "output": [
        0,
        2,
        2,
        7,
        8,
        8
      ]
    },
    "demos": [
      {
        "input": [
          20,
          24,
          0,
          2,
          47,
          76
        ],
        "output": [
          0,
          0,
          2,
          2,
          4,
          7
        ]
      },
      {
        "input": [
          99,
          99,
          20,
          58,
          81,
          10,
          92,
          6
        ],
        "output": [
          0,
          1,
          2,
          5,
          8,
          9,
          9,
          9
        ]
      },
      {
        "input": [
          7,
          83,
          39,
          40,
          62,
          37,
          74,
          14
        ],
        "output": [
          0,
          1,
          3,
          3,
          4,
          6,
          7,
          8
        ]
      }
    ]
  },
  {
    "id": "c010",
    "difficulty": 185,
    "function": "def c010(x):\n    # elements 1 through N + 1, N is the first element\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        5,
        3,
        13,
        11,
        5
      ],
      "output": [
        3,
        13,
        11,
        5
      ]
    },
    "demos": [
      {
        "input": [
          3,
          7,
          17,
          18,
          8
        ],
        "output": [
          7,
          17,
          18
        ]
      },
      {
        "input": [
          4,
          8,
          9,
          1,
          14,
          17,
          5
        ],
        "output": [
          8,
          9,
          1,
          14
        ]
      },
      {
        "input": [
          1,
          10,
          17,
          14,
          8
        ],
        "output": [
          10
        ]
      }
    ]
  },
  {
    "id": "c123",
    "difficulty": 186,
    "function": "def c123(x):\n    # remove all but element N, N is the last element\n    return [x[x[-1]]]\n\n",
    "data": {
      "input": [
        8,
        8,
        16,
        6,
        3,
        1,
        20,
        5
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          3,
          9,
          3,
          19,
          4
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          17,
          10,
          0,
          15,
          8,
          1
        ],
        "output": [
          10
        ]
      },
      {
        "input": [
          14,
          6,
          3,
          14,
          0,
          6,
          1,
          7
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c023",
    "difficulty": 187,
    "function": "def c023(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        14,
        2,
        11,
        0,
        1,
        13,
        7,
        10
      ],
      "output": [
        14,
        8,
        2,
        11,
        0,
        1,
        13,
        7,
        10
      ]
    },
    "demos": [
      {
        "input": [
          9,
          5,
          9,
          6,
          17,
          6
        ],
        "output": [
          9,
          8,
          5,
          9,
          6,
          17,
          6
        ]
      },
      {
        "input": [
          18,
          10,
          8,
          9,
          20,
          4
        ],
        "output": [
          18,
          8,
          10,
          8,
          9,
          20,
          4
        ]
      },
      {
        "input": [
          10,
          19,
          13,
          1,
          18,
          9,
          8
        ],
        "output": [
          10,
          8,
          19,
          13,
          1,
          18,
          9,
          8
        ]
      }
    ]
  },
  {
    "id": "c194",
    "difficulty": 188,
    "function": "def c194(x):\n    # reverse the input; prepend and append the length of the input\n    return [len(x)] + x[::-1] + [len(x)]\n\n",
    "data": {
      "input": [
        8,
        7,
        3,
        11,
        10,
        19,
        0
      ],
      "output": [
        7,
        0,
        19,
        10,
        11,
        3,
        7,
        8,
        7
      ]
    },
    "demos": [
      {
        "input": [
          20,
          6,
          11,
          12,
          5,
          14,
          11
        ],
        "output": [
          7,
          11,
          14,
          5,
          12,
          11,
          6,
          20,
          7
        ]
      },
      {
        "input": [
          18,
          12,
          14,
          10,
          0
        ],
        "output": [
          5,
          0,
          10,
          14,
          12,
          18,
          5
        ]
      },
      {
        "input": [
          17,
          13,
          6,
          19,
          10,
          15,
          6,
          4
        ],
        "output": [
          8,
          4,
          6,
          15,
          10,
          19,
          6,
          13,
          17,
          8
        ]
      }
    ]
  },
  {
    "id": "c245",
    "difficulty": 189,
    "function": "def c245(x):\n    # number of times element 0 appears in the following elements\n    return [x[1:].count(x[0])]\n\n",
    "data": {
      "input": [
        18,
        18,
        3,
        18,
        2,
        18
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          0,
          3,
          15,
          19,
          5,
          19,
          8
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          15,
          19,
          19,
          11,
          15,
          15
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          0,
          0,
          6,
          20,
          7,
          8
        ],
        "output": [
          1
        ]
      }
    ]
  },
  {
    "id": "c032",
    "difficulty": 190,
    "function": "def c032(x):\n    # remove first 2 elements if element 0 > last element, else remove last 2 elements\n    if x[0] > x[-1]:\n        return x[2:]\n    else:\n        return x[:-2]\n    \n",
    "data": {
      "input": [
        14,
        89,
        45,
        43,
        26,
        3
      ],
      "output": [
        45,
        43,
        26,
        3
      ]
    },
    "demos": [
      {
        "input": [
          44,
          15,
          83,
          59,
          20
        ],
        "output": [
          83,
          59,
          20
        ]
      },
      {
        "input": [
          55,
          29,
          20,
          8,
          99,
          87,
          14
        ],
        "output": [
          20,
          8,
          99,
          87,
          14
        ]
      },
      {
        "input": [
          5,
          74,
          66,
          31,
          71,
          1
        ],
        "output": [
          66,
          31,
          71,
          1
        ]
      }
    ]
  },
  {
    "id": "c058",
    "difficulty": 191,
    "function": "def c058(x):\n    # remove the first 5 elements\n    return x[5:]\n\n",
    "data": {
      "input": [
        46,
        36,
        86,
        77,
        89,
        63,
        14
      ],
      "output": [
        63,
        14
      ]
    },
    "demos": [
      {
        "input": [
          53,
          37,
          21,
          70,
          91,
          48,
          38,
          26
        ],
        "output": [
          48,
          38,
          26
        ]
      },
      {
        "input": [
          74,
          58,
          81,
          38
        ],
        "output": []
      },
      {
        "input": [
          84,
          68,
          35,
          50,
          30,
          34,
          96,
          53
        ],
        "output": [
          34,
          96,
          53
        ]
      }
    ]
  },
  {
    "id": "c174",
    "difficulty": 192,
    "function": "def c174(x):\n    # keep the first M elements, where M is the number of unique elements\n    return x[:len(set(x))]\n\n",
    "data": {
      "input": [
        80,
        23,
        17,
        82,
        82,
        17,
        97
      ],
      "output": [
        80,
        23,
        17,
        82,
        82
      ]
    },
    "demos": [
      {
        "input": [
          84,
          87,
          69,
          19,
          13
        ],
        "output": [
          84,
          87,
          69,
          19,
          13
        ]
      },
      {
        "input": [
          40,
          82,
          8,
          65,
          65,
          47,
          32
        ],
        "output": [
          40,
          82,
          8,
          65,
          65,
          47
        ]
      },
      {
        "input": [
          40,
          92,
          32,
          47,
          0
        ],
        "output": [
          40,
          92,
          32,
          47,
          0
        ]
      }
    ]
  },
  {
    "id": "c229",
    "difficulty": 193,
    "function": "def c229(x):\n    # keep only first N elements of the reversed input, N is the first element\n    length = x[0]\n    return x[::-1][:length]\n\n",
    "data": {
      "input": [
        5,
        3,
        2,
        76,
        91
      ],
      "output": [
        91,
        76,
        2,
        3,
        5
      ]
    },
    "demos": [
      {
        "input": [
          1,
          24,
          73,
          74,
          85,
          18,
          40
        ],
        "output": [
          40
        ]
      },
      {
        "input": [
          4,
          27,
          65,
          26,
          91
        ],
        "output": [
          91,
          26,
          65,
          27
        ]
      },
      {
        "input": [
          2,
          52,
          13,
          8,
          23,
          90,
          3
        ],
        "output": [
          3,
          90
        ]
      }
    ]
  },
  {
    "id": "c162",
    "difficulty": 194,
    "function": "def c162(x):\n    # replace each element M with 3 * M + 7\n    return [3*i+7 for i in x]\n\n",
    "data": {
      "input": [
        13,
        13,
        19,
        26,
        10,
        17,
        29
      ],
      "output": [
        46,
        46,
        64,
        85,
        37,
        58,
        94
      ]
    },
    "demos": [
      {
        "input": [
          18,
          0,
          6,
          28,
          8,
          28,
          22
        ],
        "output": [
          61,
          7,
          25,
          91,
          31,
          91,
          73
        ]
      },
      {
        "input": [
          7,
          18,
          22,
          21,
          15
        ],
        "output": [
          28,
          61,
          73,
          70,
          52
        ]
      },
      {
        "input": [
          2,
          22,
          7,
          3,
          12,
          0
        ],
        "output": [
          13,
          73,
          28,
          16,
          43,
          7
        ]
      }
    ]
  },
  {
    "id": "c039",
    "difficulty": 195,
    "function": "def c039(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        12,
        50,
        17,
        18,
        18,
        23,
        31,
        3
      ],
      "output": [
        12,
        50,
        17,
        18,
        18,
        23,
        31,
        3,
        3
      ]
    },
    "demos": [
      {
        "input": [
          24,
          40,
          16,
          41,
          9,
          11,
          44
        ],
        "output": [
          24,
          40,
          16,
          41,
          9,
          11,
          44,
          9
        ]
      },
      {
        "input": [
          25,
          3,
          19,
          9,
          3,
          17,
          3,
          1
        ],
        "output": [
          25,
          3,
          19,
          9,
          3,
          17,
          3,
          1,
          3
        ]
      },
      {
        "input": [
          6,
          20,
          50,
          3,
          3,
          3,
          32,
          23,
          19
        ],
        "output": [
          6,
          20,
          50,
          3,
          3,
          3,
          32,
          23,
          19,
          3
        ]
      }
    ]
  },
  {
    "id": "c181",
    "difficulty": 196,
    "function": "def c181(x):\n    # reverse the order of elements with even index\n    return [x[i] if i % 2 == 1 else x[-i-1] for i in range(len(x))]\n\n",
    "data": {
      "input": [
        96,
        58,
        42,
        85,
        16
      ],
      "output": [
        16,
        58,
        42,
        85,
        96
      ]
    },
    "demos": [
      {
        "input": [
          50,
          89,
          20,
          77,
          28,
          94
        ],
        "output": [
          94,
          89,
          77,
          77,
          89,
          94
        ]
      },
      {
        "input": [
          50,
          28,
          36,
          1,
          6,
          73,
          46,
          30
        ],
        "output": [
          30,
          28,
          73,
          1,
          1,
          73,
          28,
          30
        ]
      },
      {
        "input": [
          97,
          61,
          13,
          56,
          18,
          55,
          37,
          55
        ],
        "output": [
          55,
          61,
          55,
          56,
          56,
          55,
          61,
          55
        ]
      }
    ]
  },
  {
    "id": "c163",
    "difficulty": 197,
    "function": "def c163(x):\n    # replace each element M with 2 * M - 10\n    return [2*i-10 for i in x]\n\n",
    "data": {
      "input": [
        35,
        71,
        12,
        42,
        82,
        62,
        20
      ],
      "output": [
        60,
        132,
        14,
        74,
        154,
        114,
        30
      ]
    },
    "demos": [
      {
        "input": [
          28,
          27,
          80,
          58,
          12,
          75
        ],
        "output": [
          46,
          44,
          150,
          106,
          14,
          140
        ]
      },
      {
        "input": [
          85,
          26,
          32,
          25,
          27,
          14,
          13,
          39
        ],
        "output": [
          160,
          42,
          54,
          40,
          44,
          18,
          16,
          68
        ]
      },
      {
        "input": [
          87,
          32,
          74,
          74,
          69,
          35,
          81,
          45
        ],
        "output": [
          164,
          54,
          138,
          138,
          128,
          60,
          152,
          80
        ]
      }
    ]
  },
  {
    "id": "c154",
    "difficulty": 198,
    "function": "def c154(x):\n    # triple each even element\n    return [i*3 if i % 2 == 0 else i for i in x]\n\n",
    "data": {
      "input": [
        23,
        30,
        1,
        32,
        17
      ],
      "output": [
        23,
        90,
        1,
        96,
        17
      ]
    },
    "demos": [
      {
        "input": [
          23,
          15,
          9,
          8,
          11,
          26,
          31,
          3
        ],
        "output": [
          23,
          15,
          9,
          24,
          11,
          78,
          31,
          3
        ]
      },
      {
        "input": [
          19,
          23,
          18,
          18,
          19,
          8,
          17
        ],
        "output": [
          19,
          23,
          54,
          54,
          19,
          24,
          17
        ]
      },
      {
        "input": [
          1,
          15,
          28,
          1,
          18,
          14,
          1,
          32
        ],
        "output": [
          1,
          15,
          84,
          1,
          54,
          42,
          1,
          96
        ]
      }
    ]
  },
  {
    "id": "c166",
    "difficulty": 199,
    "function": "def c166(x):\n    # unique elements in ascending order by the sum of their digits\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = sum(map(int, str(i)))\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        96,
        71,
        64,
        64,
        64,
        28,
        36
      ],
      "output": [
        71,
        36,
        64,
        28,
        96
      ]
    },
    "demos": [
      {
        "input": [
          54,
          63,
          47,
          5,
          57
        ],
        "output": [
          5,
          54,
          63,
          47,
          57
        ]
      },
      {
        "input": [
          92,
          26,
          12,
          45,
          12,
          80,
          10,
          91
        ],
        "output": [
          10,
          12,
          26,
          80,
          45,
          91,
          92
        ]
      },
      {
        "input": [
          68,
          46,
          96,
          96,
          51,
          24,
          68
        ],
        "output": [
          51,
          24,
          46,
          68,
          96
        ]
      }
    ]
  },
  {
    "id": "c084",
    "difficulty": 200,
    "function": "def c084(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        99,
        62,
        77,
        11,
        68,
        27,
        40
      ],
      "output": [
        40
      ]
    },
    "demos": [
      {
        "input": [
          31,
          37,
          67,
          17,
          3,
          34,
          80,
          95,
          65
        ],
        "output": [
          80
        ]
      },
      {
        "input": [
          89,
          62,
          49,
          54,
          18,
          49,
          26,
          24,
          78,
          50
        ],
        "output": [
          26
        ]
      },
      {
        "input": [
          38,
          98,
          84,
          16,
          20,
          26,
          16,
          90
        ],
        "output": [
          16
        ]
      }
    ]
  },
  {
    "id": "c249",
    "difficulty": 201,
    "function": "def c249(x):\n    # use 0s to delimit sublists, give the first element of each sublist\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            if sublist:\n                res.append(sublist[0])\n                sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res.append(sublist[0])\n    return res\n\n",
    "data": {
      "input": [
        0,
        0,
        87,
        0,
        36,
        63,
        79,
        76,
        55,
        72,
        52
      ],
      "output": [
        87,
        36
      ]
    },
    "demos": [
      {
        "input": [
          29,
          0,
          30,
          0,
          22,
          77,
          92,
          60,
          35,
          32,
          0,
          79
        ],
        "output": [
          29,
          30,
          22,
          79
        ]
      },
      {
        "input": [
          4,
          46,
          99,
          0,
          11,
          41,
          34,
          99
        ],
        "output": [
          4,
          11
        ]
      },
      {
        "input": [
          83,
          0,
          16,
          35,
          39,
          63,
          50,
          98
        ],
        "output": [
          83,
          16
        ]
      }
    ]
  },
  {
    "id": "c118",
    "difficulty": 202,
    "function": "def c118(x):\n    # left rotate by N elements, N is the last element\n    return x[x[-1]:] + x[:x[-1]]\n\n",
    "data": {
      "input": [
        44,
        44,
        8,
        44,
        59,
        4
      ],
      "output": [
        59,
        4,
        44,
        44,
        8,
        44
      ]
    },
    "demos": [
      {
        "input": [
          44,
          36,
          95,
          15,
          1,
          37,
          1
        ],
        "output": [
          36,
          95,
          15,
          1,
          37,
          1,
          44
        ]
      },
      {
        "input": [
          69,
          89,
          28,
          46,
          1,
          23,
          39,
          1
        ],
        "output": [
          89,
          28,
          46,
          1,
          23,
          39,
          1,
          69
        ]
      },
      {
        "input": [
          91,
          34,
          96,
          25,
          93,
          72,
          1
        ],
        "output": [
          34,
          96,
          25,
          93,
          72,
          1,
          91
        ]
      }
    ]
  },
  {
    "id": "c152",
    "difficulty": 203,
    "function": "def c152(x):\n    # replace each element with the product of its digits\n    res = []\n    for i in x:\n        if i < 10:\n            res.append(0)\n        else:\n            res.append(int(str(i)[0]) * int(str(i)[1]))\n    return res\n\n",
    "data": {
      "input": [
        32,
        93,
        9,
        7,
        84,
        83,
        95
      ],
      "output": [
        6,
        27,
        0,
        0,
        32,
        24,
        45
      ]
    },
    "demos": [
      {
        "input": [
          91,
          44,
          34,
          35,
          90,
          24,
          67,
          71
        ],
        "output": [
          9,
          16,
          12,
          15,
          0,
          8,
          42,
          7
        ]
      },
      {
        "input": [
          18,
          96,
          30,
          91,
          58,
          52
        ],
        "output": [
          8,
          54,
          0,
          9,
          40,
          10
        ]
      },
      {
        "input": [
          72,
          99,
          82,
          63,
          71
        ],
        "output": [
          14,
          81,
          16,
          18,
          7
        ]
      }
    ]
  },
  {
    "id": "c237",
    "difficulty": 204,
    "function": "def c237(x):\n    # cumulative sum of unique elements\n    res = []\n    s = 0\n    for i in x:\n        if i not in res:\n            res.append(i)\n    for i in range(len(res)):\n        s += res[i]\n        res[i] = s\n    return res\n\n",
    "data": {
      "input": [
        7,
        27,
        25,
        12,
        25
      ],
      "output": [
        7,
        34,
        59,
        71
      ]
    },
    "demos": [
      {
        "input": [
          6,
          25,
          7,
          25,
          25,
          15,
          18
        ],
        "output": [
          6,
          31,
          38,
          53,
          71
        ]
      },
      {
        "input": [
          21,
          10,
          5,
          20,
          20,
          21
        ],
        "output": [
          21,
          31,
          36,
          56
        ]
      },
      {
        "input": [
          14,
          8,
          8,
          28,
          21,
          14,
          8,
          28
        ],
        "output": [
          14,
          22,
          50,
          71
        ]
      }
    ]
  },
  {
    "id": "c243",
    "difficulty": 205,
    "function": "def c243(x):\n    # number of odd elements\n    return [len([i for i in x if i % 2 == 1])]\n\n",
    "data": {
      "input": [
        51,
        44,
        23,
        56,
        76,
        10,
        21,
        25
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          51,
          88,
          12,
          70,
          64,
          83
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          46,
          82,
          51,
          74,
          55,
          55
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          11,
          7,
          11,
          41,
          62,
          98,
          84
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c188",
    "difficulty": 206,
    "function": "def c188(x):\n    # replace each element with 1 if it is divisible by 3, else replace with 0\n    return [1 if i % 3 == 0 else 0 for i in x]\n\n",
    "data": {
      "input": [
        91,
        91,
        26,
        69,
        83,
        82,
        19,
        55
      ],
      "output": [
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0
      ]
    },
    "demos": [
      {
        "input": [
          9,
          43,
          26,
          82,
          50,
          97,
          93
        ],
        "output": [
          1,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "input": [
          31,
          12,
          98,
          20,
          99,
          52
        ],
        "output": [
          0,
          1,
          0,
          0,
          1,
          0
        ]
      },
      {
        "input": [
          50,
          69,
          52,
          62,
          20,
          54
        ],
        "output": [
          0,
          1,
          0,
          0,
          0,
          1
        ]
      }
    ]
  },
  {
    "id": "c139",
    "difficulty": 207,
    "function": "def c139(x):\n    # remove all occurrences of the smallest element and the largest element\n    min_val = min(x)\n    max_val = max(x)\n    return [i for i in x if i != min_val and i != max_val]\n\n",
    "data": {
      "input": [
        0,
        7,
        1,
        1,
        5,
        2,
        2
      ],
      "output": [
        1,
        1,
        5,
        2,
        2
      ]
    },
    "demos": [
      {
        "input": [
          4,
          8,
          2,
          0,
          2
        ],
        "output": [
          4,
          2,
          2
        ]
      },
      {
        "input": [
          8,
          4,
          4,
          1,
          2,
          7,
          2
        ],
        "output": [
          4,
          4,
          2,
          7,
          2
        ]
      },
      {
        "input": [
          1,
          2,
          6,
          10,
          9,
          10
        ],
        "output": [
          2,
          6,
          9
        ]
      }
    ]
  },
  {
    "id": "c036",
    "difficulty": 208,
    "function": "def c036(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        6,
        3,
        8,
        10,
        0
      ],
      "output": [
        6,
        0,
        8,
        10,
        3
      ]
    },
    "demos": [
      {
        "input": [
          10,
          2,
          9,
          0,
          10,
          8
        ],
        "output": [
          10,
          2,
          0,
          9,
          10,
          8
        ]
      },
      {
        "input": [
          3,
          8,
          9,
          9,
          1,
          1,
          9,
          3
        ],
        "output": [
          3,
          1,
          9,
          9,
          8,
          1,
          9,
          3
        ]
      },
      {
        "input": [
          9,
          10,
          4,
          10,
          0,
          0,
          9
        ],
        "output": [
          9,
          0,
          4,
          10,
          10,
          0,
          9
        ]
      }
    ]
  },
  {
    "id": "c201",
    "difficulty": 209,
    "function": "def c201(x):\n    # elements > first element, followed by elements < first element\n    return [i for i in x if i > x[0]] + [i for i in x if i < x[0]]\n\n",
    "data": {
      "input": [
        95,
        16,
        26,
        87,
        2,
        8,
        45,
        21
      ],
      "output": [
        16,
        26,
        87,
        2,
        8,
        45,
        21
      ]
    },
    "demos": [
      {
        "input": [
          60,
          57,
          13,
          87,
          96
        ],
        "output": [
          87,
          96,
          57,
          13
        ]
      },
      {
        "input": [
          75,
          88,
          86,
          10,
          74,
          79
        ],
        "output": [
          88,
          86,
          79,
          10,
          74
        ]
      },
      {
        "input": [
          35,
          36,
          7,
          40,
          23,
          32,
          78
        ],
        "output": [
          36,
          40,
          78,
          7,
          23,
          32
        ]
      }
    ]
  },
  {
    "id": "c217",
    "difficulty": 210,
    "function": "def c217(x):\n    # elements in ascending order by ones digit\n    return sorted(x, key=lambda i: i % 10)\n\n",
    "data": {
      "input": [
        58,
        5,
        64,
        9,
        63,
        78
      ],
      "output": [
        63,
        64,
        5,
        58,
        78,
        9
      ]
    },
    "demos": [
      {
        "input": [
          17,
          59,
          17,
          0,
          70,
          72,
          1
        ],
        "output": [
          0,
          70,
          1,
          72,
          17,
          17,
          59
        ]
      },
      {
        "input": [
          20,
          84,
          15,
          25,
          17,
          28,
          43
        ],
        "output": [
          20,
          43,
          84,
          15,
          25,
          17,
          28
        ]
      },
      {
        "input": [
          65,
          18,
          99,
          18,
          76,
          44,
          21,
          28
        ],
        "output": [
          21,
          44,
          65,
          76,
          18,
          18,
          28,
          99
        ]
      }
    ]
  },
  {
    "id": "c005",
    "difficulty": 211,
    "function": "def c005(x):\n    # remove all but element N + 1, N is the first element\n    return [x[x[0]+1]]\n\n",
    "data": {
      "input": [
        0,
        4,
        39,
        22,
        49,
        22
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          0,
          16,
          46,
          77,
          34,
          93
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          2,
          96,
          32,
          44,
          82
        ],
        "output": [
          44
        ]
      },
      {
        "input": [
          6,
          65,
          46,
          78,
          11,
          81,
          5,
          40
        ],
        "output": [
          40
        ]
      }
    ]
  },
  {
    "id": "c063",
    "difficulty": 213,
    "function": "def c063(x):\n    # remove the first N + 1 elements, N is the first element\n    return x[x[0]+1:]\n\n",
    "data": {
      "input": [
        0,
        10,
        10,
        5,
        3
      ],
      "output": [
        10,
        10,
        5,
        3
      ]
    },
    "demos": [
      {
        "input": [
          2,
          6,
          8,
          4,
          3
        ],
        "output": [
          4,
          3
        ]
      },
      {
        "input": [
          3,
          1,
          10,
          0,
          8,
          3
        ],
        "output": [
          8,
          3
        ]
      },
      {
        "input": [
          0,
          3,
          3,
          6,
          0
        ],
        "output": [
          3,
          3,
          6,
          0
        ]
      }
    ]
  },
  {
    "id": "c141",
    "difficulty": 214,
    "function": "def c141(x):\n    # replace element M + 2 with N, M = element 0, N = element 1; remove elements 0 and 1\n    x[x[0]+2] = x[1]\n    return x[2:]\n\n",
    "data": {
      "input": [
        1,
        6,
        8,
        7,
        8
      ],
      "output": [
        8,
        6,
        8
      ]
    },
    "demos": [
      {
        "input": [
          1,
          7,
          0,
          7,
          7
        ],
        "output": [
          0,
          7,
          7
        ]
      },
      {
        "input": [
          0,
          6,
          0,
          0,
          4,
          8
        ],
        "output": [
          6,
          0,
          4,
          8
        ]
      },
      {
        "input": [
          2,
          4,
          0,
          10,
          2,
          3,
          6,
          9
        ],
        "output": [
          0,
          10,
          4,
          3,
          6,
          9
        ]
      }
    ]
  },
  {
    "id": "c089",
    "difficulty": 215,
    "function": "def c089(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        40,
        75,
        77,
        29,
        21,
        84
      ],
      "output": [
        40,
        75,
        29,
        77,
        21,
        84
      ]
    },
    "demos": [
      {
        "input": [
          55,
          69,
          60,
          1,
          33,
          98,
          74
        ],
        "output": [
          55,
          69,
          1,
          60,
          33,
          98,
          74
        ]
      },
      {
        "input": [
          52,
          19,
          70,
          77,
          38,
          41,
          17
        ],
        "output": [
          52,
          38,
          70,
          77,
          19,
          41,
          17
        ]
      },
      {
        "input": [
          65,
          83,
          47,
          62,
          80
        ],
        "output": [
          65,
          80,
          47,
          62,
          83
        ]
      }
    ]
  },
  {
    "id": "c124",
    "difficulty": 216,
    "function": "def c124(x):\n    # element M, M = element N, N = element 0\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        5,
        8,
        7,
        7,
        5,
        6,
        9,
        3,
        1,
        5
      ],
      "output": [
        6
      ]
    },
    "demos": [
      {
        "input": [
          4,
          4,
          3,
          4,
          5,
          9,
          0,
          0,
          0,
          1
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          3,
          9,
          8,
          3,
          7,
          7,
          5,
          3,
          4,
          4
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          7,
          5,
          5,
          3,
          9,
          0,
          3,
          7,
          1,
          9
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c216",
    "difficulty": 217,
    "function": "def c216(x):\n    # elements in ascending order by tens digit\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append([i, int(str(i)[-2])])\n        else:\n            res.append([i, 0])\n    return [i[0] for i in sorted(res, key=lambda i: i[1])]\n\n",
    "data": {
      "input": [
        42,
        95,
        82,
        99,
        96
      ],
      "output": [
        42,
        82,
        95,
        99,
        96
      ]
    },
    "demos": [
      {
        "input": [
          46,
          13,
          71,
          30,
          40
        ],
        "output": [
          13,
          30,
          46,
          40,
          71
        ]
      },
      {
        "input": [
          20,
          48,
          79,
          43,
          91,
          43
        ],
        "output": [
          20,
          48,
          43,
          43,
          79,
          91
        ]
      },
      {
        "input": [
          61,
          8,
          27,
          30,
          57,
          97
        ],
        "output": [
          8,
          27,
          30,
          57,
          61,
          97
        ]
      }
    ]
  },
  {
    "id": "c143",
    "difficulty": 218,
    "function": "def c143(x):\n    # replace every occurrence of the largest element with the smallest element\n    max_val = max(x)\n    min_val = min(x)\n    return [min_val if i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        2,
        4,
        10,
        5,
        0,
        2,
        7
      ],
      "output": [
        2,
        4,
        0,
        5,
        0,
        2,
        7
      ]
    },
    "demos": [
      {
        "input": [
          8,
          7,
          6,
          0,
          8,
          8
        ],
        "output": [
          0,
          7,
          6,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          2,
          10,
          6,
          10,
          5
        ],
        "output": [
          2,
          2,
          6,
          2,
          5
        ]
      },
      {
        "input": [
          1,
          5,
          6,
          3,
          10,
          4,
          0,
          7
        ],
        "output": [
          1,
          5,
          6,
          3,
          0,
          4,
          0,
          7
        ]
      }
    ]
  },
  {
    "id": "c215",
    "difficulty": 219,
    "function": "def c215(x):\n    # elements in ascending order by hundreds digit\n    res = {}\n    for i in x:\n        if len(str(i)) > 2:\n            res[i] = int(str(i)[-3])\n        else:\n            res[i] = 0\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        908,
        897,
        950,
        44,
        117,
        177,
        340,
        821
      ],
      "output": [
        44,
        117,
        177,
        340,
        897,
        821,
        908,
        950
      ]
    },
    "demos": [
      {
        "input": [
          690,
          937,
          267,
          250,
          56,
          807
        ],
        "output": [
          56,
          267,
          250,
          690,
          807,
          937
        ]
      },
      {
        "input": [
          173,
          726,
          14,
          89,
          789
        ],
        "output": [
          14,
          89,
          173,
          726,
          789
        ]
      },
      {
        "input": [
          843,
          467,
          16,
          432,
          944,
          424,
          439,
          656
        ],
        "output": [
          16,
          467,
          432,
          424,
          439,
          656,
          843,
          944
        ]
      }
    ]
  },
  {
    "id": "c144",
    "difficulty": 220,
    "function": "def c144(x):\n    # replace every occurrence of the largest or smallest element with their absolute difference\n    max_val = max(x)\n    min_val = min(x)\n    return [abs(min_val - max_val) if i == min_val or i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        67,
        41,
        79
      ],
      "output": [
        67,
        38,
        38
      ]
    },
    "demos": [
      {
        "input": [
          39
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          7,
          71,
          44
        ],
        "output": [
          64,
          64,
          44
        ]
      },
      {
        "input": [
          4,
          19,
          95
        ],
        "output": [
          91,
          19,
          91
        ]
      }
    ]
  },
  {
    "id": "c128",
    "difficulty": 221,
    "function": "def c128(x):\n    # elements in ascending order after removing elements 0,1,and 4\n    x = x[2:4] + x[5:]\n    return sorted(x)\n\n",
    "data": {
      "input": [
        42,
        79,
        61,
        48,
        65
      ],
      "output": [
        48,
        61
      ]
    },
    "demos": [
      {
        "input": [
          37,
          24,
          33,
          34,
          64,
          39
        ],
        "output": [
          33,
          34,
          39
        ]
      },
      {
        "input": [
          53,
          65,
          30,
          30,
          90,
          26
        ],
        "output": [
          26,
          30,
          30
        ]
      },
      {
        "input": [
          19,
          65,
          61,
          12,
          86,
          98,
          5,
          43
        ],
        "output": [
          5,
          12,
          43,
          61,
          98
        ]
      }
    ]
  },
  {
    "id": "c208",
    "difficulty": 222,
    "function": "def c208(x):\n    # keep only last N elements, N is the last element\n    return x[-x[-1]:]\n\n",
    "data": {
      "input": [
        8,
        7,
        5,
        10,
        9,
        4,
        4
      ],
      "output": [
        10,
        9,
        4,
        4
      ]
    },
    "demos": [
      {
        "input": [
          9,
          7,
          1,
          6,
          4,
          3,
          3,
          5
        ],
        "output": [
          6,
          4,
          3,
          3,
          5
        ]
      },
      {
        "input": [
          2,
          9,
          6,
          8,
          7,
          1
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          1,
          9,
          3,
          9,
          1,
          7,
          3
        ],
        "output": [
          1,
          7,
          3
        ]
      }
    ]
  },
  {
    "id": "c035",
    "difficulty": 223,
    "function": "def c035(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        8,
        6,
        1,
        10,
        10,
        4,
        9,
        4
      ],
      "output": [
        8,
        1,
        6,
        10,
        10,
        4,
        9,
        4
      ]
    },
    "demos": [
      {
        "input": [
          0,
          3,
          3,
          6,
          8,
          7
        ],
        "output": [
          6,
          3,
          3,
          0,
          8,
          7
        ]
      },
      {
        "input": [
          10,
          1,
          7,
          7,
          3,
          2,
          0,
          10
        ],
        "output": [
          10,
          7,
          1,
          7,
          3,
          2,
          0,
          10
        ]
      },
      {
        "input": [
          4,
          6,
          6,
          4,
          10,
          5
        ],
        "output": [
          4,
          6,
          6,
          4,
          10,
          5
        ]
      }
    ]
  },
  {
    "id": "c214",
    "difficulty": 224,
    "function": "def c214(x):\n    # remove elements 0 and N + 1, N is the first element\n    x = x[1:x[0]+1] + x[x[0]+2:]\n    return x\n\n",
    "data": {
      "input": [
        4,
        5,
        74,
        89,
        27,
        1
      ],
      "output": [
        5,
        74,
        89,
        27
      ]
    },
    "demos": [
      {
        "input": [
          0,
          78,
          43,
          14,
          61,
          28,
          69,
          63
        ],
        "output": [
          43,
          14,
          61,
          28,
          69,
          63
        ]
      },
      {
        "input": [
          1,
          46,
          66,
          37,
          29,
          3,
          24,
          62
        ],
        "output": [
          46,
          37,
          29,
          3,
          24,
          62
        ]
      },
      {
        "input": [
          1,
          13,
          45,
          3,
          1,
          72,
          85
        ],
        "output": [
          13,
          3,
          1,
          72,
          85
        ]
      }
    ]
  },
  {
    "id": "c130",
    "difficulty": 225,
    "function": "def c130(x):\n    # elements 1 through N + 1, N = element 0\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        4,
        15,
        88,
        28,
        47,
        7,
        36,
        17
      ],
      "output": [
        15,
        88,
        28,
        47
      ]
    },
    "demos": [
      {
        "input": [
          7,
          9,
          84,
          7,
          36,
          16,
          35,
          15
        ],
        "output": [
          9,
          84,
          7,
          36,
          16,
          35,
          15
        ]
      },
      {
        "input": [
          0,
          22,
          53,
          13,
          4,
          59,
          91,
          31
        ],
        "output": []
      },
      {
        "input": [
          2,
          14,
          55,
          95,
          35,
          54
        ],
        "output": [
          14,
          55
        ]
      }
    ]
  },
  {
    "id": "c159",
    "difficulty": 226,
    "function": "def c159(x):\n    # element N counts the number of occurrences of N, up to the largest element\n    out = []\n    for i, j in enumerate(range(max(x)+1)):\n        out.append(x.count(j))\n    return out\n\n",
    "data": {
      "input": [
        2,
        9,
        4,
        5,
        7,
        8,
        9,
        4,
        9
      ],
      "output": [
        0,
        0,
        1,
        0,
        2,
        1,
        0,
        1,
        1,
        3
      ]
    },
    "demos": [
      {
        "input": [
          9,
          1,
          1,
          9,
          0,
          5,
          7,
          8
        ],
        "output": [
          1,
          2,
          0,
          0,
          0,
          1,
          0,
          1,
          1,
          2
        ]
      },
      {
        "input": [
          3,
          9,
          0,
          3,
          8,
          4,
          7,
          5
        ],
        "output": [
          1,
          0,
          0,
          2,
          1,
          1,
          0,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          8,
          0,
          3,
          7,
          7,
          3
        ],
        "output": [
          1,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          1
        ]
      }
    ]
  },
  {
    "id": "c205",
    "difficulty": 227,
    "function": "def c205(x):\n    # product of elements divisible by 4\n    res = 1\n    for i in x:\n        if i % 4 == 0:\n            res *= i\n    return [res]\n\n",
    "data": {
      "input": [
        12,
        15,
        6,
        19,
        4,
        15
      ],
      "output": [
        48
      ]
    },
    "demos": [
      {
        "input": [
          17,
          10,
          2,
          18,
          7,
          7
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          5,
          17,
          13,
          4,
          10,
          9,
          13
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          10,
          12,
          8,
          15,
          7,
          1
        ],
        "output": [
          96
        ]
      }
    ]
  },
  {
    "id": "c076",
    "difficulty": 228,
    "function": "def c076(x):\n    # the max, last, length, first, and min elements\n    return [max(x), x[-1], len(x), x[0], min(x)]\n\n",
    "data": {
      "input": [
        96,
        52,
        52,
        17,
        50,
        86,
        59,
        89
      ],
      "output": [
        96,
        89,
        8,
        96,
        17
      ]
    },
    "demos": [
      {
        "input": [
          0,
          12,
          60,
          16,
          88,
          5,
          26,
          61
        ],
        "output": [
          88,
          61,
          8,
          0,
          0
        ]
      },
      {
        "input": [
          85,
          59,
          59,
          30,
          57,
          13
        ],
        "output": [
          85,
          13,
          6,
          85,
          13
        ]
      },
      {
        "input": [
          63,
          61,
          89,
          50,
          74,
          20,
          87
        ],
        "output": [
          89,
          87,
          7,
          63,
          20
        ]
      }
    ]
  },
  {
    "id": "c250",
    "difficulty": 229,
    "function": "def c250(x):\n    # use 0s to delimit sublists, concatenate reversed sublists\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            res += sublist[::-1]\n            sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res += sublist[::-1]\n    return res\n\n",
    "data": {
      "input": [
        26,
        63,
        0,
        30,
        0,
        50,
        75,
        0,
        70
      ],
      "output": [
        63,
        26,
        30,
        75,
        50,
        70
      ]
    },
    "demos": [
      {
        "input": [
          72,
          42,
          26,
          14,
          57,
          16,
          0,
          35,
          8
        ],
        "output": [
          16,
          57,
          14,
          26,
          42,
          72,
          8,
          35
        ]
      },
      {
        "input": [
          91,
          22,
          75,
          63,
          0,
          27,
          29,
          0,
          0,
          65,
          77
        ],
        "output": [
          63,
          75,
          22,
          91,
          29,
          27,
          77,
          65
        ]
      },
      {
        "input": [
          73,
          86,
          0,
          34,
          73,
          0,
          72,
          3,
          0,
          54,
          46
        ],
        "output": [
          86,
          73,
          73,
          34,
          3,
          72,
          46,
          54
        ]
      }
    ]
  },
  {
    "id": "c186",
    "difficulty": 230,
    "function": "def c186(x):\n    # keep only elements greater than element 0\n    return [i for i in x if i > x[0]]\n\n",
    "data": {
      "input": [
        25,
        43,
        10,
        40,
        90,
        34,
        16,
        85
      ],
      "output": [
        43,
        40,
        90,
        34,
        85
      ]
    },
    "demos": [
      {
        "input": [
          36,
          31,
          29,
          78,
          87,
          62,
          12
        ],
        "output": [
          78,
          87,
          62
        ]
      },
      {
        "input": [
          30,
          35,
          30,
          4,
          66,
          67
        ],
        "output": [
          35,
          66,
          67
        ]
      },
      {
        "input": [
          76,
          90,
          30,
          89,
          52,
          60,
          97
        ],
        "output": [
          90,
          89,
          97
        ]
      }
    ]
  },
  {
    "id": "c242",
    "difficulty": 231,
    "function": "def c242(x):\n    # take the largest unique element, append the second largest unique element, prepend the third largest unique element, append the fourth largest unique element, and so on\n    unique = sorted(set(x), reverse=True)\n    res = [max(unique)]\n    unique.remove(max(unique))\n    for i in range(len(unique)):\n        if i % 2 == 0:\n            res.append(unique[i])\n        else:\n            res.insert(0, unique[i])\n    return res\n\n",
    "data": {
      "input": [
        5,
        8,
        4,
        1,
        4,
        8,
        2
      ],
      "output": [
        1,
        4,
        8,
        5,
        2
      ]
    },
    "demos": [
      {
        "input": [
          6,
          7,
          6,
          9,
          4,
          2
        ],
        "output": [
          2,
          6,
          9,
          7,
          4
        ]
      },
      {
        "input": [
          6,
          2,
          9,
          2,
          3,
          2,
          6,
          7
        ],
        "output": [
          2,
          6,
          9,
          7,
          3
        ]
      },
      {
        "input": [
          1,
          7,
          6,
          6,
          4,
          8
        ],
        "output": [
          1,
          6,
          8,
          7,
          4
        ]
      }
    ]
  },
  {
    "id": "c160",
    "difficulty": 232,
    "function": "def c160(x):\n    # replace each element with 99 - element\n    return [99-i for i in x]\n\n",
    "data": {
      "input": [
        97,
        47,
        97,
        40,
        7,
        6,
        86
      ],
      "output": [
        2,
        52,
        2,
        59,
        92,
        93,
        13
      ]
    },
    "demos": [
      {
        "input": [
          92,
          83,
          57,
          44,
          79,
          15,
          61,
          3
        ],
        "output": [
          7,
          16,
          42,
          55,
          20,
          84,
          38,
          96
        ]
      },
      {
        "input": [
          97,
          94,
          36,
          36,
          50,
          59,
          16,
          36
        ],
        "output": [
          2,
          5,
          63,
          63,
          49,
          40,
          83,
          63
        ]
      },
      {
        "input": [
          49,
          16,
          91,
          4,
          38,
          23,
          87,
          75
        ],
        "output": [
          50,
          83,
          8,
          95,
          61,
          76,
          12,
          24
        ]
      }
    ]
  },
  {
    "id": "c167",
    "difficulty": 233,
    "function": "def c167(x):\n    # keep only elements divisible by 3\n    return [i for i in x if i % 3 == 0]\n\n",
    "data": {
      "input": [
        81,
        48,
        56,
        20,
        80,
        82,
        48
      ],
      "output": [
        81,
        48,
        48
      ]
    },
    "demos": [
      {
        "input": [
          54,
          52,
          4,
          8,
          39,
          61,
          41,
          0
        ],
        "output": [
          54,
          39,
          0
        ]
      },
      {
        "input": [
          82,
          3,
          4,
          68,
          56,
          5,
          94,
          54
        ],
        "output": [
          3,
          54
        ]
      },
      {
        "input": [
          8,
          66,
          5,
          79,
          52,
          35,
          46
        ],
        "output": [
          66
        ]
      }
    ]
  },
  {
    "id": "c202",
    "difficulty": 234,
    "function": "def c202(x):\n    # the indices of every even number\n    return [i for i, j in enumerate(x) if j % 2 == 0]\n\n\n",
    "data": {
      "input": [
        28,
        57,
        64,
        9,
        80,
        20
      ],
      "output": [
        0,
        2,
        4,
        5
      ]
    },
    "demos": [
      {
        "input": [
          55,
          12,
          72,
          2,
          21,
          66,
          82,
          60
        ],
        "output": [
          1,
          2,
          3,
          5,
          6,
          7
        ]
      },
      {
        "input": [
          16,
          72,
          43,
          60,
          59,
          48,
          31,
          27
        ],
        "output": [
          0,
          1,
          3,
          5
        ]
      },
      {
        "input": [
          14,
          88,
          19,
          15,
          28,
          6,
          27
        ],
        "output": [
          0,
          1,
          4,
          5
        ]
      }
    ]
  },
  {
    "id": "c129",
    "difficulty": 235,
    "function": "def c129(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        4,
        4,
        67,
        98,
        84,
        76,
        7,
        97,
        23,
        71
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          2,
          4,
          4,
          26,
          67,
          66,
          74,
          51
        ],
        "output": [
          67,
          66
        ]
      },
      {
        "input": [
          2,
          1,
          2,
          33,
          38,
          45,
          26
        ],
        "output": []
      },
      {
        "input": [
          6,
          7,
          66,
          74,
          24,
          90,
          25,
          12,
          39
        ],
        "output": [
          39
        ]
      }
    ]
  },
  {
    "id": "c221",
    "difficulty": 236,
    "function": "def c221(x):\n    # sum of even elements\n    return [sum(i for i in x if i % 2 == 0)]\n\n",
    "data": {
      "input": [
        3,
        43,
        10,
        5,
        35,
        9,
        25
      ],
      "output": [
        10
      ]
    },
    "demos": [
      {
        "input": [
          31,
          37,
          5,
          5,
          38,
          42,
          49
        ],
        "output": [
          80
        ]
      },
      {
        "input": [
          21,
          36,
          11,
          30,
          0,
          43,
          27,
          4
        ],
        "output": [
          70
        ]
      },
      {
        "input": [
          32,
          25,
          1,
          24,
          9,
          42,
          3
        ],
        "output": [
          98
        ]
      }
    ]
  },
  {
    "id": "c131",
    "difficulty": 237,
    "function": "def c131(x):\n    # keep only elements whose tens digit is even\n    res = []\n    for i in x:\n        if len(str(i)) < 2:\n            res.append(i)\n        elif int(str(i)[-2]) % 2 == 0:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        83,
        79,
        29,
        64,
        43,
        2,
        82,
        39
      ],
      "output": [
        83,
        29,
        64,
        43,
        2,
        82
      ]
    },
    "demos": [
      {
        "input": [
          33,
          85,
          33,
          99,
          24,
          17,
          81,
          8
        ],
        "output": [
          85,
          24,
          81,
          8
        ]
      },
      {
        "input": [
          10,
          57,
          2,
          79,
          59,
          36,
          49,
          70
        ],
        "output": [
          2,
          49
        ]
      },
      {
        "input": [
          51,
          81,
          97,
          35,
          98,
          89,
          70
        ],
        "output": [
          81,
          89
        ]
      }
    ]
  },
  {
    "id": "c180",
    "difficulty": 238,
    "function": "def c180(x):\n    # take the smallest element, append the second smallest element, prepend the third smallest element, append the fourth smallest element, and so on\n    sorted_x = sorted(x)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        81,
        77,
        48,
        88,
        96,
        80,
        92,
        82
      ],
      "output": [
        92,
        82,
        80,
        48,
        77,
        81,
        88,
        96
      ]
    },
    "demos": [
      {
        "input": [
          46,
          60,
          9,
          64,
          33,
          99,
          44,
          48
        ],
        "output": [
          64,
          48,
          44,
          9,
          33,
          46,
          60,
          99
        ]
      },
      {
        "input": [
          35,
          63,
          85,
          81,
          33,
          91
        ],
        "output": [
          85,
          63,
          33,
          35,
          81,
          91
        ]
      },
      {
        "input": [
          28,
          2,
          8,
          12,
          73,
          71,
          94,
          97
        ],
        "output": [
          94,
          71,
          12,
          2,
          8,
          28,
          73,
          97
        ]
      }
    ]
  },
  {
    "id": "c015",
    "difficulty": 239,
    "function": "def c015(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        1,
        5,
        7,
        8,
        8,
        2
      ],
      "output": [
        8,
        8,
        2
      ]
    },
    "demos": [
      {
        "input": [
          1,
          5,
          6,
          4,
          15,
          6,
          10,
          3,
          2
        ],
        "output": [
          4,
          15,
          6,
          10
        ]
      },
      {
        "input": [
          3,
          5,
          13,
          3,
          9,
          8,
          15,
          6
        ],
        "output": [
          8,
          15
        ]
      },
      {
        "input": [
          0,
          3,
          3,
          1,
          8,
          10
        ],
        "output": [
          3,
          1,
          8
        ]
      }
    ]
  },
  {
    "id": "c179",
    "difficulty": 240,
    "function": "def c179(x):\n    # take the largest element, append the second largest element, prepend the third largest element, append the fourth largest element, and so on\n    sorted_x = sorted(x, reverse=True)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        92,
        48,
        75,
        14,
        3,
        44,
        36,
        56
      ],
      "output": [
        14,
        44,
        56,
        92,
        75,
        48,
        36,
        3
      ]
    },
    "demos": [
      {
        "input": [
          10,
          59,
          88,
          59,
          56,
          18
        ],
        "output": [
          18,
          59,
          88,
          59,
          56,
          10
        ]
      },
      {
        "input": [
          60,
          67,
          85,
          36,
          52,
          15
        ],
        "output": [
          36,
          60,
          85,
          67,
          52,
          15
        ]
      },
      {
        "input": [
          31,
          48,
          44,
          53,
          5,
          70,
          59
        ],
        "output": [
          5,
          44,
          53,
          70,
          59,
          48,
          31
        ]
      }
    ]
  },
  {
    "id": "c226",
    "difficulty": 241,
    "function": "def c226(x):\n    # remove first M and last N elements, M is the first element, N is the last element\n    if x[-1] == 0:\n        return x[x[0]:]\n    return x[x[0]:-x[-1]]\n\n",
    "data": {
      "input": [
        5,
        15,
        0,
        0,
        11,
        2,
        0
      ],
      "output": [
        2,
        0
      ]
    },
    "demos": [
      {
        "input": [
          4,
          9,
          13,
          11,
          0,
          7,
          10,
          11,
          8,
          1
        ],
        "output": [
          0,
          7,
          10,
          11,
          8
        ]
      },
      {
        "input": [
          2,
          6,
          5,
          12,
          9,
          3
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          5,
          12,
          7,
          0,
          15,
          9,
          15,
          1,
          10,
          1
        ],
        "output": [
          9,
          15,
          1,
          10
        ]
      }
    ]
  },
  {
    "id": "c134",
    "difficulty": 242,
    "function": "def c134(x):\n    # remove elements M through N, M is the first element, N is the second element\n    return x[:x[0]] + x[x[1]+1:]\n\n",
    "data": {
      "input": [
        1,
        6,
        9,
        12,
        8,
        14,
        8,
        11,
        14,
        6
      ],
      "output": [
        1,
        11,
        14,
        6
      ]
    },
    "demos": [
      {
        "input": [
          0,
          1,
          13,
          3,
          0,
          6,
          2,
          13
        ],
        "output": [
          13,
          3,
          0,
          6,
          2,
          13
        ]
      },
      {
        "input": [
          2,
          6,
          15,
          10,
          10,
          3,
          10,
          12,
          11,
          14
        ],
        "output": [
          2,
          6,
          12,
          11,
          14
        ]
      },
      {
        "input": [
          3,
          7,
          6,
          11,
          7,
          15,
          4,
          1
        ],
        "output": [
          3,
          7,
          6
        ]
      }
    ]
  },
  {
    "id": "c164",
    "difficulty": 243,
    "function": "def c164(x):\n    # replace each element M with M // 4 + 5\n    return [i//4+5 for i in x]\n\n",
    "data": {
      "input": [
        75,
        27,
        67,
        33,
        57,
        45,
        20,
        55
      ],
      "output": [
        23,
        11,
        21,
        13,
        19,
        16,
        10,
        18
      ]
    },
    "demos": [
      {
        "input": [
          70,
          76,
          11,
          88,
          25,
          93
        ],
        "output": [
          22,
          24,
          7,
          27,
          11,
          28
        ]
      },
      {
        "input": [
          57,
          10,
          57,
          73,
          81,
          25
        ],
        "output": [
          19,
          7,
          19,
          23,
          25,
          11
        ]
      },
      {
        "input": [
          51,
          27,
          33,
          11,
          59,
          21,
          0,
          22
        ],
        "output": [
          17,
          11,
          13,
          7,
          19,
          10,
          5,
          10
        ]
      }
    ]
  },
  {
    "id": "c178",
    "difficulty": 244,
    "function": "def c178(x):\n    # keep only elements followed by an even number\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] % 2 == 0:\n            res.append(x[i])\n    return res \n\n",
    "data": {
      "input": [
        86,
        19,
        64,
        67,
        94,
        77,
        93,
        23
      ],
      "output": [
        19,
        67
      ]
    },
    "demos": [
      {
        "input": [
          27,
          37,
          58,
          13,
          33,
          71
        ],
        "output": [
          37
        ]
      },
      {
        "input": [
          59,
          99,
          76,
          99,
          7,
          94,
          41,
          67
        ],
        "output": [
          99,
          7
        ]
      },
      {
        "input": [
          80,
          68,
          66,
          24,
          4,
          97
        ],
        "output": [
          80,
          68,
          66,
          24
        ]
      }
    ]
  },
  {
    "id": "c113",
    "difficulty": 245,
    "function": "def c113(x):\n    # keep only elements whose ones digit is greater than the first element\n    res = []\n    for i in x:\n        if i % 10 > x[0]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        5,
        49,
        19,
        15,
        11,
        35,
        3,
        39,
        16,
        4
      ],
      "output": [
        49,
        19,
        39,
        16
      ]
    },
    "demos": [
      {
        "input": [
          7,
          32,
          6,
          19,
          44,
          45,
          31,
          12,
          26,
          33
        ],
        "output": [
          19
        ]
      },
      {
        "input": [
          7,
          9,
          27,
          42,
          30,
          25,
          15,
          25,
          36,
          28
        ],
        "output": [
          9,
          28
        ]
      },
      {
        "input": [
          0,
          4,
          31,
          28,
          10,
          39,
          18,
          34
        ],
        "output": [
          4,
          31,
          28,
          39,
          18,
          34
        ]
      }
    ]
  },
  {
    "id": "c206",
    "difficulty": 246,
    "function": "def c206(x):\n    # keep only elements whose value is between the first and second element\n    return [i for i in x if x[0] < i < x[1]]\n\n",
    "data": {
      "input": [
        2,
        57,
        2,
        41,
        46,
        9,
        32
      ],
      "output": [
        41,
        46,
        9,
        32
      ]
    },
    "demos": [
      {
        "input": [
          5,
          52,
          49,
          19,
          5,
          22,
          16,
          25,
          0
        ],
        "output": [
          49,
          19,
          22,
          16,
          25
        ]
      },
      {
        "input": [
          6,
          12,
          20,
          46,
          46,
          7,
          1
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          1,
          31,
          5,
          22,
          9,
          23
        ],
        "output": [
          5,
          22,
          9,
          23
        ]
      }
    ]
  },
  {
    "id": "c210",
    "difficulty": 247,
    "function": "def c210(x):\n    # unique elements with last element inserted at index M, where M is the first element\n    unique = []\n    for i in x:\n        if i not in unique:\n            unique.append(i)\n    unique.insert(x[0], x[-1])\n    return unique\n\n",
    "data": {
      "input": [
        1,
        2,
        2,
        7,
        1,
        4,
        0,
        2
      ],
      "output": [
        1,
        2,
        2,
        7,
        4,
        0
      ]
    },
    "demos": [
      {
        "input": [
          4,
          3,
          8,
          3,
          9,
          8,
          6
        ],
        "output": [
          4,
          3,
          8,
          9,
          6,
          6
        ]
      },
      {
        "input": [
          1,
          7,
          9,
          6,
          4,
          2,
          3
        ],
        "output": [
          1,
          3,
          7,
          9,
          6,
          4,
          2,
          3
        ]
      },
      {
        "input": [
          3,
          3,
          8,
          7,
          9
        ],
        "output": [
          3,
          8,
          7,
          9,
          9
        ]
      }
    ]
  },
  {
    "id": "c158",
    "difficulty": 248,
    "function": "def c158(x):\n    # replace each element with 1 if element N equals N, else 0\n    res = []\n    for i, j in enumerate(x):\n        if i == j:\n            res.append(1)\n        else:\n            res.append(0)\n    return res\n\n",
    "data": {
      "input": [
        8,
        1,
        1,
        3,
        4,
        2,
        6,
        7
      ],
      "output": [
        0,
        1,
        0,
        1,
        1,
        0,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          0,
          1,
          6,
          3,
          6,
          5,
          6,
          7,
          8,
          9
        ],
        "output": [
          1,
          1,
          0,
          1,
          0,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          6,
          7,
          8,
          3,
          4,
          3,
          6,
          4,
          8,
          9
        ],
        "output": [
          0,
          0,
          0,
          1,
          1,
          0,
          1,
          0,
          1,
          1
        ]
      },
      {
        "input": [
          0,
          1,
          1,
          5,
          1,
          5,
          0,
          4,
          7
        ],
        "output": [
          1,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0
        ]
      }
    ]
  },
  {
    "id": "c183",
    "difficulty": 249,
    "function": "def c183(x):\n    # list the index of second elements and following equal to first element\n    res = []\n    for i in range(1, len(x)):\n        if x[i] == x[0]:\n            res.append(i)\n    return res",
    "data": {
      "input": [
        10,
        10,
        1,
        10,
        10,
        5,
        10,
        10
      ],
      "output": [
        1,
        3,
        4,
        6,
        7
      ]
    },
    "demos": [
      {
        "input": [
          13,
          3,
          10,
          13,
          15,
          3,
          11,
          13,
          0
        ],
        "output": [
          3,
          7
        ]
      },
      {
        "input": [
          8,
          8,
          13,
          10,
          2,
          15
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          6,
          5,
          8,
          6,
          12,
          6,
          6
        ],
        "output": [
          3,
          5,
          6
        ]
      }
    ]
  },
  {
    "id": "c014",
    "difficulty": 157,
    "function": "def c014(x):\n    # remove all but elements 2 through 5\n    return x[2:5]\n\n",
    "data": {
      "input": [
        42,
        76,
        32,
        90,
        96,
        7
      ],
      "output": [
        32,
        90,
        96
      ]
    },
    "demos": [
      {
        "input": [
          29,
          35,
          46,
          5,
          63,
          5
        ],
        "output": [
          46,
          5,
          63
        ]
      },
      {
        "input": [
          27,
          38,
          37,
          92,
          77,
          95,
          16
        ],
        "output": [
          37,
          92,
          77
        ]
      },
      {
        "input": [
          71,
          36,
          3,
          28,
          62,
          91,
          23,
          99
        ],
        "output": [
          3,
          28,
          62
        ]
      }
    ]
  },
  {
    "id": "c098",
    "difficulty": 86,
    "function": "def c098(x):\n    # add the index to each element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        6,
        8,
        0,
        0,
        9,
        2,
        8,
        9
      ],
      "output": [
        6,
        9,
        2,
        3,
        13,
        7,
        14,
        16
      ]
    },
    "demos": [
      {
        "input": [
          3,
          6,
          0,
          9,
          6,
          7,
          8,
          9
        ],
        "output": [
          3,
          7,
          2,
          12,
          10,
          12,
          14,
          16
        ]
      },
      {
        "input": [
          7,
          5,
          6,
          1,
          0,
          1,
          6,
          8
        ],
        "output": [
          7,
          6,
          8,
          4,
          4,
          6,
          12,
          15
        ]
      },
      {
        "input": [
          0,
          9,
          3,
          4,
          6,
          8,
          5
        ],
        "output": [
          0,
          10,
          5,
          7,
          10,
          13,
          11
        ]
      }
    ]
  },
  {
    "id": "c209",
    "difficulty": 212,
    "function": "def c209(x):\n    # elements in ascending order, insert sum of smallest and largest element at index 3\n    x = sorted(x)\n    x.insert(3, x[0] + x[-1])\n    return x\n\n",
    "data": {
      "input": [
        22,
        7,
        17,
        16,
        14
      ],
      "output": [
        7,
        14,
        16,
        29,
        17,
        22
      ]
    },
    "demos": [
      {
        "input": [
          11,
          11,
          12,
          21,
          14,
          19,
          25
        ],
        "output": [
          11,
          11,
          12,
          36,
          14,
          19,
          21,
          25
        ]
      },
      {
        "input": [
          11,
          19,
          15,
          29,
          6,
          20,
          1,
          29
        ],
        "output": [
          1,
          6,
          11,
          30,
          15,
          19,
          20,
          29,
          29
        ]
      },
      {
        "input": [
          26,
          8,
          5,
          22,
          28,
          25
        ],
        "output": [
          5,
          8,
          22,
          33,
          25,
          26,
          28
        ]
      }
    ]
  },
  {
    "id": "c211",
    "difficulty": 104,
    "function": "def c211(x):\n    # reverse input, insert fouth element and fifth element so they are fourth and third from the end respectively\n    x = x[::-1]\n    x.insert(-3, x[3])\n    x.insert(-4, x[4])\n    return x\n\n",
    "data": {
      "input": [
        42,
        94,
        71,
        44,
        50,
        49,
        35,
        13
      ],
      "output": [
        13,
        35,
        49,
        50,
        44,
        44,
        50,
        71,
        94,
        42
      ]
    },
    "demos": [
      {
        "input": [
          81,
          43,
          23,
          99,
          24,
          10
        ],
        "output": [
          10,
          24,
          99,
          23,
          23,
          23,
          43,
          81
        ]
      },
      {
        "input": [
          39,
          5,
          5,
          60,
          85,
          70,
          86
        ],
        "output": [
          86,
          70,
          85,
          60,
          60,
          60,
          5,
          5,
          39
        ]
      },
      {
        "input": [
          84,
          4,
          34,
          33,
          29,
          20
        ],
        "output": [
          20,
          29,
          33,
          34,
          34,
          34,
          4,
          84
        ]
      }
    ]
  },
  {
    "id": "c102",
    "difficulty": 0,
    "function": "def c102(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        65,
        75,
        52,
        49,
        23,
        61
      ],
      "output": [
        65,
        75,
        52,
        49,
        23,
        61
      ]
    },
    "demos": [
      {
        "input": [
          67,
          68,
          5,
          31,
          67,
          41,
          97
        ],
        "output": [
          67,
          68,
          5,
          31,
          67,
          41,
          97
        ]
      },
      {
        "input": [
          8,
          60,
          62,
          53,
          40,
          9,
          57,
          12
        ],
        "output": [
          8,
          60,
          62,
          53,
          40,
          9,
          57,
          12
        ]
      },
      {
        "input": [
          22,
          61,
          18,
          89,
          76
        ],
        "output": [
          22,
          61,
          18,
          89,
          76
        ]
      }
    ]
  },
  {
    "id": "c170",
    "difficulty": 1,
    "function": "def c170(x):\n    # remove all but the first and last element\n    return [x[0], x[-1]]\n    \n",
    "data": {
      "input": [
        62,
        36,
        14,
        42,
        30
      ],
      "output": [
        62,
        30
      ]
    },
    "demos": [
      {
        "input": [
          68,
          26,
          100,
          46,
          16,
          40,
          45
        ],
        "output": [
          68,
          45
        ]
      },
      {
        "input": [
          57,
          13,
          29,
          16,
          93,
          76,
          24,
          93
        ],
        "output": [
          57,
          93
        ]
      },
      {
        "input": [
          43,
          10,
          20,
          16,
          33
        ],
        "output": [
          43,
          33
        ]
      }
    ]
  },
  {
    "id": "c121",
    "difficulty": 2,
    "function": "def c121(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        53,
        15,
        27,
        39,
        61,
        69
      ],
      "output": [
        69
      ]
    },
    "demos": [
      {
        "input": [
          5,
          63,
          22
        ],
        "output": [
          22
        ]
      },
      {
        "input": [
          90,
          41,
          79,
          66
        ],
        "output": [
          66
        ]
      },
      {
        "input": [
          34,
          83,
          35,
          53,
          48,
          95
        ],
        "output": [
          95
        ]
      }
    ]
  },
  {
    "id": "c045",
    "difficulty": 3,
    "function": "def c045(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        59,
        63,
        24,
        90,
        78,
        80
      ],
      "output": [
        59,
        63,
        24,
        90,
        78,
        80
      ]
    },
    "demos": [
      {
        "input": [
          45,
          40,
          88,
          28,
          50,
          94,
          72,
          79
        ],
        "output": [
          45,
          40,
          88,
          28,
          50,
          94,
          72,
          79
        ]
      },
      {
        "input": [
          71,
          57,
          40
        ],
        "output": [
          71,
          57,
          40
        ]
      },
      {
        "input": [
          47,
          51,
          74,
          95
        ],
        "output": [
          47,
          51,
          74,
          95
        ]
      }
    ]
  },
  {
    "id": "c072",
    "difficulty": 4,
    "function": "def c072(x):\n    # repeat every element twice\n    return [i for i in x for _ in (0, 1)]\n\n",
    "data": {
      "input": [
        83,
        27,
        35
      ],
      "output": [
        83,
        83,
        27,
        27,
        35,
        35
      ]
    },
    "demos": [
      {
        "input": [
          39,
          43,
          73,
          58,
          52,
          28
        ],
        "output": [
          39,
          39,
          43,
          43,
          73,
          73,
          58,
          58,
          52,
          52,
          28,
          28
        ]
      },
      {
        "input": [
          55,
          6,
          85,
          93,
          86,
          26,
          86
        ],
        "output": [
          55,
          55,
          6,
          6,
          85,
          85,
          93,
          93,
          86,
          86,
          26,
          26,
          86,
          86
        ]
      },
      {
        "input": [
          33,
          42,
          39,
          63,
          17
        ],
        "output": [
          33,
          33,
          42,
          42,
          39,
          39,
          63,
          63,
          17,
          17
        ]
      }
    ]
  },
  {
    "id": "c151",
    "difficulty": 5,
    "function": "def c151(x):\n    # repeat each element, M, M times, in order of appearance\n    return [i for i in x for _ in range(i)]\n\n",
    "data": {
      "input": [
        1,
        5,
        0
      ],
      "output": [
        1,
        5,
        5,
        5,
        5,
        5
      ]
    },
    "demos": [
      {
        "input": [
          5,
          3,
          1
        ],
        "output": [
          5,
          5,
          5,
          5,
          5,
          3,
          3,
          3,
          1
        ]
      },
      {
        "input": [
          0,
          4,
          5,
          2
        ],
        "output": [
          4,
          4,
          4,
          4,
          5,
          5,
          5,
          5,
          5,
          2,
          2
        ]
      },
      {
        "input": [
          3,
          5,
          1,
          0
        ],
        "output": [
          3,
          3,
          3,
          5,
          5,
          5,
          5,
          5,
          1
        ]
      }
    ]
  },
  {
    "id": "c080",
    "difficulty": 6,
    "function": "def c080(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        62,
        25,
        64,
        89,
        81
      ],
      "output": [
        81,
        89,
        64,
        25,
        62
      ]
    },
    "demos": [
      {
        "input": [
          25,
          4,
          25,
          9,
          32,
          69,
          12
        ],
        "output": [
          12,
          69,
          32,
          9,
          25,
          4,
          25
        ]
      },
      {
        "input": [
          11,
          73,
          39
        ],
        "output": [
          39,
          73,
          11
        ]
      },
      {
        "input": [
          25,
          89,
          33,
          98
        ],
        "output": [
          98,
          33,
          89,
          25
        ]
      }
    ]
  },
  {
    "id": "c061",
    "difficulty": 7,
    "function": "def c061(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        87,
        69,
        68,
        75,
        79,
        71,
        4
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          75,
          75,
          49
        ],
        "output": [
          49
        ]
      },
      {
        "input": [
          1,
          15,
          42,
          92,
          95,
          7,
          50,
          31
        ],
        "output": [
          31
        ]
      },
      {
        "input": [
          20,
          93,
          26
        ],
        "output": [
          26
        ]
      }
    ]
  },
  {
    "id": "c189",
    "difficulty": 8,
    "function": "def c189(x):\n    # count from the smallest element to the largest element\n    return list(range(min(x), max(x)+1))\n\n",
    "data": {
      "input": [
        10,
        5,
        9
      ],
      "output": [
        5,
        6,
        7,
        8,
        9,
        10
      ]
    },
    "demos": [
      {
        "input": [
          31,
          30,
          27
        ],
        "output": [
          27,
          28,
          29,
          30,
          31
        ]
      },
      {
        "input": [
          52,
          51,
          53
        ],
        "output": [
          51,
          52,
          53
        ]
      },
      {
        "input": [
          49,
          47,
          52,
          54
        ],
        "output": [
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54
        ]
      }
    ]
  },
  {
    "id": "c050",
    "difficulty": 9,
    "function": "def c050(x):\n    # prepend first element to the list\n    return [x[0]] + x\n\n",
    "data": {
      "input": [
        71,
        38,
        92,
        65,
        61
      ],
      "output": [
        71,
        71,
        38,
        92,
        65,
        61
      ]
    },
    "demos": [
      {
        "input": [
          7,
          88,
          97,
          17
        ],
        "output": [
          7,
          7,
          88,
          97,
          17
        ]
      },
      {
        "input": [
          32,
          18,
          99,
          25
        ],
        "output": [
          32,
          32,
          18,
          99,
          25
        ]
      },
      {
        "input": [
          70,
          28,
          70,
          15,
          72,
          69,
          3
        ],
        "output": [
          70,
          70,
          28,
          70,
          15,
          72,
          69,
          3
        ]
      }
    ]
  },
  {
    "id": "c048",
    "difficulty": 10,
    "function": "def c048(x):\n    # remove all but the first element\n    return [x[0]]\n    \n",
    "data": {
      "input": [
        17,
        3,
        27,
        72,
        5,
        53,
        86
      ],
      "output": [
        17
      ]
    },
    "demos": [
      {
        "input": [
          27,
          98,
          67
        ],
        "output": [
          27
        ]
      },
      {
        "input": [
          81,
          69,
          21,
          8,
          95,
          46,
          59
        ],
        "output": [
          81
        ]
      },
      {
        "input": [
          7,
          76,
          37,
          96,
          44,
          7
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c147",
    "difficulty": 11,
    "function": "def c147(x):\n    # each element, followed by its index\n    res = []\n    for i, v in enumerate(x):\n        res.append(v)\n        res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        65,
        12,
        27,
        67,
        17,
        39
      ],
      "output": [
        65,
        0,
        12,
        1,
        27,
        2,
        67,
        3,
        17,
        4,
        39,
        5
      ]
    },
    "demos": [
      {
        "input": [
          60,
          42,
          92,
          44
        ],
        "output": [
          60,
          0,
          42,
          1,
          92,
          2,
          44,
          3
        ]
      },
      {
        "input": [
          78,
          54,
          4,
          83,
          76,
          51,
          40
        ],
        "output": [
          78,
          0,
          54,
          1,
          4,
          2,
          83,
          3,
          76,
          4,
          51,
          5,
          40,
          6
        ]
      },
      {
        "input": [
          83,
          57,
          25
        ],
        "output": [
          83,
          0,
          57,
          1,
          25,
          2
        ]
      }
    ]
  },
  {
    "id": "c120",
    "difficulty": 12,
    "function": "def c120(x):\n    # remove all but the first element\n    return [x[0]]\n\n",
    "data": {
      "input": [
        64,
        81,
        30,
        56,
        61
      ],
      "output": [
        64
      ]
    },
    "demos": [
      {
        "input": [
          53,
          59,
          59,
          17
        ],
        "output": [
          53
        ]
      },
      {
        "input": [
          12,
          92,
          76,
          3,
          98
        ],
        "output": [
          12
        ]
      },
      {
        "input": [
          18,
          96,
          74,
          50,
          15,
          25
        ],
        "output": [
          18
        ]
      }
    ]
  },
  {
    "id": "c127",
    "difficulty": 13,
    "function": "def c127(x):\n    # remove last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        42,
        31,
        23,
        36,
        70
      ],
      "output": [
        42,
        31,
        23,
        36
      ]
    },
    "demos": [
      {
        "input": [
          98,
          57,
          6,
          80,
          42
        ],
        "output": [
          98,
          57,
          6,
          80
        ]
      },
      {
        "input": [
          69,
          2,
          47,
          73,
          43
        ],
        "output": [
          69,
          2,
          47,
          73
        ]
      },
      {
        "input": [
          72,
          45,
          11,
          0
        ],
        "output": [
          72,
          45,
          11
        ]
      }
    ]
  },
  {
    "id": "c100",
    "difficulty": 14,
    "function": "def c100(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        75,
        40,
        51
      ],
      "output": [
        51,
        40,
        75
      ]
    },
    "demos": [
      {
        "input": [
          96,
          33,
          78,
          33
        ],
        "output": [
          33,
          78,
          33,
          96
        ]
      },
      {
        "input": [
          70,
          81,
          44,
          88,
          87,
          38,
          2
        ],
        "output": [
          2,
          38,
          87,
          88,
          44,
          81,
          70
        ]
      },
      {
        "input": [
          0,
          66,
          92
        ],
        "output": [
          92,
          66,
          0
        ]
      }
    ]
  },
  {
    "id": "c145",
    "difficulty": 15,
    "function": "def c145(x):\n    # replace every element with the first element\n    return [x[0]] * len(x)\n\n",
    "data": {
      "input": [
        41,
        97,
        22,
        95,
        46,
        47
      ],
      "output": [
        41,
        41,
        41,
        41,
        41,
        41
      ]
    },
    "demos": [
      {
        "input": [
          54,
          40,
          23,
          78,
          30
        ],
        "output": [
          54,
          54,
          54,
          54,
          54
        ]
      },
      {
        "input": [
          49,
          30,
          72
        ],
        "output": [
          49,
          49,
          49
        ]
      },
      {
        "input": [
          35,
          99,
          22
        ],
        "output": [
          35,
          35,
          35
        ]
      }
    ]
  },
  {
    "id": "c079",
    "difficulty": 16,
    "function": "def c079(x):\n    # sum of the list\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        5,
        6,
        13
      ],
      "output": [
        24
      ]
    },
    "demos": [
      {
        "input": [
          16,
          17,
          19,
          7
        ],
        "output": [
          59
        ]
      },
      {
        "input": [
          10,
          18,
          9
        ],
        "output": [
          37
        ]
      },
      {
        "input": [
          7,
          17,
          12
        ],
        "output": [
          36
        ]
      }
    ]
  },
  {
    "id": "c043",
    "difficulty": 17,
    "function": "def c043(x):\n    return [8, 2, 7, 0, 3]\n\n",
    "data": {
      "input": [
        81,
        42,
        58,
        63
      ],
      "output": [
        8,
        2,
        7,
        0,
        3
      ]
    },
    "demos": [
      {
        "input": [
          15,
          77,
          49,
          42
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          99,
          1,
          49,
          90,
          40,
          75
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          4,
          64,
          17,
          4,
          12,
          77
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      }
    ]
  },
  {
    "id": "c038",
    "difficulty": 18,
    "function": "def c038(x):\n    # append 9\n    return x + [9]\n\n",
    "data": {
      "input": [
        71,
        88,
        89,
        21
      ],
      "output": [
        71,
        88,
        89,
        21,
        9
      ]
    },
    "demos": [
      {
        "input": [
          82,
          39,
          37,
          69,
          73,
          73
        ],
        "output": [
          82,
          39,
          37,
          69,
          73,
          73,
          9
        ]
      },
      {
        "input": [
          69,
          64,
          55,
          93,
          80,
          14
        ],
        "output": [
          69,
          64,
          55,
          93,
          80,
          14,
          9
        ]
      },
      {
        "input": [
          3,
          38,
          35,
          85
        ],
        "output": [
          3,
          38,
          35,
          85,
          9
        ]
      }
    ]
  },
  {
    "id": "c042",
    "difficulty": 19,
    "function": "def c042(x):\n    return [5, 2]\n\n",
    "data": {
      "input": [
        80,
        86,
        89,
        95
      ],
      "output": [
        5,
        2
      ]
    },
    "demos": [
      {
        "input": [
          55,
          72,
          98,
          67,
          76,
          34,
          90
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          91,
          61,
          20,
          35,
          64,
          19,
          11
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          32,
          47,
          64,
          38
        ],
        "output": [
          5,
          2
        ]
      }
    ]
  },
  {
    "id": "c223",
    "difficulty": 20,
    "function": "def c223(x):\n    # swap the digits of each element\n    return [int(str(i)[::-1]) for i in x]\n\n",
    "data": {
      "input": [
        97,
        7,
        93
      ],
      "output": [
        79,
        7,
        39
      ]
    },
    "demos": [
      {
        "input": [
          40,
          39,
          4,
          92,
          86,
          47,
          78
        ],
        "output": [
          4,
          93,
          4,
          29,
          68,
          74,
          87
        ]
      },
      {
        "input": [
          83,
          8,
          4,
          97,
          59,
          82
        ],
        "output": [
          38,
          8,
          4,
          79,
          95,
          28
        ]
      },
      {
        "input": [
          4,
          46,
          99,
          70,
          89,
          11
        ],
        "output": [
          4,
          64,
          99,
          7,
          98,
          11
        ]
      }
    ]
  },
  {
    "id": "c137",
    "difficulty": 21,
    "function": "def c137(x):\n    # remove all 3\n    return [i for i in x if i != 3]\n\n",
    "data": {
      "input": [
        93,
        72,
        3,
        24,
        34,
        94,
        3,
        13
      ],
      "output": [
        93,
        72,
        24,
        34,
        94,
        13
      ]
    },
    "demos": [
      {
        "input": [
          3,
          49,
          74,
          33,
          3
        ],
        "output": [
          49,
          74,
          33
        ]
      },
      {
        "input": [
          96,
          16,
          13,
          62,
          34,
          3,
          56,
          33
        ],
        "output": [
          96,
          16,
          13,
          62,
          34,
          56,
          33
        ]
      },
      {
        "input": [
          3,
          6,
          5,
          9,
          37,
          16
        ],
        "output": [
          6,
          5,
          9,
          37,
          16
        ]
      }
    ]
  },
  {
    "id": "c238",
    "difficulty": 22,
    "function": "def c238(x):\n    # keep only elements that appear exactly once\n    return [i for i in x if x.count(i) == 1]\n\n",
    "data": {
      "input": [
        8,
        19,
        7,
        8,
        8,
        8,
        7,
        7,
        7,
        7
      ],
      "output": [
        19
      ]
    },
    "demos": [
      {
        "input": [
          3,
          3,
          3,
          4,
          5,
          6,
          3,
          3
        ],
        "output": [
          4,
          5,
          6
        ]
      },
      {
        "input": [
          9,
          9,
          6,
          0,
          13,
          12,
          12,
          12
        ],
        "output": [
          6,
          0,
          13
        ]
      },
      {
        "input": [
          12,
          34,
          12,
          56,
          78,
          12,
          34,
          34
        ],
        "output": [
          56,
          78
        ]
      }
    ]
  },
  {
    "id": "c108",
    "difficulty": 23,
    "function": "def c108(x):\n    # sum of elements\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        17,
        2,
        13
      ],
      "output": [
        32
      ]
    },
    "demos": [
      {
        "input": [
          19,
          19,
          4,
          8,
          20,
          6,
          12
        ],
        "output": [
          88
        ]
      },
      {
        "input": [
          5,
          7,
          4,
          0
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          18,
          14,
          14,
          5,
          4,
          16
        ],
        "output": [
          71
        ]
      }
    ]
  },
  {
    "id": "c126",
    "difficulty": 24,
    "function": "def c126(x):\n    # remove first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        8,
        74,
        99,
        16,
        64,
        12
      ],
      "output": [
        74,
        99,
        16,
        64,
        12
      ]
    },
    "demos": [
      {
        "input": [
          60,
          62,
          58,
          90,
          25,
          97
        ],
        "output": [
          62,
          58,
          90,
          25,
          97
        ]
      },
      {
        "input": [
          46,
          61,
          48
        ],
        "output": [
          61,
          48
        ]
      },
      {
        "input": [
          86,
          92,
          54,
          26,
          19,
          16,
          14
        ],
        "output": [
          92,
          54,
          26,
          19,
          16,
          14
        ]
      }
    ]
  },
  {
    "id": "c187",
    "difficulty": 25,
    "function": "def c187(x):\n    # concatenate input with itself, separated by 0\n    return x + [0] + x\n\n",
    "data": {
      "input": [
        72,
        54,
        35,
        44,
        0
      ],
      "output": [
        72,
        54,
        35,
        44,
        0,
        0,
        72,
        54,
        35,
        44,
        0
      ]
    },
    "demos": [
      {
        "input": [
          99,
          2,
          91,
          93
        ],
        "output": [
          99,
          2,
          91,
          93,
          0,
          99,
          2,
          91,
          93
        ]
      },
      {
        "input": [
          87,
          90,
          65,
          97,
          66
        ],
        "output": [
          87,
          90,
          65,
          97,
          66,
          0,
          87,
          90,
          65,
          97,
          66
        ]
      },
      {
        "input": [
          6,
          34,
          82,
          84,
          66
        ],
        "output": [
          6,
          34,
          82,
          84,
          66,
          0,
          6,
          34,
          82,
          84,
          66
        ]
      }
    ]
  },
  {
    "id": "c022",
    "difficulty": 26,
    "function": "def c022(x):\n    # insert a 5 as element 1\n    return x[:1] + [5] + x[1:]\n\n",
    "data": {
      "input": [
        38,
        91,
        77,
        61,
        3,
        46,
        95
      ],
      "output": [
        38,
        5,
        91,
        77,
        61,
        3,
        46,
        95
      ]
    },
    "demos": [
      {
        "input": [
          1,
          86,
          89
        ],
        "output": [
          1,
          5,
          86,
          89
        ]
      },
      {
        "input": [
          90,
          35,
          79,
          67,
          65,
          60,
          5
        ],
        "output": [
          90,
          5,
          35,
          79,
          67,
          65,
          60,
          5
        ]
      },
      {
        "input": [
          70,
          37,
          93,
          6,
          46,
          7,
          17
        ],
        "output": [
          70,
          5,
          37,
          93,
          6,
          46,
          7,
          17
        ]
      }
    ]
  },
  {
    "id": "c212",
    "difficulty": 27,
    "function": "def c212(x):\n    # insert 3 at index 2, 3 times\n    return x[:3] + [3,3,3] + x[3:]\n\n",
    "data": {
      "input": [
        51,
        63,
        54,
        38,
        41,
        88
      ],
      "output": [
        51,
        63,
        54,
        3,
        3,
        3,
        38,
        41,
        88
      ]
    },
    "demos": [
      {
        "input": [
          18,
          95,
          5,
          59,
          20,
          56
        ],
        "output": [
          18,
          95,
          5,
          3,
          3,
          3,
          59,
          20,
          56
        ]
      },
      {
        "input": [
          6,
          47,
          16
        ],
        "output": [
          6,
          47,
          16,
          3,
          3,
          3
        ]
      },
      {
        "input": [
          15,
          72,
          3,
          80,
          56,
          8
        ],
        "output": [
          15,
          72,
          3,
          3,
          3,
          3,
          80,
          56,
          8
        ]
      }
    ]
  },
  {
    "id": "c101",
    "difficulty": 28,
    "function": "def c101(x):\n    return [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]\n\n",
    "data": {
      "input": [
        0,
        35,
        7
      ],
      "output": [
        11,
        19,
        24,
        33,
        42,
        5,
        82,
        0,
        64,
        9
      ]
    },
    "demos": [
      {
        "input": [
          75,
          73,
          69
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          64,
          74,
          9,
          23,
          50
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          85,
          13,
          75,
          86,
          25,
          46,
          87
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      }
    ]
  },
  {
    "id": "c021",
    "difficulty": 29,
    "function": "def c021(x):\n    # insert 8 as element 1\n    return x[:1] + [8] + x[1:]\n\n",
    "data": {
      "input": [
        26,
        67,
        29,
        61,
        18,
        15,
        70
      ],
      "output": [
        26,
        8,
        67,
        29,
        61,
        18,
        15,
        70
      ]
    },
    "demos": [
      {
        "input": [
          43,
          43,
          31,
          6,
          42,
          6
        ],
        "output": [
          43,
          8,
          43,
          31,
          6,
          42,
          6
        ]
      },
      {
        "input": [
          78,
          25,
          44,
          90,
          68,
          50,
          83
        ],
        "output": [
          78,
          8,
          25,
          44,
          90,
          68,
          50,
          83
        ]
      },
      {
        "input": [
          27,
          68,
          64
        ],
        "output": [
          27,
          8,
          68,
          64
        ]
      }
    ]
  },
  {
    "id": "c105",
    "difficulty": 30,
    "function": "def c105(x):\n    # concatenate all but the last element with all but the first element\n    return x[:-1] + x[1:]\n\n",
    "data": {
      "input": [
        43,
        84,
        26,
        71,
        87
      ],
      "output": [
        43,
        84,
        26,
        71,
        84,
        26,
        71,
        87
      ]
    },
    "demos": [
      {
        "input": [
          2,
          49,
          69,
          95,
          95
        ],
        "output": [
          2,
          49,
          69,
          95,
          49,
          69,
          95,
          95
        ]
      },
      {
        "input": [
          81,
          47,
          20,
          38,
          66,
          32
        ],
        "output": [
          81,
          47,
          20,
          38,
          66,
          47,
          20,
          38,
          66,
          32
        ]
      },
      {
        "input": [
          51,
          46,
          62,
          83,
          61
        ],
        "output": [
          51,
          46,
          62,
          83,
          46,
          62,
          83,
          61
        ]
      }
    ]
  },
  {
    "id": "c041",
    "difficulty": 31,
    "function": "def c041(x):\n    return [9]\n\n",
    "data": {
      "input": [
        77,
        82,
        11,
        61
      ],
      "output": [
        9
      ]
    },
    "demos": [
      {
        "input": [
          26,
          21,
          26,
          14
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          59,
          55,
          2,
          98,
          44,
          64,
          3
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          42,
          27,
          43
        ],
        "output": [
          9
        ]
      }
    ]
  },
  {
    "id": "c070",
    "difficulty": 32,
    "function": "def c070(x):\n    # concatenate the input\n    return x + x\n\n",
    "data": {
      "input": [
        59,
        77,
        84,
        12,
        87,
        0
      ],
      "output": [
        59,
        77,
        84,
        12,
        87,
        0,
        59,
        77,
        84,
        12,
        87,
        0
      ]
    },
    "demos": [
      {
        "input": [
          3,
          26,
          97,
          94,
          13
        ],
        "output": [
          3,
          26,
          97,
          94,
          13,
          3,
          26,
          97,
          94,
          13
        ]
      },
      {
        "input": [
          74,
          73,
          75,
          17,
          35
        ],
        "output": [
          74,
          73,
          75,
          17,
          35,
          74,
          73,
          75,
          17,
          35
        ]
      },
      {
        "input": [
          63,
          52,
          22,
          18,
          33,
          42
        ],
        "output": [
          63,
          52,
          22,
          18,
          33,
          42,
          63,
          52,
          22,
          18,
          33,
          42
        ]
      }
    ]
  },
  {
    "id": "c052",
    "difficulty": 33,
    "function": "def c052(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        61,
        27,
        6
      ],
      "output": [
        61,
        61,
        61,
        61,
        61,
        61,
        61
      ]
    },
    "demos": [
      {
        "input": [
          74,
          17,
          88
        ],
        "output": [
          74,
          74,
          74,
          74,
          74,
          74,
          74
        ]
      },
      {
        "input": [
          62,
          42,
          85,
          47,
          59,
          58
        ],
        "output": [
          62,
          62,
          62,
          62,
          62,
          62,
          62
        ]
      },
      {
        "input": [
          76,
          40,
          2,
          22
        ],
        "output": [
          76,
          76,
          76,
          76,
          76,
          76,
          76
        ]
      }
    ]
  },
  {
    "id": "c044",
    "difficulty": 34,
    "function": "def c044(x):\n    return [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]\n\n",
    "data": {
      "input": [
        65,
        55,
        84,
        95,
        24,
        38
      ],
      "output": [
        1,
        9,
        4,
        3,
        2,
        5,
        8,
        0,
        4,
        9
      ]
    },
    "demos": [
      {
        "input": [
          84,
          63,
          84
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          74,
          53,
          27,
          63,
          54,
          68
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          14,
          20,
          15,
          14,
          54,
          27,
          82
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      }
    ]
  },
  {
    "id": "c190",
    "difficulty": 35,
    "function": "def c190(x):\n    # count by 2 from the first element to the last element\n    if x[0] < x[-1]:\n        return list(range(x[0], x[-1]+1, 2))\n    else:\n        return list(range(x[0], x[-1]-1, -2))\n\n",
    "data": {
      "input": [
        45,
        23,
        29
      ],
      "output": [
        45,
        43,
        41,
        39,
        37,
        35,
        33,
        31,
        29
      ]
    },
    "demos": [
      {
        "input": [
          54,
          48,
          48
        ],
        "output": [
          54,
          52,
          50,
          48
        ]
      },
      {
        "input": [
          78,
          82,
          84
        ],
        "output": [
          78,
          80,
          82,
          84
        ]
      },
      {
        "input": [
          80,
          67,
          86
        ],
        "output": [
          80,
          82,
          84,
          86
        ]
      }
    ]
  },
  {
    "id": "c037",
    "difficulty": 36,
    "function": "def c037(x):\n    # append 3\n    return x + [3]\n\n",
    "data": {
      "input": [
        49,
        33,
        54,
        72,
        36
      ],
      "output": [
        49,
        33,
        54,
        72,
        36,
        3
      ]
    },
    "demos": [
      {
        "input": [
          73,
          63,
          84,
          15,
          66
        ],
        "output": [
          73,
          63,
          84,
          15,
          66,
          3
        ]
      },
      {
        "input": [
          16,
          0,
          96,
          96,
          96,
          21
        ],
        "output": [
          16,
          0,
          96,
          96,
          96,
          21,
          3
        ]
      },
      {
        "input": [
          23,
          65,
          77
        ],
        "output": [
          23,
          65,
          77,
          3
        ]
      }
    ]
  },
  {
    "id": "c222",
    "difficulty": 37,
    "function": "def c222(x):\n    # remove each element with the input length\n    return [len(x) for _ in x]\n\n",
    "data": {
      "input": [
        88,
        8,
        14,
        13,
        6
      ],
      "output": [
        5,
        5,
        5,
        5,
        5
      ]
    },
    "demos": [
      {
        "input": [
          95,
          4,
          1,
          23
        ],
        "output": [
          4,
          4,
          4,
          4
        ]
      },
      {
        "input": [
          86,
          8,
          13
        ],
        "output": [
          3,
          3,
          3
        ]
      },
      {
        "input": [
          81,
          85,
          5,
          29,
          37,
          27
        ],
        "output": [
          6,
          6,
          6,
          6,
          6,
          6
        ]
      }
    ]
  },
  {
    "id": "c107",
    "difficulty": 38,
    "function": "def c107(x):\n    # unique elements, in order of appearance\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        19,
        19,
        15,
        29,
        15,
        45
      ],
      "output": [
        19,
        15,
        29,
        45
      ]
    },
    "demos": [
      {
        "input": [
          22,
          40,
          35,
          17,
          22,
          60,
          31,
          17,
          31,
          59
        ],
        "output": [
          22,
          40,
          35,
          17,
          60,
          31,
          59
        ]
      },
      {
        "input": [
          75,
          69,
          7,
          29,
          75,
          75,
          69
        ],
        "output": [
          75,
          69,
          7,
          29
        ]
      },
      {
        "input": [
          38,
          91,
          29,
          76,
          11,
          38,
          74,
          91,
          11,
          27
        ],
        "output": [
          38,
          91,
          29,
          76,
          11,
          74,
          27
        ]
      }
    ]
  },
  {
    "id": "c011",
    "difficulty": 39,
    "function": "def c011(x):\n    # [1:4] of the input\n    return x[1:4]\n\n",
    "data": {
      "input": [
        25,
        19,
        77,
        37
      ],
      "output": [
        19,
        77,
        37
      ]
    },
    "demos": [
      {
        "input": [
          80,
          86,
          99,
          39,
          89
        ],
        "output": [
          86,
          99,
          39
        ]
      },
      {
        "input": [
          72,
          45,
          56,
          91,
          16
        ],
        "output": [
          45,
          56,
          91
        ]
      },
      {
        "input": [
          22,
          30,
          40,
          18,
          46,
          90,
          62
        ],
        "output": [
          30,
          40,
          18
        ]
      }
    ]
  },
  {
    "id": "c104",
    "difficulty": 40,
    "function": "def c104(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        77,
        72,
        46,
        11
      ],
      "output": [
        77
      ]
    },
    "demos": [
      {
        "input": [
          21,
          56,
          63,
          86,
          47,
          2,
          50
        ],
        "output": [
          86
        ]
      },
      {
        "input": [
          99,
          40,
          74,
          22,
          76
        ],
        "output": [
          99
        ]
      },
      {
        "input": [
          56,
          62,
          33,
          65
        ],
        "output": [
          65
        ]
      }
    ]
  },
  {
    "id": "c192",
    "difficulty": 41,
    "function": "def c192(x):\n    # replace each element, M, with its tens digit, if no tens digit, replace with 0\n    return [int(str(i)[-2]) if len(str(i)) > 1 else 0 for i in x]\n\n",
    "data": {
      "input": [
        98,
        46,
        2,
        56,
        96,
        17,
        25
      ],
      "output": [
        9,
        4,
        0,
        5,
        9,
        1,
        2
      ]
    },
    "demos": [
      {
        "input": [
          44,
          5,
          16,
          80,
          99,
          40
        ],
        "output": [
          4,
          0,
          1,
          8,
          9,
          4
        ]
      },
      {
        "input": [
          67,
          45,
          71,
          12,
          46
        ],
        "output": [
          6,
          4,
          7,
          1,
          4
        ]
      },
      {
        "input": [
          16,
          66,
          90,
          23
        ],
        "output": [
          1,
          6,
          9,
          2
        ]
      }
    ]
  },
  {
    "id": "c182",
    "difficulty": 42,
    "function": "def c182(x):\n    # keep every third element\n    return x[::3]\n\n",
    "data": {
      "input": [
        19,
        31,
        8,
        38,
        6,
        70
      ],
      "output": [
        19,
        38
      ]
    },
    "demos": [
      {
        "input": [
          0,
          45,
          36,
          68,
          53,
          97,
          69,
          30,
          23
        ],
        "output": [
          0,
          68,
          69
        ]
      },
      {
        "input": [
          23,
          89,
          77,
          95,
          8,
          89
        ],
        "output": [
          23,
          95
        ]
      },
      {
        "input": [
          15,
          30,
          30,
          54,
          41,
          15,
          74,
          48
        ],
        "output": [
          15,
          54,
          74
        ]
      }
    ]
  },
  {
    "id": "c006",
    "difficulty": 43,
    "function": "def c006(x):\n    # the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        91,
        93,
        52,
        1,
        75,
        83,
        80
      ],
      "output": [
        91,
        93
      ]
    },
    "demos": [
      {
        "input": [
          68,
          73,
          79,
          46,
          23,
          11
        ],
        "output": [
          68,
          73
        ]
      },
      {
        "input": [
          11,
          45,
          69,
          74,
          29,
          93,
          35
        ],
        "output": [
          11,
          45
        ]
      },
      {
        "input": [
          5,
          90,
          58
        ],
        "output": [
          5,
          90
        ]
      }
    ]
  },
  {
    "id": "c046",
    "difficulty": 44,
    "function": "def c046(x):\n    # prepend 7\n    return [7] + x\n\n",
    "data": {
      "input": [
        39,
        84,
        93,
        31
      ],
      "output": [
        7,
        39,
        84,
        93,
        31
      ]
    },
    "demos": [
      {
        "input": [
          62,
          6,
          9,
          14,
          16,
          61
        ],
        "output": [
          7,
          62,
          6,
          9,
          14,
          16,
          61
        ]
      },
      {
        "input": [
          85,
          40,
          18,
          58,
          89,
          42
        ],
        "output": [
          7,
          85,
          40,
          18,
          58,
          89,
          42
        ]
      },
      {
        "input": [
          13,
          13,
          63,
          51
        ],
        "output": [
          7,
          13,
          13,
          63,
          51
        ]
      }
    ]
  },
  {
    "id": "c106",
    "difficulty": 45,
    "function": "def c106(x):\n    # elements in ascending order\n    return sorted(x)\n\n",
    "data": {
      "input": [
        68,
        5,
        27,
        99,
        68,
        81,
        2
      ],
      "output": [
        2,
        5,
        27,
        68,
        68,
        81,
        99
      ]
    },
    "demos": [
      {
        "input": [
          27,
          40,
          7,
          32,
          45,
          34,
          58
        ],
        "output": [
          7,
          27,
          32,
          34,
          40,
          45,
          58
        ]
      },
      {
        "input": [
          56,
          83,
          16,
          16,
          83,
          55
        ],
        "output": [
          16,
          16,
          55,
          56,
          83,
          83
        ]
      },
      {
        "input": [
          76,
          84,
          67,
          26
        ],
        "output": [
          26,
          67,
          76,
          84
        ]
      }
    ]
  },
  {
    "id": "c114",
    "difficulty": 46,
    "function": "def c114(x):\n    # prepend the last element\n    return [x[-1]] + x\n\n",
    "data": {
      "input": [
        63,
        3,
        14,
        83,
        43,
        52
      ],
      "output": [
        52,
        63,
        3,
        14,
        83,
        43,
        52
      ]
    },
    "demos": [
      {
        "input": [
          69,
          68,
          53,
          83,
          72,
          32
        ],
        "output": [
          32,
          69,
          68,
          53,
          83,
          72,
          32
        ]
      },
      {
        "input": [
          47,
          29,
          73,
          1
        ],
        "output": [
          1,
          47,
          29,
          73,
          1
        ]
      },
      {
        "input": [
          46,
          77,
          52
        ],
        "output": [
          52,
          46,
          77,
          52
        ]
      }
    ]
  },
  {
    "id": "c093",
    "difficulty": 47,
    "function": "def c093(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        89,
        53,
        75,
        64
      ],
      "output": [
        89,
        89,
        89,
        89,
        89,
        89,
        89
      ]
    },
    "demos": [
      {
        "input": [
          19,
          53,
          62,
          49,
          56
        ],
        "output": [
          19,
          19,
          19,
          19,
          19,
          19,
          19
        ]
      },
      {
        "input": [
          57,
          18,
          43,
          7,
          13
        ],
        "output": [
          57,
          57,
          57,
          57,
          57,
          57,
          57
        ]
      },
      {
        "input": [
          1,
          9,
          85,
          89,
          86,
          12
        ],
        "output": [
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c195",
    "difficulty": 48,
    "function": "def c195(x):\n    # element 1, followed by 23, 68, 42, 99, 71, followed by last element\n    return [x[0], 23, 68, 42, 99, 71, x[-1]]\n\n",
    "data": {
      "input": [
        17,
        33,
        27,
        0,
        92,
        46
      ],
      "output": [
        17,
        23,
        68,
        42,
        99,
        71,
        46
      ]
    },
    "demos": [
      {
        "input": [
          69,
          7,
          64,
          3
        ],
        "output": [
          69,
          23,
          68,
          42,
          99,
          71,
          3
        ]
      },
      {
        "input": [
          38,
          42,
          28
        ],
        "output": [
          38,
          23,
          68,
          42,
          99,
          71,
          28
        ]
      },
      {
        "input": [
          85,
          23,
          71
        ],
        "output": [
          85,
          23,
          68,
          42,
          99,
          71,
          71
        ]
      }
    ]
  },
  {
    "id": "c196",
    "difficulty": 49,
    "function": "def c196(x):\n    # concatenate 17, 38, 82 input 1 55 27\n    return [17, 38, 82] + x + [1, 55, 27]\n\n",
    "data": {
      "input": [
        31,
        2,
        74,
        46,
        25,
        20
      ],
      "output": [
        17,
        38,
        82,
        31,
        2,
        74,
        46,
        25,
        20,
        1,
        55,
        27
      ]
    },
    "demos": [
      {
        "input": [
          39,
          17
        ],
        "output": [
          17,
          38,
          82,
          39,
          17,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          52,
          69,
          12,
          6,
          36
        ],
        "output": [
          17,
          38,
          82,
          52,
          69,
          12,
          6,
          36,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          66,
          34,
          86,
          2,
          91,
          41
        ],
        "output": [
          17,
          38,
          82,
          66,
          34,
          86,
          2,
          91,
          41,
          1,
          55,
          27
        ]
      }
    ]
  },
  {
    "id": "c095",
    "difficulty": 50,
    "function": "def c095(x):\n    # remove the first element and the last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        87,
        62,
        96,
        95,
        2
      ],
      "output": [
        62,
        96,
        95
      ]
    },
    "demos": [
      {
        "input": [
          46,
          61,
          14,
          13,
          52,
          58,
          16
        ],
        "output": [
          61,
          14,
          13,
          52,
          58
        ]
      },
      {
        "input": [
          1,
          15,
          26,
          13,
          30,
          19,
          82
        ],
        "output": [
          15,
          26,
          13,
          30,
          19
        ]
      },
      {
        "input": [
          0,
          29,
          86,
          62,
          55,
          74
        ],
        "output": [
          29,
          86,
          62,
          55
        ]
      }
    ]
  },
  {
    "id": "c016",
    "difficulty": 51,
    "function": "def c016(x):\n    # replace element 1 with 8\n    return [8] + x[1:]\n\n",
    "data": {
      "input": [
        74,
        81,
        57,
        0
      ],
      "output": [
        8,
        81,
        57,
        0
      ]
    },
    "demos": [
      {
        "input": [
          2,
          98,
          53
        ],
        "output": [
          8,
          98,
          53
        ]
      },
      {
        "input": [
          43,
          6,
          63,
          72,
          10
        ],
        "output": [
          8,
          6,
          63,
          72,
          10
        ]
      },
      {
        "input": [
          73,
          11,
          7,
          79,
          95
        ],
        "output": [
          8,
          11,
          7,
          79,
          95
        ]
      }
    ]
  },
  {
    "id": "c224",
    "difficulty": 52,
    "function": "def c224(x):\n    # reverse the list, then take every other element starting from the second element, then take every other element starting from the first element\n    return x[::-2] + x[(len(x) % 2)::2]\n\n",
    "data": {
      "input": [
        76,
        86,
        73,
        65
      ],
      "output": [
        65,
        86,
        76,
        73
      ]
    },
    "demos": [
      {
        "input": [
          72,
          8,
          16
        ],
        "output": [
          16,
          72,
          8
        ]
      },
      {
        "input": [
          91,
          54,
          29
        ],
        "output": [
          29,
          91,
          54
        ]
      },
      {
        "input": [
          84,
          87,
          67,
          29,
          59,
          28,
          82
        ],
        "output": [
          82,
          59,
          67,
          84,
          87,
          29,
          28
        ]
      }
    ]
  },
  {
    "id": "c116",
    "difficulty": 53,
    "function": "def c116(x):\n    # reflect the input on itself\n    return x[::-1] + x[1:]\n\n",
    "data": {
      "input": [
        21,
        19,
        71,
        96,
        38
      ],
      "output": [
        38,
        96,
        71,
        19,
        21,
        19,
        71,
        96,
        38
      ]
    },
    "demos": [
      {
        "input": [
          41,
          79,
          53
        ],
        "output": [
          53,
          79,
          41,
          79,
          53
        ]
      },
      {
        "input": [
          42,
          19,
          57,
          65,
          91,
          42
        ],
        "output": [
          42,
          91,
          65,
          57,
          19,
          42,
          19,
          57,
          65,
          91,
          42
        ]
      },
      {
        "input": [
          94,
          7,
          77,
          71,
          37,
          50
        ],
        "output": [
          50,
          37,
          71,
          77,
          7,
          94,
          7,
          77,
          71,
          37,
          50
        ]
      }
    ]
  },
  {
    "id": "c140",
    "difficulty": 54,
    "function": "def c140(x):\n    # replace element 1 with 9\n    return x[:1] + [9] + x[2:]\n\n",
    "data": {
      "input": [
        24,
        42,
        88,
        7,
        35,
        62,
        26
      ],
      "output": [
        24,
        9,
        88,
        7,
        35,
        62,
        26
      ]
    },
    "demos": [
      {
        "input": [
          32,
          87,
          56,
          58,
          35,
          88,
          98
        ],
        "output": [
          32,
          9,
          56,
          58,
          35,
          88,
          98
        ]
      },
      {
        "input": [
          0,
          4,
          39,
          17,
          28,
          90
        ],
        "output": [
          0,
          9,
          39,
          17,
          28,
          90
        ]
      },
      {
        "input": [
          46,
          51,
          75,
          2,
          29
        ],
        "output": [
          46,
          9,
          75,
          2,
          29
        ]
      }
    ]
  },
  {
    "id": "c049",
    "difficulty": 55,
    "function": "def c049(x):\n    # remove the first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        68,
        85,
        54,
        7,
        15,
        70,
        24
      ],
      "output": [
        85,
        54,
        7,
        15,
        70,
        24
      ]
    },
    "demos": [
      {
        "input": [
          12,
          39,
          23,
          26
        ],
        "output": [
          39,
          23,
          26
        ]
      },
      {
        "input": [
          90,
          21,
          43
        ],
        "output": [
          21,
          43
        ]
      },
      {
        "input": [
          82,
          29,
          97,
          81,
          28,
          79,
          0
        ],
        "output": [
          29,
          97,
          81,
          28,
          79,
          0
        ]
      }
    ]
  },
  {
    "id": "c071",
    "difficulty": 56,
    "function": "def c071(x):\n    # add 2 to each element\n    return [i+2 for i in x]\n\n",
    "data": {
      "input": [
        91,
        26,
        97,
        69
      ],
      "output": [
        93,
        28,
        99,
        71
      ]
    },
    "demos": [
      {
        "input": [
          46,
          57,
          36,
          65,
          49,
          7
        ],
        "output": [
          48,
          59,
          38,
          67,
          51,
          9
        ]
      },
      {
        "input": [
          94,
          49,
          25,
          6,
          47
        ],
        "output": [
          96,
          51,
          27,
          8,
          49
        ]
      },
      {
        "input": [
          54,
          28,
          59,
          6
        ],
        "output": [
          56,
          30,
          61,
          8
        ]
      }
    ]
  },
  {
    "id": "c161",
    "difficulty": 57,
    "function": "def c161(x):\n    # replace each element, M, with M + the input length - M index\n    return [i + len(x) - j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        25,
        68,
        70,
        94,
        96,
        4,
        52
      ],
      "output": [
        32,
        74,
        75,
        98,
        99,
        6,
        53
      ]
    },
    "demos": [
      {
        "input": [
          46,
          42,
          1,
          70
        ],
        "output": [
          50,
          45,
          3,
          71
        ]
      },
      {
        "input": [
          59,
          66,
          88,
          92,
          94
        ],
        "output": [
          64,
          70,
          91,
          94,
          95
        ]
      },
      {
        "input": [
          51,
          67,
          3,
          2,
          5,
          91
        ],
        "output": [
          57,
          72,
          7,
          5,
          7,
          92
        ]
      }
    ]
  },
  {
    "id": "c068",
    "difficulty": 58,
    "function": "def c068(x):\n    # concatenate the input with 7, 3, 8, 4, 3\n    return x + [7, 3, 8, 4, 3]\n\n",
    "data": {
      "input": [
        21,
        96,
        37,
        36,
        96
      ],
      "output": [
        21,
        96,
        37,
        36,
        96,
        7,
        3,
        8,
        4,
        3
      ]
    },
    "demos": [
      {
        "input": [
          27,
          40,
          25,
          0,
          69
        ],
        "output": [
          27,
          40,
          25,
          0,
          69,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          9,
          93,
          6,
          1,
          46
        ],
        "output": [
          9,
          93,
          6,
          1,
          46,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          46,
          77,
          13
        ],
        "output": [
          46,
          77,
          13,
          7,
          3,
          8,
          4,
          3
        ]
      }
    ]
  },
  {
    "id": "c103",
    "difficulty": 59,
    "function": "def c103(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        30,
        59,
        55,
        13,
        71
      ],
      "output": [
        5
      ]
    },
    "demos": [
      {
        "input": [
          37,
          36,
          44,
          69,
          83
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          71,
          20,
          60,
          4,
          9,
          40
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          98,
          14,
          88,
          65,
          44,
          80,
          72
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c001",
    "difficulty": 60,
    "function": "def c001(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        99,
        67,
        17,
        30,
        7
      ],
      "output": [
        17
      ]
    },
    "demos": [
      {
        "input": [
          73,
          45,
          53,
          21,
          4,
          74
        ],
        "output": [
          53
        ]
      },
      {
        "input": [
          28,
          53,
          78,
          88,
          91,
          24,
          97
        ],
        "output": [
          78
        ]
      },
      {
        "input": [
          90,
          30,
          46,
          80
        ],
        "output": [
          46
        ]
      }
    ]
  },
  {
    "id": "c090",
    "difficulty": 61,
    "function": "def c090(x):\n    return [18, 42, 77, 20, 36]\n\n",
    "data": {
      "input": [
        44,
        6,
        14,
        93
      ],
      "output": [
        18,
        42,
        77,
        20,
        36
      ]
    },
    "demos": [
      {
        "input": [
          37,
          95,
          46,
          7,
          57,
          94
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          47,
          56,
          79
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          68,
          89,
          93,
          82
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      }
    ]
  },
  {
    "id": "c097",
    "difficulty": 62,
    "function": "def c097(x):\n    # concatenate 11, 21, 43 input 7 89 0\n    return [11, 21, 43] + x + [7, 89, 0]\n\n",
    "data": {
      "input": [
        61,
        49,
        59
      ],
      "output": [
        11,
        21,
        43,
        61,
        49,
        59,
        7,
        89,
        0
      ]
    },
    "demos": [
      {
        "input": [
          65,
          30,
          93
        ],
        "output": [
          11,
          21,
          43,
          65,
          30,
          93,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          20,
          63,
          97,
          66,
          52
        ],
        "output": [
          11,
          21,
          43,
          20,
          63,
          97,
          66,
          52,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          52,
          16,
          62
        ],
        "output": [
          11,
          21,
          43,
          52,
          16,
          62,
          7,
          89,
          0
        ]
      }
    ]
  },
  {
    "id": "c142",
    "difficulty": 63,
    "function": "def c142(x):\n    # every digit in order of appearance\n    res = []\n    for i in x:\n        for j in str(i):\n            res.append(int(j))\n    return res\n\n",
    "data": {
      "input": [
        84,
        98,
        34,
        90,
        55
      ],
      "output": [
        8,
        4,
        9,
        8,
        3,
        4,
        9,
        0,
        5,
        5
      ]
    },
    "demos": [
      {
        "input": [
          20,
          92,
          31,
          96
        ],
        "output": [
          2,
          0,
          9,
          2,
          3,
          1,
          9,
          6
        ]
      },
      {
        "input": [
          47,
          91,
          8
        ],
        "output": [
          4,
          7,
          9,
          1,
          8
        ]
      },
      {
        "input": [
          92,
          89,
          7
        ],
        "output": [
          9,
          2,
          8,
          9,
          7
        ]
      }
    ]
  },
  {
    "id": "c091",
    "difficulty": 64,
    "function": "def c091(x):\n    return [81, 99, 41, 23, 22, 75, 68, 30]\n\n",
    "data": {
      "input": [
        59,
        46,
        33,
        9
      ],
      "output": [
        81,
        99,
        41,
        23,
        22,
        75,
        68,
        30
      ]
    },
    "demos": [
      {
        "input": [
          55,
          24,
          8,
          15,
          21,
          19
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          89,
          39,
          6,
          99
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          12,
          11,
          56,
          40
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      }
    ]
  },
  {
    "id": "c034",
    "difficulty": 65,
    "function": "def c034(x):\n    # swap element 1 and element 2\n    x[0], x[1] = x[1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        35,
        32,
        32,
        83
      ],
      "output": [
        32,
        35,
        32,
        83
      ]
    },
    "demos": [
      {
        "input": [
          40,
          5,
          50,
          92
        ],
        "output": [
          5,
          40,
          50,
          92
        ]
      },
      {
        "input": [
          27,
          74,
          5,
          67
        ],
        "output": [
          74,
          27,
          5,
          67
        ]
      },
      {
        "input": [
          81,
          27,
          86,
          8,
          66
        ],
        "output": [
          27,
          81,
          86,
          8,
          66
        ]
      }
    ]
  },
  {
    "id": "c244",
    "difficulty": 66,
    "function": "def c244(x):\n    # number of 3s\n    return [x.count(3)]\n\n",
    "data": {
      "input": [
        45,
        79,
        87
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          83,
          11,
          3,
          48,
          3,
          95
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          3,
          43,
          3,
          2,
          20,
          3,
          62
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          45,
          3,
          3,
          85,
          93,
          66
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c171",
    "difficulty": 67,
    "function": "def c171(x):\n    # cumulative sum\n    res = []\n    s = 0\n    for i in x:\n        s += i\n        res.append(s)\n    return res\n\n",
    "data": {
      "input": [
        8,
        10,
        8
      ],
      "output": [
        8,
        18,
        26
      ]
    },
    "demos": [
      {
        "input": [
          3,
          10,
          7,
          20,
          1
        ],
        "output": [
          3,
          13,
          20,
          40,
          41
        ]
      },
      {
        "input": [
          13,
          2,
          5
        ],
        "output": [
          13,
          15,
          20
        ]
      },
      {
        "input": [
          10,
          20,
          8
        ],
        "output": [
          10,
          30,
          38
        ]
      }
    ]
  },
  {
    "id": "c172",
    "difficulty": 68,
    "function": "def c172(x):\n    # cumulative product\n    res = []\n    p = 1\n    for i in x:\n        p *= i\n        res.append(p)\n    return res\n\n",
    "data": {
      "input": [
        1,
        3,
        4,
        4,
        10
      ],
      "output": [
        1,
        3,
        12,
        48,
        480
      ]
    },
    "demos": [
      {
        "input": [
          4,
          6,
          5
        ],
        "output": [
          4,
          24,
          120
        ]
      },
      {
        "input": [
          0,
          2,
          3,
          8,
          1,
          8
        ],
        "output": [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          5,
          7,
          2,
          9,
          8
        ],
        "output": [
          5,
          35,
          70,
          630,
          5040
        ]
      }
    ]
  },
  {
    "id": "c062",
    "difficulty": 69,
    "function": "def c062(x):\n    # remove the last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        73,
        78,
        17,
        64,
        92,
        71
      ],
      "output": [
        73,
        78,
        17,
        64,
        92
      ]
    },
    "demos": [
      {
        "input": [
          52,
          70,
          78,
          30,
          11
        ],
        "output": [
          52,
          70,
          78,
          30
        ]
      },
      {
        "input": [
          21,
          12,
          18,
          25,
          73,
          65
        ],
        "output": [
          21,
          12,
          18,
          25,
          73
        ]
      },
      {
        "input": [
          23,
          7,
          78,
          34
        ],
        "output": [
          23,
          7,
          78
        ]
      }
    ]
  },
  {
    "id": "c096",
    "difficulty": 70,
    "function": "def c096(x):\n    # prepend 98 and append 37\n    return [98] + x + [37]\n\n",
    "data": {
      "input": [
        86,
        85,
        29,
        46,
        18
      ],
      "output": [
        98,
        86,
        85,
        29,
        46,
        18,
        37
      ]
    },
    "demos": [
      {
        "input": [
          5,
          76,
          97
        ],
        "output": [
          98,
          5,
          76,
          97,
          37
        ]
      },
      {
        "input": [
          11,
          36,
          67
        ],
        "output": [
          98,
          11,
          36,
          67,
          37
        ]
      },
      {
        "input": [
          21,
          73,
          24,
          30,
          8
        ],
        "output": [
          98,
          21,
          73,
          24,
          30,
          8,
          37
        ]
      }
    ]
  },
  {
    "id": "c081",
    "difficulty": 71,
    "function": "def c081(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        63,
        64,
        12,
        14,
        79
      ],
      "output": [
        12
      ]
    },
    "demos": [
      {
        "input": [
          3,
          47,
          71,
          33,
          78,
          9
        ],
        "output": [
          71
        ]
      },
      {
        "input": [
          63,
          10,
          69
        ],
        "output": [
          69
        ]
      },
      {
        "input": [
          60,
          13,
          35,
          5,
          14
        ],
        "output": [
          35
        ]
      }
    ]
  },
  {
    "id": "c109",
    "difficulty": 72,
    "function": "def c109(x):\n    # product of elements\n    p = 1\n    for i in x:\n        p *= i\n    return [p]\n\n",
    "data": {
      "input": [
        10,
        1,
        0,
        4
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          6,
          2,
          4,
          4,
          0
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          5,
          7,
          2,
          4,
          0
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          6,
          0,
          8,
          4,
          4,
          8,
          0
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c002",
    "difficulty": 73,
    "function": "def c002(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        24,
        92,
        75,
        98,
        48,
        80
      ],
      "output": [
        75
      ]
    },
    "demos": [
      {
        "input": [
          59,
          36,
          57,
          13,
          70
        ],
        "output": [
          57
        ]
      },
      {
        "input": [
          42,
          28,
          0,
          64,
          66
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          54,
          25,
          35,
          78
        ],
        "output": [
          35
        ]
      }
    ]
  },
  {
    "id": "c132",
    "difficulty": 74,
    "function": "def c132(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        71,
        30,
        19,
        37,
        13,
        91
      ],
      "output": [
        71,
        30,
        37,
        13,
        91
      ]
    },
    "demos": [
      {
        "input": [
          51,
          76,
          30,
          73,
          36,
          54
        ],
        "output": [
          51,
          76,
          73,
          36,
          54
        ]
      },
      {
        "input": [
          97,
          91,
          11,
          98
        ],
        "output": [
          97,
          91,
          98
        ]
      },
      {
        "input": [
          20,
          28,
          58,
          6,
          94
        ],
        "output": [
          20,
          28,
          6,
          94
        ]
      }
    ]
  },
  {
    "id": "c153",
    "difficulty": 75,
    "function": "def c153(x):\n    # each unique element followed by its number of occurrences\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    out = []\n    for k, v in res.items():\n        out.append(k)\n        out.append(v)\n    return out\n\n",
    "data": {
      "input": [
        82,
        82,
        82,
        41,
        41,
        65,
        67
      ],
      "output": [
        82,
        3,
        41,
        2,
        65,
        1,
        67,
        1
      ]
    },
    "demos": [
      {
        "input": [
          88,
          52,
          36,
          23,
          49,
          36,
          52,
          23
        ],
        "output": [
          88,
          1,
          52,
          2,
          36,
          2,
          23,
          2,
          49,
          1
        ]
      },
      {
        "input": [
          4,
          36,
          63,
          4,
          4,
          4
        ],
        "output": [
          4,
          4,
          36,
          1,
          63,
          1
        ]
      },
      {
        "input": [
          78,
          15,
          63,
          15,
          15
        ],
        "output": [
          78,
          1,
          15,
          3,
          63,
          1
        ]
      }
    ]
  },
  {
    "id": "c051",
    "difficulty": 76,
    "function": "def c051(x):\n    # prepend first element 4 times\n    return [x[0]] * 4 + x\n\n",
    "data": {
      "input": [
        3,
        45,
        78
      ],
      "output": [
        3,
        3,
        3,
        3,
        3,
        45,
        78
      ]
    },
    "demos": [
      {
        "input": [
          84,
          32,
          8,
          23,
          43,
          14,
          3
        ],
        "output": [
          84,
          84,
          84,
          84,
          84,
          32,
          8,
          23,
          43,
          14,
          3
        ]
      },
      {
        "input": [
          60,
          81,
          63,
          98,
          43
        ],
        "output": [
          60,
          60,
          60,
          60,
          60,
          81,
          63,
          98,
          43
        ]
      },
      {
        "input": [
          11,
          19,
          66,
          52,
          2
        ],
        "output": [
          11,
          11,
          11,
          11,
          11,
          19,
          66,
          52,
          2
        ]
      }
    ]
  },
  {
    "id": "c225",
    "difficulty": 77,
    "function": "def c225(x):\n    # remove first and last two elements\n    return x[2:-2]\n\n",
    "data": {
      "input": [
        56,
        56,
        40,
        1,
        69,
        68,
        80
      ],
      "output": [
        40,
        1,
        69
      ]
    },
    "demos": [
      {
        "input": [
          4,
          4,
          68,
          80,
          49,
          46
        ],
        "output": [
          68,
          80
        ]
      },
      {
        "input": [
          65,
          22,
          25,
          11,
          86,
          33,
          96,
          5
        ],
        "output": [
          25,
          11,
          86,
          33
        ]
      },
      {
        "input": [
          8,
          68,
          86,
          46,
          64,
          73,
          36
        ],
        "output": [
          86,
          46,
          64
        ]
      }
    ]
  },
  {
    "id": "c067",
    "difficulty": 78,
    "function": "def c067(x):\n    # swap the first and last element\n    x[0], x[-1] = x[-1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        94,
        85,
        43,
        21,
        43,
        37
      ],
      "output": [
        37,
        85,
        43,
        21,
        43,
        94
      ]
    },
    "demos": [
      {
        "input": [
          85,
          53,
          45,
          0
        ],
        "output": [
          0,
          53,
          45,
          85
        ]
      },
      {
        "input": [
          80,
          40,
          43,
          59,
          48,
          54
        ],
        "output": [
          54,
          40,
          43,
          59,
          48,
          80
        ]
      },
      {
        "input": [
          20,
          37,
          59,
          72,
          45
        ],
        "output": [
          45,
          37,
          59,
          72,
          20
        ]
      }
    ]
  },
  {
    "id": "c112",
    "difficulty": 79,
    "function": "def c112(x):\n    # count from 1 to the last element\n    return list(range(1, x[-1]+1))\n\n",
    "data": {
      "input": [
        48,
        52,
        23,
        12,
        8
      ],
      "output": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ]
    },
    "demos": [
      {
        "input": [
          69,
          87,
          41,
          97,
          74,
          3
        ],
        "output": [
          1,
          2,
          3
        ]
      },
      {
        "input": [
          14,
          19,
          70,
          13
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ]
      },
      {
        "input": [
          12,
          59,
          96,
          45,
          58,
          85,
          10
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      }
    ]
  },
  {
    "id": "c030",
    "difficulty": 80,
    "function": "def c030(x):\n    # remove the last 2 elements\n    return x[:-2]\n\n",
    "data": {
      "input": [
        33,
        60,
        33,
        76
      ],
      "output": [
        33,
        60
      ]
    },
    "demos": [
      {
        "input": [
          13,
          41,
          78,
          95,
          63,
          56
        ],
        "output": [
          13,
          41,
          78,
          95
        ]
      },
      {
        "input": [
          62,
          91,
          74,
          28,
          66
        ],
        "output": [
          62,
          91,
          74
        ]
      },
      {
        "input": [
          33,
          43,
          23,
          70,
          73,
          33,
          40
        ],
        "output": [
          33,
          43,
          23,
          70,
          73
        ]
      }
    ]
  },
  {
    "id": "c149",
    "difficulty": 81,
    "function": "def c149(x):\n    # replace each element, M with M * first element; remove the first element\n    return [i*x[0] for i in x[1:]]\n\n",
    "data": {
      "input": [
        17,
        3,
        19,
        20,
        19,
        19
      ],
      "output": [
        51,
        323,
        340,
        323,
        323
      ]
    },
    "demos": [
      {
        "input": [
          8,
          8,
          11,
          1
        ],
        "output": [
          64,
          88,
          8
        ]
      },
      {
        "input": [
          4,
          18,
          13,
          11,
          16
        ],
        "output": [
          72,
          52,
          44,
          64
        ]
      },
      {
        "input": [
          20,
          12,
          6,
          5,
          0,
          20,
          3
        ],
        "output": [
          240,
          120,
          100,
          0,
          400,
          60
        ]
      }
    ]
  },
  {
    "id": "c148",
    "difficulty": 82,
    "function": "def c148(x):\n    # count from 1 to each element\n    res = []\n    for i in x:\n        res += list(range(1, i+1))\n    return res\n\n",
    "data": {
      "input": [
        2,
        1,
        2
      ],
      "output": [
        1,
        2,
        1,
        1,
        2
      ]
    },
    "demos": [
      {
        "input": [
          0,
          1,
          4,
          1,
          4
        ],
        "output": [
          1,
          1,
          2,
          3,
          4,
          1,
          1,
          2,
          3,
          4
        ]
      },
      {
        "input": [
          5,
          4,
          4,
          5,
          2
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          4,
          5,
          1,
          2
        ]
      },
      {
        "input": [
          1,
          4,
          1
        ],
        "output": [
          1,
          1,
          2,
          3,
          4,
          1
        ]
      }
    ]
  },
  {
    "id": "c017",
    "difficulty": 83,
    "function": "def c017(x):\n    # replace x[1] with 8\n    x[1] = 8\n    return x\n\n",
    "data": {
      "input": [
        37,
        91,
        17,
        95,
        83,
        42
      ],
      "output": [
        37,
        8,
        17,
        95,
        83,
        42
      ]
    },
    "demos": [
      {
        "input": [
          53,
          63,
          0,
          93,
          27,
          14
        ],
        "output": [
          53,
          8,
          0,
          93,
          27,
          14
        ]
      },
      {
        "input": [
          19,
          21,
          99,
          86,
          9,
          33
        ],
        "output": [
          19,
          8,
          99,
          86,
          9,
          33
        ]
      },
      {
        "input": [
          22,
          19,
          4,
          94,
          30,
          81
        ],
        "output": [
          22,
          8,
          4,
          94,
          30,
          81
        ]
      }
    ]
  },
  {
    "id": "c092",
    "difficulty": 84,
    "function": "def c092(x):\n    # concatenate 92, 63, 34, 18, 55\n    return x + [92, 63, 34, 18, 55]\n\n",
    "data": {
      "input": [
        25,
        59,
        11,
        66,
        52
      ],
      "output": [
        25,
        59,
        11,
        66,
        52,
        92,
        63,
        34,
        18,
        55
      ]
    },
    "demos": [
      {
        "input": [
          21,
          97,
          54,
          9
        ],
        "output": [
          21,
          97,
          54,
          9,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          83,
          1,
          90,
          62
        ],
        "output": [
          83,
          1,
          90,
          62,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          90,
          56,
          37,
          40,
          12,
          95
        ],
        "output": [
          90,
          56,
          37,
          40,
          12,
          95,
          92,
          63,
          34,
          18,
          55
        ]
      }
    ]
  },
  {
    "id": "c077",
    "difficulty": 85,
    "function": "def c077(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        17,
        53,
        80,
        40,
        4,
        9
      ],
      "output": [
        6
      ]
    },
    "demos": [
      {
        "input": [
          4,
          12,
          92,
          33,
          18,
          26
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          56,
          84,
          52,
          95,
          34,
          49
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          59,
          14,
          3,
          21,
          73,
          78,
          65
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c248",
    "difficulty": 87,
    "function": "def c248(x):\n    # elements after the first 0\n    return x[x.index(0)+1:]\n\n",
    "data": {
      "input": [
        43,
        47,
        41,
        83,
        0,
        22
      ],
      "output": [
        22
      ]
    },
    "demos": [
      {
        "input": [
          20,
          89,
          0,
          53,
          73
        ],
        "output": [
          53,
          73
        ]
      },
      {
        "input": [
          76,
          0,
          7,
          46,
          60,
          98,
          23
        ],
        "output": [
          7,
          46,
          60,
          98,
          23
        ]
      },
      {
        "input": [
          0,
          95,
          3,
          22,
          50,
          70
        ],
        "output": [
          95,
          3,
          22,
          50,
          70
        ]
      }
    ]
  },
  {
    "id": "c199",
    "difficulty": 88,
    "function": "def c199(x):\n    # elements in ascending order, each preceded by its rank\n    res = []\n    for i, v in enumerate(sorted(x)):\n        res.append(i+1)\n        res.append(v)\n    return res\n\n",
    "data": {
      "input": [
        55,
        58,
        18,
        51,
        42,
        83,
        66
      ],
      "output": [
        1,
        18,
        2,
        42,
        3,
        51,
        4,
        55,
        5,
        58,
        6,
        66,
        7,
        83
      ]
    },
    "demos": [
      {
        "input": [
          52,
          20,
          77,
          62,
          7
        ],
        "output": [
          1,
          7,
          2,
          20,
          3,
          52,
          4,
          62,
          5,
          77
        ]
      },
      {
        "input": [
          41,
          74,
          13,
          49,
          10,
          13,
          51
        ],
        "output": [
          1,
          10,
          2,
          13,
          3,
          13,
          4,
          41,
          5,
          49,
          6,
          51,
          7,
          74
        ]
      },
      {
        "input": [
          27,
          14,
          8,
          85,
          23,
          60
        ],
        "output": [
          1,
          8,
          2,
          14,
          3,
          23,
          4,
          27,
          5,
          60,
          6,
          85
        ]
      }
    ]
  },
  {
    "id": "c007",
    "difficulty": 89,
    "function": "def c007(x):\n    # remove all but the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        41,
        2,
        49
      ],
      "output": [
        41,
        2
      ]
    },
    "demos": [
      {
        "input": [
          64,
          44,
          27,
          15,
          74,
          2
        ],
        "output": [
          64,
          44
        ]
      },
      {
        "input": [
          8,
          53,
          21,
          37,
          52
        ],
        "output": [
          8,
          53
        ]
      },
      {
        "input": [
          67,
          42,
          45,
          63,
          53,
          89
        ],
        "output": [
          67,
          42
        ]
      }
    ]
  },
  {
    "id": "c176",
    "difficulty": 90,
    "function": "def c176(x):\n    # sum of each consecutive pair of elements\n    return [x[i] + x[i+1] for i in range(0, len(x)-1)]\n\n",
    "data": {
      "input": [
        61,
        70,
        18,
        31,
        90,
        66,
        60
      ],
      "output": [
        131,
        88,
        49,
        121,
        156,
        126
      ]
    },
    "demos": [
      {
        "input": [
          2,
          79,
          0
        ],
        "output": [
          81,
          79
        ]
      },
      {
        "input": [
          53,
          21,
          70
        ],
        "output": [
          74,
          91
        ]
      },
      {
        "input": [
          13,
          95,
          73,
          10
        ],
        "output": [
          108,
          168,
          83
        ]
      }
    ]
  },
  {
    "id": "c066",
    "difficulty": 91,
    "function": "def c066(x):\n    # left rotate the list by 1\n    return x[1:] + x[:1]\n\n",
    "data": {
      "input": [
        44,
        90,
        78,
        42
      ],
      "output": [
        90,
        78,
        42,
        44
      ]
    },
    "demos": [
      {
        "input": [
          61,
          65,
          63,
          39,
          63,
          45
        ],
        "output": [
          65,
          63,
          39,
          63,
          45,
          61
        ]
      },
      {
        "input": [
          85,
          26,
          60,
          95,
          51,
          18,
          25
        ],
        "output": [
          26,
          60,
          95,
          51,
          18,
          25,
          85
        ]
      },
      {
        "input": [
          13,
          34,
          56,
          6,
          23
        ],
        "output": [
          34,
          56,
          6,
          23,
          13
        ]
      }
    ]
  },
  {
    "id": "c053",
    "difficulty": 92,
    "function": "def c053(x):\n    # replace x[1] with x[0]\n    x[1] = x[0]\n    return x\n\n",
    "data": {
      "input": [
        90,
        63,
        82,
        38
      ],
      "output": [
        90,
        90,
        82,
        38
      ]
    },
    "demos": [
      {
        "input": [
          25,
          59,
          63,
          38,
          42,
          31
        ],
        "output": [
          25,
          25,
          63,
          38,
          42,
          31
        ]
      },
      {
        "input": [
          95,
          52,
          6
        ],
        "output": [
          95,
          95,
          6
        ]
      },
      {
        "input": [
          6,
          71,
          80
        ],
        "output": [
          6,
          6,
          80
        ]
      }
    ]
  },
  {
    "id": "c047",
    "difficulty": 93,
    "function": "def c047(x):\n    # concatenate 9, 6, 3, 8, 5\n    return [9, 6, 3, 8, 5] + x\n\n",
    "data": {
      "input": [
        13,
        46,
        62,
        71,
        59,
        73,
        45
      ],
      "output": [
        9,
        6,
        3,
        8,
        5,
        13,
        46,
        62,
        71,
        59,
        73,
        45
      ]
    },
    "demos": [
      {
        "input": [
          19,
          16,
          83,
          46
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          19,
          16,
          83,
          46
        ]
      },
      {
        "input": [
          45,
          12,
          68,
          54
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          45,
          12,
          68,
          54
        ]
      },
      {
        "input": [
          40,
          54,
          15,
          97,
          35,
          2,
          70
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          40,
          54,
          15,
          97,
          35,
          2,
          70
        ]
      }
    ]
  },
  {
    "id": "c064",
    "difficulty": 94,
    "function": "def c064(x):\n    # remove the first and last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        53,
        90,
        14
      ],
      "output": [
        90
      ]
    },
    "demos": [
      {
        "input": [
          40,
          77,
          96,
          88,
          9
        ],
        "output": [
          77,
          96,
          88
        ]
      },
      {
        "input": [
          29,
          45,
          5,
          39,
          74,
          26,
          40
        ],
        "output": [
          45,
          5,
          39,
          74,
          26
        ]
      },
      {
        "input": [
          26,
          63,
          69,
          42
        ],
        "output": [
          63,
          69
        ]
      }
    ]
  },
  {
    "id": "c078",
    "difficulty": 95,
    "function": "def c078(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        99,
        25,
        48,
        93,
        41
      ],
      "output": [
        99
      ]
    },
    "demos": [
      {
        "input": [
          88,
          94,
          69,
          75,
          98,
          4
        ],
        "output": [
          98
        ]
      },
      {
        "input": [
          29,
          81,
          29,
          37,
          55,
          84
        ],
        "output": [
          84
        ]
      },
      {
        "input": [
          69,
          90,
          86,
          70
        ],
        "output": [
          90
        ]
      }
    ]
  },
  {
    "id": "c119",
    "difficulty": 96,
    "function": "def c119(x):\n    # make the list begin and ends with 8\n    if x[0] != 8:\n        x = [8] + x\n    if x[-1] != 8:\n        x = x + [8]\n    return x\n\n",
    "data": {
      "input": [
        57,
        73,
        72
      ],
      "output": [
        8,
        57,
        73,
        72,
        8
      ]
    },
    "demos": [
      {
        "input": [
          65,
          50,
          20,
          54
        ],
        "output": [
          8,
          65,
          50,
          20,
          54,
          8
        ]
      },
      {
        "input": [
          57,
          81,
          14,
          22,
          15
        ],
        "output": [
          8,
          57,
          81,
          14,
          22,
          15,
          8
        ]
      },
      {
        "input": [
          92,
          33,
          47,
          84,
          77
        ],
        "output": [
          8,
          92,
          33,
          47,
          84,
          77,
          8
        ]
      }
    ]
  },
  {
    "id": "c135",
    "difficulty": 97,
    "function": "def c135(x):\n    # remove the first 7\n    x.remove(7)\n    return x\n\n",
    "data": {
      "input": [
        3,
        9,
        3,
        5,
        7,
        3
      ],
      "output": [
        3,
        9,
        3,
        5,
        3
      ]
    },
    "demos": [
      {
        "input": [
          7,
          5,
          6,
          9,
          7,
          9,
          6
        ],
        "output": [
          5,
          6,
          9,
          7,
          9,
          6
        ]
      },
      {
        "input": [
          5,
          7,
          6,
          5,
          5,
          7
        ],
        "output": [
          5,
          6,
          5,
          5,
          7
        ]
      },
      {
        "input": [
          1,
          8,
          6,
          3,
          7
        ],
        "output": [
          1,
          8,
          6,
          3
        ]
      }
    ]
  },
  {
    "id": "c198",
    "difficulty": 98,
    "function": "def c198(x):\n    # unique elements in descending order\n    res = set(x)\n    return sorted(res, reverse=True)\n\n",
    "data": {
      "input": [
        12,
        85,
        75,
        12,
        86,
        70,
        10,
        44,
        85
      ],
      "output": [
        86,
        85,
        75,
        70,
        44,
        12,
        10
      ]
    },
    "demos": [
      {
        "input": [
          67,
          91,
          92,
          84,
          92,
          48,
          23,
          60
        ],
        "output": [
          92,
          91,
          84,
          67,
          60,
          48,
          23
        ]
      },
      {
        "input": [
          24,
          71,
          71,
          16
        ],
        "output": [
          71,
          24,
          16
        ]
      },
      {
        "input": [
          51,
          87,
          42,
          70,
          87
        ],
        "output": [
          87,
          70,
          51,
          42
        ]
      }
    ]
  },
  {
    "id": "c219",
    "difficulty": 99,
    "function": "def c219(x):\n    # keep only every other element\n    return x[::2]\n\n",
    "data": {
      "input": [
        81,
        36,
        34,
        39,
        45
      ],
      "output": [
        81,
        34,
        45
      ]
    },
    "demos": [
      {
        "input": [
          9,
          22,
          71,
          8,
          98
        ],
        "output": [
          9,
          71,
          98
        ]
      },
      {
        "input": [
          40,
          43,
          71,
          63
        ],
        "output": [
          40,
          71
        ]
      },
      {
        "input": [
          77,
          73,
          32,
          75,
          25,
          67
        ],
        "output": [
          77,
          32,
          25
        ]
      }
    ]
  },
  {
    "id": "c075",
    "difficulty": 100,
    "function": "def c075(x):\n    # remove even index\n    return x[1::2]\n\n",
    "data": {
      "input": [
        74,
        25,
        6,
        89,
        81,
        81
      ],
      "output": [
        25,
        89,
        81
      ]
    },
    "demos": [
      {
        "input": [
          97,
          96,
          81,
          89
        ],
        "output": [
          96,
          89
        ]
      },
      {
        "input": [
          39,
          32,
          68,
          0,
          33,
          75
        ],
        "output": [
          32,
          0,
          75
        ]
      },
      {
        "input": [
          79,
          97,
          77,
          52
        ],
        "output": [
          97,
          52
        ]
      }
    ]
  },
  {
    "id": "c177",
    "difficulty": 101,
    "function": "def c177(x):\n    # interleave the input and the reversed input\n    return [i for pair in zip(x, x[::-1]) for i in pair]\n\n",
    "data": {
      "input": [
        76,
        66,
        60
      ],
      "output": [
        76,
        60,
        66,
        66,
        60,
        76
      ]
    },
    "demos": [
      {
        "input": [
          41,
          21,
          13,
          22,
          81,
          81
        ],
        "output": [
          41,
          81,
          21,
          81,
          13,
          22,
          22,
          13,
          81,
          21,
          81,
          41
        ]
      },
      {
        "input": [
          92,
          4,
          96,
          42,
          61
        ],
        "output": [
          92,
          61,
          4,
          42,
          96,
          96,
          42,
          4,
          61,
          92
        ]
      },
      {
        "input": [
          34,
          54,
          56
        ],
        "output": [
          34,
          56,
          54,
          54,
          56,
          34
        ]
      }
    ]
  },
  {
    "id": "c025",
    "difficulty": 102,
    "function": "def c025(x):\n    # remove element 1\n    return x[:1] + x[2:]\n\n",
    "data": {
      "input": [
        35,
        48,
        45,
        10
      ],
      "output": [
        35,
        45,
        10
      ]
    },
    "demos": [
      {
        "input": [
          97,
          98,
          8,
          5,
          81,
          9
        ],
        "output": [
          97,
          8,
          5,
          81,
          9
        ]
      },
      {
        "input": [
          28,
          34,
          54
        ],
        "output": [
          28,
          54
        ]
      },
      {
        "input": [
          1,
          38,
          42,
          3,
          56,
          46,
          42
        ],
        "output": [
          1,
          42,
          3,
          56,
          46,
          42
        ]
      }
    ]
  },
  {
    "id": "c125",
    "difficulty": 103,
    "function": "def c125(x):\n    # keep only elements whose tens digit equals the tens digit of the first element\n    return [i for i in x if len(str(i)) > 1 and str(i)[-2] == str(x[0])[-2]]\n\n",
    "data": {
      "input": [
        23,
        25,
        48,
        31,
        10,
        97,
        35,
        97
      ],
      "output": [
        23,
        25
      ]
    },
    "demos": [
      {
        "input": [
          31,
          31,
          12,
          17,
          78,
          63,
          37
        ],
        "output": [
          31,
          31,
          37
        ]
      },
      {
        "input": [
          80,
          4,
          19,
          85,
          11,
          85,
          92,
          67,
          88
        ],
        "output": [
          80,
          85,
          85,
          88
        ]
      },
      {
        "input": [
          97,
          40,
          33,
          83,
          79,
          106,
          88,
          101,
          101
        ],
        "output": [
          97
        ]
      }
    ]
  },
  {
    "id": "c087",
    "difficulty": 105,
    "function": "def c087(x):\n    # swap second and third element\n    x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        19,
        47,
        72,
        70,
        36
      ],
      "output": [
        19,
        72,
        47,
        70,
        36
      ]
    },
    "demos": [
      {
        "input": [
          21,
          82,
          64,
          66,
          51,
          68
        ],
        "output": [
          21,
          64,
          82,
          66,
          51,
          68
        ]
      },
      {
        "input": [
          99,
          15,
          25,
          25,
          29,
          94
        ],
        "output": [
          99,
          25,
          15,
          25,
          29,
          94
        ]
      },
      {
        "input": [
          77,
          23,
          65,
          55,
          67,
          80,
          36
        ],
        "output": [
          77,
          65,
          23,
          55,
          67,
          80,
          36
        ]
      }
    ]
  },
  {
    "id": "c013",
    "difficulty": 106,
    "function": "def c013(x):\n    # element 2 through 6\n    return x[2:6]\n\n",
    "data": {
      "input": [
        83,
        26,
        43,
        97,
        86,
        91,
        25,
        74,
        47
      ],
      "output": [
        43,
        97,
        86,
        91
      ]
    },
    "demos": [
      {
        "input": [
          92,
          72,
          15,
          34,
          14,
          31,
          27,
          51,
          80
        ],
        "output": [
          15,
          34,
          14,
          31
        ]
      },
      {
        "input": [
          28,
          3,
          29,
          8,
          9,
          71,
          31,
          67
        ],
        "output": [
          29,
          8,
          9,
          71
        ]
      },
      {
        "input": [
          49,
          83,
          33,
          99,
          64,
          80,
          49,
          20,
          28
        ],
        "output": [
          33,
          99,
          64,
          80
        ]
      }
    ]
  },
  {
    "id": "c069",
    "difficulty": 107,
    "function": "def c069(x):\n    # 9,3,4,0, input, 7,2,9,1\n    return [9,3,4,0] + x + [7,2,9,1]\n\n",
    "data": {
      "input": [
        64,
        12,
        98
      ],
      "output": [
        9,
        3,
        4,
        0,
        64,
        12,
        98,
        7,
        2,
        9,
        1
      ]
    },
    "demos": [
      {
        "input": [
          21,
          93,
          75,
          29
        ],
        "output": [
          9,
          3,
          4,
          0,
          21,
          93,
          75,
          29,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          12,
          42,
          69,
          41,
          42
        ],
        "output": [
          9,
          3,
          4,
          0,
          12,
          42,
          69,
          41,
          42,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          45,
          18,
          10,
          30,
          30
        ],
        "output": [
          9,
          3,
          4,
          0,
          45,
          18,
          10,
          30,
          30,
          7,
          2,
          9,
          1
        ]
      }
    ]
  },
  {
    "id": "c117",
    "difficulty": 108,
    "function": "def c117(x):\n    # left rotate by 3\n    return x[3:] + x[:3]\n\n",
    "data": {
      "input": [
        50,
        30,
        32
      ],
      "output": [
        50,
        30,
        32
      ]
    },
    "demos": [
      {
        "input": [
          95,
          45,
          70,
          19
        ],
        "output": [
          19,
          95,
          45,
          70
        ]
      },
      {
        "input": [
          42,
          25,
          69,
          36,
          65,
          49
        ],
        "output": [
          36,
          65,
          49,
          42,
          25,
          69
        ]
      },
      {
        "input": [
          71,
          89,
          92,
          10,
          70
        ],
        "output": [
          10,
          70,
          71,
          89,
          92
        ]
      }
    ]
  },
  {
    "id": "c228",
    "difficulty": 109,
    "function": "def c228(x):\n    # replace each element with the number of occurrences of that element so far\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        73,
        34,
        10,
        73,
        10,
        70
      ],
      "output": [
        1,
        1,
        1,
        2,
        2,
        1
      ]
    },
    "demos": [
      {
        "input": [
          74,
          27,
          27,
          8,
          91,
          6
        ],
        "output": [
          1,
          1,
          2,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          60,
          45,
          38,
          9,
          6,
          38
        ],
        "output": [
          1,
          1,
          1,
          1,
          1,
          2
        ]
      },
      {
        "input": [
          81,
          81,
          81,
          24,
          13
        ],
        "output": [
          1,
          2,
          3,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c197",
    "difficulty": 110,
    "function": "def c197(x):\n    # replace each element with the number of occurrences of that element\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in x:\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        49,
        24,
        44,
        56,
        49,
        69,
        65
      ],
      "output": [
        2,
        1,
        1,
        1,
        2,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          60,
          26,
          51,
          32,
          53,
          39,
          39
        ],
        "output": [
          1,
          1,
          1,
          1,
          1,
          2,
          2
        ]
      },
      {
        "input": [
          71,
          80,
          68,
          50,
          50,
          69,
          47,
          61
        ],
        "output": [
          1,
          1,
          1,
          2,
          2,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          87,
          25,
          31,
          53,
          46,
          55,
          53,
          29
        ],
        "output": [
          1,
          1,
          1,
          2,
          1,
          1,
          2,
          1
        ]
      }
    ]
  },
  {
    "id": "c065",
    "difficulty": 111,
    "function": "def c065(x):\n    # prepend 9 and append 7\n    return [9] + x + [7]\n\n",
    "data": {
      "input": [
        66,
        92,
        35,
        11,
        52
      ],
      "output": [
        9,
        66,
        92,
        35,
        11,
        52,
        7
      ]
    },
    "demos": [
      {
        "input": [
          10,
          53,
          34,
          77
        ],
        "output": [
          9,
          10,
          53,
          34,
          77,
          7
        ]
      },
      {
        "input": [
          33,
          44,
          10,
          50,
          79
        ],
        "output": [
          9,
          33,
          44,
          10,
          50,
          79,
          7
        ]
      },
      {
        "input": [
          43,
          66,
          68
        ],
        "output": [
          9,
          43,
          66,
          68,
          7
        ]
      }
    ]
  },
  {
    "id": "c156",
    "difficulty": 112,
    "function": "def c156(x):\n    # reverse the input and add each element to its new index\n    x = x[::-1]\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        2,
        14,
        17,
        64
      ],
      "output": [
        64,
        18,
        16,
        5
      ]
    },
    "demos": [
      {
        "input": [
          6,
          7,
          34
        ],
        "output": [
          34,
          8,
          8
        ]
      },
      {
        "input": [
          80,
          61,
          21,
          56
        ],
        "output": [
          56,
          22,
          63,
          83
        ]
      },
      {
        "input": [
          52,
          54,
          74,
          22,
          43
        ],
        "output": [
          43,
          23,
          76,
          57,
          56
        ]
      }
    ]
  },
  {
    "id": "c110",
    "difficulty": 113,
    "function": "def c110(x):\n    # three largest elements in descending order\n    return sorted(x, reverse=True)[:3]\n\n",
    "data": {
      "input": [
        67,
        53,
        58,
        9
      ],
      "output": [
        67,
        58,
        53
      ]
    },
    "demos": [
      {
        "input": [
          4,
          56,
          86,
          47,
          29,
          43,
          45
        ],
        "output": [
          86,
          56,
          47
        ]
      },
      {
        "input": [
          9,
          64,
          2,
          91
        ],
        "output": [
          91,
          64,
          9
        ]
      },
      {
        "input": [
          32,
          40,
          39,
          57,
          48,
          96
        ],
        "output": [
          96,
          57,
          48
        ]
      }
    ]
  },
  {
    "id": "c233",
    "difficulty": 114,
    "function": "def c233(x):\n    # number of occurrences of each unique element, in order of appearance\n    numbers = []\n    res = []\n    for i in x:\n        if i not in numbers:\n            numbers.append(i)\n            res.append(x.count(i))\n    return res\n\n",
    "data": {
      "input": [
        0,
        5,
        2,
        9,
        10,
        0,
        1,
        10
      ],
      "output": [
        2,
        1,
        1,
        1,
        2,
        1
      ]
    },
    "demos": [
      {
        "input": [
          9,
          9,
          8,
          5,
          4,
          4,
          2
        ],
        "output": [
          2,
          1,
          1,
          2,
          1
        ]
      },
      {
        "input": [
          10,
          4,
          10,
          4,
          8,
          4,
          2
        ],
        "output": [
          2,
          3,
          1,
          1
        ]
      },
      {
        "input": [
          7,
          6,
          8,
          2,
          8
        ],
        "output": [
          1,
          1,
          2,
          1
        ]
      }
    ]
  },
  {
    "id": "c003",
    "difficulty": 115,
    "function": "def c003(x):\n    # remove all but seventh element\n    return [x[6]]\n\n",
    "data": {
      "input": [
        58,
        52,
        38,
        19,
        11,
        26,
        12,
        61
      ],
      "output": [
        12
      ]
    },
    "demos": [
      {
        "input": [
          51,
          68,
          51,
          97,
          88,
          47,
          88,
          38,
          97,
          57
        ],
        "output": [
          88
        ]
      },
      {
        "input": [
          80,
          12,
          31,
          77,
          11,
          24,
          1,
          7,
          6
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          94,
          58,
          46,
          63,
          73,
          66,
          83,
          60
        ],
        "output": [
          83
        ]
      }
    ]
  },
  {
    "id": "c230",
    "difficulty": 116,
    "function": "def c230(x):\n    # count by 2 from the smallest element to the largest element\n    return list(range(min(x), max(x)+1, 2))\n\n",
    "data": {
      "input": [
        61,
        61,
        77
      ],
      "output": [
        61,
        63,
        65,
        67,
        69,
        71,
        73,
        75,
        77
      ]
    },
    "demos": [
      {
        "input": [
          43,
          42,
          30
        ],
        "output": [
          30,
          32,
          34,
          36,
          38,
          40,
          42
        ]
      },
      {
        "input": [
          54,
          59,
          56
        ],
        "output": [
          54,
          56,
          58
        ]
      },
      {
        "input": [
          49,
          45,
          37,
          52
        ],
        "output": [
          37,
          39,
          41,
          43,
          45,
          47,
          49,
          51
        ]
      }
    ]
  },
  {
    "id": "c122",
    "difficulty": 117,
    "function": "def c122(x):\n    # remove all but penultimate element\n    return [x[-2]]\n\n",
    "data": {
      "input": [
        7,
        44,
        41,
        69,
        51,
        80
      ],
      "output": [
        51
      ]
    },
    "demos": [
      {
        "input": [
          61,
          61,
          37,
          71,
          17,
          16,
          61
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          49,
          88,
          41
        ],
        "output": [
          88
        ]
      },
      {
        "input": [
          22,
          35,
          52,
          55
        ],
        "output": [
          52
        ]
      }
    ]
  },
  {
    "id": "c020",
    "difficulty": 118,
    "function": "def c020(x):\n    # replace the first element with the last element\n    x[0] = x[-1]\n    return x\n\n",
    "data": {
      "input": [
        93,
        21,
        21,
        28
      ],
      "output": [
        28,
        21,
        21,
        28
      ]
    },
    "demos": [
      {
        "input": [
          57,
          23,
          46,
          62,
          4
        ],
        "output": [
          4,
          23,
          46,
          62,
          4
        ]
      },
      {
        "input": [
          81,
          43,
          72,
          58,
          32,
          13,
          56
        ],
        "output": [
          56,
          43,
          72,
          58,
          32,
          13,
          56
        ]
      },
      {
        "input": [
          6,
          68,
          76
        ],
        "output": [
          76,
          68,
          76
        ]
      }
    ]
  },
  {
    "id": "c235",
    "difficulty": 119,
    "function": "def c235(x):\n    # count up and down between elements\n    res = []\n    for i in range(len(x)-1):\n        if x[i] < x[i+1]:\n            res += list(range(x[i], x[i+1]+1))\n        else:\n            res += list(range(x[i], x[i+1]-1, -1))\n    return res\n\n",
    "data": {
      "input": [
        22,
        23,
        20
      ],
      "output": [
        22,
        23,
        23,
        22,
        21,
        20
      ]
    },
    "demos": [
      {
        "input": [
          66,
          65,
          66
        ],
        "output": [
          66,
          65,
          65,
          66
        ]
      },
      {
        "input": [
          9,
          13,
          14
        ],
        "output": [
          9,
          10,
          11,
          12,
          13,
          13,
          14
        ]
      },
      {
        "input": [
          65,
          67,
          70
        ],
        "output": [
          65,
          66,
          67,
          67,
          68,
          69,
          70
        ]
      }
    ]
  },
  {
    "id": "c157",
    "difficulty": 120,
    "function": "def c157(x):\n    # each element followed by 0 if even, 1 if odd\n    res = []\n    for i in x:\n        res.append(i)\n        res.append(i % 2)\n    return res\n\n",
    "data": {
      "input": [
        47,
        17,
        13,
        21,
        19,
        22
      ],
      "output": [
        47,
        1,
        17,
        1,
        13,
        1,
        21,
        1,
        19,
        1,
        22,
        0
      ]
    },
    "demos": [
      {
        "input": [
          19,
          71,
          33,
          32,
          7,
          62
        ],
        "output": [
          19,
          1,
          71,
          1,
          33,
          1,
          32,
          0,
          7,
          1,
          62,
          0
        ]
      },
      {
        "input": [
          78,
          4,
          43,
          45,
          36,
          7
        ],
        "output": [
          78,
          0,
          4,
          0,
          43,
          1,
          45,
          1,
          36,
          0,
          7,
          1
        ]
      },
      {
        "input": [
          53,
          29,
          72,
          84,
          67
        ],
        "output": [
          53,
          1,
          29,
          1,
          72,
          0,
          84,
          0,
          67,
          1
        ]
      }
    ]
  },
  {
    "id": "c185",
    "difficulty": 121,
    "function": "def c185(x):\n    # replace the sublist between the first and last with its sum\n    return x[:1] + [sum(x[1:-1])] + x[-1:]\n\n",
    "data": {
      "input": [
        10,
        0,
        17,
        17,
        16,
        13
      ],
      "output": [
        10,
        50,
        13
      ]
    },
    "demos": [
      {
        "input": [
          18,
          18,
          2,
          19,
          8
        ],
        "output": [
          18,
          39,
          8
        ]
      },
      {
        "input": [
          13,
          8,
          11,
          16
        ],
        "output": [
          13,
          19,
          16
        ]
      },
      {
        "input": [
          3,
          0,
          3,
          12
        ],
        "output": [
          3,
          3,
          12
        ]
      }
    ]
  },
  {
    "id": "c213",
    "difficulty": 122,
    "function": "def c213(x):\n    # three smallest elements in ascending order\n    return sorted(x)[:3]\n\n",
    "data": {
      "input": [
        4,
        13,
        14,
        39,
        47
      ],
      "output": [
        4,
        13,
        14
      ]
    },
    "demos": [
      {
        "input": [
          22,
          93,
          92,
          97,
          55,
          39
        ],
        "output": [
          22,
          39,
          55
        ]
      },
      {
        "input": [
          43,
          86,
          38
        ],
        "output": [
          38,
          43,
          86
        ]
      },
      {
        "input": [
          22,
          48,
          28,
          80,
          93,
          70
        ],
        "output": [
          22,
          28,
          48
        ]
      }
    ]
  },
  {
    "id": "c184",
    "difficulty": 123,
    "function": "def c184(x):\n    # keep only odd elements with an even index\n    return [i for i in x if i % 2 == 1 and x.index(i) % 2 == 0]\n\n",
    "data": {
      "input": [
        56,
        81,
        80,
        35,
        68,
        82,
        77,
        49
      ],
      "output": [
        77
      ]
    },
    "demos": [
      {
        "input": [
          99,
          40,
          5,
          66,
          72,
          57,
          53,
          71
        ],
        "output": [
          99,
          5,
          53
        ]
      },
      {
        "input": [
          11,
          2,
          63,
          32,
          13,
          98,
          13,
          37,
          31,
          36
        ],
        "output": [
          11,
          63,
          13,
          13,
          31
        ]
      },
      {
        "input": [
          7,
          49,
          28,
          53,
          80,
          57,
          40,
          4
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c155",
    "difficulty": 124,
    "function": "def c155(x):\n    # multiply each element by its index\n    return [i*j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        4,
        9,
        19,
        86,
        53
      ],
      "output": [
        0,
        9,
        38,
        258,
        212
      ]
    },
    "demos": [
      {
        "input": [
          79,
          51,
          36,
          80
        ],
        "output": [
          0,
          51,
          72,
          240
        ]
      },
      {
        "input": [
          78,
          69,
          68
        ],
        "output": [
          0,
          69,
          136
        ]
      },
      {
        "input": [
          19,
          28,
          84,
          6
        ],
        "output": [
          0,
          28,
          168,
          18
        ]
      }
    ]
  },
  {
    "id": "c082",
    "difficulty": 125,
    "function": "def c082(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        22,
        59,
        15
      ],
      "output": [
        15
      ]
    },
    "demos": [
      {
        "input": [
          58,
          2,
          18,
          4,
          15,
          55,
          3
        ],
        "output": [
          18
        ]
      },
      {
        "input": [
          93,
          47,
          98,
          10,
          95,
          95,
          14
        ],
        "output": [
          98
        ]
      },
      {
        "input": [
          27,
          78,
          8
        ],
        "output": [
          8
        ]
      }
    ]
  },
  {
    "id": "c231",
    "difficulty": 126,
    "function": "def c231(x):\n    # the number of occurrences of each unique element in ascending order\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    return sorted(res.values())\n\n",
    "data": {
      "input": [
        9,
        5,
        9,
        4,
        5,
        1,
        5,
        5,
        4,
        5,
        5
      ],
      "output": [
        1,
        2,
        2,
        6
      ]
    },
    "demos": [
      {
        "input": [
          4,
          7,
          3,
          9,
          9,
          9,
          5,
          4,
          5,
          9,
          4
        ],
        "output": [
          1,
          1,
          2,
          3,
          4
        ]
      },
      {
        "input": [
          3,
          1,
          3,
          7,
          1,
          3,
          8,
          3,
          5
        ],
        "output": [
          1,
          1,
          1,
          2,
          4
        ]
      },
      {
        "input": [
          6,
          6,
          10,
          5,
          5,
          5,
          6,
          5,
          10
        ],
        "output": [
          2,
          3,
          4
        ]
      }
    ]
  },
  {
    "id": "c099",
    "difficulty": 127,
    "function": "def c099(x):\n    # remove the lower half of the list\n    median = sorted(x)[len(x)//2]\n    return [i for i in x if i >= median]\n\n",
    "data": {
      "input": [
        32,
        12,
        29,
        17,
        48
      ],
      "output": [
        32,
        29,
        48
      ]
    },
    "demos": [
      {
        "input": [
          61,
          92,
          75,
          45,
          32,
          60
        ],
        "output": [
          61,
          92,
          75
        ]
      },
      {
        "input": [
          93,
          36,
          68,
          88,
          54,
          21
        ],
        "output": [
          93,
          68,
          88
        ]
      },
      {
        "input": [
          72,
          14,
          15,
          81,
          29,
          1,
          86
        ],
        "output": [
          72,
          81,
          29,
          86
        ]
      }
    ]
  },
  {
    "id": "c247",
    "difficulty": 128,
    "function": "def c247(x):\n    # elements before the first 0\n    return x[:x.index(0)]\n\n",
    "data": {
      "input": [
        59,
        11,
        0,
        0,
        39,
        0,
        27
      ],
      "output": [
        59,
        11
      ]
    },
    "demos": [
      {
        "input": [
          70,
          0,
          0,
          0,
          36,
          74,
          69
        ],
        "output": [
          70
        ]
      },
      {
        "input": [
          5,
          0,
          11,
          0,
          85,
          0,
          0,
          66
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          69,
          49,
          53,
          0,
          96,
          0
        ],
        "output": [
          69,
          49,
          53
        ]
      }
    ]
  },
  {
    "id": "c008",
    "difficulty": 129,
    "function": "def c008(x):\n    # the first 5 elements\n    return x[:5]\n\n",
    "data": {
      "input": [
        6,
        71,
        30,
        81,
        52,
        70
      ],
      "output": [
        6,
        71,
        30,
        81,
        52
      ]
    },
    "demos": [
      {
        "input": [
          14,
          29,
          76,
          13,
          61
        ],
        "output": [
          14,
          29,
          76,
          13,
          61
        ]
      },
      {
        "input": [
          79,
          55,
          76,
          90,
          63,
          89,
          72,
          59
        ],
        "output": [
          79,
          55,
          76,
          90,
          63
        ]
      },
      {
        "input": [
          12,
          19,
          92,
          16,
          41
        ],
        "output": [
          12,
          19,
          92,
          16,
          41
        ]
      }
    ]
  },
  {
    "id": "c055",
    "difficulty": 130,
    "function": "def c055(x):\n    # swap x[0], x[2] and x[1], x[3]\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        8,
        1,
        77,
        32
      ],
      "output": [
        77,
        32,
        8,
        1
      ]
    },
    "demos": [
      {
        "input": [
          29,
          74,
          40,
          78
        ],
        "output": [
          40,
          78,
          29,
          74
        ]
      },
      {
        "input": [
          99,
          9,
          82,
          78,
          5
        ],
        "output": [
          82,
          78,
          99,
          9,
          5
        ]
      },
      {
        "input": [
          48,
          72,
          31,
          25,
          55
        ],
        "output": [
          31,
          25,
          48,
          72,
          55
        ]
      }
    ]
  },
  {
    "id": "c029",
    "difficulty": 131,
    "function": "def c029(x):\n    # remove the first 2 elements\n    return x[2:]\n\n",
    "data": {
      "input": [
        57,
        35,
        32,
        31,
        50
      ],
      "output": [
        32,
        31,
        50
      ]
    },
    "demos": [
      {
        "input": [
          83,
          30,
          74,
          50,
          79
        ],
        "output": [
          74,
          50,
          79
        ]
      },
      {
        "input": [
          49,
          79,
          45,
          30,
          4,
          14
        ],
        "output": [
          45,
          30,
          4,
          14
        ]
      },
      {
        "input": [
          88,
          10,
          62,
          25
        ],
        "output": [
          62,
          25
        ]
      }
    ]
  },
  {
    "id": "c168",
    "difficulty": 132,
    "function": "def c168(x):\n    # count from 1 to 10, skipping the length of the input\n    return [i for i in range(1, 11) if i != len(x)]\n\n",
    "data": {
      "input": [
        40,
        76,
        24,
        64
      ],
      "output": [
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10
      ]
    },
    "demos": [
      {
        "input": [
          39,
          34,
          72,
          58
        ],
        "output": [
          1,
          2,
          3,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          89,
          58,
          25,
          49,
          5
        ],
        "output": [
          1,
          2,
          3,
          4,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          8,
          86,
          17,
          6,
          69
        ],
        "output": [
          1,
          2,
          3,
          4,
          6,
          7,
          8,
          9,
          10
        ]
      }
    ]
  },
  {
    "id": "c009",
    "difficulty": 133,
    "function": "def c009(x):\n    # remove all but the first 3 elements\n    return x[:3]\n\n",
    "data": {
      "input": [
        43,
        31,
        20,
        28,
        28,
        95,
        94
      ],
      "output": [
        43,
        31,
        20
      ]
    },
    "demos": [
      {
        "input": [
          43,
          41,
          80,
          67,
          85,
          64,
          20
        ],
        "output": [
          43,
          41,
          80
        ]
      },
      {
        "input": [
          18,
          32,
          64,
          76,
          95
        ],
        "output": [
          18,
          32,
          64
        ]
      },
      {
        "input": [
          26,
          88,
          79,
          5
        ],
        "output": [
          26,
          88,
          79
        ]
      }
    ]
  },
  {
    "id": "c133",
    "difficulty": 134,
    "function": "def c133(x):\n    # remove elements 1 through 4\n    return x[:1] + x[5:]\n\n",
    "data": {
      "input": [
        36,
        64,
        70,
        89,
        58
      ],
      "output": [
        36
      ]
    },
    "demos": [
      {
        "input": [
          90,
          60,
          50,
          79,
          87,
          15,
          91,
          37
        ],
        "output": [
          90,
          15,
          91,
          37
        ]
      },
      {
        "input": [
          40,
          2,
          9,
          20,
          49,
          65,
          83,
          67
        ],
        "output": [
          40,
          65,
          83,
          67
        ]
      },
      {
        "input": [
          47,
          24,
          32,
          26,
          64,
          31
        ],
        "output": [
          47,
          31
        ]
      }
    ]
  },
  {
    "id": "c146",
    "difficulty": 135,
    "function": "def c146(x):\n    # absolute difference between each consecutive pair of elements\n    return [abs(x[i] - x[i+1]) for i in range(len(x)-1)]\n\n",
    "data": {
      "input": [
        73,
        88,
        26,
        23,
        11
      ],
      "output": [
        15,
        62,
        3,
        12
      ]
    },
    "demos": [
      {
        "input": [
          73,
          81,
          44,
          31,
          67,
          71,
          4,
          33
        ],
        "output": [
          8,
          37,
          13,
          36,
          4,
          67,
          29
        ]
      },
      {
        "input": [
          8,
          59,
          9,
          22,
          68,
          95,
          42,
          0
        ],
        "output": [
          51,
          50,
          13,
          46,
          27,
          53,
          42
        ]
      },
      {
        "input": [
          99,
          57,
          9,
          75,
          26,
          25,
          69,
          34,
          63
        ],
        "output": [
          42,
          48,
          66,
          49,
          1,
          44,
          35,
          29
        ]
      }
    ]
  },
  {
    "id": "c004",
    "difficulty": 136,
    "function": "def c004(x):\n    # remove all but element 3\n    return [x[2]]\n\n",
    "data": {
      "input": [
        54,
        36,
        76
      ],
      "output": [
        76
      ]
    },
    "demos": [
      {
        "input": [
          29,
          0,
          29
        ],
        "output": [
          29
        ]
      },
      {
        "input": [
          95,
          90,
          97,
          10,
          40,
          35,
          2
        ],
        "output": [
          97
        ]
      },
      {
        "input": [
          45,
          19,
          3
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c240",
    "difficulty": 137,
    "function": "def c240(x):\n    # number of elements equal to the input length\n    return [x.count(len(x))]\n\n",
    "data": {
      "input": [
        88,
        21,
        34,
        46,
        48,
        9,
        9,
        9,
        68
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          56,
          4,
          39,
          5,
          89
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          30,
          7,
          10,
          10,
          91,
          10,
          85,
          61,
          10,
          37
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          53,
          42,
          83,
          86,
          33,
          5,
          13,
          8
        ],
        "output": [
          1
        ]
      }
    ]
  },
  {
    "id": "c239",
    "difficulty": 138,
    "function": "def c239(x):\n    # number of repetitions in the input\n    res = {}\n    out = 0\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out += 1\n    return [out]\n\n",
    "data": {
      "input": [
        0,
        10,
        6,
        6,
        6,
        5,
        5,
        0
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          7,
          5,
          7,
          8,
          7,
          8,
          6
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          7,
          5,
          5,
          9,
          9,
          3,
          9,
          1,
          3,
          2,
          2
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          4,
          0,
          0,
          0,
          8,
          10,
          10,
          0,
          0
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c246",
    "difficulty": 139,
    "function": "def c246(x):\n    # number of unique elements\n    return [len(set(x))]\n\n",
    "data": {
      "input": [
        51,
        80,
        50,
        79,
        57,
        72,
        79,
        72,
        94,
        80
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          36,
          14,
          84,
          76,
          84,
          53,
          36,
          85,
          93,
          53
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          47,
          26,
          94,
          55,
          59,
          94,
          81,
          55,
          59,
          8
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          54,
          1,
          54,
          13,
          1,
          60
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c138",
    "difficulty": 140,
    "function": "def c138(x):\n    # remove all occurrences of the first element\n    return [i for i in x if i != x[0]]\n\n",
    "data": {
      "input": [
        3,
        69,
        99,
        69,
        26,
        27,
        64,
        64
      ],
      "output": [
        69,
        99,
        69,
        26,
        27,
        64,
        64
      ]
    },
    "demos": [
      {
        "input": [
          55,
          90,
          81,
          59
        ],
        "output": [
          90,
          81,
          59
        ]
      },
      {
        "input": [
          12,
          6,
          6,
          16,
          6,
          0,
          6,
          33,
          41
        ],
        "output": [
          6,
          6,
          16,
          6,
          0,
          6,
          33,
          41
        ]
      },
      {
        "input": [
          46,
          58,
          20,
          22,
          46,
          46,
          48,
          46,
          79
        ],
        "output": [
          58,
          20,
          22,
          48,
          79
        ]
      }
    ]
  },
  {
    "id": "c018",
    "difficulty": 141,
    "function": "def c018(x):\n    # replace element 1 with 9\n    x[1] = 9\n    return x\n\n",
    "data": {
      "input": [
        58,
        86,
        50,
        65,
        8
      ],
      "output": [
        58,
        9,
        50,
        65,
        8
      ]
    },
    "demos": [
      {
        "input": [
          99,
          47,
          65,
          68
        ],
        "output": [
          99,
          9,
          65,
          68
        ]
      },
      {
        "input": [
          1,
          22,
          55,
          73,
          24,
          82,
          93
        ],
        "output": [
          1,
          9,
          55,
          73,
          24,
          82,
          93
        ]
      },
      {
        "input": [
          44,
          5,
          4
        ],
        "output": [
          44,
          9,
          4
        ]
      }
    ]
  },
  {
    "id": "c012",
    "difficulty": 142,
    "function": "def c012(x):\n    # remove all but elements 1 through 3\n    return x[1:4]\n\n",
    "data": {
      "input": [
        10,
        28,
        18,
        82,
        54
      ],
      "output": [
        28,
        18,
        82
      ]
    },
    "demos": [
      {
        "input": [
          26,
          6,
          64,
          33,
          96,
          38
        ],
        "output": [
          6,
          64,
          33
        ]
      },
      {
        "input": [
          23,
          67,
          39,
          64,
          97
        ],
        "output": [
          67,
          39,
          64
        ]
      },
      {
        "input": [
          23,
          7,
          3,
          36,
          9,
          66,
          90
        ],
        "output": [
          7,
          3,
          36
        ]
      }
    ]
  },
  {
    "id": "c232",
    "difficulty": 143,
    "function": "def c232(x):\n    # mean of the list, rounded to the nearest integer\n    return [round(sum(x)/len(x))]\n\n",
    "data": {
      "input": [
        29,
        89,
        79
      ],
      "output": [
        66
      ]
    },
    "demos": [
      {
        "input": [
          22,
          19,
          93,
          73
        ],
        "output": [
          52
        ]
      },
      {
        "input": [
          98,
          34,
          86,
          30
        ],
        "output": [
          62
        ]
      },
      {
        "input": [
          49,
          35,
          61,
          83
        ],
        "output": [
          57
        ]
      }
    ]
  },
  {
    "id": "c094",
    "difficulty": 144,
    "function": "def c094(x):\n    # swap 0,2 and 1,3\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        14,
        25,
        4,
        6,
        48,
        36,
        61
      ],
      "output": [
        4,
        6,
        14,
        25,
        48,
        36,
        61
      ]
    },
    "demos": [
      {
        "input": [
          87,
          62,
          36,
          84,
          49,
          86,
          19
        ],
        "output": [
          36,
          84,
          87,
          62,
          49,
          86,
          19
        ]
      },
      {
        "input": [
          47,
          61,
          29,
          26,
          1,
          68
        ],
        "output": [
          29,
          26,
          47,
          61,
          1,
          68
        ]
      },
      {
        "input": [
          37,
          61,
          10,
          69,
          27,
          76,
          99
        ],
        "output": [
          10,
          69,
          37,
          61,
          27,
          76,
          99
        ]
      }
    ]
  },
  {
    "id": "c086",
    "difficulty": 145,
    "function": "def c086(x):\n    # swap elements 0 and 3\n    x[0], x[3] = x[3], x[0]\n    return x\n\n",
    "data": {
      "input": [
        49,
        44,
        79,
        18,
        69,
        64
      ],
      "output": [
        18,
        44,
        79,
        49,
        69,
        64
      ]
    },
    "demos": [
      {
        "input": [
          29,
          36,
          72,
          59,
          94,
          87,
          83
        ],
        "output": [
          59,
          36,
          72,
          29,
          94,
          87,
          83
        ]
      },
      {
        "input": [
          96,
          39,
          53,
          68,
          95,
          71
        ],
        "output": [
          68,
          39,
          53,
          96,
          95,
          71
        ]
      },
      {
        "input": [
          77,
          70,
          49,
          91,
          18,
          16,
          1
        ],
        "output": [
          91,
          70,
          49,
          77,
          18,
          16,
          1
        ]
      }
    ]
  },
  {
    "id": "c193",
    "difficulty": 146,
    "function": "def c193(x):\n    # remove the smallest element and the largest element, output in ascending order\n    return sorted(x[1:-1])\n\n",
    "data": {
      "input": [
        4,
        94,
        98,
        15
      ],
      "output": [
        94,
        98
      ]
    },
    "demos": [
      {
        "input": [
          25,
          55,
          49,
          34,
          23,
          25,
          99
        ],
        "output": [
          23,
          25,
          34,
          49,
          55
        ]
      },
      {
        "input": [
          12,
          9,
          26,
          80,
          52,
          54,
          41
        ],
        "output": [
          9,
          26,
          52,
          54,
          80
        ]
      },
      {
        "input": [
          13,
          18,
          54,
          28,
          50,
          32
        ],
        "output": [
          18,
          28,
          50,
          54
        ]
      }
    ]
  },
  {
    "id": "c056",
    "difficulty": 147,
    "function": "def c056(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        41,
        12,
        80,
        77
      ],
      "output": [
        41,
        12,
        77
      ]
    },
    "demos": [
      {
        "input": [
          35,
          2,
          58,
          9
        ],
        "output": [
          35,
          2,
          9
        ]
      },
      {
        "input": [
          13,
          27,
          94,
          83,
          10
        ],
        "output": [
          13,
          27,
          83,
          10
        ]
      },
      {
        "input": [
          71,
          50,
          3,
          66,
          26,
          8
        ],
        "output": [
          71,
          50,
          66,
          26,
          8
        ]
      }
    ]
  },
  {
    "id": "c028",
    "difficulty": 148,
    "function": "def c028(x):\n    # remove element 1 if element 0 > element 1, else remove element 2\n    if x[0] > x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        4,
        8,
        82,
        83,
        21,
        98,
        68,
        72
      ],
      "output": [
        4,
        8,
        83,
        21,
        98,
        68,
        72
      ]
    },
    "demos": [
      {
        "input": [
          13,
          90,
          25,
          58,
          0
        ],
        "output": [
          13,
          90,
          58,
          0
        ]
      },
      {
        "input": [
          2,
          11,
          29,
          21,
          48,
          32
        ],
        "output": [
          2,
          11,
          21,
          48,
          32
        ]
      },
      {
        "input": [
          61,
          12,
          97,
          27
        ],
        "output": [
          61,
          97,
          27
        ]
      }
    ]
  },
  {
    "id": "c220",
    "difficulty": 149,
    "function": "def c220(x):\n    # if input length is even, double each element, else triple each element\n    if len(x) % 2 == 0:\n        return [i*2 for i in x]\n    else:\n        return [i*3 for i in x]\n\n",
    "data": {
      "input": [
        97,
        40,
        87,
        24,
        35
      ],
      "output": [
        291,
        120,
        261,
        72,
        105
      ]
    },
    "demos": [
      {
        "input": [
          29,
          44,
          43,
          81,
          11,
          88,
          98
        ],
        "output": [
          87,
          132,
          129,
          243,
          33,
          264,
          294
        ]
      },
      {
        "input": [
          50,
          77,
          31,
          41,
          99,
          49
        ],
        "output": [
          100,
          154,
          62,
          82,
          198,
          98
        ]
      },
      {
        "input": [
          14,
          1,
          56,
          80,
          76,
          59
        ],
        "output": [
          28,
          2,
          112,
          160,
          152,
          118
        ]
      }
    ]
  },
  {
    "id": "c241",
    "difficulty": 150,
    "function": "def c241(x):\n    # number of even elements\n    return [len([i for i in x if i % 2 == 0])]\n\n",
    "data": {
      "input": [
        27,
        66,
        65,
        48
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          2,
          50,
          3,
          9,
          25
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          30,
          3,
          9,
          51
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          50,
          26,
          12,
          7,
          1
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c060",
    "difficulty": 151,
    "function": "def c060(x):\n    # element 2,1,0,3,4,6 remove the rest\n    return [x[2], x[1], x[0], x[3], x[4], x[6]]\n\n",
    "data": {
      "input": [
        83,
        29,
        27,
        93,
        47,
        38,
        80,
        24,
        81
      ],
      "output": [
        27,
        29,
        83,
        93,
        47,
        80
      ]
    },
    "demos": [
      {
        "input": [
          91,
          14,
          82,
          30,
          13,
          14,
          27,
          86,
          28
        ],
        "output": [
          82,
          14,
          91,
          30,
          13,
          27
        ]
      },
      {
        "input": [
          60,
          85,
          2,
          77,
          3,
          6,
          16,
          81,
          57,
          99
        ],
        "output": [
          2,
          85,
          60,
          77,
          3,
          16
        ]
      },
      {
        "input": [
          88,
          12,
          81,
          16,
          28,
          41,
          74,
          62,
          36
        ],
        "output": [
          81,
          12,
          88,
          16,
          28,
          74
        ]
      }
    ]
  },
  {
    "id": "c169",
    "difficulty": 152,
    "function": "def c169(x):\n    # second largest element\n    return [sorted(x)[-2]]\n\n",
    "data": {
      "input": [
        84,
        1,
        38,
        79,
        78,
        35
      ],
      "output": [
        79
      ]
    },
    "demos": [
      {
        "input": [
          30,
          16,
          41,
          88,
          84
        ],
        "output": [
          84
        ]
      },
      {
        "input": [
          93,
          44,
          74,
          38
        ],
        "output": [
          74
        ]
      },
      {
        "input": [
          59,
          95,
          9,
          65
        ],
        "output": [
          65
        ]
      }
    ]
  },
  {
    "id": "c057",
    "difficulty": 153,
    "function": "def c057(x):\n    # insert a 4 as element 2\n    return x[:2] + [4] + x[2:]\n\n",
    "data": {
      "input": [
        44,
        25,
        40,
        42
      ],
      "output": [
        44,
        25,
        4,
        40,
        42
      ]
    },
    "demos": [
      {
        "input": [
          63,
          19,
          8,
          37,
          4
        ],
        "output": [
          63,
          19,
          4,
          8,
          37,
          4
        ]
      },
      {
        "input": [
          78,
          22,
          78,
          4,
          24
        ],
        "output": [
          78,
          22,
          4,
          78,
          4,
          24
        ]
      },
      {
        "input": [
          10,
          71,
          98,
          45,
          1,
          9,
          1
        ],
        "output": [
          10,
          71,
          4,
          98,
          45,
          1,
          9,
          1
        ]
      }
    ]
  },
  {
    "id": "c150",
    "difficulty": 154,
    "function": "def c150(x):\n    # count from first element to each element if the element is greater than the first element\n    res = []\n    for i in x:\n        if i > x[0]:\n            res += list(range(x[0], i+1))\n        else:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        28,
        29,
        2
      ],
      "output": [
        28,
        28,
        29,
        2
      ]
    },
    "demos": [
      {
        "input": [
          24,
          26,
          27,
          4
        ],
        "output": [
          24,
          24,
          25,
          26,
          24,
          25,
          26,
          27,
          4
        ]
      },
      {
        "input": [
          33,
          32,
          20,
          36,
          38
        ],
        "output": [
          33,
          32,
          20,
          33,
          34,
          35,
          36,
          33,
          34,
          35,
          36,
          37,
          38
        ]
      },
      {
        "input": [
          25,
          30,
          20,
          23
        ],
        "output": [
          25,
          25,
          26,
          27,
          28,
          29,
          30,
          20,
          23
        ]
      }
    ]
  },
  {
    "id": "c033",
    "difficulty": 155,
    "function": "def c033(x):\n    # swap element 0 and 2\n    x[0], x[2] = x[2], x[0]\n    return x\n\n",
    "data": {
      "input": [
        75,
        76,
        9,
        40,
        23,
        37,
        34
      ],
      "output": [
        9,
        76,
        75,
        40,
        23,
        37,
        34
      ]
    },
    "demos": [
      {
        "input": [
          23,
          16,
          22,
          11,
          83,
          16,
          81
        ],
        "output": [
          22,
          16,
          23,
          11,
          83,
          16,
          81
        ]
      },
      {
        "input": [
          65,
          91,
          98,
          30
        ],
        "output": [
          98,
          91,
          65,
          30
        ]
      },
      {
        "input": [
          82,
          7,
          38,
          19,
          65
        ],
        "output": [
          38,
          7,
          82,
          19,
          65
        ]
      }
    ]
  },
  {
    "id": "c218",
    "difficulty": 156,
    "function": "def c218(x):\n    # keep only second element and following equal to the first element\n    return [x[1]] + [i for i in x[2:] if i == x[0]]\n\n",
    "data": {
      "input": [
        72,
        62,
        23,
        72,
        32
      ],
      "output": [
        62,
        72
      ]
    },
    "demos": [
      {
        "input": [
          52,
          58,
          40,
          84,
          85,
          5,
          52,
          44,
          48,
          52
        ],
        "output": [
          58,
          52,
          52
        ]
      },
      {
        "input": [
          65,
          16,
          65,
          65,
          65,
          6,
          13,
          99,
          32,
          25
        ],
        "output": [
          16,
          65,
          65,
          65
        ]
      },
      {
        "input": [
          14,
          14,
          24,
          31,
          61,
          72,
          39
        ],
        "output": [
          14
        ]
      }
    ]
  },
  {
    "id": "c136",
    "difficulty": 158,
    "function": "def c136(x):\n    # remove the first occurrence of the largest element, keep the rest\n    x.remove(max(x))\n    return x\n\n",
    "data": {
      "input": [
        50,
        87,
        48,
        96,
        0,
        38
      ],
      "output": [
        50,
        87,
        48,
        0,
        38
      ]
    },
    "demos": [
      {
        "input": [
          9,
          23,
          35,
          49
        ],
        "output": [
          9,
          23,
          35
        ]
      },
      {
        "input": [
          83,
          83,
          21,
          33,
          43,
          12
        ],
        "output": [
          83,
          21,
          33,
          43,
          12
        ]
      },
      {
        "input": [
          0,
          83,
          60,
          42,
          74,
          15,
          18,
          72
        ],
        "output": [
          0,
          60,
          42,
          74,
          15,
          18,
          72
        ]
      }
    ]
  },
  {
    "id": "c083",
    "difficulty": 159,
    "function": "def c083(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        52,
        89,
        1,
        81,
        36,
        17,
        53,
        30,
        82
      ],
      "output": [
        53
      ]
    },
    "demos": [
      {
        "input": [
          69,
          64,
          74,
          15,
          15,
          38,
          14
        ],
        "output": [
          14
        ]
      },
      {
        "input": [
          59,
          53,
          7,
          79,
          52,
          1,
          78
        ],
        "output": [
          78
        ]
      },
      {
        "input": [
          96,
          56,
          12,
          93,
          37,
          32,
          61,
          18
        ],
        "output": [
          61
        ]
      }
    ]
  },
  {
    "id": "c019",
    "difficulty": 160,
    "function": "def c019(x):\n    # replace element 5 with a 3 if there is an element 5\n    if len(x) > 5:\n        x[4] = 3\n    return x\n\n",
    "data": {
      "input": [
        4,
        33,
        60,
        77,
        96
      ],
      "output": [
        4,
        33,
        60,
        77,
        96
      ]
    },
    "demos": [
      {
        "input": [
          45,
          3,
          18,
          5,
          65,
          38
        ],
        "output": [
          45,
          3,
          18,
          5,
          3,
          38
        ]
      },
      {
        "input": [
          62,
          74,
          3,
          54,
          47
        ],
        "output": [
          62,
          74,
          3,
          54,
          47
        ]
      },
      {
        "input": [
          12,
          96,
          9,
          82,
          3,
          86,
          84
        ],
        "output": [
          12,
          96,
          9,
          82,
          3,
          86,
          84
        ]
      }
    ]
  },
  {
    "id": "c203",
    "difficulty": 161,
    "function": "def c203(x):\n    # the first M positive multiples of the smallest element, M is the length of the input\n    return [min(x)*i for i in range(1, len(x)+1)]\n\n",
    "data": {
      "input": [
        6,
        2,
        20,
        2,
        25
      ],
      "output": [
        2,
        4,
        6,
        8,
        10
      ]
    },
    "demos": [
      {
        "input": [
          23,
          1,
          15,
          9,
          21
        ],
        "output": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      {
        "input": [
          19,
          18,
          20,
          13,
          11
        ],
        "output": [
          11,
          22,
          33,
          44,
          55
        ]
      },
      {
        "input": [
          4,
          18,
          3,
          4,
          16
        ],
        "output": [
          3,
          6,
          9,
          12,
          15
        ]
      }
    ]
  },
  {
    "id": "c115",
    "difficulty": 162,
    "function": "def c115(x):\n    # the unique elements, prepended and appended by their sum\n    res = list(set(x))\n    return [sum(res)] + res + [sum(res)]\n\n",
    "data": {
      "input": [
        28,
        19,
        7,
        19
      ],
      "output": [
        54,
        19,
        28,
        7,
        54
      ]
    },
    "demos": [
      {
        "input": [
          25,
          22,
          15,
          30
        ],
        "output": [
          92,
          25,
          30,
          22,
          15,
          92
        ]
      },
      {
        "input": [
          0,
          10,
          22,
          10,
          17,
          10,
          5
        ],
        "output": [
          54,
          0,
          5,
          10,
          17,
          22,
          54
        ]
      },
      {
        "input": [
          25,
          15,
          15,
          25,
          18,
          27,
          22
        ],
        "output": [
          107,
          15,
          18,
          22,
          25,
          27,
          107
        ]
      }
    ]
  },
  {
    "id": "c207",
    "difficulty": 163,
    "function": "def c207(x):\n    # element-wise sum of the input and the reverse of the input\n    return [i+j for i, j in zip(x, x[::-1])]\n\n",
    "data": {
      "input": [
        46,
        48,
        42,
        26,
        46
      ],
      "output": [
        92,
        74,
        84,
        74,
        92
      ]
    },
    "demos": [
      {
        "input": [
          24,
          22,
          34,
          27,
          47,
          0,
          16
        ],
        "output": [
          40,
          22,
          81,
          54,
          81,
          22,
          40
        ]
      },
      {
        "input": [
          6,
          23,
          19,
          23,
          5,
          20
        ],
        "output": [
          26,
          28,
          42,
          42,
          28,
          26
        ]
      },
      {
        "input": [
          3,
          1,
          44,
          15,
          47
        ],
        "output": [
          50,
          16,
          88,
          16,
          50
        ]
      }
    ]
  },
  {
    "id": "c088",
    "difficulty": 164,
    "function": "def c088(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        76,
        45,
        56,
        69,
        11,
        95,
        99
      ],
      "output": [
        76,
        56,
        45,
        69,
        11,
        95,
        99
      ]
    },
    "demos": [
      {
        "input": [
          42,
          5,
          27,
          51,
          53,
          49
        ],
        "output": [
          42,
          27,
          5,
          51,
          53,
          49
        ]
      },
      {
        "input": [
          14,
          65,
          65,
          4,
          69
        ],
        "output": [
          4,
          65,
          65,
          14,
          69
        ]
      },
      {
        "input": [
          10,
          7,
          7,
          36,
          64,
          53
        ],
        "output": [
          36,
          7,
          7,
          10,
          64,
          53
        ]
      }
    ]
  },
  {
    "id": "c040",
    "difficulty": 165,
    "function": "def c040(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        25,
        8,
        3,
        20,
        20
      ],
      "output": [
        25,
        8,
        3,
        20,
        20,
        3
      ]
    },
    "demos": [
      {
        "input": [
          12,
          3,
          29,
          28,
          23,
          12
        ],
        "output": [
          12,
          3,
          29,
          28,
          23,
          12,
          3
        ]
      },
      {
        "input": [
          8,
          20,
          21,
          29,
          11
        ],
        "output": [
          8,
          20,
          21,
          29,
          11
        ]
      },
      {
        "input": [
          17,
          20,
          14,
          19,
          26
        ],
        "output": [
          17,
          20,
          14,
          19,
          26
        ]
      }
    ]
  },
  {
    "id": "c085",
    "difficulty": 166,
    "function": "def c085(x):\n    # remove all but element N, N=first element\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        5,
        44,
        12,
        42,
        4,
        37
      ],
      "output": [
        37
      ]
    },
    "demos": [
      {
        "input": [
          1,
          19,
          28,
          9,
          16,
          1,
          5
        ],
        "output": [
          19
        ]
      },
      {
        "input": [
          2,
          28,
          4,
          7
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          6,
          18,
          14,
          25,
          10,
          28,
          19
        ],
        "output": [
          19
        ]
      }
    ]
  },
  {
    "id": "c111",
    "difficulty": 167,
    "function": "def c111(x):\n    # repeat the largest element N times, where N is the smallest element\n    return [max(x)] * min(x)\n\n",
    "data": {
      "input": [
        12,
        13,
        6,
        3,
        15,
        26
      ],
      "output": [
        26,
        26,
        26
      ]
    },
    "demos": [
      {
        "input": [
          30,
          6,
          2,
          8,
          2
        ],
        "output": [
          30,
          30
        ]
      },
      {
        "input": [
          16,
          14,
          3,
          27,
          26,
          9,
          14
        ],
        "output": [
          27,
          27,
          27
        ]
      },
      {
        "input": [
          5,
          10,
          14,
          8,
          3,
          27,
          1
        ],
        "output": [
          27
        ]
      }
    ]
  },
  {
    "id": "c073",
    "difficulty": 168,
    "function": "def c073(x):\n    # add the index to every element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        5,
        9,
        34,
        24,
        32,
        25
      ],
      "output": [
        5,
        10,
        36,
        27,
        36,
        30
      ]
    },
    "demos": [
      {
        "input": [
          5,
          29,
          42,
          0,
          26
        ],
        "output": [
          5,
          30,
          44,
          3,
          30
        ]
      },
      {
        "input": [
          7,
          1,
          13,
          25,
          30,
          27,
          16
        ],
        "output": [
          7,
          2,
          15,
          28,
          34,
          32,
          22
        ]
      },
      {
        "input": [
          12,
          34,
          28,
          49,
          30,
          41
        ],
        "output": [
          12,
          35,
          30,
          52,
          34,
          46
        ]
      }
    ]
  },
  {
    "id": "c027",
    "difficulty": 169,
    "function": "def c027(x):\n    # remove element 1 if element 0 = element 1, else remove element 2\n    if x[0] == x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        11,
        11,
        43,
        85,
        73
      ],
      "output": [
        11,
        43,
        85,
        73
      ]
    },
    "demos": [
      {
        "input": [
          28,
          96,
          57,
          98,
          79,
          18
        ],
        "output": [
          28,
          96,
          98,
          79,
          18
        ]
      },
      {
        "input": [
          91,
          91,
          80,
          90,
          85,
          77
        ],
        "output": [
          91,
          80,
          90,
          85,
          77
        ]
      },
      {
        "input": [
          12,
          75,
          67,
          82,
          40
        ],
        "output": [
          12,
          75,
          82,
          40
        ]
      }
    ]
  },
  {
    "id": "c234",
    "difficulty": 170,
    "function": "def c234(x):\n    # repetitions in order of first appearance\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out.append(i)\n    return out\n\n",
    "data": {
      "input": [
        61,
        32,
        87,
        32,
        65,
        3,
        74,
        74,
        45
      ],
      "output": [
        32,
        74
      ]
    },
    "demos": [
      {
        "input": [
          99,
          40,
          7,
          88,
          90,
          7,
          88
        ],
        "output": [
          7,
          88
        ]
      },
      {
        "input": [
          90,
          52,
          37,
          52,
          68,
          52,
          99,
          52,
          0
        ],
        "output": [
          52
        ]
      },
      {
        "input": [
          47,
          67,
          54,
          54,
          7,
          54,
          22
        ],
        "output": [
          54
        ]
      }
    ]
  },
  {
    "id": "c165",
    "difficulty": 171,
    "function": "def c165(x):\n    # reverse the input and keep only even elements\n    return [i for i in x[::-1] if i % 2 == 0]\n\n",
    "data": {
      "input": [
        29,
        38,
        69,
        1,
        65,
        47,
        28,
        85
      ],
      "output": [
        28,
        38
      ]
    },
    "demos": [
      {
        "input": [
          33,
          0,
          50,
          53,
          85,
          0
        ],
        "output": [
          0,
          50,
          0
        ]
      },
      {
        "input": [
          21,
          42,
          78,
          81,
          58,
          19
        ],
        "output": [
          58,
          78,
          42
        ]
      },
      {
        "input": [
          14,
          93,
          41,
          77,
          55,
          7,
          87
        ],
        "output": [
          14
        ]
      }
    ]
  },
  {
    "id": "c191",
    "difficulty": 172,
    "function": "def c191(x):\n    # repeat each element N times, where N is its tens digit\n    out = []\n    for i in x:\n        if len(str(i)) > 1:\n            out += [i] * int(str(i)[-2])\n    return out\n\n",
    "data": {
      "input": [
        29,
        29,
        24,
        0,
        4
      ],
      "output": [
        29,
        29,
        29,
        29,
        24,
        24
      ]
    },
    "demos": [
      {
        "input": [
          18,
          18,
          35,
          37,
          26
        ],
        "output": [
          18,
          18,
          35,
          35,
          35,
          37,
          37,
          37,
          26,
          26
        ]
      },
      {
        "input": [
          27,
          19,
          14,
          38,
          21,
          32
        ],
        "output": [
          27,
          27,
          19,
          14,
          38,
          38,
          38,
          21,
          21,
          32,
          32,
          32
        ]
      },
      {
        "input": [
          20,
          21,
          21,
          13
        ],
        "output": [
          20,
          20,
          21,
          21,
          21,
          21,
          13
        ]
      }
    ]
  },
  {
    "id": "c026",
    "difficulty": 173,
    "function": "def c026(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        33,
        42,
        92,
        14,
        18,
        40,
        40
      ],
      "output": [
        33,
        42,
        14,
        18,
        40,
        40
      ]
    },
    "demos": [
      {
        "input": [
          16,
          75,
          90,
          60
        ],
        "output": [
          16,
          75,
          60
        ]
      },
      {
        "input": [
          96,
          76,
          76,
          62,
          64,
          1
        ],
        "output": [
          96,
          76,
          62,
          64,
          1
        ]
      },
      {
        "input": [
          79,
          64,
          43,
          53,
          60,
          87
        ],
        "output": [
          79,
          64,
          53,
          60,
          87
        ]
      }
    ]
  },
  {
    "id": "c059",
    "difficulty": 174,
    "function": "def c059(x):\n    # swap element 2 and element 5\n    x[2], x[5] = x[5], x[2]\n    return x\n\n",
    "data": {
      "input": [
        10,
        6,
        57,
        4,
        18,
        22,
        27,
        64
      ],
      "output": [
        10,
        6,
        22,
        4,
        18,
        57,
        27,
        64
      ]
    },
    "demos": [
      {
        "input": [
          83,
          45,
          20,
          8,
          41,
          42,
          44
        ],
        "output": [
          83,
          45,
          42,
          8,
          41,
          20,
          44
        ]
      },
      {
        "input": [
          55,
          0,
          41,
          50,
          42,
          46,
          24,
          9
        ],
        "output": [
          55,
          0,
          46,
          50,
          42,
          41,
          24,
          9
        ]
      },
      {
        "input": [
          53,
          21,
          23,
          26,
          14,
          75,
          79
        ],
        "output": [
          53,
          21,
          75,
          26,
          14,
          23,
          79
        ]
      }
    ]
  },
  {
    "id": "c074",
    "difficulty": 175,
    "function": "def c074(x):\n    # remove every element whose value < 8\n    return [i for i in x if i >= 8]\n\n",
    "data": {
      "input": [
        21,
        28,
        7,
        23,
        20,
        30
      ],
      "output": [
        21,
        28,
        23,
        20,
        30
      ]
    },
    "demos": [
      {
        "input": [
          11,
          7,
          14,
          15,
          23
        ],
        "output": [
          11,
          14,
          15,
          23
        ]
      },
      {
        "input": [
          23,
          15,
          17,
          8,
          5
        ],
        "output": [
          23,
          15,
          17,
          8
        ]
      },
      {
        "input": [
          8,
          13,
          1,
          13,
          18,
          0
        ],
        "output": [
          8,
          13,
          13,
          18
        ]
      }
    ]
  },
  {
    "id": "c173",
    "difficulty": 176,
    "function": "def c173(x):\n    # replace element N with the largest element in element 0 through N\n    for i in range(len(x)):\n        x[i] = max(x[:i+1])\n    return x\n\n",
    "data": {
      "input": [
        18,
        97,
        68,
        85,
        47
      ],
      "output": [
        18,
        97,
        97,
        97,
        97
      ]
    },
    "demos": [
      {
        "input": [
          54,
          75,
          77,
          0,
          54,
          23
        ],
        "output": [
          54,
          75,
          77,
          77,
          77,
          77
        ]
      },
      {
        "input": [
          9,
          33,
          33,
          59,
          68,
          36,
          20,
          63
        ],
        "output": [
          9,
          33,
          33,
          59,
          68,
          68,
          68,
          68
        ]
      },
      {
        "input": [
          33,
          2,
          25,
          24,
          81,
          58
        ],
        "output": [
          33,
          33,
          33,
          33,
          81,
          81
        ]
      }
    ]
  },
  {
    "id": "c175",
    "difficulty": 177,
    "function": "def c175(x):\n    # keep only elements larger than any preceding element\n    res = [x[0]]\n    for i in x[1:]:\n        if i > res[-1]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        63,
        74,
        48,
        91,
        25,
        9,
        91,
        69
      ],
      "output": [
        63,
        74,
        91
      ]
    },
    "demos": [
      {
        "input": [
          46,
          79,
          72,
          83,
          41,
          49,
          47
        ],
        "output": [
          46,
          79,
          83
        ]
      },
      {
        "input": [
          61,
          48,
          66,
          99,
          7
        ],
        "output": [
          61,
          66,
          99
        ]
      },
      {
        "input": [
          25,
          44,
          0,
          36,
          31
        ],
        "output": [
          25,
          44
        ]
      }
    ]
  },
  {
    "id": "c204",
    "difficulty": 178,
    "function": "def c204(x):\n    # keep only elements followed by 0\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] == 0:\n            res.append(x[i])\n    return res\n\n",
    "data": {
      "input": [
        29,
        0,
        19,
        26,
        0,
        18,
        0,
        0,
        4,
        0
      ],
      "output": [
        29,
        26,
        18,
        0,
        4
      ]
    },
    "demos": [
      {
        "input": [
          26,
          21,
          0,
          0,
          5,
          0,
          24,
          30,
          24,
          15
        ],
        "output": [
          21,
          0,
          5
        ]
      },
      {
        "input": [
          23,
          21,
          21,
          0,
          27,
          13,
          3,
          0
        ],
        "output": [
          21,
          3
        ]
      },
      {
        "input": [
          12,
          0,
          0,
          4,
          0,
          16,
          15,
          30,
          0,
          6
        ],
        "output": [
          12,
          0,
          4,
          30
        ]
      }
    ]
  },
  {
    "id": "c031",
    "difficulty": 179,
    "function": "def c031(x):\n    # remove whichever are equal, the first 2 elements or the last 2 elements\n    if x[0] == x[1]:\n        return x[2:]\n    elif x[-1] == x[-2]:\n        return x[:-2]\n    return x\n\n",
    "data": {
      "input": [
        26,
        26,
        61,
        74,
        74
      ],
      "output": [
        61,
        74,
        74
      ]
    },
    "demos": [
      {
        "input": [
          28,
          69,
          12,
          92,
          3,
          3
        ],
        "output": [
          28,
          69,
          12,
          92
        ]
      },
      {
        "input": [
          25,
          25,
          25,
          20,
          55,
          76,
          37
        ],
        "output": [
          25,
          20,
          55,
          76,
          37
        ]
      },
      {
        "input": [
          20,
          23,
          96,
          99,
          62,
          28,
          57
        ],
        "output": [
          20,
          23,
          96,
          99,
          62,
          28,
          57
        ]
      }
    ]
  },
  {
    "id": "c236",
    "difficulty": 180,
    "function": "def c236(x):\n    # even elements divided by 2\n    return [i//2 for i in x if i % 2 == 0]\n\n",
    "data": {
      "input": [
        0,
        60,
        98,
        62,
        57,
        13
      ],
      "output": [
        0,
        30,
        49,
        31
      ]
    },
    "demos": [
      {
        "input": [
          89,
          59,
          96,
          6,
          26,
          26,
          96
        ],
        "output": [
          48,
          3,
          13,
          13,
          48
        ]
      },
      {
        "input": [
          72,
          61,
          95,
          59,
          97,
          47,
          74
        ],
        "output": [
          36,
          37
        ]
      },
      {
        "input": [
          71,
          51,
          87,
          75,
          94,
          46,
          48,
          32,
          83,
          76
        ],
        "output": [
          47,
          23,
          24,
          16,
          38
        ]
      }
    ]
  },
  {
    "id": "c054",
    "difficulty": 181,
    "function": "def c054(x):\n    # replace element 0 and 1 with element 2\n    x[0] = x[2]\n    x[1] = x[2]\n    return x\n\n",
    "data": {
      "input": [
        78,
        37,
        28,
        43,
        22,
        4,
        21
      ],
      "output": [
        28,
        28,
        28,
        43,
        22,
        4,
        21
      ]
    },
    "demos": [
      {
        "input": [
          20,
          12,
          38,
          12,
          50
        ],
        "output": [
          38,
          38,
          38,
          12,
          50
        ]
      },
      {
        "input": [
          66,
          54,
          39,
          87,
          29,
          28
        ],
        "output": [
          39,
          39,
          39,
          87,
          29,
          28
        ]
      },
      {
        "input": [
          23,
          91,
          49,
          32
        ],
        "output": [
          49,
          49,
          49,
          32
        ]
      }
    ]
  },
  {
    "id": "c227",
    "difficulty": 182,
    "function": "def c227(x):\n    # interleave the input and reversed input, keep only unique elements in order of appearance\n    res = []\n    mid = len(x) // 2\n    for i in range(mid):\n        if x[i] not in res:\n            res.append(x[i])\n        if x[-i-1] not in res:\n            res.append(x[-i-1])\n    if len(x) % 2 == 1 and x[mid] not in res:\n        res.append(x[mid])\n    return res\n\n",
    "data": {
      "input": [
        25,
        8,
        25,
        25,
        25,
        99,
        4
      ],
      "output": [
        25,
        4,
        8,
        99
      ]
    },
    "demos": [
      {
        "input": [
          21,
          68,
          16,
          28,
          85,
          73
        ],
        "output": [
          21,
          73,
          68,
          85,
          16,
          28
        ]
      },
      {
        "input": [
          0,
          15,
          0,
          53,
          5,
          30,
          42,
          0,
          50
        ],
        "output": [
          0,
          50,
          15,
          42,
          53,
          30,
          5
        ]
      },
      {
        "input": [
          69,
          76,
          45,
          85,
          80,
          74,
          0,
          22
        ],
        "output": [
          69,
          22,
          76,
          0,
          45,
          74,
          85,
          80
        ]
      }
    ]
  },
  {
    "id": "c024",
    "difficulty": 183,
    "function": "def c024(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        3,
        19,
        14,
        18,
        12,
        10,
        6
      ],
      "output": [
        3,
        5,
        19,
        14,
        18,
        12,
        10,
        6
      ]
    },
    "demos": [
      {
        "input": [
          0,
          12,
          16,
          0,
          1,
          11,
          19
        ],
        "output": [
          0,
          5,
          12,
          16,
          0,
          1,
          11,
          19
        ]
      },
      {
        "input": [
          3,
          3,
          7,
          14,
          3,
          3,
          17
        ],
        "output": [
          3,
          5,
          3,
          7,
          14,
          3,
          3,
          17
        ]
      },
      {
        "input": [
          16,
          12,
          0,
          15
        ],
        "output": [
          16,
          8,
          12,
          0,
          15
        ]
      }
    ]
  },
  {
    "id": "c200",
    "difficulty": 184,
    "function": "def c200(x):\n    # tens digits of the elements in ascending order\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append(int(str(i)[-2]))\n        else:\n            res.append(0)\n    return sorted(res)\n\n",
    "data": {
      "input": [
        7,
        83,
        39,
        40,
        62,
        37,
        74,
        14
      ],
      "output": [
        0,
        1,
        3,
        3,
        4,
        6,
        7,
        8
      ]
    },
    "demos": [
      {
        "input": [
          6,
          87,
          76,
          88,
          23,
          21
        ],
        "output": [
          0,
          2,
          2,
          7,
          8,
          8
        ]
      },
      {
        "input": [
          82,
          16,
          16,
          79,
          85,
          41,
          88
        ],
        "output": [
          1,
          1,
          4,
          7,
          8,
          8,
          8
        ]
      },
      {
        "input": [
          7,
          75,
          8,
          65,
          2
        ],
        "output": [
          0,
          0,
          0,
          6,
          7
        ]
      }
    ]
  },
  {
    "id": "c010",
    "difficulty": 185,
    "function": "def c010(x):\n    # elements 1 through N + 1, N is the first element\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        1,
        10,
        17,
        14,
        8
      ],
      "output": [
        10
      ]
    },
    "demos": [
      {
        "input": [
          2,
          13,
          8,
          3,
          1,
          4
        ],
        "output": [
          13,
          8
        ]
      },
      {
        "input": [
          5,
          11,
          20,
          13,
          5,
          4,
          13,
          12
        ],
        "output": [
          11,
          20,
          13,
          5,
          4
        ]
      },
      {
        "input": [
          2,
          4,
          10,
          19,
          11
        ],
        "output": [
          4,
          10
        ]
      }
    ]
  },
  {
    "id": "c123",
    "difficulty": 186,
    "function": "def c123(x):\n    # remove all but element N, N is the last element\n    return [x[x[-1]]]\n\n",
    "data": {
      "input": [
        9,
        8,
        20,
        13,
        3
      ],
      "output": [
        13
      ]
    },
    "demos": [
      {
        "input": [
          8,
          8,
          16,
          6,
          3,
          1,
          20,
          5
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          2,
          3,
          16,
          16,
          1
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          13,
          10,
          8,
          8,
          1,
          13,
          2
        ],
        "output": [
          8
        ]
      }
    ]
  },
  {
    "id": "c023",
    "difficulty": 187,
    "function": "def c023(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        5,
        2,
        7,
        19
      ],
      "output": [
        5,
        5,
        2,
        7,
        19
      ]
    },
    "demos": [
      {
        "input": [
          5,
          7,
          16,
          11,
          13,
          9,
          16,
          2
        ],
        "output": [
          5,
          5,
          7,
          16,
          11,
          13,
          9,
          16,
          2
        ]
      },
      {
        "input": [
          10,
          19,
          13,
          1,
          18,
          9,
          8
        ],
        "output": [
          10,
          8,
          19,
          13,
          1,
          18,
          9,
          8
        ]
      },
      {
        "input": [
          0,
          0,
          2,
          1,
          2,
          8
        ],
        "output": [
          0,
          5,
          0,
          2,
          1,
          2,
          8
        ]
      }
    ]
  },
  {
    "id": "c194",
    "difficulty": 188,
    "function": "def c194(x):\n    # reverse the input; prepend and append the length of the input\n    return [len(x)] + x[::-1] + [len(x)]\n\n",
    "data": {
      "input": [
        19,
        7,
        2,
        18,
        10,
        9
      ],
      "output": [
        6,
        9,
        10,
        18,
        2,
        7,
        19,
        6
      ]
    },
    "demos": [
      {
        "input": [
          3,
          15,
          15,
          7,
          18,
          5,
          14,
          16
        ],
        "output": [
          8,
          16,
          14,
          5,
          18,
          7,
          15,
          15,
          3,
          8
        ]
      },
      {
        "input": [
          20,
          6,
          11,
          12,
          5,
          14,
          11
        ],
        "output": [
          7,
          11,
          14,
          5,
          12,
          11,
          6,
          20,
          7
        ]
      },
      {
        "input": [
          5,
          0,
          14,
          1,
          2,
          8,
          2
        ],
        "output": [
          7,
          2,
          8,
          2,
          1,
          14,
          0,
          5,
          7
        ]
      }
    ]
  },
  {
    "id": "c245",
    "difficulty": 189,
    "function": "def c245(x):\n    # number of times element 0 appears in the following elements\n    return [x[1:].count(x[0])]\n\n",
    "data": {
      "input": [
        12,
        2,
        12,
        4,
        2,
        12,
        19
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          2,
          7,
          2,
          8,
          2,
          14,
          7
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          18,
          18,
          3,
          18,
          2,
          18
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          9,
          9,
          11,
          20,
          13,
          5,
          18,
          9
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c032",
    "difficulty": 190,
    "function": "def c032(x):\n    # remove first 2 elements if element 0 > last element, else remove last 2 elements\n    if x[0] > x[-1]:\n        return x[2:]\n    else:\n        return x[:-2]\n    \n",
    "data": {
      "input": [
        60,
        52,
        56,
        97,
        17,
        19,
        57
      ],
      "output": [
        56,
        97,
        17,
        19,
        57
      ]
    },
    "demos": [
      {
        "input": [
          44,
          15,
          83,
          59,
          20
        ],
        "output": [
          83,
          59,
          20
        ]
      },
      {
        "input": [
          5,
          74,
          66,
          31,
          71,
          1
        ],
        "output": [
          66,
          31,
          71,
          1
        ]
      },
      {
        "input": [
          14,
          89,
          45,
          43,
          26,
          3
        ],
        "output": [
          45,
          43,
          26,
          3
        ]
      }
    ]
  },
  {
    "id": "c058",
    "difficulty": 191,
    "function": "def c058(x):\n    # remove the first 5 elements\n    return x[5:]\n\n",
    "data": {
      "input": [
        26,
        26,
        39,
        48,
        92,
        8
      ],
      "output": [
        8
      ]
    },
    "demos": [
      {
        "input": [
          74,
          58,
          81,
          38
        ],
        "output": []
      },
      {
        "input": [
          6,
          12,
          97,
          1,
          10,
          96,
          55,
          77
        ],
        "output": [
          96,
          55,
          77
        ]
      },
      {
        "input": [
          85,
          61,
          53,
          29
        ],
        "output": []
      }
    ]
  },
  {
    "id": "c174",
    "difficulty": 192,
    "function": "def c174(x):\n    # keep the first M elements, where M is the number of unique elements\n    return x[:len(set(x))]\n\n",
    "data": {
      "input": [
        37,
        17,
        96,
        87,
        96,
        96,
        17,
        49,
        1
      ],
      "output": [
        37,
        17,
        96,
        87,
        96,
        96
      ]
    },
    "demos": [
      {
        "input": [
          35,
          57,
          4,
          55,
          20
        ],
        "output": [
          35,
          57,
          4,
          55,
          20
        ]
      },
      {
        "input": [
          46,
          78,
          65,
          62,
          78,
          27,
          22,
          16,
          65,
          78
        ],
        "output": [
          46,
          78,
          65,
          62,
          78,
          27,
          22
        ]
      },
      {
        "input": [
          48,
          44,
          44,
          9,
          0,
          24,
          63,
          44
        ],
        "output": [
          48,
          44,
          44,
          9,
          0,
          24
        ]
      }
    ]
  },
  {
    "id": "c229",
    "difficulty": 193,
    "function": "def c229(x):\n    # keep only first N elements of the reversed input, N is the first element\n    length = x[0]\n    return x[::-1][:length]\n\n",
    "data": {
      "input": [
        5,
        62,
        58,
        29,
        43,
        99,
        48,
        33
      ],
      "output": [
        33,
        48,
        99,
        43,
        29
      ]
    },
    "demos": [
      {
        "input": [
          1,
          24,
          73,
          74,
          85,
          18,
          40
        ],
        "output": [
          40
        ]
      },
      {
        "input": [
          4,
          27,
          65,
          26,
          91
        ],
        "output": [
          91,
          26,
          65,
          27
        ]
      },
      {
        "input": [
          6,
          22,
          97,
          11,
          29,
          41
        ],
        "output": [
          41,
          29,
          11,
          97,
          22,
          6
        ]
      }
    ]
  },
  {
    "id": "c162",
    "difficulty": 194,
    "function": "def c162(x):\n    # replace each element M with 3 * M + 7\n    return [3*i+7 for i in x]\n\n",
    "data": {
      "input": [
        1,
        26,
        24,
        19,
        6,
        8,
        24
      ],
      "output": [
        10,
        85,
        79,
        64,
        25,
        31,
        79
      ]
    },
    "demos": [
      {
        "input": [
          2,
          22,
          12,
          18,
          4,
          0
        ],
        "output": [
          13,
          73,
          43,
          61,
          19,
          7
        ]
      },
      {
        "input": [
          16,
          5,
          26,
          14,
          19,
          16,
          15,
          5
        ],
        "output": [
          55,
          22,
          85,
          49,
          64,
          55,
          52,
          22
        ]
      },
      {
        "input": [
          23,
          18,
          2,
          21,
          29,
          21
        ],
        "output": [
          76,
          61,
          13,
          70,
          94,
          70
        ]
      }
    ]
  },
  {
    "id": "c039",
    "difficulty": 195,
    "function": "def c039(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        18,
        1,
        4,
        43,
        37,
        46
      ],
      "output": [
        18,
        1,
        4,
        43,
        37,
        46
      ]
    },
    "demos": [
      {
        "input": [
          3,
          40,
          20,
          43,
          23,
          10
        ],
        "output": [
          3,
          40,
          20,
          43,
          23,
          10,
          3
        ]
      },
      {
        "input": [
          6,
          20,
          50,
          3,
          3,
          3,
          32,
          23,
          19
        ],
        "output": [
          6,
          20,
          50,
          3,
          3,
          3,
          32,
          23,
          19,
          3
        ]
      },
      {
        "input": [
          49,
          6,
          39,
          12,
          10,
          9,
          42
        ],
        "output": [
          49,
          6,
          39,
          12,
          10,
          9,
          42,
          9
        ]
      }
    ]
  },
  {
    "id": "c181",
    "difficulty": 196,
    "function": "def c181(x):\n    # reverse the order of elements with even index\n    return [x[i] if i % 2 == 1 else x[-i-1] for i in range(len(x))]\n\n",
    "data": {
      "input": [
        50,
        89,
        20,
        77,
        28,
        94
      ],
      "output": [
        94,
        89,
        77,
        77,
        89,
        94
      ]
    },
    "demos": [
      {
        "input": [
          50,
          28,
          36,
          1,
          6,
          73,
          46,
          30
        ],
        "output": [
          30,
          28,
          73,
          1,
          1,
          73,
          28,
          30
        ]
      },
      {
        "input": [
          96,
          58,
          42,
          85,
          16
        ],
        "output": [
          16,
          58,
          42,
          85,
          96
        ]
      },
      {
        "input": [
          84,
          85,
          92,
          73,
          76,
          19,
          52
        ],
        "output": [
          52,
          85,
          76,
          73,
          92,
          19,
          84
        ]
      }
    ]
  },
  {
    "id": "c163",
    "difficulty": 197,
    "function": "def c163(x):\n    # replace each element M with 2 * M - 10\n    return [2*i-10 for i in x]\n\n",
    "data": {
      "input": [
        26,
        85,
        54,
        72,
        89,
        60
      ],
      "output": [
        42,
        160,
        98,
        134,
        168,
        110
      ]
    },
    "demos": [
      {
        "input": [
          87,
          32,
          74,
          74,
          69,
          35,
          81,
          45
        ],
        "output": [
          164,
          54,
          138,
          138,
          128,
          60,
          152,
          80
        ]
      },
      {
        "input": [
          35,
          71,
          12,
          42,
          82,
          62,
          20
        ],
        "output": [
          60,
          132,
          14,
          74,
          154,
          114,
          30
        ]
      },
      {
        "input": [
          85,
          26,
          32,
          25,
          27,
          14,
          13,
          39
        ],
        "output": [
          160,
          42,
          54,
          40,
          44,
          18,
          16,
          68
        ]
      }
    ]
  },
  {
    "id": "c154",
    "difficulty": 198,
    "function": "def c154(x):\n    # triple each even element\n    return [i*3 if i % 2 == 0 else i for i in x]\n\n",
    "data": {
      "input": [
        1,
        15,
        28,
        1,
        18,
        14,
        1,
        32
      ],
      "output": [
        1,
        15,
        84,
        1,
        54,
        42,
        1,
        96
      ]
    },
    "demos": [
      {
        "input": [
          16,
          8,
          5,
          12,
          19,
          1,
          9
        ],
        "output": [
          48,
          24,
          5,
          36,
          19,
          1,
          9
        ]
      },
      {
        "input": [
          31,
          9,
          1,
          4,
          1,
          0
        ],
        "output": [
          31,
          9,
          1,
          12,
          1,
          0
        ]
      },
      {
        "input": [
          10,
          26,
          3,
          33,
          0,
          31,
          12
        ],
        "output": [
          30,
          78,
          3,
          33,
          0,
          31,
          36
        ]
      }
    ]
  },
  {
    "id": "c166",
    "difficulty": 199,
    "function": "def c166(x):\n    # unique elements in ascending order by the sum of their digits\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = sum(map(int, str(i)))\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        65,
        43,
        11,
        92,
        92,
        0,
        43
      ],
      "output": [
        0,
        11,
        43,
        65,
        92
      ]
    },
    "demos": [
      {
        "input": [
          6,
          7,
          23,
          23,
          72,
          54
        ],
        "output": [
          23,
          6,
          7,
          72,
          54
        ]
      },
      {
        "input": [
          4,
          97,
          28,
          4,
          22,
          22,
          2
        ],
        "output": [
          2,
          4,
          22,
          28,
          97
        ]
      },
      {
        "input": [
          52,
          87,
          26,
          87,
          37
        ],
        "output": [
          52,
          26,
          37,
          87
        ]
      }
    ]
  },
  {
    "id": "c084",
    "difficulty": 200,
    "function": "def c084(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        57,
        72,
        74,
        56,
        66,
        20,
        94,
        96,
        36,
        75
      ],
      "output": [
        94
      ]
    },
    "demos": [
      {
        "input": [
          53,
          56,
          61,
          50,
          79,
          30,
          19
        ],
        "output": [
          19
        ]
      },
      {
        "input": [
          99,
          62,
          77,
          11,
          68,
          27,
          40
        ],
        "output": [
          40
        ]
      },
      {
        "input": [
          51,
          10,
          6,
          23,
          60,
          11,
          32,
          66
        ],
        "output": [
          32
        ]
      }
    ]
  },
  {
    "id": "c249",
    "difficulty": 201,
    "function": "def c249(x):\n    # use 0s to delimit sublists, give the first element of each sublist\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            if sublist:\n                res.append(sublist[0])\n                sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res.append(sublist[0])\n    return res\n\n",
    "data": {
      "input": [
        29,
        0,
        30,
        0,
        22,
        77,
        92,
        60,
        35,
        32,
        0,
        79
      ],
      "output": [
        29,
        30,
        22,
        79
      ]
    },
    "demos": [
      {
        "input": [
          0,
          58,
          5,
          12,
          75,
          11,
          0,
          73,
          98,
          0
        ],
        "output": [
          58,
          73
        ]
      },
      {
        "input": [
          20,
          1,
          91,
          12,
          62,
          97,
          56
        ],
        "output": [
          20
        ]
      },
      {
        "input": [
          4,
          46,
          99,
          0,
          11,
          41,
          34,
          99
        ],
        "output": [
          4,
          11
        ]
      }
    ]
  },
  {
    "id": "c118",
    "difficulty": 202,
    "function": "def c118(x):\n    # left rotate by N elements, N is the last element\n    return x[x[-1]:] + x[:x[-1]]\n\n",
    "data": {
      "input": [
        88,
        29,
        76,
        23,
        89,
        60,
        79,
        3
      ],
      "output": [
        23,
        89,
        60,
        79,
        3,
        88,
        29,
        76
      ]
    },
    "demos": [
      {
        "input": [
          91,
          34,
          96,
          25,
          93,
          72,
          1
        ],
        "output": [
          34,
          96,
          25,
          93,
          72,
          1,
          91
        ]
      },
      {
        "input": [
          44,
          36,
          95,
          15,
          1,
          37,
          1
        ],
        "output": [
          36,
          95,
          15,
          1,
          37,
          1,
          44
        ]
      },
      {
        "input": [
          34,
          36,
          12,
          72,
          79,
          1
        ],
        "output": [
          36,
          12,
          72,
          79,
          1,
          34
        ]
      }
    ]
  },
  {
    "id": "c152",
    "difficulty": 203,
    "function": "def c152(x):\n    # replace each element with the product of its digits\n    res = []\n    for i in x:\n        if i < 10:\n            res.append(0)\n        else:\n            res.append(int(str(i)[0]) * int(str(i)[1]))\n    return res\n\n",
    "data": {
      "input": [
        73,
        5,
        37,
        47,
        23
      ],
      "output": [
        21,
        0,
        21,
        28,
        6
      ]
    },
    "demos": [
      {
        "input": [
          72,
          99,
          82,
          63,
          71
        ],
        "output": [
          14,
          81,
          16,
          18,
          7
        ]
      },
      {
        "input": [
          91,
          44,
          34,
          35,
          90,
          24,
          67,
          71
        ],
        "output": [
          9,
          16,
          12,
          15,
          0,
          8,
          42,
          7
        ]
      },
      {
        "input": [
          72,
          16,
          55,
          33,
          9,
          56
        ],
        "output": [
          14,
          6,
          25,
          9,
          0,
          30
        ]
      }
    ]
  },
  {
    "id": "c237",
    "difficulty": 204,
    "function": "def c237(x):\n    # cumulative sum of unique elements\n    res = []\n    s = 0\n    for i in x:\n        if i not in res:\n            res.append(i)\n    for i in range(len(res)):\n        s += res[i]\n        res[i] = s\n    return res\n\n",
    "data": {
      "input": [
        19,
        15,
        2,
        26,
        23,
        17,
        2
      ],
      "output": [
        19,
        34,
        36,
        62,
        85,
        102
      ]
    },
    "demos": [
      {
        "input": [
          7,
          27,
          25,
          12,
          25
        ],
        "output": [
          7,
          34,
          59,
          71
        ]
      },
      {
        "input": [
          6,
          25,
          7,
          25,
          25,
          15,
          18
        ],
        "output": [
          6,
          31,
          38,
          53,
          71
        ]
      },
      {
        "input": [
          28,
          16,
          7,
          7,
          19,
          3,
          15,
          24
        ],
        "output": [
          28,
          44,
          51,
          70,
          73,
          88,
          112
        ]
      }
    ]
  },
  {
    "id": "c243",
    "difficulty": 205,
    "function": "def c243(x):\n    # number of odd elements\n    return [len([i for i in x if i % 2 == 1])]\n\n",
    "data": {
      "input": [
        46,
        82,
        51,
        74,
        55,
        55
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          51,
          44,
          23,
          56,
          76,
          10,
          21,
          25
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          34,
          73,
          26,
          41,
          18,
          19
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          43,
          15,
          7,
          38,
          95,
          90,
          20
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c188",
    "difficulty": 206,
    "function": "def c188(x):\n    # replace each element with 1 if it is divisible by 3, else replace with 0\n    return [1 if i % 3 == 0 else 0 for i in x]\n\n",
    "data": {
      "input": [
        9,
        43,
        26,
        82,
        50,
        97,
        93
      ],
      "output": [
        1,
        0,
        0,
        0,
        0,
        0,
        1
      ]
    },
    "demos": [
      {
        "input": [
          50,
          92,
          91,
          16,
          31,
          13,
          59
        ],
        "output": [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          91,
          91,
          26,
          69,
          83,
          82,
          19,
          55
        ],
        "output": [
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          31,
          12,
          98,
          20,
          99,
          52
        ],
        "output": [
          0,
          1,
          0,
          0,
          1,
          0
        ]
      }
    ]
  },
  {
    "id": "c139",
    "difficulty": 207,
    "function": "def c139(x):\n    # remove all occurrences of the smallest element and the largest element\n    min_val = min(x)\n    max_val = max(x)\n    return [i for i in x if i != min_val and i != max_val]\n\n",
    "data": {
      "input": [
        5,
        10,
        5,
        4,
        4,
        3
      ],
      "output": [
        5,
        5,
        4,
        4
      ]
    },
    "demos": [
      {
        "input": [
          9,
          9,
          3,
          8,
          9
        ],
        "output": [
          8
        ]
      },
      {
        "input": [
          2,
          5,
          3,
          3,
          9,
          1
        ],
        "output": [
          2,
          5,
          3,
          3
        ]
      },
      {
        "input": [
          3,
          1,
          0,
          4,
          0,
          10,
          6,
          1
        ],
        "output": [
          3,
          1,
          4,
          6,
          1
        ]
      }
    ]
  },
  {
    "id": "c036",
    "difficulty": 208,
    "function": "def c036(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        0,
        4,
        9,
        6,
        3
      ],
      "output": [
        0,
        4,
        6,
        9,
        3
      ]
    },
    "demos": [
      {
        "input": [
          3,
          8,
          9,
          9,
          1,
          1,
          9,
          3
        ],
        "output": [
          3,
          1,
          9,
          9,
          8,
          1,
          9,
          3
        ]
      },
      {
        "input": [
          2,
          7,
          0,
          7,
          10,
          9,
          3,
          5
        ],
        "output": [
          2,
          10,
          0,
          7,
          7,
          9,
          3,
          5
        ]
      },
      {
        "input": [
          9,
          8,
          4,
          3,
          10
        ],
        "output": [
          9,
          8,
          3,
          4,
          10
        ]
      }
    ]
  },
  {
    "id": "c201",
    "difficulty": 209,
    "function": "def c201(x):\n    # elements > first element, followed by elements < first element\n    return [i for i in x if i > x[0]] + [i for i in x if i < x[0]]\n\n",
    "data": {
      "input": [
        46,
        9,
        56,
        72,
        59,
        95,
        49
      ],
      "output": [
        56,
        72,
        59,
        95,
        49,
        9
      ]
    },
    "demos": [
      {
        "input": [
          60,
          57,
          13,
          87,
          96
        ],
        "output": [
          87,
          96,
          57,
          13
        ]
      },
      {
        "input": [
          75,
          88,
          86,
          10,
          74,
          79
        ],
        "output": [
          88,
          86,
          79,
          10,
          74
        ]
      },
      {
        "input": [
          52,
          5,
          85,
          22,
          11
        ],
        "output": [
          85,
          5,
          22,
          11
        ]
      }
    ]
  },
  {
    "id": "c217",
    "difficulty": 210,
    "function": "def c217(x):\n    # elements in ascending order by ones digit\n    return sorted(x, key=lambda i: i % 10)\n\n",
    "data": {
      "input": [
        15,
        97,
        44,
        25,
        64
      ],
      "output": [
        44,
        64,
        15,
        25,
        97
      ]
    },
    "demos": [
      {
        "input": [
          28,
          98,
          32,
          31,
          82,
          2,
          74,
          54
        ],
        "output": [
          31,
          32,
          82,
          2,
          74,
          54,
          28,
          98
        ]
      },
      {
        "input": [
          67,
          54,
          53,
          82,
          23
        ],
        "output": [
          82,
          53,
          23,
          54,
          67
        ]
      },
      {
        "input": [
          15,
          22,
          83,
          13,
          34,
          34,
          79
        ],
        "output": [
          22,
          83,
          13,
          34,
          34,
          15,
          79
        ]
      }
    ]
  },
  {
    "id": "c005",
    "difficulty": 211,
    "function": "def c005(x):\n    # remove all but element N + 1, N is the first element\n    return [x[x[0]+1]]\n\n",
    "data": {
      "input": [
        2,
        96,
        32,
        44,
        82
      ],
      "output": [
        44
      ]
    },
    "demos": [
      {
        "input": [
          0,
          4,
          39,
          22,
          49,
          22
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          0,
          59,
          89,
          10,
          17,
          42,
          64,
          57
        ],
        "output": [
          59
        ]
      },
      {
        "input": [
          0,
          34,
          61,
          35,
          37,
          67,
          4,
          73
        ],
        "output": [
          34
        ]
      }
    ]
  },
  {
    "id": "c063",
    "difficulty": 213,
    "function": "def c063(x):\n    # remove the first N + 1 elements, N is the first element\n    return x[x[0]+1:]\n\n",
    "data": {
      "input": [
        3,
        6,
        4,
        6,
        2,
        2,
        6
      ],
      "output": [
        2,
        2,
        6
      ]
    },
    "demos": [
      {
        "input": [
          0,
          10,
          10,
          5,
          3
        ],
        "output": [
          10,
          10,
          5,
          3
        ]
      },
      {
        "input": [
          0,
          3,
          3,
          6,
          0
        ],
        "output": [
          3,
          3,
          6,
          0
        ]
      },
      {
        "input": [
          5,
          6,
          8,
          6,
          3,
          5,
          2
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c141",
    "difficulty": 214,
    "function": "def c141(x):\n    # replace element M + 2 with N, M = element 0, N = element 1; remove elements 0 and 1\n    x[x[0]+2] = x[1]\n    return x[2:]\n\n",
    "data": {
      "input": [
        0,
        6,
        0,
        0,
        4,
        8
      ],
      "output": [
        6,
        0,
        4,
        8
      ]
    },
    "demos": [
      {
        "input": [
          2,
          4,
          0,
          10,
          2,
          3,
          6,
          9
        ],
        "output": [
          0,
          10,
          4,
          3,
          6,
          9
        ]
      },
      {
        "input": [
          0,
          8,
          9,
          2,
          1
        ],
        "output": [
          8,
          2,
          1
        ]
      },
      {
        "input": [
          1,
          7,
          0,
          7,
          7
        ],
        "output": [
          0,
          7,
          7
        ]
      }
    ]
  },
  {
    "id": "c089",
    "difficulty": 215,
    "function": "def c089(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        29,
        77,
        19,
        47,
        84,
        61,
        77,
        58
      ],
      "output": [
        29,
        84,
        19,
        47,
        77,
        61,
        77,
        58
      ]
    },
    "demos": [
      {
        "input": [
          86,
          87,
          13,
          44,
          75,
          57,
          2
        ],
        "output": [
          86,
          75,
          13,
          44,
          87,
          57,
          2
        ]
      },
      {
        "input": [
          49,
          90,
          15,
          36,
          47,
          9,
          30
        ],
        "output": [
          49,
          47,
          15,
          36,
          90,
          9,
          30
        ]
      },
      {
        "input": [
          52,
          19,
          70,
          77,
          38,
          41,
          17
        ],
        "output": [
          52,
          38,
          70,
          77,
          19,
          41,
          17
        ]
      }
    ]
  },
  {
    "id": "c124",
    "difficulty": 216,
    "function": "def c124(x):\n    # element M, M = element N, N = element 0\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        3,
        2,
        8,
        9,
        5,
        3,
        6,
        1,
        7,
        8
      ],
      "output": [
        9
      ]
    },
    "demos": [
      {
        "input": [
          4,
          4,
          3,
          4,
          5,
          9,
          0,
          0,
          0,
          1
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          3,
          9,
          8,
          3,
          7,
          7,
          5,
          3,
          4,
          4
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          6,
          0,
          6,
          6,
          6,
          0,
          2,
          6,
          4
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c216",
    "difficulty": 217,
    "function": "def c216(x):\n    # elements in ascending order by tens digit\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append([i, int(str(i)[-2])])\n        else:\n            res.append([i, 0])\n    return [i[0] for i in sorted(res, key=lambda i: i[1])]\n\n",
    "data": {
      "input": [
        1,
        98,
        43,
        0,
        91,
        37,
        14,
        62
      ],
      "output": [
        1,
        0,
        14,
        37,
        43,
        62,
        98,
        91
      ]
    },
    "demos": [
      {
        "input": [
          20,
          48,
          79,
          43,
          91,
          43
        ],
        "output": [
          20,
          48,
          43,
          43,
          79,
          91
        ]
      },
      {
        "input": [
          93,
          94,
          41,
          11,
          39,
          33,
          75,
          0
        ],
        "output": [
          0,
          11,
          39,
          33,
          41,
          75,
          93,
          94
        ]
      },
      {
        "input": [
          16,
          24,
          22,
          82,
          58,
          55
        ],
        "output": [
          16,
          24,
          22,
          58,
          55,
          82
        ]
      }
    ]
  },
  {
    "id": "c143",
    "difficulty": 218,
    "function": "def c143(x):\n    # replace every occurrence of the largest element with the smallest element\n    max_val = max(x)\n    min_val = min(x)\n    return [min_val if i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        7,
        9,
        1,
        0,
        9,
        6,
        7
      ],
      "output": [
        7,
        0,
        1,
        0,
        0,
        6,
        7
      ]
    },
    "demos": [
      {
        "input": [
          1,
          7,
          1,
          6,
          0,
          4
        ],
        "output": [
          1,
          0,
          1,
          6,
          0,
          4
        ]
      },
      {
        "input": [
          2,
          4,
          10,
          5,
          0,
          2,
          7
        ],
        "output": [
          2,
          4,
          0,
          5,
          0,
          2,
          7
        ]
      },
      {
        "input": [
          6,
          2,
          3,
          5,
          6,
          6,
          2,
          1
        ],
        "output": [
          1,
          2,
          3,
          5,
          1,
          1,
          2,
          1
        ]
      }
    ]
  },
  {
    "id": "c215",
    "difficulty": 219,
    "function": "def c215(x):\n    # elements in ascending order by hundreds digit\n    res = {}\n    for i in x:\n        if len(str(i)) > 2:\n            res[i] = int(str(i)[-3])\n        else:\n            res[i] = 0\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        936,
        371,
        23,
        381,
        268,
        651,
        441
      ],
      "output": [
        23,
        268,
        371,
        381,
        441,
        651,
        936
      ]
    },
    "demos": [
      {
        "input": [
          843,
          467,
          16,
          432,
          944,
          424,
          439,
          656
        ],
        "output": [
          16,
          467,
          432,
          424,
          439,
          656,
          843,
          944
        ]
      },
      {
        "input": [
          173,
          726,
          14,
          89,
          789
        ],
        "output": [
          14,
          89,
          173,
          726,
          789
        ]
      },
      {
        "input": [
          690,
          937,
          267,
          250,
          56,
          807
        ],
        "output": [
          56,
          267,
          250,
          690,
          807,
          937
        ]
      }
    ]
  },
  {
    "id": "c144",
    "difficulty": 220,
    "function": "def c144(x):\n    # replace every occurrence of the largest or smallest element with their absolute difference\n    max_val = max(x)\n    min_val = min(x)\n    return [abs(min_val - max_val) if i == min_val or i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        52,
        9,
        5,
        81
      ],
      "output": [
        52,
        9,
        76,
        76
      ]
    },
    "demos": [
      {
        "input": [
          21,
          41,
          69,
          4
        ],
        "output": [
          21,
          41,
          65,
          65
        ]
      },
      {
        "input": [
          30,
          85,
          94,
          58
        ],
        "output": [
          64,
          85,
          64,
          58
        ]
      },
      {
        "input": [
          39
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c128",
    "difficulty": 221,
    "function": "def c128(x):\n    # elements in ascending order after removing elements 0,1,and 4\n    x = x[2:4] + x[5:]\n    return sorted(x)\n\n",
    "data": {
      "input": [
        53,
        65,
        30,
        30,
        90,
        26
      ],
      "output": [
        26,
        30,
        30
      ]
    },
    "demos": [
      {
        "input": [
          37,
          24,
          33,
          34,
          64,
          39
        ],
        "output": [
          33,
          34,
          39
        ]
      },
      {
        "input": [
          19,
          65,
          61,
          12,
          86,
          98,
          5,
          43
        ],
        "output": [
          5,
          12,
          43,
          61,
          98
        ]
      },
      {
        "input": [
          13,
          58,
          85,
          12,
          10,
          9
        ],
        "output": [
          9,
          12,
          85
        ]
      }
    ]
  },
  {
    "id": "c208",
    "difficulty": 222,
    "function": "def c208(x):\n    # keep only last N elements, N is the last element\n    return x[-x[-1]:]\n\n",
    "data": {
      "input": [
        2,
        9,
        6,
        8,
        7,
        1
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          4,
          9,
          6,
          7,
          0,
          10,
          2,
          6
        ],
        "output": [
          6,
          7,
          0,
          10,
          2,
          6
        ]
      },
      {
        "input": [
          6,
          7,
          7,
          2,
          2,
          2,
          6,
          4
        ],
        "output": [
          2,
          2,
          6,
          4
        ]
      },
      {
        "input": [
          1,
          9,
          3,
          9,
          1,
          7,
          3
        ],
        "output": [
          1,
          7,
          3
        ]
      }
    ]
  },
  {
    "id": "c035",
    "difficulty": 223,
    "function": "def c035(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        4,
        6,
        6,
        4,
        10,
        5
      ],
      "output": [
        4,
        6,
        6,
        4,
        10,
        5
      ]
    },
    "demos": [
      {
        "input": [
          0,
          3,
          3,
          6,
          8,
          7
        ],
        "output": [
          6,
          3,
          3,
          0,
          8,
          7
        ]
      },
      {
        "input": [
          10,
          1,
          7,
          7,
          3,
          2,
          0,
          10
        ],
        "output": [
          10,
          7,
          1,
          7,
          3,
          2,
          0,
          10
        ]
      },
      {
        "input": [
          8,
          6,
          1,
          10,
          10,
          4,
          9,
          4
        ],
        "output": [
          8,
          1,
          6,
          10,
          10,
          4,
          9,
          4
        ]
      }
    ]
  },
  {
    "id": "c214",
    "difficulty": 224,
    "function": "def c214(x):\n    # remove elements 0 and N + 1, N is the first element\n    x = x[1:x[0]+1] + x[x[0]+2:]\n    return x\n\n",
    "data": {
      "input": [
        2,
        68,
        37,
        22,
        14,
        24,
        38
      ],
      "output": [
        68,
        37,
        14,
        24,
        38
      ]
    },
    "demos": [
      {
        "input": [
          1,
          13,
          45,
          3,
          1,
          72,
          85
        ],
        "output": [
          13,
          3,
          1,
          72,
          85
        ]
      },
      {
        "input": [
          0,
          38,
          27,
          25,
          46,
          93
        ],
        "output": [
          27,
          25,
          46,
          93
        ]
      },
      {
        "input": [
          1,
          46,
          66,
          37,
          29,
          3,
          24,
          62
        ],
        "output": [
          46,
          37,
          29,
          3,
          24,
          62
        ]
      }
    ]
  },
  {
    "id": "c130",
    "difficulty": 225,
    "function": "def c130(x):\n    # elements 1 through N + 1, N = element 0\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        0,
        23,
        53,
        27,
        40
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          7,
          9,
          84,
          7,
          36,
          16,
          35,
          15
        ],
        "output": [
          9,
          84,
          7,
          36,
          16,
          35,
          15
        ]
      },
      {
        "input": [
          4,
          15,
          88,
          28,
          47,
          7,
          36,
          17
        ],
        "output": [
          15,
          88,
          28,
          47
        ]
      },
      {
        "input": [
          2,
          33,
          20,
          98,
          8
        ],
        "output": [
          33,
          20
        ]
      }
    ]
  },
  {
    "id": "c159",
    "difficulty": 226,
    "function": "def c159(x):\n    # element N counts the number of occurrences of N, up to the largest element\n    out = []\n    for i, j in enumerate(range(max(x)+1)):\n        out.append(x.count(j))\n    return out\n\n",
    "data": {
      "input": [
        6,
        4,
        7,
        3,
        2,
        1
      ],
      "output": [
        0,
        1,
        1,
        1,
        1,
        0,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          9,
          1,
          1,
          9,
          0,
          5,
          7,
          8
        ],
        "output": [
          1,
          2,
          0,
          0,
          0,
          1,
          0,
          1,
          1,
          2
        ]
      },
      {
        "input": [
          7,
          2,
          5,
          3,
          3,
          4,
          6
        ],
        "output": [
          0,
          0,
          1,
          2,
          1,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          8,
          0,
          3,
          7,
          7,
          3
        ],
        "output": [
          1,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          1
        ]
      }
    ]
  },
  {
    "id": "c205",
    "difficulty": 227,
    "function": "def c205(x):\n    # product of elements divisible by 4\n    res = 1\n    for i in x:\n        if i % 4 == 0:\n            res *= i\n    return [res]\n\n",
    "data": {
      "input": [
        5,
        17,
        13,
        4,
        10,
        9,
        13
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          6,
          20,
          9,
          3,
          13,
          10,
          5
        ],
        "output": [
          20
        ]
      },
      {
        "input": [
          5,
          8,
          15,
          17,
          12,
          9,
          14
        ],
        "output": [
          96
        ]
      },
      {
        "input": [
          1,
          12,
          19,
          15,
          20,
          15
        ],
        "output": [
          240
        ]
      }
    ]
  },
  {
    "id": "c076",
    "difficulty": 228,
    "function": "def c076(x):\n    # the max, last, length, first, and min elements\n    return [max(x), x[-1], len(x), x[0], min(x)]\n\n",
    "data": {
      "input": [
        41,
        64,
        45,
        95,
        37,
        55,
        65
      ],
      "output": [
        95,
        65,
        7,
        41,
        37
      ]
    },
    "demos": [
      {
        "input": [
          1,
          6,
          18,
          77,
          20,
          7
        ],
        "output": [
          77,
          7,
          6,
          1,
          1
        ]
      },
      {
        "input": [
          0,
          12,
          60,
          16,
          88,
          5,
          26,
          61
        ],
        "output": [
          88,
          61,
          8,
          0,
          0
        ]
      },
      {
        "input": [
          7,
          29,
          12,
          39,
          12,
          88
        ],
        "output": [
          88,
          88,
          6,
          7,
          7
        ]
      }
    ]
  },
  {
    "id": "c250",
    "difficulty": 229,
    "function": "def c250(x):\n    # use 0s to delimit sublists, concatenate reversed sublists\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            res += sublist[::-1]\n            sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res += sublist[::-1]\n    return res\n\n",
    "data": {
      "input": [
        91,
        22,
        75,
        63,
        0,
        27,
        29,
        0,
        0,
        65,
        77
      ],
      "output": [
        63,
        75,
        22,
        91,
        29,
        27,
        77,
        65
      ]
    },
    "demos": [
      {
        "input": [
          31,
          17,
          32,
          62,
          0,
          44,
          80,
          93
        ],
        "output": [
          62,
          32,
          17,
          31,
          93,
          80,
          44
        ]
      },
      {
        "input": [
          72,
          42,
          26,
          14,
          57,
          16,
          0,
          35,
          8
        ],
        "output": [
          16,
          57,
          14,
          26,
          42,
          72,
          8,
          35
        ]
      },
      {
        "input": [
          64,
          0,
          0,
          1,
          56,
          65,
          75,
          0,
          17,
          60,
          31
        ],
        "output": [
          64,
          75,
          65,
          56,
          1,
          31,
          60,
          17
        ]
      }
    ]
  },
  {
    "id": "c186",
    "difficulty": 230,
    "function": "def c186(x):\n    # keep only elements greater than element 0\n    return [i for i in x if i > x[0]]\n\n",
    "data": {
      "input": [
        5,
        96,
        37,
        39,
        32,
        66,
        34
      ],
      "output": [
        96,
        37,
        39,
        32,
        66,
        34
      ]
    },
    "demos": [
      {
        "input": [
          76,
          48,
          63,
          61,
          29,
          19,
          97
        ],
        "output": [
          97
        ]
      },
      {
        "input": [
          57,
          5,
          69,
          31,
          69,
          81,
          52,
          26
        ],
        "output": [
          69,
          69,
          81
        ]
      },
      {
        "input": [
          32,
          8,
          93,
          15,
          46,
          49
        ],
        "output": [
          93,
          46,
          49
        ]
      }
    ]
  },
  {
    "id": "c242",
    "difficulty": 231,
    "function": "def c242(x):\n    # take the largest unique element, append the second largest unique element, prepend the third largest unique element, append the fourth largest unique element, and so on\n    unique = sorted(set(x), reverse=True)\n    res = [max(unique)]\n    unique.remove(max(unique))\n    for i in range(len(unique)):\n        if i % 2 == 0:\n            res.append(unique[i])\n        else:\n            res.insert(0, unique[i])\n    return res\n\n",
    "data": {
      "input": [
        6,
        7,
        5,
        8,
        9,
        4,
        7
      ],
      "output": [
        5,
        7,
        9,
        8,
        6,
        4
      ]
    },
    "demos": [
      {
        "input": [
          5,
          1,
          6,
          7,
          0,
          8,
          9
        ],
        "output": [
          0,
          5,
          7,
          9,
          8,
          6,
          1
        ]
      },
      {
        "input": [
          5,
          5,
          5,
          1,
          4,
          1,
          3,
          7
        ],
        "output": [
          1,
          4,
          7,
          5,
          3
        ]
      },
      {
        "input": [
          1,
          7,
          6,
          6,
          4,
          8
        ],
        "output": [
          1,
          6,
          8,
          7,
          4
        ]
      }
    ]
  },
  {
    "id": "c160",
    "difficulty": 232,
    "function": "def c160(x):\n    # replace each element with 99 - element\n    return [99-i for i in x]\n\n",
    "data": {
      "input": [
        53,
        86,
        1,
        60,
        53,
        26
      ],
      "output": [
        46,
        13,
        98,
        39,
        46,
        73
      ]
    },
    "demos": [
      {
        "input": [
          12,
          53,
          42,
          6,
          3,
          13,
          45
        ],
        "output": [
          87,
          46,
          57,
          93,
          96,
          86,
          54
        ]
      },
      {
        "input": [
          97,
          47,
          97,
          40,
          7,
          6,
          86
        ],
        "output": [
          2,
          52,
          2,
          59,
          92,
          93,
          13
        ]
      },
      {
        "input": [
          66,
          16,
          30,
          15,
          42,
          72
        ],
        "output": [
          33,
          83,
          69,
          84,
          57,
          27
        ]
      }
    ]
  },
  {
    "id": "c167",
    "difficulty": 233,
    "function": "def c167(x):\n    # keep only elements divisible by 3\n    return [i for i in x if i % 3 == 0]\n\n",
    "data": {
      "input": [
        8,
        66,
        5,
        79,
        52,
        35,
        46
      ],
      "output": [
        66
      ]
    },
    "demos": [
      {
        "input": [
          82,
          3,
          4,
          68,
          56,
          5,
          94,
          54
        ],
        "output": [
          3,
          54
        ]
      },
      {
        "input": [
          5,
          74,
          60,
          81,
          52,
          26
        ],
        "output": [
          60,
          81
        ]
      },
      {
        "input": [
          25,
          35,
          54,
          37,
          75,
          7
        ],
        "output": [
          54,
          75
        ]
      }
    ]
  },
  {
    "id": "c202",
    "difficulty": 234,
    "function": "def c202(x):\n    # the indices of every even number\n    return [i for i, j in enumerate(x) if j % 2 == 0]\n\n\n",
    "data": {
      "input": [
        1,
        14,
        76,
        24,
        41,
        44,
        70
      ],
      "output": [
        1,
        2,
        3,
        5,
        6
      ]
    },
    "demos": [
      {
        "input": [
          94,
          97,
          5,
          94,
          1,
          86,
          34,
          80
        ],
        "output": [
          0,
          3,
          5,
          6,
          7
        ]
      },
      {
        "input": [
          28,
          57,
          64,
          9,
          80,
          20
        ],
        "output": [
          0,
          2,
          4,
          5
        ]
      },
      {
        "input": [
          55,
          12,
          72,
          2,
          21,
          66,
          82,
          60
        ],
        "output": [
          1,
          2,
          3,
          5,
          6,
          7
        ]
      }
    ]
  },
  {
    "id": "c129",
    "difficulty": 235,
    "function": "def c129(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        4,
        5,
        77,
        75,
        83,
        4,
        14,
        71,
        72,
        23
      ],
      "output": [
        14
      ]
    },
    "demos": [
      {
        "input": [
          0,
          6,
          63,
          36,
          37,
          66,
          51,
          34
        ],
        "output": [
          63,
          36,
          37,
          66,
          51,
          34
        ]
      },
      {
        "input": [
          2,
          4,
          4,
          26,
          67,
          66,
          74,
          51
        ],
        "output": [
          67,
          66
        ]
      },
      {
        "input": [
          2,
          3,
          95,
          22,
          86,
          20,
          68,
          55,
          12
        ],
        "output": [
          86
        ]
      }
    ]
  },
  {
    "id": "c221",
    "difficulty": 236,
    "function": "def c221(x):\n    # sum of even elements\n    return [sum(i for i in x if i % 2 == 0)]\n\n",
    "data": {
      "input": [
        5,
        42,
        4,
        46,
        33,
        41
      ],
      "output": [
        92
      ]
    },
    "demos": [
      {
        "input": [
          49,
          6,
          33,
          3,
          21,
          38,
          21,
          23
        ],
        "output": [
          44
        ]
      },
      {
        "input": [
          32,
          25,
          1,
          24,
          9,
          42,
          3
        ],
        "output": [
          98
        ]
      },
      {
        "input": [
          3,
          43,
          10,
          5,
          35,
          9,
          25
        ],
        "output": [
          10
        ]
      }
    ]
  },
  {
    "id": "c131",
    "difficulty": 237,
    "function": "def c131(x):\n    # keep only elements whose tens digit is even\n    res = []\n    for i in x:\n        if len(str(i)) < 2:\n            res.append(i)\n        elif int(str(i)[-2]) % 2 == 0:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        28,
        69,
        54,
        46,
        48,
        82,
        55
      ],
      "output": [
        28,
        69,
        46,
        48,
        82
      ]
    },
    "demos": [
      {
        "input": [
          15,
          41,
          98,
          55,
          31,
          84,
          27
        ],
        "output": [
          41,
          84,
          27
        ]
      },
      {
        "input": [
          51,
          81,
          97,
          35,
          98,
          89,
          70
        ],
        "output": [
          81,
          89
        ]
      },
      {
        "input": [
          29,
          7,
          3,
          75,
          40,
          38,
          27,
          29
        ],
        "output": [
          29,
          7,
          3,
          40,
          27,
          29
        ]
      }
    ]
  },
  {
    "id": "c180",
    "difficulty": 238,
    "function": "def c180(x):\n    # take the smallest element, append the second smallest element, prepend the third smallest element, append the fourth smallest element, and so on\n    sorted_x = sorted(x)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        46,
        60,
        9,
        64,
        33,
        99,
        44,
        48
      ],
      "output": [
        64,
        48,
        44,
        9,
        33,
        46,
        60,
        99
      ]
    },
    "demos": [
      {
        "input": [
          28,
          2,
          8,
          12,
          73,
          71,
          94,
          97
        ],
        "output": [
          94,
          71,
          12,
          2,
          8,
          28,
          73,
          97
        ]
      },
      {
        "input": [
          35,
          63,
          85,
          81,
          33,
          91
        ],
        "output": [
          85,
          63,
          33,
          35,
          81,
          91
        ]
      },
      {
        "input": [
          8,
          52,
          42,
          15,
          94,
          95,
          41
        ],
        "output": [
          95,
          52,
          41,
          8,
          15,
          42,
          94
        ]
      }
    ]
  },
  {
    "id": "c015",
    "difficulty": 239,
    "function": "def c015(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        0,
        3,
        3,
        1,
        8,
        10
      ],
      "output": [
        3,
        1,
        8
      ]
    },
    "demos": [
      {
        "input": [
          1,
          5,
          6,
          4,
          15,
          6,
          10,
          3,
          2
        ],
        "output": [
          4,
          15,
          6,
          10
        ]
      },
      {
        "input": [
          3,
          5,
          13,
          3,
          9,
          8,
          15,
          6
        ],
        "output": [
          8,
          15
        ]
      },
      {
        "input": [
          4,
          4,
          5,
          15,
          11,
          13,
          8,
          11
        ],
        "output": []
      }
    ]
  },
  {
    "id": "c179",
    "difficulty": 240,
    "function": "def c179(x):\n    # take the largest element, append the second largest element, prepend the third largest element, append the fourth largest element, and so on\n    sorted_x = sorted(x, reverse=True)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        60,
        67,
        85,
        36,
        52,
        15
      ],
      "output": [
        36,
        60,
        85,
        67,
        52,
        15
      ]
    },
    "demos": [
      {
        "input": [
          84,
          91,
          44,
          83,
          1,
          72,
          55
        ],
        "output": [
          1,
          55,
          83,
          91,
          84,
          72,
          44
        ]
      },
      {
        "input": [
          95,
          57,
          59,
          33,
          36,
          3
        ],
        "output": [
          33,
          57,
          95,
          59,
          36,
          3
        ]
      },
      {
        "input": [
          74,
          28,
          70,
          45,
          37,
          95,
          22
        ],
        "output": [
          22,
          37,
          70,
          95,
          74,
          45,
          28
        ]
      }
    ]
  },
  {
    "id": "c226",
    "difficulty": 241,
    "function": "def c226(x):\n    # remove first M and last N elements, M is the first element, N is the last element\n    if x[-1] == 0:\n        return x[x[0]:]\n    return x[x[0]:-x[-1]]\n\n",
    "data": {
      "input": [
        0,
        11,
        4,
        11,
        14,
        14,
        8,
        4
      ],
      "output": [
        0,
        11,
        4,
        11
      ]
    },
    "demos": [
      {
        "input": [
          6,
          5,
          7,
          11,
          15,
          8,
          5,
          3,
          9,
          6
        ],
        "output": []
      },
      {
        "input": [
          5,
          12,
          7,
          0,
          15,
          9,
          15,
          1,
          10,
          1
        ],
        "output": [
          9,
          15,
          1,
          10
        ]
      },
      {
        "input": [
          2,
          6,
          5,
          12,
          9,
          3
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c134",
    "difficulty": 242,
    "function": "def c134(x):\n    # remove elements M through N, M is the first element, N is the second element\n    return x[:x[0]] + x[x[1]+1:]\n\n",
    "data": {
      "input": [
        3,
        3,
        0,
        0,
        15,
        11
      ],
      "output": [
        3,
        3,
        0,
        15,
        11
      ]
    },
    "demos": [
      {
        "input": [
          3,
          3,
          7,
          11,
          3,
          3
        ],
        "output": [
          3,
          3,
          7,
          3,
          3
        ]
      },
      {
        "input": [
          3,
          4,
          12,
          4,
          4,
          1,
          4,
          3,
          7,
          7
        ],
        "output": [
          3,
          4,
          12,
          1,
          4,
          3,
          7,
          7
        ]
      },
      {
        "input": [
          1,
          6,
          9,
          12,
          8,
          14,
          8,
          11,
          14,
          6
        ],
        "output": [
          1,
          11,
          14,
          6
        ]
      }
    ]
  },
  {
    "id": "c164",
    "difficulty": 243,
    "function": "def c164(x):\n    # replace each element M with M // 4 + 5\n    return [i//4+5 for i in x]\n\n",
    "data": {
      "input": [
        62,
        84,
        85,
        97,
        75,
        23
      ],
      "output": [
        20,
        26,
        26,
        29,
        23,
        10
      ]
    },
    "demos": [
      {
        "input": [
          2,
          34,
          51,
          32,
          87,
          30
        ],
        "output": [
          5,
          13,
          17,
          13,
          26,
          12
        ]
      },
      {
        "input": [
          88,
          26,
          14,
          69,
          12,
          85
        ],
        "output": [
          27,
          11,
          8,
          22,
          8,
          26
        ]
      },
      {
        "input": [
          62,
          8,
          66,
          56,
          1,
          30
        ],
        "output": [
          20,
          7,
          21,
          19,
          5,
          12
        ]
      }
    ]
  },
  {
    "id": "c178",
    "difficulty": 244,
    "function": "def c178(x):\n    # keep only elements followed by an even number\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] % 2 == 0:\n            res.append(x[i])\n    return res \n\n",
    "data": {
      "input": [
        69,
        18,
        31,
        38,
        51,
        49
      ],
      "output": [
        69,
        31
      ]
    },
    "demos": [
      {
        "input": [
          63,
          43,
          41,
          64,
          28,
          87,
          92
        ],
        "output": [
          41,
          64,
          87
        ]
      },
      {
        "input": [
          27,
          37,
          58,
          13,
          33,
          71
        ],
        "output": [
          37
        ]
      },
      {
        "input": [
          71,
          26,
          33,
          51,
          24,
          60,
          59,
          92
        ],
        "output": [
          71,
          51,
          24,
          59
        ]
      }
    ]
  },
  {
    "id": "c113",
    "difficulty": 245,
    "function": "def c113(x):\n    # keep only elements whose ones digit is greater than the first element\n    res = []\n    for i in x:\n        if i % 10 > x[0]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        0,
        4,
        31,
        28,
        10,
        39,
        18,
        34
      ],
      "output": [
        4,
        31,
        28,
        39,
        18,
        34
      ]
    },
    "demos": [
      {
        "input": [
          7,
          45,
          20,
          38,
          21,
          5,
          7,
          41
        ],
        "output": [
          38
        ]
      },
      {
        "input": [
          1,
          2,
          44,
          30,
          14,
          45,
          36,
          2
        ],
        "output": [
          2,
          44,
          14,
          45,
          36,
          2
        ]
      },
      {
        "input": [
          1,
          13,
          7,
          45,
          49,
          28,
          24,
          22,
          11,
          34
        ],
        "output": [
          13,
          7,
          45,
          49,
          28,
          24,
          22,
          34
        ]
      }
    ]
  },
  {
    "id": "c206",
    "difficulty": 246,
    "function": "def c206(x):\n    # keep only elements whose value is between the first and second element\n    return [i for i in x if x[0] < i < x[1]]\n\n",
    "data": {
      "input": [
        5,
        24,
        3,
        39,
        42,
        18,
        13,
        16,
        12,
        2
      ],
      "output": [
        18,
        13,
        16,
        12
      ]
    },
    "demos": [
      {
        "input": [
          2,
          57,
          2,
          41,
          46,
          9,
          32
        ],
        "output": [
          41,
          46,
          9,
          32
        ]
      },
      {
        "input": [
          13,
          28,
          38,
          22,
          21,
          44,
          37
        ],
        "output": [
          22,
          21
        ]
      },
      {
        "input": [
          7,
          17,
          45,
          30,
          2,
          18,
          8
        ],
        "output": [
          8
        ]
      }
    ]
  },
  {
    "id": "c210",
    "difficulty": 247,
    "function": "def c210(x):\n    # unique elements with last element inserted at index M, where M is the first element\n    unique = []\n    for i in x:\n        if i not in unique:\n            unique.append(i)\n    unique.insert(x[0], x[-1])\n    return unique\n\n",
    "data": {
      "input": [
        2,
        5,
        1,
        4,
        7,
        7
      ],
      "output": [
        2,
        5,
        7,
        1,
        4,
        7
      ]
    },
    "demos": [
      {
        "input": [
          1,
          0,
          7,
          0,
          1,
          3,
          0
        ],
        "output": [
          1,
          0,
          0,
          7,
          3
        ]
      },
      {
        "input": [
          4,
          3,
          8,
          3,
          9,
          8,
          6
        ],
        "output": [
          4,
          3,
          8,
          9,
          6,
          6
        ]
      },
      {
        "input": [
          1,
          7,
          9,
          6,
          4,
          2,
          3
        ],
        "output": [
          1,
          3,
          7,
          9,
          6,
          4,
          2,
          3
        ]
      }
    ]
  },
  {
    "id": "c158",
    "difficulty": 248,
    "function": "def c158(x):\n    # replace each element with 1 if element N equals N, else 0\n    res = []\n    for i, j in enumerate(x):\n        if i == j:\n            res.append(1)\n        else:\n            res.append(0)\n    return res\n\n",
    "data": {
      "input": [
        0,
        1,
        6,
        3,
        6,
        5,
        6,
        7,
        8,
        9
      ],
      "output": [
        1,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          0,
          1,
          1,
          5,
          1,
          5,
          0,
          4,
          7
        ],
        "output": [
          1,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          6,
          1,
          2,
          3,
          4,
          5,
          6,
          0,
          8,
          7
        ],
        "output": [
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          0
        ]
      },
      {
        "input": [
          8,
          1,
          2,
          3,
          8,
          2,
          6
        ],
        "output": [
          0,
          1,
          1,
          1,
          0,
          0,
          1
        ]
      }
    ]
  },
  {
    "id": "c183",
    "difficulty": 249,
    "function": "def c183(x):\n    # list the index of second elements and following equal to first element\n    res = []\n    for i in range(1, len(x)):\n        if x[i] == x[0]:\n            res.append(i)\n    return res",
    "data": {
      "input": [
        3,
        7,
        2,
        4,
        15,
        4,
        1
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          7,
          3,
          3,
          7,
          7,
          5,
          6,
          6,
          6,
          14
        ],
        "output": [
          3,
          4
        ]
      },
      {
        "input": [
          13,
          12,
          5,
          13,
          11,
          3,
          13
        ],
        "output": [
          3,
          6
        ]
      },
      {
        "input": [
          13,
          3,
          10,
          13,
          15,
          3,
          11,
          13,
          0
        ],
        "output": [
          3,
          7
        ]
      }
    ]
  },
  {
    "id": "c014",
    "difficulty": 157,
    "function": "def c014(x):\n    # remove all but elements 2 through 5\n    return x[2:5]\n\n",
    "data": {
      "input": [
        71,
        36,
        3,
        28,
        62,
        91,
        23,
        99
      ],
      "output": [
        3,
        28,
        62
      ]
    },
    "demos": [
      {
        "input": [
          58,
          41,
          71,
          10,
          16,
          93,
          97
        ],
        "output": [
          71,
          10,
          16
        ]
      },
      {
        "input": [
          60,
          60,
          94,
          10,
          35,
          14
        ],
        "output": [
          94,
          10,
          35
        ]
      },
      {
        "input": [
          82,
          10,
          65,
          94,
          90,
          78
        ],
        "output": [
          65,
          94,
          90
        ]
      }
    ]
  },
  {
    "id": "c098",
    "difficulty": 86,
    "function": "def c098(x):\n    # add the index to each element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        4,
        3,
        0,
        5,
        2,
        2,
        4
      ],
      "output": [
        4,
        4,
        2,
        8,
        6,
        7,
        10
      ]
    },
    "demos": [
      {
        "input": [
          7,
          4,
          4,
          8,
          1,
          6,
          4,
          5
        ],
        "output": [
          7,
          5,
          6,
          11,
          5,
          11,
          10,
          12
        ]
      },
      {
        "input": [
          7,
          5,
          6,
          1,
          0,
          1,
          6,
          8
        ],
        "output": [
          7,
          6,
          8,
          4,
          4,
          6,
          12,
          15
        ]
      },
      {
        "input": [
          0,
          9,
          3,
          4,
          6,
          8,
          5
        ],
        "output": [
          0,
          10,
          5,
          7,
          10,
          13,
          11
        ]
      }
    ]
  },
  {
    "id": "c209",
    "difficulty": 212,
    "function": "def c209(x):\n    # elements in ascending order, insert sum of smallest and largest element at index 3\n    x = sorted(x)\n    x.insert(3, x[0] + x[-1])\n    return x\n\n",
    "data": {
      "input": [
        11,
        11,
        12,
        21,
        14,
        19,
        25
      ],
      "output": [
        11,
        11,
        12,
        36,
        14,
        19,
        21,
        25
      ]
    },
    "demos": [
      {
        "input": [
          15,
          22,
          14,
          24,
          24,
          30,
          8
        ],
        "output": [
          8,
          14,
          15,
          38,
          22,
          24,
          24,
          30
        ]
      },
      {
        "input": [
          6,
          4,
          18,
          17,
          7,
          30,
          6,
          28
        ],
        "output": [
          4,
          6,
          6,
          34,
          7,
          17,
          18,
          28,
          30
        ]
      },
      {
        "input": [
          26,
          8,
          5,
          22,
          28,
          25
        ],
        "output": [
          5,
          8,
          22,
          33,
          25,
          26,
          28
        ]
      }
    ]
  },
  {
    "id": "c211",
    "difficulty": 104,
    "function": "def c211(x):\n    # reverse input, insert fouth element and fifth element so they are fourth and third from the end respectively\n    x = x[::-1]\n    x.insert(-3, x[3])\n    x.insert(-4, x[4])\n    return x\n\n",
    "data": {
      "input": [
        21,
        33,
        86,
        9,
        48,
        89,
        72
      ],
      "output": [
        72,
        89,
        48,
        9,
        9,
        9,
        86,
        33,
        21
      ]
    },
    "demos": [
      {
        "input": [
          39,
          5,
          5,
          60,
          85,
          70,
          86
        ],
        "output": [
          86,
          70,
          85,
          60,
          60,
          60,
          5,
          5,
          39
        ]
      },
      {
        "input": [
          42,
          94,
          71,
          44,
          50,
          49,
          35,
          13
        ],
        "output": [
          13,
          35,
          49,
          50,
          44,
          44,
          50,
          71,
          94,
          42
        ]
      },
      {
        "input": [
          7,
          37,
          92,
          49,
          91,
          80
        ],
        "output": [
          80,
          91,
          49,
          92,
          92,
          92,
          37,
          7
        ]
      }
    ]
  },
  {
    "id": "c102",
    "difficulty": 0,
    "function": "def c102(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        65,
        38,
        88,
        20,
        15,
        90,
        85
      ],
      "output": [
        65,
        38,
        88,
        20,
        15,
        90,
        85
      ]
    },
    "demos": [
      {
        "input": [
          56,
          72,
          88,
          70,
          80,
          19
        ],
        "output": [
          56,
          72,
          88,
          70,
          80,
          19
        ]
      },
      {
        "input": [
          22,
          61,
          18,
          89,
          76
        ],
        "output": [
          22,
          61,
          18,
          89,
          76
        ]
      },
      {
        "input": [
          67,
          68,
          5,
          31,
          67,
          41,
          97
        ],
        "output": [
          67,
          68,
          5,
          31,
          67,
          41,
          97
        ]
      }
    ]
  },
  {
    "id": "c170",
    "difficulty": 1,
    "function": "def c170(x):\n    # remove all but the first and last element\n    return [x[0], x[-1]]\n    \n",
    "data": {
      "input": [
        11,
        67,
        55,
        85,
        6,
        17,
        71
      ],
      "output": [
        11,
        71
      ]
    },
    "demos": [
      {
        "input": [
          5,
          78,
          43,
          17,
          16,
          86
        ],
        "output": [
          5,
          86
        ]
      },
      {
        "input": [
          62,
          36,
          14,
          42,
          30
        ],
        "output": [
          62,
          30
        ]
      },
      {
        "input": [
          57,
          13,
          29,
          16,
          93,
          76,
          24,
          93
        ],
        "output": [
          57,
          93
        ]
      }
    ]
  },
  {
    "id": "c121",
    "difficulty": 2,
    "function": "def c121(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        85,
        3,
        51,
        7,
        73,
        38,
        37,
        40
      ],
      "output": [
        40
      ]
    },
    "demos": [
      {
        "input": [
          83,
          71,
          17
        ],
        "output": [
          17
        ]
      },
      {
        "input": [
          53,
          15,
          27,
          39,
          61,
          69
        ],
        "output": [
          69
        ]
      },
      {
        "input": [
          18,
          57,
          64,
          16,
          31,
          51
        ],
        "output": [
          51
        ]
      }
    ]
  },
  {
    "id": "c045",
    "difficulty": 3,
    "function": "def c045(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        24,
        75,
        57,
        37,
        15,
        78
      ],
      "output": [
        24,
        75,
        57,
        37,
        15,
        78
      ]
    },
    "demos": [
      {
        "input": [
          45,
          81,
          83,
          19,
          82
        ],
        "output": [
          45,
          81,
          83,
          19,
          82
        ]
      },
      {
        "input": [
          34,
          6,
          86,
          95,
          98,
          23
        ],
        "output": [
          34,
          6,
          86,
          95,
          98,
          23
        ]
      },
      {
        "input": [
          45,
          40,
          88,
          28,
          50,
          94,
          72,
          79
        ],
        "output": [
          45,
          40,
          88,
          28,
          50,
          94,
          72,
          79
        ]
      }
    ]
  },
  {
    "id": "c072",
    "difficulty": 4,
    "function": "def c072(x):\n    # repeat every element twice\n    return [i for i in x for _ in (0, 1)]\n\n",
    "data": {
      "input": [
        34,
        32,
        42
      ],
      "output": [
        34,
        34,
        32,
        32,
        42,
        42
      ]
    },
    "demos": [
      {
        "input": [
          39,
          43,
          73,
          58,
          52,
          28
        ],
        "output": [
          39,
          39,
          43,
          43,
          73,
          73,
          58,
          58,
          52,
          52,
          28,
          28
        ]
      },
      {
        "input": [
          21,
          61,
          62,
          89,
          69
        ],
        "output": [
          21,
          21,
          61,
          61,
          62,
          62,
          89,
          89,
          69,
          69
        ]
      },
      {
        "input": [
          49,
          49,
          77,
          36
        ],
        "output": [
          49,
          49,
          49,
          49,
          77,
          77,
          36,
          36
        ]
      }
    ]
  },
  {
    "id": "c151",
    "difficulty": 5,
    "function": "def c151(x):\n    # repeat each element, M, M times, in order of appearance\n    return [i for i in x for _ in range(i)]\n\n",
    "data": {
      "input": [
        5,
        3,
        1
      ],
      "output": [
        5,
        5,
        5,
        5,
        5,
        3,
        3,
        3,
        1
      ]
    },
    "demos": [
      {
        "input": [
          3,
          5,
          1,
          0
        ],
        "output": [
          3,
          3,
          3,
          5,
          5,
          5,
          5,
          5,
          1
        ]
      },
      {
        "input": [
          5,
          3,
          0,
          0
        ],
        "output": [
          5,
          5,
          5,
          5,
          5,
          3,
          3,
          3
        ]
      },
      {
        "input": [
          1,
          5,
          0
        ],
        "output": [
          1,
          5,
          5,
          5,
          5,
          5
        ]
      }
    ]
  },
  {
    "id": "c080",
    "difficulty": 6,
    "function": "def c080(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        23,
        24,
        48,
        43,
        66
      ],
      "output": [
        66,
        43,
        48,
        24,
        23
      ]
    },
    "demos": [
      {
        "input": [
          25,
          4,
          25,
          9,
          32,
          69,
          12
        ],
        "output": [
          12,
          69,
          32,
          9,
          25,
          4,
          25
        ]
      },
      {
        "input": [
          25,
          89,
          33,
          98
        ],
        "output": [
          98,
          33,
          89,
          25
        ]
      },
      {
        "input": [
          79,
          1,
          40,
          75,
          19,
          18,
          89,
          97
        ],
        "output": [
          97,
          89,
          18,
          19,
          75,
          40,
          1,
          79
        ]
      }
    ]
  },
  {
    "id": "c061",
    "difficulty": 7,
    "function": "def c061(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        75,
        75,
        49
      ],
      "output": [
        49
      ]
    },
    "demos": [
      {
        "input": [
          7,
          14,
          38,
          9,
          89,
          80
        ],
        "output": [
          80
        ]
      },
      {
        "input": [
          58,
          60,
          44,
          15,
          14,
          53
        ],
        "output": [
          53
        ]
      },
      {
        "input": [
          91,
          5,
          3
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c189",
    "difficulty": 8,
    "function": "def c189(x):\n    # count from the smallest element to the largest element\n    return list(range(min(x), max(x)+1))\n\n",
    "data": {
      "input": [
        26,
        19,
        23
      ],
      "output": [
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26
      ]
    },
    "demos": [
      {
        "input": [
          49,
          47,
          52,
          54
        ],
        "output": [
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54
        ]
      },
      {
        "input": [
          52,
          51,
          53
        ],
        "output": [
          51,
          52,
          53
        ]
      },
      {
        "input": [
          10,
          5,
          9
        ],
        "output": [
          5,
          6,
          7,
          8,
          9,
          10
        ]
      }
    ]
  },
  {
    "id": "c050",
    "difficulty": 9,
    "function": "def c050(x):\n    # prepend first element to the list\n    return [x[0]] + x\n\n",
    "data": {
      "input": [
        32,
        18,
        99,
        25
      ],
      "output": [
        32,
        32,
        18,
        99,
        25
      ]
    },
    "demos": [
      {
        "input": [
          70,
          28,
          70,
          15,
          72,
          69,
          3
        ],
        "output": [
          70,
          70,
          28,
          70,
          15,
          72,
          69,
          3
        ]
      },
      {
        "input": [
          32,
          97,
          10,
          29,
          65,
          89
        ],
        "output": [
          32,
          32,
          97,
          10,
          29,
          65,
          89
        ]
      },
      {
        "input": [
          14,
          82,
          26,
          18,
          59,
          40
        ],
        "output": [
          14,
          14,
          82,
          26,
          18,
          59,
          40
        ]
      }
    ]
  },
  {
    "id": "c048",
    "difficulty": 10,
    "function": "def c048(x):\n    # remove all but the first element\n    return [x[0]]\n    \n",
    "data": {
      "input": [
        7,
        76,
        37,
        96,
        44,
        7
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          22,
          47,
          56,
          5,
          31
        ],
        "output": [
          22
        ]
      },
      {
        "input": [
          46,
          90,
          75,
          70,
          49,
          59
        ],
        "output": [
          46
        ]
      },
      {
        "input": [
          17,
          3,
          27,
          72,
          5,
          53,
          86
        ],
        "output": [
          17
        ]
      }
    ]
  },
  {
    "id": "c147",
    "difficulty": 11,
    "function": "def c147(x):\n    # each element, followed by its index\n    res = []\n    for i, v in enumerate(x):\n        res.append(v)\n        res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        78,
        54,
        4,
        83,
        76,
        51,
        40
      ],
      "output": [
        78,
        0,
        54,
        1,
        4,
        2,
        83,
        3,
        76,
        4,
        51,
        5,
        40,
        6
      ]
    },
    "demos": [
      {
        "input": [
          18,
          35,
          91,
          70,
          85,
          70,
          27
        ],
        "output": [
          18,
          0,
          35,
          1,
          91,
          2,
          70,
          3,
          85,
          4,
          70,
          5,
          27,
          6
        ]
      },
      {
        "input": [
          60,
          42,
          92,
          44
        ],
        "output": [
          60,
          0,
          42,
          1,
          92,
          2,
          44,
          3
        ]
      },
      {
        "input": [
          83,
          57,
          25
        ],
        "output": [
          83,
          0,
          57,
          1,
          25,
          2
        ]
      }
    ]
  },
  {
    "id": "c120",
    "difficulty": 12,
    "function": "def c120(x):\n    # remove all but the first element\n    return [x[0]]\n\n",
    "data": {
      "input": [
        22,
        14,
        61,
        72
      ],
      "output": [
        22
      ]
    },
    "demos": [
      {
        "input": [
          24,
          58,
          39,
          10,
          10
        ],
        "output": [
          24
        ]
      },
      {
        "input": [
          76,
          35,
          87,
          26,
          28,
          22
        ],
        "output": [
          76
        ]
      },
      {
        "input": [
          27,
          89,
          97,
          83,
          83
        ],
        "output": [
          27
        ]
      }
    ]
  },
  {
    "id": "c127",
    "difficulty": 13,
    "function": "def c127(x):\n    # remove last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        8,
        73,
        9,
        81
      ],
      "output": [
        8,
        73,
        9
      ]
    },
    "demos": [
      {
        "input": [
          72,
          45,
          11,
          0
        ],
        "output": [
          72,
          45,
          11
        ]
      },
      {
        "input": [
          93,
          68,
          15
        ],
        "output": [
          93,
          68
        ]
      },
      {
        "input": [
          72,
          77,
          53,
          64,
          66
        ],
        "output": [
          72,
          77,
          53,
          64
        ]
      }
    ]
  },
  {
    "id": "c100",
    "difficulty": 14,
    "function": "def c100(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        44,
        72,
        23,
        14
      ],
      "output": [
        14,
        23,
        72,
        44
      ]
    },
    "demos": [
      {
        "input": [
          96,
          33,
          78,
          33
        ],
        "output": [
          33,
          78,
          33,
          96
        ]
      },
      {
        "input": [
          70,
          81,
          44,
          88,
          87,
          38,
          2
        ],
        "output": [
          2,
          38,
          87,
          88,
          44,
          81,
          70
        ]
      },
      {
        "input": [
          74,
          94,
          35,
          56
        ],
        "output": [
          56,
          35,
          94,
          74
        ]
      }
    ]
  },
  {
    "id": "c145",
    "difficulty": 15,
    "function": "def c145(x):\n    # replace every element with the first element\n    return [x[0]] * len(x)\n\n",
    "data": {
      "input": [
        54,
        40,
        23,
        78,
        30
      ],
      "output": [
        54,
        54,
        54,
        54,
        54
      ]
    },
    "demos": [
      {
        "input": [
          98,
          6,
          92,
          41,
          90,
          45,
          43
        ],
        "output": [
          98,
          98,
          98,
          98,
          98,
          98,
          98
        ]
      },
      {
        "input": [
          64,
          29,
          91,
          9,
          26
        ],
        "output": [
          64,
          64,
          64,
          64,
          64
        ]
      },
      {
        "input": [
          74,
          33,
          3,
          87,
          33
        ],
        "output": [
          74,
          74,
          74,
          74,
          74
        ]
      }
    ]
  },
  {
    "id": "c079",
    "difficulty": 16,
    "function": "def c079(x):\n    # sum of the list\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        17,
        15,
        14,
        15,
        5,
        1
      ],
      "output": [
        67
      ]
    },
    "demos": [
      {
        "input": [
          0,
          6,
          5,
          15,
          15
        ],
        "output": [
          41
        ]
      },
      {
        "input": [
          5,
          6,
          13
        ],
        "output": [
          24
        ]
      },
      {
        "input": [
          5,
          12,
          2,
          9,
          16,
          11
        ],
        "output": [
          55
        ]
      }
    ]
  },
  {
    "id": "c043",
    "difficulty": 17,
    "function": "def c043(x):\n    return [8, 2, 7, 0, 3]\n\n",
    "data": {
      "input": [
        82,
        56,
        36,
        48,
        49,
        71,
        6
      ],
      "output": [
        8,
        2,
        7,
        0,
        3
      ]
    },
    "demos": [
      {
        "input": [
          13,
          95,
          76
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          94,
          57,
          78
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          56,
          90,
          30,
          74,
          36,
          72,
          94
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      }
    ]
  },
  {
    "id": "c038",
    "difficulty": 18,
    "function": "def c038(x):\n    # append 9\n    return x + [9]\n\n",
    "data": {
      "input": [
        82,
        39,
        37,
        69,
        73,
        73
      ],
      "output": [
        82,
        39,
        37,
        69,
        73,
        73,
        9
      ]
    },
    "demos": [
      {
        "input": [
          3,
          38,
          35,
          85
        ],
        "output": [
          3,
          38,
          35,
          85,
          9
        ]
      },
      {
        "input": [
          69,
          64,
          55,
          93,
          80,
          14
        ],
        "output": [
          69,
          64,
          55,
          93,
          80,
          14,
          9
        ]
      },
      {
        "input": [
          96,
          58,
          44,
          73,
          5,
          56,
          77
        ],
        "output": [
          96,
          58,
          44,
          73,
          5,
          56,
          77,
          9
        ]
      }
    ]
  },
  {
    "id": "c042",
    "difficulty": 19,
    "function": "def c042(x):\n    return [5, 2]\n\n",
    "data": {
      "input": [
        32,
        47,
        64,
        38
      ],
      "output": [
        5,
        2
      ]
    },
    "demos": [
      {
        "input": [
          90,
          56,
          60,
          10
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          32,
          37,
          88
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          80,
          86,
          89,
          95
        ],
        "output": [
          5,
          2
        ]
      }
    ]
  },
  {
    "id": "c223",
    "difficulty": 20,
    "function": "def c223(x):\n    # swap the digits of each element\n    return [int(str(i)[::-1]) for i in x]\n\n",
    "data": {
      "input": [
        83,
        8,
        4,
        97,
        59,
        82
      ],
      "output": [
        38,
        8,
        4,
        79,
        95,
        28
      ]
    },
    "demos": [
      {
        "input": [
          10,
          97,
          5,
          84,
          20
        ],
        "output": [
          1,
          79,
          5,
          48,
          2
        ]
      },
      {
        "input": [
          30,
          50,
          37,
          23,
          42
        ],
        "output": [
          3,
          5,
          73,
          32,
          24
        ]
      },
      {
        "input": [
          97,
          7,
          93
        ],
        "output": [
          79,
          7,
          39
        ]
      }
    ]
  },
  {
    "id": "c137",
    "difficulty": 21,
    "function": "def c137(x):\n    # remove all 3\n    return [i for i in x if i != 3]\n\n",
    "data": {
      "input": [
        3,
        6,
        5,
        9,
        37,
        16
      ],
      "output": [
        6,
        5,
        9,
        37,
        16
      ]
    },
    "demos": [
      {
        "input": [
          76,
          3,
          3,
          74
        ],
        "output": [
          76,
          74
        ]
      },
      {
        "input": [
          93,
          72,
          3,
          24,
          34,
          94,
          3,
          13
        ],
        "output": [
          93,
          72,
          24,
          34,
          94,
          13
        ]
      },
      {
        "input": [
          96,
          16,
          13,
          62,
          34,
          3,
          56,
          33
        ],
        "output": [
          96,
          16,
          13,
          62,
          34,
          56,
          33
        ]
      }
    ]
  },
  {
    "id": "c238",
    "difficulty": 22,
    "function": "def c238(x):\n    # keep only elements that appear exactly once\n    return [i for i in x if x.count(i) == 1]\n\n",
    "data": {
      "input": [
        0,
        1,
        18,
        9,
        9,
        0,
        15,
        6,
        1
      ],
      "output": [
        18,
        15,
        6
      ]
    },
    "demos": [
      {
        "input": [
          22,
          22,
          22,
          45,
          67,
          22,
          89,
          90,
          90
        ],
        "output": [
          45,
          67,
          89
        ]
      },
      {
        "input": [
          11,
          5,
          4,
          1,
          5,
          2,
          2,
          2
        ],
        "output": [
          11,
          4,
          1
        ]
      },
      {
        "input": [
          12,
          34,
          12,
          56,
          78,
          12,
          34,
          34
        ],
        "output": [
          56,
          78
        ]
      }
    ]
  },
  {
    "id": "c108",
    "difficulty": 23,
    "function": "def c108(x):\n    # sum of elements\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        13,
        16,
        9,
        16,
        16,
        5,
        19
      ],
      "output": [
        94
      ]
    },
    "demos": [
      {
        "input": [
          19,
          19,
          4,
          8,
          20,
          6,
          12
        ],
        "output": [
          88
        ]
      },
      {
        "input": [
          4,
          5,
          1,
          19,
          7
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          20,
          7,
          0
        ],
        "output": [
          27
        ]
      }
    ]
  },
  {
    "id": "c126",
    "difficulty": 24,
    "function": "def c126(x):\n    # remove first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        25,
        50,
        99,
        85
      ],
      "output": [
        50,
        99,
        85
      ]
    },
    "demos": [
      {
        "input": [
          99,
          11,
          36,
          23,
          75
        ],
        "output": [
          11,
          36,
          23,
          75
        ]
      },
      {
        "input": [
          8,
          74,
          99,
          16,
          64,
          12
        ],
        "output": [
          74,
          99,
          16,
          64,
          12
        ]
      },
      {
        "input": [
          3,
          31,
          40,
          45,
          9,
          4
        ],
        "output": [
          31,
          40,
          45,
          9,
          4
        ]
      }
    ]
  },
  {
    "id": "c187",
    "difficulty": 25,
    "function": "def c187(x):\n    # concatenate input with itself, separated by 0\n    return x + [0] + x\n\n",
    "data": {
      "input": [
        99,
        2,
        91,
        93
      ],
      "output": [
        99,
        2,
        91,
        93,
        0,
        99,
        2,
        91,
        93
      ]
    },
    "demos": [
      {
        "input": [
          30,
          52,
          46,
          11
        ],
        "output": [
          30,
          52,
          46,
          11,
          0,
          30,
          52,
          46,
          11
        ]
      },
      {
        "input": [
          6,
          34,
          82,
          84,
          66
        ],
        "output": [
          6,
          34,
          82,
          84,
          66,
          0,
          6,
          34,
          82,
          84,
          66
        ]
      },
      {
        "input": [
          88,
          99,
          62,
          73
        ],
        "output": [
          88,
          99,
          62,
          73,
          0,
          88,
          99,
          62,
          73
        ]
      }
    ]
  },
  {
    "id": "c022",
    "difficulty": 26,
    "function": "def c022(x):\n    # insert a 5 as element 1\n    return x[:1] + [5] + x[1:]\n\n",
    "data": {
      "input": [
        22,
        63,
        33
      ],
      "output": [
        22,
        5,
        63,
        33
      ]
    },
    "demos": [
      {
        "input": [
          38,
          91,
          77,
          61,
          3,
          46,
          95
        ],
        "output": [
          38,
          5,
          91,
          77,
          61,
          3,
          46,
          95
        ]
      },
      {
        "input": [
          47,
          24,
          78,
          77,
          77
        ],
        "output": [
          47,
          5,
          24,
          78,
          77,
          77
        ]
      },
      {
        "input": [
          90,
          35,
          79,
          67,
          65,
          60,
          5
        ],
        "output": [
          90,
          5,
          35,
          79,
          67,
          65,
          60,
          5
        ]
      }
    ]
  },
  {
    "id": "c212",
    "difficulty": 27,
    "function": "def c212(x):\n    # insert 3 at index 2, 3 times\n    return x[:3] + [3,3,3] + x[3:]\n\n",
    "data": {
      "input": [
        6,
        47,
        16
      ],
      "output": [
        6,
        47,
        16,
        3,
        3,
        3
      ]
    },
    "demos": [
      {
        "input": [
          10,
          45,
          74,
          95,
          43,
          84
        ],
        "output": [
          10,
          45,
          74,
          3,
          3,
          3,
          95,
          43,
          84
        ]
      },
      {
        "input": [
          93,
          96,
          8,
          35
        ],
        "output": [
          93,
          96,
          8,
          3,
          3,
          3,
          35
        ]
      },
      {
        "input": [
          15,
          72,
          3,
          80,
          56,
          8
        ],
        "output": [
          15,
          72,
          3,
          3,
          3,
          3,
          80,
          56,
          8
        ]
      }
    ]
  },
  {
    "id": "c101",
    "difficulty": 28,
    "function": "def c101(x):\n    return [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]\n\n",
    "data": {
      "input": [
        66,
        46,
        75,
        72,
        39,
        90
      ],
      "output": [
        11,
        19,
        24,
        33,
        42,
        5,
        82,
        0,
        64,
        9
      ]
    },
    "demos": [
      {
        "input": [
          75,
          73,
          69
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          85,
          13,
          75,
          86,
          25,
          46,
          87
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          99,
          59,
          51,
          10,
          16
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      }
    ]
  },
  {
    "id": "c021",
    "difficulty": 29,
    "function": "def c021(x):\n    # insert 8 as element 1\n    return x[:1] + [8] + x[1:]\n\n",
    "data": {
      "input": [
        49,
        53,
        60
      ],
      "output": [
        49,
        8,
        53,
        60
      ]
    },
    "demos": [
      {
        "input": [
          4,
          75,
          23,
          39,
          21,
          64,
          38
        ],
        "output": [
          4,
          8,
          75,
          23,
          39,
          21,
          64,
          38
        ]
      },
      {
        "input": [
          97,
          89,
          41,
          36,
          47
        ],
        "output": [
          97,
          8,
          89,
          41,
          36,
          47
        ]
      },
      {
        "input": [
          26,
          67,
          29,
          61,
          18,
          15,
          70
        ],
        "output": [
          26,
          8,
          67,
          29,
          61,
          18,
          15,
          70
        ]
      }
    ]
  },
  {
    "id": "c105",
    "difficulty": 30,
    "function": "def c105(x):\n    # concatenate all but the last element with all but the first element\n    return x[:-1] + x[1:]\n\n",
    "data": {
      "input": [
        94,
        45,
        42,
        36,
        33
      ],
      "output": [
        94,
        45,
        42,
        36,
        45,
        42,
        36,
        33
      ]
    },
    "demos": [
      {
        "input": [
          51,
          46,
          62,
          83,
          61
        ],
        "output": [
          51,
          46,
          62,
          83,
          46,
          62,
          83,
          61
        ]
      },
      {
        "input": [
          2,
          49,
          69,
          95,
          95
        ],
        "output": [
          2,
          49,
          69,
          95,
          49,
          69,
          95,
          95
        ]
      },
      {
        "input": [
          97,
          94,
          6,
          55,
          82,
          11
        ],
        "output": [
          97,
          94,
          6,
          55,
          82,
          94,
          6,
          55,
          82,
          11
        ]
      }
    ]
  },
  {
    "id": "c041",
    "difficulty": 31,
    "function": "def c041(x):\n    return [9]\n\n",
    "data": {
      "input": [
        60,
        80,
        81
      ],
      "output": [
        9
      ]
    },
    "demos": [
      {
        "input": [
          26,
          21,
          26,
          14
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          59,
          55,
          2,
          98,
          44,
          64,
          3
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          93,
          19,
          31,
          4,
          16,
          32
        ],
        "output": [
          9
        ]
      }
    ]
  },
  {
    "id": "c070",
    "difficulty": 32,
    "function": "def c070(x):\n    # concatenate the input\n    return x + x\n\n",
    "data": {
      "input": [
        3,
        26,
        97,
        94,
        13
      ],
      "output": [
        3,
        26,
        97,
        94,
        13,
        3,
        26,
        97,
        94,
        13
      ]
    },
    "demos": [
      {
        "input": [
          55,
          10,
          40,
          51
        ],
        "output": [
          55,
          10,
          40,
          51,
          55,
          10,
          40,
          51
        ]
      },
      {
        "input": [
          13,
          98,
          97,
          47,
          75
        ],
        "output": [
          13,
          98,
          97,
          47,
          75,
          13,
          98,
          97,
          47,
          75
        ]
      },
      {
        "input": [
          62,
          26,
          22
        ],
        "output": [
          62,
          26,
          22,
          62,
          26,
          22
        ]
      }
    ]
  },
  {
    "id": "c052",
    "difficulty": 33,
    "function": "def c052(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        62,
        42,
        85,
        47,
        59,
        58
      ],
      "output": [
        62,
        62,
        62,
        62,
        62,
        62,
        62
      ]
    },
    "demos": [
      {
        "input": [
          95,
          89,
          89
        ],
        "output": [
          95,
          95,
          95,
          95,
          95,
          95,
          95
        ]
      },
      {
        "input": [
          63,
          13,
          8
        ],
        "output": [
          63,
          63,
          63,
          63,
          63,
          63,
          63
        ]
      },
      {
        "input": [
          62,
          78,
          20,
          43
        ],
        "output": [
          62,
          62,
          62,
          62,
          62,
          62,
          62
        ]
      }
    ]
  },
  {
    "id": "c044",
    "difficulty": 34,
    "function": "def c044(x):\n    return [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]\n\n",
    "data": {
      "input": [
        74,
        53,
        27,
        63,
        54,
        68
      ],
      "output": [
        1,
        9,
        4,
        3,
        2,
        5,
        8,
        0,
        4,
        9
      ]
    },
    "demos": [
      {
        "input": [
          65,
          55,
          84,
          95,
          24,
          38
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          19,
          22,
          87,
          14
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          45,
          49,
          8,
          25
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      }
    ]
  },
  {
    "id": "c190",
    "difficulty": 35,
    "function": "def c190(x):\n    # count by 2 from the first element to the last element\n    if x[0] < x[-1]:\n        return list(range(x[0], x[-1]+1, 2))\n    else:\n        return list(range(x[0], x[-1]-1, -2))\n\n",
    "data": {
      "input": [
        80,
        67,
        86
      ],
      "output": [
        80,
        82,
        84,
        86
      ]
    },
    "demos": [
      {
        "input": [
          38,
          53,
          21
        ],
        "output": [
          38,
          36,
          34,
          32,
          30,
          28,
          26,
          24,
          22
        ]
      },
      {
        "input": [
          99,
          72,
          24,
          85
        ],
        "output": [
          99,
          97,
          95,
          93,
          91,
          89,
          87,
          85
        ]
      },
      {
        "input": [
          39,
          42,
          39
        ],
        "output": [
          39
        ]
      }
    ]
  },
  {
    "id": "c037",
    "difficulty": 36,
    "function": "def c037(x):\n    # append 3\n    return x + [3]\n\n",
    "data": {
      "input": [
        62,
        10,
        58,
        15,
        95
      ],
      "output": [
        62,
        10,
        58,
        15,
        95,
        3
      ]
    },
    "demos": [
      {
        "input": [
          53,
          79,
          15,
          81,
          3
        ],
        "output": [
          53,
          79,
          15,
          81,
          3,
          3
        ]
      },
      {
        "input": [
          50,
          32,
          99,
          32,
          83,
          54,
          90
        ],
        "output": [
          50,
          32,
          99,
          32,
          83,
          54,
          90,
          3
        ]
      },
      {
        "input": [
          49,
          33,
          54,
          72,
          36
        ],
        "output": [
          49,
          33,
          54,
          72,
          36,
          3
        ]
      }
    ]
  },
  {
    "id": "c222",
    "difficulty": 37,
    "function": "def c222(x):\n    # remove each element with the input length\n    return [len(x) for _ in x]\n\n",
    "data": {
      "input": [
        81,
        85,
        5,
        29,
        37,
        27
      ],
      "output": [
        6,
        6,
        6,
        6,
        6,
        6
      ]
    },
    "demos": [
      {
        "input": [
          51,
          11,
          81,
          53
        ],
        "output": [
          4,
          4,
          4,
          4
        ]
      },
      {
        "input": [
          2,
          20,
          12,
          51,
          57,
          84
        ],
        "output": [
          6,
          6,
          6,
          6,
          6,
          6
        ]
      },
      {
        "input": [
          82,
          83,
          70,
          24,
          31,
          30
        ],
        "output": [
          6,
          6,
          6,
          6,
          6,
          6
        ]
      }
    ]
  },
  {
    "id": "c107",
    "difficulty": 38,
    "function": "def c107(x):\n    # unique elements, in order of appearance\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        30,
        9,
        62,
        62,
        33,
        62,
        62
      ],
      "output": [
        30,
        9,
        62,
        33
      ]
    },
    "demos": [
      {
        "input": [
          75,
          69,
          7,
          29,
          75,
          75,
          69
        ],
        "output": [
          75,
          69,
          7,
          29
        ]
      },
      {
        "input": [
          38,
          91,
          29,
          76,
          11,
          38,
          74,
          91,
          11,
          27
        ],
        "output": [
          38,
          91,
          29,
          76,
          11,
          74,
          27
        ]
      },
      {
        "input": [
          22,
          40,
          35,
          17,
          22,
          60,
          31,
          17,
          31,
          59
        ],
        "output": [
          22,
          40,
          35,
          17,
          60,
          31,
          59
        ]
      }
    ]
  },
  {
    "id": "c011",
    "difficulty": 39,
    "function": "def c011(x):\n    # [1:4] of the input\n    return x[1:4]\n\n",
    "data": {
      "input": [
        64,
        53,
        59,
        97,
        39
      ],
      "output": [
        53,
        59,
        97
      ]
    },
    "demos": [
      {
        "input": [
          25,
          19,
          77,
          37
        ],
        "output": [
          19,
          77,
          37
        ]
      },
      {
        "input": [
          22,
          30,
          40,
          18,
          46,
          90,
          62
        ],
        "output": [
          30,
          40,
          18
        ]
      },
      {
        "input": [
          72,
          45,
          56,
          91,
          16
        ],
        "output": [
          45,
          56,
          91
        ]
      }
    ]
  },
  {
    "id": "c104",
    "difficulty": 40,
    "function": "def c104(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        8,
        25,
        58,
        67,
        85,
        73
      ],
      "output": [
        85
      ]
    },
    "demos": [
      {
        "input": [
          56,
          52,
          61
        ],
        "output": [
          61
        ]
      },
      {
        "input": [
          9,
          87,
          31,
          15,
          69
        ],
        "output": [
          87
        ]
      },
      {
        "input": [
          99,
          40,
          74,
          22,
          76
        ],
        "output": [
          99
        ]
      }
    ]
  },
  {
    "id": "c192",
    "difficulty": 41,
    "function": "def c192(x):\n    # replace each element, M, with its tens digit, if no tens digit, replace with 0\n    return [int(str(i)[-2]) if len(str(i)) > 1 else 0 for i in x]\n\n",
    "data": {
      "input": [
        47,
        54,
        91,
        82
      ],
      "output": [
        4,
        5,
        9,
        8
      ]
    },
    "demos": [
      {
        "input": [
          90,
          24,
          95,
          37,
          86,
          84
        ],
        "output": [
          9,
          2,
          9,
          3,
          8,
          8
        ]
      },
      {
        "input": [
          78,
          98,
          35,
          25
        ],
        "output": [
          7,
          9,
          3,
          2
        ]
      },
      {
        "input": [
          67,
          45,
          71,
          12,
          46
        ],
        "output": [
          6,
          4,
          7,
          1,
          4
        ]
      }
    ]
  },
  {
    "id": "c182",
    "difficulty": 42,
    "function": "def c182(x):\n    # keep every third element\n    return x[::3]\n\n",
    "data": {
      "input": [
        46,
        63,
        55,
        43,
        32,
        53
      ],
      "output": [
        46,
        43
      ]
    },
    "demos": [
      {
        "input": [
          25,
          27,
          53,
          56,
          80,
          2
        ],
        "output": [
          25,
          56
        ]
      },
      {
        "input": [
          50,
          51,
          59,
          50,
          77,
          35,
          57,
          6
        ],
        "output": [
          50,
          50,
          57
        ]
      },
      {
        "input": [
          64,
          42,
          67,
          55,
          77,
          21,
          10,
          36
        ],
        "output": [
          64,
          55,
          10
        ]
      }
    ]
  },
  {
    "id": "c006",
    "difficulty": 43,
    "function": "def c006(x):\n    # the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        68,
        73,
        79,
        46,
        23,
        11
      ],
      "output": [
        68,
        73
      ]
    },
    "demos": [
      {
        "input": [
          91,
          93,
          52,
          1,
          75,
          83,
          80
        ],
        "output": [
          91,
          93
        ]
      },
      {
        "input": [
          24,
          46,
          44,
          23,
          98,
          38,
          16
        ],
        "output": [
          24,
          46
        ]
      },
      {
        "input": [
          21,
          80,
          72,
          11,
          67,
          19
        ],
        "output": [
          21,
          80
        ]
      }
    ]
  },
  {
    "id": "c046",
    "difficulty": 44,
    "function": "def c046(x):\n    # prepend 7\n    return [7] + x\n\n",
    "data": {
      "input": [
        8,
        61,
        11
      ],
      "output": [
        7,
        8,
        61,
        11
      ]
    },
    "demos": [
      {
        "input": [
          83,
          6,
          59,
          62,
          28
        ],
        "output": [
          7,
          83,
          6,
          59,
          62,
          28
        ]
      },
      {
        "input": [
          36,
          27,
          40
        ],
        "output": [
          7,
          36,
          27,
          40
        ]
      },
      {
        "input": [
          58,
          8,
          38,
          33,
          50,
          58
        ],
        "output": [
          7,
          58,
          8,
          38,
          33,
          50,
          58
        ]
      }
    ]
  },
  {
    "id": "c106",
    "difficulty": 45,
    "function": "def c106(x):\n    # elements in ascending order\n    return sorted(x)\n\n",
    "data": {
      "input": [
        56,
        83,
        16,
        16,
        83,
        55
      ],
      "output": [
        16,
        16,
        55,
        56,
        83,
        83
      ]
    },
    "demos": [
      {
        "input": [
          62,
          95,
          41
        ],
        "output": [
          41,
          62,
          95
        ]
      },
      {
        "input": [
          43,
          57,
          42,
          90
        ],
        "output": [
          42,
          43,
          57,
          90
        ]
      },
      {
        "input": [
          68,
          5,
          27,
          99,
          68,
          81,
          2
        ],
        "output": [
          2,
          5,
          27,
          68,
          68,
          81,
          99
        ]
      }
    ]
  },
  {
    "id": "c114",
    "difficulty": 46,
    "function": "def c114(x):\n    # prepend the last element\n    return [x[-1]] + x\n\n",
    "data": {
      "input": [
        46,
        77,
        52
      ],
      "output": [
        52,
        46,
        77,
        52
      ]
    },
    "demos": [
      {
        "input": [
          49,
          20,
          18
        ],
        "output": [
          18,
          49,
          20,
          18
        ]
      },
      {
        "input": [
          70,
          63,
          40,
          3
        ],
        "output": [
          3,
          70,
          63,
          40,
          3
        ]
      },
      {
        "input": [
          69,
          68,
          53,
          83,
          72,
          32
        ],
        "output": [
          32,
          69,
          68,
          53,
          83,
          72,
          32
        ]
      }
    ]
  },
  {
    "id": "c093",
    "difficulty": 47,
    "function": "def c093(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        41,
        68,
        45,
        8,
        74,
        66
      ],
      "output": [
        41,
        41,
        41,
        41,
        41,
        41,
        41
      ]
    },
    "demos": [
      {
        "input": [
          29,
          87,
          74,
          52,
          87,
          73,
          77
        ],
        "output": [
          29,
          29,
          29,
          29,
          29,
          29,
          29
        ]
      },
      {
        "input": [
          89,
          26,
          75,
          91
        ],
        "output": [
          89,
          89,
          89,
          89,
          89,
          89,
          89
        ]
      },
      {
        "input": [
          1,
          9,
          85,
          89,
          86,
          12
        ],
        "output": [
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c195",
    "difficulty": 48,
    "function": "def c195(x):\n    # element 1, followed by 23, 68, 42, 99, 71, followed by last element\n    return [x[0], 23, 68, 42, 99, 71, x[-1]]\n\n",
    "data": {
      "input": [
        86,
        48,
        14,
        39,
        38
      ],
      "output": [
        86,
        23,
        68,
        42,
        99,
        71,
        38
      ]
    },
    "demos": [
      {
        "input": [
          65,
          32,
          62,
          22,
          7,
          68
        ],
        "output": [
          65,
          23,
          68,
          42,
          99,
          71,
          68
        ]
      },
      {
        "input": [
          29,
          82,
          35,
          84,
          23,
          25,
          34
        ],
        "output": [
          29,
          23,
          68,
          42,
          99,
          71,
          34
        ]
      },
      {
        "input": [
          85,
          23,
          71
        ],
        "output": [
          85,
          23,
          68,
          42,
          99,
          71,
          71
        ]
      }
    ]
  },
  {
    "id": "c196",
    "difficulty": 49,
    "function": "def c196(x):\n    # concatenate 17, 38, 82 input 1 55 27\n    return [17, 38, 82] + x + [1, 55, 27]\n\n",
    "data": {
      "input": [
        91,
        36
      ],
      "output": [
        17,
        38,
        82,
        91,
        36,
        1,
        55,
        27
      ]
    },
    "demos": [
      {
        "input": [
          66,
          34,
          86,
          2,
          91,
          41
        ],
        "output": [
          17,
          38,
          82,
          66,
          34,
          86,
          2,
          91,
          41,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          3,
          44,
          13,
          90,
          5
        ],
        "output": [
          17,
          38,
          82,
          3,
          44,
          13,
          90,
          5,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          39,
          17
        ],
        "output": [
          17,
          38,
          82,
          39,
          17,
          1,
          55,
          27
        ]
      }
    ]
  },
  {
    "id": "c095",
    "difficulty": 50,
    "function": "def c095(x):\n    # remove the first element and the last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        0,
        29,
        86,
        62,
        55,
        74
      ],
      "output": [
        29,
        86,
        62,
        55
      ]
    },
    "demos": [
      {
        "input": [
          87,
          62,
          96,
          95,
          2
        ],
        "output": [
          62,
          96,
          95
        ]
      },
      {
        "input": [
          17,
          32,
          91,
          22,
          44
        ],
        "output": [
          32,
          91,
          22
        ]
      },
      {
        "input": [
          46,
          61,
          14,
          13,
          52,
          58,
          16
        ],
        "output": [
          61,
          14,
          13,
          52,
          58
        ]
      }
    ]
  },
  {
    "id": "c016",
    "difficulty": 51,
    "function": "def c016(x):\n    # replace element 1 with 8\n    return [8] + x[1:]\n\n",
    "data": {
      "input": [
        2,
        98,
        53
      ],
      "output": [
        8,
        98,
        53
      ]
    },
    "demos": [
      {
        "input": [
          74,
          81,
          57,
          0
        ],
        "output": [
          8,
          81,
          57,
          0
        ]
      },
      {
        "input": [
          44,
          25,
          88,
          89,
          8
        ],
        "output": [
          8,
          25,
          88,
          89,
          8
        ]
      },
      {
        "input": [
          85,
          18,
          81,
          53,
          53
        ],
        "output": [
          8,
          18,
          81,
          53,
          53
        ]
      }
    ]
  },
  {
    "id": "c224",
    "difficulty": 52,
    "function": "def c224(x):\n    # reverse the list, then take every other element starting from the second element, then take every other element starting from the first element\n    return x[::-2] + x[(len(x) % 2)::2]\n\n",
    "data": {
      "input": [
        43,
        28,
        8,
        25,
        8,
        16
      ],
      "output": [
        16,
        25,
        28,
        43,
        8,
        8
      ]
    },
    "demos": [
      {
        "input": [
          85,
          10,
          38,
          59
        ],
        "output": [
          59,
          10,
          85,
          38
        ]
      },
      {
        "input": [
          91,
          54,
          29
        ],
        "output": [
          29,
          91,
          54
        ]
      },
      {
        "input": [
          99,
          14,
          23,
          73,
          77
        ],
        "output": [
          77,
          23,
          99,
          14,
          73
        ]
      }
    ]
  },
  {
    "id": "c116",
    "difficulty": 53,
    "function": "def c116(x):\n    # reflect the input on itself\n    return x[::-1] + x[1:]\n\n",
    "data": {
      "input": [
        23,
        59,
        53,
        72,
        21
      ],
      "output": [
        21,
        72,
        53,
        59,
        23,
        59,
        53,
        72,
        21
      ]
    },
    "demos": [
      {
        "input": [
          75,
          70,
          36,
          28,
          59,
          0
        ],
        "output": [
          0,
          59,
          28,
          36,
          70,
          75,
          70,
          36,
          28,
          59,
          0
        ]
      },
      {
        "input": [
          94,
          7,
          77,
          71,
          37,
          50
        ],
        "output": [
          50,
          37,
          71,
          77,
          7,
          94,
          7,
          77,
          71,
          37,
          50
        ]
      },
      {
        "input": [
          21,
          19,
          71,
          96,
          38
        ],
        "output": [
          38,
          96,
          71,
          19,
          21,
          19,
          71,
          96,
          38
        ]
      }
    ]
  },
  {
    "id": "c140",
    "difficulty": 54,
    "function": "def c140(x):\n    # replace element 1 with 9\n    return x[:1] + [9] + x[2:]\n\n",
    "data": {
      "input": [
        82,
        26,
        49,
        16
      ],
      "output": [
        82,
        9,
        49,
        16
      ]
    },
    "demos": [
      {
        "input": [
          32,
          87,
          56,
          58,
          35,
          88,
          98
        ],
        "output": [
          32,
          9,
          56,
          58,
          35,
          88,
          98
        ]
      },
      {
        "input": [
          24,
          42,
          88,
          7,
          35,
          62,
          26
        ],
        "output": [
          24,
          9,
          88,
          7,
          35,
          62,
          26
        ]
      },
      {
        "input": [
          0,
          4,
          39,
          17,
          28,
          90
        ],
        "output": [
          0,
          9,
          39,
          17,
          28,
          90
        ]
      }
    ]
  },
  {
    "id": "c049",
    "difficulty": 55,
    "function": "def c049(x):\n    # remove the first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        12,
        39,
        23,
        26
      ],
      "output": [
        39,
        23,
        26
      ]
    },
    "demos": [
      {
        "input": [
          59,
          57,
          19,
          84,
          11,
          94,
          22
        ],
        "output": [
          57,
          19,
          84,
          11,
          94,
          22
        ]
      },
      {
        "input": [
          33,
          67,
          53
        ],
        "output": [
          67,
          53
        ]
      },
      {
        "input": [
          88,
          85,
          27,
          44,
          95
        ],
        "output": [
          85,
          27,
          44,
          95
        ]
      }
    ]
  },
  {
    "id": "c071",
    "difficulty": 56,
    "function": "def c071(x):\n    # add 2 to each element\n    return [i+2 for i in x]\n\n",
    "data": {
      "input": [
        82,
        84,
        92,
        18,
        62,
        84
      ],
      "output": [
        84,
        86,
        94,
        20,
        64,
        86
      ]
    },
    "demos": [
      {
        "input": [
          5,
          52,
          42,
          31
        ],
        "output": [
          7,
          54,
          44,
          33
        ]
      },
      {
        "input": [
          48,
          23,
          49
        ],
        "output": [
          50,
          25,
          51
        ]
      },
      {
        "input": [
          63,
          72,
          0,
          68,
          96,
          37
        ],
        "output": [
          65,
          74,
          2,
          70,
          98,
          39
        ]
      }
    ]
  },
  {
    "id": "c161",
    "difficulty": 57,
    "function": "def c161(x):\n    # replace each element, M, with M + the input length - M index\n    return [i + len(x) - j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        26,
        72,
        75,
        53,
        9,
        86
      ],
      "output": [
        32,
        77,
        79,
        56,
        11,
        87
      ]
    },
    "demos": [
      {
        "input": [
          52,
          80,
          48,
          8,
          12,
          55,
          94
        ],
        "output": [
          59,
          86,
          53,
          12,
          15,
          57,
          95
        ]
      },
      {
        "input": [
          25,
          68,
          70,
          94,
          96,
          4,
          52
        ],
        "output": [
          32,
          74,
          75,
          98,
          99,
          6,
          53
        ]
      },
      {
        "input": [
          59,
          66,
          88,
          92,
          94
        ],
        "output": [
          64,
          70,
          91,
          94,
          95
        ]
      }
    ]
  },
  {
    "id": "c068",
    "difficulty": 58,
    "function": "def c068(x):\n    # concatenate the input with 7, 3, 8, 4, 3\n    return x + [7, 3, 8, 4, 3]\n\n",
    "data": {
      "input": [
        18,
        37,
        50,
        17,
        4
      ],
      "output": [
        18,
        37,
        50,
        17,
        4,
        7,
        3,
        8,
        4,
        3
      ]
    },
    "demos": [
      {
        "input": [
          21,
          96,
          37,
          36,
          96
        ],
        "output": [
          21,
          96,
          37,
          36,
          96,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          27,
          40,
          25,
          0,
          69
        ],
        "output": [
          27,
          40,
          25,
          0,
          69,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          13,
          18,
          7,
          22,
          8,
          72
        ],
        "output": [
          13,
          18,
          7,
          22,
          8,
          72,
          7,
          3,
          8,
          4,
          3
        ]
      }
    ]
  },
  {
    "id": "c103",
    "difficulty": 59,
    "function": "def c103(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        63,
        51,
        75,
        15
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          19,
          41,
          88,
          97,
          95,
          72
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          23,
          98,
          12
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          77,
          48,
          68,
          47,
          91
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c001",
    "difficulty": 60,
    "function": "def c001(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        75,
        71,
        89,
        96,
        55,
        90,
        47
      ],
      "output": [
        89
      ]
    },
    "demos": [
      {
        "input": [
          25,
          81,
          62,
          89,
          14,
          80
        ],
        "output": [
          62
        ]
      },
      {
        "input": [
          90,
          30,
          46,
          80
        ],
        "output": [
          46
        ]
      },
      {
        "input": [
          28,
          53,
          78,
          88,
          91,
          24,
          97
        ],
        "output": [
          78
        ]
      }
    ]
  },
  {
    "id": "c090",
    "difficulty": 61,
    "function": "def c090(x):\n    return [18, 42, 77, 20, 36]\n\n",
    "data": {
      "input": [
        47,
        56,
        79
      ],
      "output": [
        18,
        42,
        77,
        20,
        36
      ]
    },
    "demos": [
      {
        "input": [
          44,
          6,
          14,
          93
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          93,
          45,
          69,
          72,
          10
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          17,
          60,
          69,
          2,
          7
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      }
    ]
  },
  {
    "id": "c097",
    "difficulty": 62,
    "function": "def c097(x):\n    # concatenate 11, 21, 43 input 7 89 0\n    return [11, 21, 43] + x + [7, 89, 0]\n\n",
    "data": {
      "input": [
        44,
        18,
        83,
        12,
        48
      ],
      "output": [
        11,
        21,
        43,
        44,
        18,
        83,
        12,
        48,
        7,
        89,
        0
      ]
    },
    "demos": [
      {
        "input": [
          20,
          63,
          97,
          66,
          52
        ],
        "output": [
          11,
          21,
          43,
          20,
          63,
          97,
          66,
          52,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          44,
          80,
          40,
          41,
          47
        ],
        "output": [
          11,
          21,
          43,
          44,
          80,
          40,
          41,
          47,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          88,
          39,
          97,
          70,
          46
        ],
        "output": [
          11,
          21,
          43,
          88,
          39,
          97,
          70,
          46,
          7,
          89,
          0
        ]
      }
    ]
  },
  {
    "id": "c142",
    "difficulty": 63,
    "function": "def c142(x):\n    # every digit in order of appearance\n    res = []\n    for i in x:\n        for j in str(i):\n            res.append(int(j))\n    return res\n\n",
    "data": {
      "input": [
        52,
        90,
        3,
        40,
        52,
        2,
        16
      ],
      "output": [
        5,
        2,
        9,
        0,
        3,
        4,
        0,
        5,
        2,
        2,
        1,
        6
      ]
    },
    "demos": [
      {
        "input": [
          2,
          27,
          41,
          94,
          8,
          10,
          2
        ],
        "output": [
          2,
          2,
          7,
          4,
          1,
          9,
          4,
          8,
          1,
          0,
          2
        ]
      },
      {
        "input": [
          84,
          98,
          34,
          90,
          55
        ],
        "output": [
          8,
          4,
          9,
          8,
          3,
          4,
          9,
          0,
          5,
          5
        ]
      },
      {
        "input": [
          9,
          84,
          51,
          55
        ],
        "output": [
          9,
          8,
          4,
          5,
          1,
          5,
          5
        ]
      }
    ]
  },
  {
    "id": "c091",
    "difficulty": 64,
    "function": "def c091(x):\n    return [81, 99, 41, 23, 22, 75, 68, 30]\n\n",
    "data": {
      "input": [
        20,
        26,
        29,
        88
      ],
      "output": [
        81,
        99,
        41,
        23,
        22,
        75,
        68,
        30
      ]
    },
    "demos": [
      {
        "input": [
          12,
          11,
          56,
          40
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          21,
          64,
          11
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          86,
          12,
          29
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      }
    ]
  },
  {
    "id": "c034",
    "difficulty": 65,
    "function": "def c034(x):\n    # swap element 1 and element 2\n    x[0], x[1] = x[1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        89,
        90,
        79,
        21
      ],
      "output": [
        90,
        89,
        79,
        21
      ]
    },
    "demos": [
      {
        "input": [
          81,
          27,
          86,
          8,
          66
        ],
        "output": [
          27,
          81,
          86,
          8,
          66
        ]
      },
      {
        "input": [
          62,
          3,
          83,
          39,
          75,
          58
        ],
        "output": [
          3,
          62,
          83,
          39,
          75,
          58
        ]
      },
      {
        "input": [
          84,
          31,
          59,
          68,
          6,
          4,
          15
        ],
        "output": [
          31,
          84,
          59,
          68,
          6,
          4,
          15
        ]
      }
    ]
  },
  {
    "id": "c244",
    "difficulty": 66,
    "function": "def c244(x):\n    # number of 3s\n    return [x.count(3)]\n\n",
    "data": {
      "input": [
        45,
        3,
        3,
        85,
        93,
        66
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          83,
          11,
          3,
          48,
          3,
          95
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          3,
          15,
          56,
          30,
          75,
          3
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          3,
          62,
          3,
          31,
          21
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c171",
    "difficulty": 67,
    "function": "def c171(x):\n    # cumulative sum\n    res = []\n    s = 0\n    for i in x:\n        s += i\n        res.append(s)\n    return res\n\n",
    "data": {
      "input": [
        3,
        10,
        7,
        20,
        1
      ],
      "output": [
        3,
        13,
        20,
        40,
        41
      ]
    },
    "demos": [
      {
        "input": [
          20,
          18,
          12,
          2,
          2,
          4,
          8
        ],
        "output": [
          20,
          38,
          50,
          52,
          54,
          58,
          66
        ]
      },
      {
        "input": [
          13,
          5,
          2,
          15,
          11
        ],
        "output": [
          13,
          18,
          20,
          35,
          46
        ]
      },
      {
        "input": [
          8,
          10,
          8
        ],
        "output": [
          8,
          18,
          26
        ]
      }
    ]
  },
  {
    "id": "c172",
    "difficulty": 68,
    "function": "def c172(x):\n    # cumulative product\n    res = []\n    p = 1\n    for i in x:\n        p *= i\n        res.append(p)\n    return res\n\n",
    "data": {
      "input": [
        4,
        6,
        5
      ],
      "output": [
        4,
        24,
        120
      ]
    },
    "demos": [
      {
        "input": [
          1,
          3,
          4,
          4,
          10
        ],
        "output": [
          1,
          3,
          12,
          48,
          480
        ]
      },
      {
        "input": [
          3,
          4,
          6,
          7,
          5,
          2
        ],
        "output": [
          3,
          12,
          72,
          504,
          2520,
          5040
        ]
      },
      {
        "input": [
          0,
          2,
          3,
          8,
          1,
          8
        ],
        "output": [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      }
    ]
  },
  {
    "id": "c062",
    "difficulty": 69,
    "function": "def c062(x):\n    # remove the last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        61,
        50,
        81
      ],
      "output": [
        61,
        50
      ]
    },
    "demos": [
      {
        "input": [
          49,
          50,
          1
        ],
        "output": [
          49,
          50
        ]
      },
      {
        "input": [
          78,
          32,
          80,
          25,
          67,
          55
        ],
        "output": [
          78,
          32,
          80,
          25,
          67
        ]
      },
      {
        "input": [
          52,
          70,
          78,
          30,
          11
        ],
        "output": [
          52,
          70,
          78,
          30
        ]
      }
    ]
  },
  {
    "id": "c096",
    "difficulty": 70,
    "function": "def c096(x):\n    # prepend 98 and append 37\n    return [98] + x + [37]\n\n",
    "data": {
      "input": [
        48,
        24,
        76,
        55,
        93
      ],
      "output": [
        98,
        48,
        24,
        76,
        55,
        93,
        37
      ]
    },
    "demos": [
      {
        "input": [
          21,
          73,
          24,
          30,
          8
        ],
        "output": [
          98,
          21,
          73,
          24,
          30,
          8,
          37
        ]
      },
      {
        "input": [
          15,
          68,
          97,
          86,
          20,
          65,
          86
        ],
        "output": [
          98,
          15,
          68,
          97,
          86,
          20,
          65,
          86,
          37
        ]
      },
      {
        "input": [
          11,
          36,
          67
        ],
        "output": [
          98,
          11,
          36,
          67,
          37
        ]
      }
    ]
  },
  {
    "id": "c081",
    "difficulty": 71,
    "function": "def c081(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        48,
        45,
        81,
        34,
        87
      ],
      "output": [
        81
      ]
    },
    "demos": [
      {
        "input": [
          63,
          10,
          69
        ],
        "output": [
          69
        ]
      },
      {
        "input": [
          77,
          36,
          71,
          90
        ],
        "output": [
          71
        ]
      },
      {
        "input": [
          84,
          48,
          45,
          35,
          55,
          10
        ],
        "output": [
          45
        ]
      }
    ]
  },
  {
    "id": "c109",
    "difficulty": 72,
    "function": "def c109(x):\n    # product of elements\n    p = 1\n    for i in x:\n        p *= i\n    return [p]\n\n",
    "data": {
      "input": [
        3,
        0,
        6,
        10,
        0,
        1,
        7
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          10,
          1,
          0,
          4
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          5,
          7,
          2,
          4,
          0
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          6,
          10,
          2,
          3,
          6,
          2
        ],
        "output": [
          4320
        ]
      }
    ]
  },
  {
    "id": "c002",
    "difficulty": 73,
    "function": "def c002(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        90,
        47,
        60,
        12
      ],
      "output": [
        60
      ]
    },
    "demos": [
      {
        "input": [
          80,
          80,
          11,
          85,
          71
        ],
        "output": [
          11
        ]
      },
      {
        "input": [
          48,
          8,
          60
        ],
        "output": [
          60
        ]
      },
      {
        "input": [
          24,
          92,
          75,
          98,
          48,
          80
        ],
        "output": [
          75
        ]
      }
    ]
  },
  {
    "id": "c132",
    "difficulty": 74,
    "function": "def c132(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        43,
        92,
        19,
        22
      ],
      "output": [
        43,
        92,
        22
      ]
    },
    "demos": [
      {
        "input": [
          37,
          26,
          37,
          70,
          43,
          12,
          7
        ],
        "output": [
          37,
          26,
          70,
          43,
          12,
          7
        ]
      },
      {
        "input": [
          55,
          96,
          27,
          20
        ],
        "output": [
          55,
          96,
          20
        ]
      },
      {
        "input": [
          51,
          76,
          30,
          73,
          36,
          54
        ],
        "output": [
          51,
          76,
          73,
          36,
          54
        ]
      }
    ]
  },
  {
    "id": "c153",
    "difficulty": 75,
    "function": "def c153(x):\n    # each unique element followed by its number of occurrences\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    out = []\n    for k, v in res.items():\n        out.append(k)\n        out.append(v)\n    return out\n\n",
    "data": {
      "input": [
        32,
        34,
        34,
        37,
        32,
        73,
        3,
        32
      ],
      "output": [
        32,
        3,
        34,
        2,
        37,
        1,
        73,
        1,
        3,
        1
      ]
    },
    "demos": [
      {
        "input": [
          82,
          82,
          82,
          41,
          41,
          65,
          67
        ],
        "output": [
          82,
          3,
          41,
          2,
          65,
          1,
          67,
          1
        ]
      },
      {
        "input": [
          95,
          24,
          17,
          17,
          61
        ],
        "output": [
          95,
          1,
          24,
          1,
          17,
          2,
          61,
          1
        ]
      },
      {
        "input": [
          4,
          36,
          63,
          4,
          4,
          4
        ],
        "output": [
          4,
          4,
          36,
          1,
          63,
          1
        ]
      }
    ]
  },
  {
    "id": "c051",
    "difficulty": 76,
    "function": "def c051(x):\n    # prepend first element 4 times\n    return [x[0]] * 4 + x\n\n",
    "data": {
      "input": [
        60,
        81,
        63,
        98,
        43
      ],
      "output": [
        60,
        60,
        60,
        60,
        60,
        81,
        63,
        98,
        43
      ]
    },
    "demos": [
      {
        "input": [
          15,
          27,
          40,
          81,
          70
        ],
        "output": [
          15,
          15,
          15,
          15,
          15,
          27,
          40,
          81,
          70
        ]
      },
      {
        "input": [
          86,
          9,
          92,
          16,
          2
        ],
        "output": [
          86,
          86,
          86,
          86,
          86,
          9,
          92,
          16,
          2
        ]
      },
      {
        "input": [
          98,
          53,
          66,
          8,
          25
        ],
        "output": [
          98,
          98,
          98,
          98,
          98,
          53,
          66,
          8,
          25
        ]
      }
    ]
  },
  {
    "id": "c225",
    "difficulty": 77,
    "function": "def c225(x):\n    # remove first and last two elements\n    return x[2:-2]\n\n",
    "data": {
      "input": [
        4,
        4,
        68,
        80,
        49,
        46
      ],
      "output": [
        68,
        80
      ]
    },
    "demos": [
      {
        "input": [
          65,
          22,
          25,
          11,
          86,
          33,
          96,
          5
        ],
        "output": [
          25,
          11,
          86,
          33
        ]
      },
      {
        "input": [
          25,
          21,
          9,
          69,
          30,
          71,
          55
        ],
        "output": [
          9,
          69,
          30
        ]
      },
      {
        "input": [
          76,
          75,
          70,
          7,
          79,
          12,
          11,
          23
        ],
        "output": [
          70,
          7,
          79,
          12
        ]
      }
    ]
  },
  {
    "id": "c067",
    "difficulty": 78,
    "function": "def c067(x):\n    # swap the first and last element\n    x[0], x[-1] = x[-1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        80,
        40,
        43,
        59,
        48,
        54
      ],
      "output": [
        54,
        40,
        43,
        59,
        48,
        80
      ]
    },
    "demos": [
      {
        "input": [
          77,
          29,
          21,
          88,
          87,
          67,
          47
        ],
        "output": [
          47,
          29,
          21,
          88,
          87,
          67,
          77
        ]
      },
      {
        "input": [
          0,
          74,
          90
        ],
        "output": [
          90,
          74,
          0
        ]
      },
      {
        "input": [
          87,
          63,
          61
        ],
        "output": [
          61,
          63,
          87
        ]
      }
    ]
  },
  {
    "id": "c112",
    "difficulty": 79,
    "function": "def c112(x):\n    # count from 1 to the last element\n    return list(range(1, x[-1]+1))\n\n",
    "data": {
      "input": [
        14,
        19,
        70,
        13
      ],
      "output": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ]
    },
    "demos": [
      {
        "input": [
          49,
          20,
          50,
          3
        ],
        "output": [
          1,
          2,
          3
        ]
      },
      {
        "input": [
          16,
          57,
          26,
          14,
          33,
          13
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ]
      },
      {
        "input": [
          58,
          25,
          12,
          85,
          9
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      }
    ]
  },
  {
    "id": "c030",
    "difficulty": 80,
    "function": "def c030(x):\n    # remove the last 2 elements\n    return x[:-2]\n\n",
    "data": {
      "input": [
        77,
        26,
        74,
        48,
        45,
        73
      ],
      "output": [
        77,
        26,
        74,
        48
      ]
    },
    "demos": [
      {
        "input": [
          33,
          60,
          33,
          76
        ],
        "output": [
          33,
          60
        ]
      },
      {
        "input": [
          33,
          43,
          23,
          70,
          73,
          33,
          40
        ],
        "output": [
          33,
          43,
          23,
          70,
          73
        ]
      },
      {
        "input": [
          13,
          41,
          78,
          95,
          63,
          56
        ],
        "output": [
          13,
          41,
          78,
          95
        ]
      }
    ]
  },
  {
    "id": "c149",
    "difficulty": 81,
    "function": "def c149(x):\n    # replace each element, M with M * first element; remove the first element\n    return [i*x[0] for i in x[1:]]\n\n",
    "data": {
      "input": [
        12,
        11,
        16,
        11,
        17,
        11,
        11
      ],
      "output": [
        132,
        192,
        132,
        204,
        132,
        132
      ]
    },
    "demos": [
      {
        "input": [
          4,
          18,
          13,
          11,
          16
        ],
        "output": [
          72,
          52,
          44,
          64
        ]
      },
      {
        "input": [
          20,
          12,
          6,
          5,
          0,
          20,
          3
        ],
        "output": [
          240,
          120,
          100,
          0,
          400,
          60
        ]
      },
      {
        "input": [
          14,
          15,
          7,
          12,
          18
        ],
        "output": [
          210,
          98,
          168,
          252
        ]
      }
    ]
  },
  {
    "id": "c148",
    "difficulty": 82,
    "function": "def c148(x):\n    # count from 1 to each element\n    res = []\n    for i in x:\n        res += list(range(1, i+1))\n    return res\n\n",
    "data": {
      "input": [
        3,
        4,
        3,
        4
      ],
      "output": [
        1,
        2,
        3,
        1,
        2,
        3,
        4,
        1,
        2,
        3,
        1,
        2,
        3,
        4
      ]
    },
    "demos": [
      {
        "input": [
          4,
          2,
          4
        ],
        "output": [
          1,
          2,
          3,
          4,
          1,
          2,
          1,
          2,
          3,
          4
        ]
      },
      {
        "input": [
          3,
          1,
          3,
          5
        ],
        "output": [
          1,
          2,
          3,
          1,
          1,
          2,
          3,
          1,
          2,
          3,
          4,
          5
        ]
      },
      {
        "input": [
          2,
          0,
          4,
          1,
          1,
          3
        ],
        "output": [
          1,
          2,
          1,
          2,
          3,
          4,
          1,
          1,
          1,
          2,
          3
        ]
      }
    ]
  },
  {
    "id": "c017",
    "difficulty": 83,
    "function": "def c017(x):\n    # replace x[1] with 8\n    x[1] = 8\n    return x\n\n",
    "data": {
      "input": [
        32,
        55,
        96,
        37,
        87
      ],
      "output": [
        32,
        8,
        96,
        37,
        87
      ]
    },
    "demos": [
      {
        "input": [
          24,
          68,
          66
        ],
        "output": [
          24,
          8,
          66
        ]
      },
      {
        "input": [
          19,
          21,
          99,
          86,
          9,
          33
        ],
        "output": [
          19,
          8,
          99,
          86,
          9,
          33
        ]
      },
      {
        "input": [
          22,
          19,
          4,
          94,
          30,
          81
        ],
        "output": [
          22,
          8,
          4,
          94,
          30,
          81
        ]
      }
    ]
  },
  {
    "id": "c092",
    "difficulty": 84,
    "function": "def c092(x):\n    # concatenate 92, 63, 34, 18, 55\n    return x + [92, 63, 34, 18, 55]\n\n",
    "data": {
      "input": [
        64,
        80,
        42,
        37,
        90
      ],
      "output": [
        64,
        80,
        42,
        37,
        90,
        92,
        63,
        34,
        18,
        55
      ]
    },
    "demos": [
      {
        "input": [
          83,
          1,
          90,
          62
        ],
        "output": [
          83,
          1,
          90,
          62,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          6,
          96,
          6
        ],
        "output": [
          6,
          96,
          6,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          71,
          79,
          93,
          33,
          22
        ],
        "output": [
          71,
          79,
          93,
          33,
          22,
          92,
          63,
          34,
          18,
          55
        ]
      }
    ]
  },
  {
    "id": "c077",
    "difficulty": 85,
    "function": "def c077(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        4,
        12,
        92,
        33,
        18,
        26
      ],
      "output": [
        6
      ]
    },
    "demos": [
      {
        "input": [
          34,
          62,
          35,
          90,
          53,
          28,
          95
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          92,
          19,
          41,
          76,
          70,
          35
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          29,
          0,
          21,
          77,
          60,
          37,
          43
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c248",
    "difficulty": 87,
    "function": "def c248(x):\n    # elements after the first 0\n    return x[x.index(0)+1:]\n\n",
    "data": {
      "input": [
        76,
        0,
        7,
        46,
        60,
        98,
        23
      ],
      "output": [
        7,
        46,
        60,
        98,
        23
      ]
    },
    "demos": [
      {
        "input": [
          63,
          0,
          53,
          49,
          37
        ],
        "output": [
          53,
          49,
          37
        ]
      },
      {
        "input": [
          57,
          82,
          0,
          77,
          16,
          11
        ],
        "output": [
          77,
          16,
          11
        ]
      },
      {
        "input": [
          18,
          91,
          89,
          21,
          0,
          53,
          40,
          93
        ],
        "output": [
          53,
          40,
          93
        ]
      }
    ]
  },
  {
    "id": "c199",
    "difficulty": 88,
    "function": "def c199(x):\n    # elements in ascending order, each preceded by its rank\n    res = []\n    for i, v in enumerate(sorted(x)):\n        res.append(i+1)\n        res.append(v)\n    return res\n\n",
    "data": {
      "input": [
        52,
        20,
        77,
        62,
        7
      ],
      "output": [
        1,
        7,
        2,
        20,
        3,
        52,
        4,
        62,
        5,
        77
      ]
    },
    "demos": [
      {
        "input": [
          41,
          74,
          13,
          49,
          10,
          13,
          51
        ],
        "output": [
          1,
          10,
          2,
          13,
          3,
          13,
          4,
          41,
          5,
          49,
          6,
          51,
          7,
          74
        ]
      },
      {
        "input": [
          27,
          14,
          8,
          85,
          23,
          60
        ],
        "output": [
          1,
          8,
          2,
          14,
          3,
          23,
          4,
          27,
          5,
          60,
          6,
          85
        ]
      },
      {
        "input": [
          18,
          69,
          97,
          44,
          12,
          71
        ],
        "output": [
          1,
          12,
          2,
          18,
          3,
          44,
          4,
          69,
          5,
          71,
          6,
          97
        ]
      }
    ]
  },
  {
    "id": "c007",
    "difficulty": 89,
    "function": "def c007(x):\n    # remove all but the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        93,
        31,
        19,
        22,
        40
      ],
      "output": [
        93,
        31
      ]
    },
    "demos": [
      {
        "input": [
          96,
          96,
          58
        ],
        "output": [
          96,
          96
        ]
      },
      {
        "input": [
          64,
          44,
          27,
          15,
          74,
          2
        ],
        "output": [
          64,
          44
        ]
      },
      {
        "input": [
          99,
          77,
          50
        ],
        "output": [
          99,
          77
        ]
      }
    ]
  },
  {
    "id": "c176",
    "difficulty": 90,
    "function": "def c176(x):\n    # sum of each consecutive pair of elements\n    return [x[i] + x[i+1] for i in range(0, len(x)-1)]\n\n",
    "data": {
      "input": [
        13,
        95,
        73,
        10
      ],
      "output": [
        108,
        168,
        83
      ]
    },
    "demos": [
      {
        "input": [
          82,
          18,
          83,
          65,
          66,
          34,
          49
        ],
        "output": [
          100,
          101,
          148,
          131,
          100,
          83
        ]
      },
      {
        "input": [
          61,
          70,
          18,
          31,
          90,
          66,
          60
        ],
        "output": [
          131,
          88,
          49,
          121,
          156,
          126
        ]
      },
      {
        "input": [
          33,
          22,
          25,
          33,
          69,
          16,
          53
        ],
        "output": [
          55,
          47,
          58,
          102,
          85,
          69
        ]
      }
    ]
  },
  {
    "id": "c066",
    "difficulty": 91,
    "function": "def c066(x):\n    # left rotate the list by 1\n    return x[1:] + x[:1]\n\n",
    "data": {
      "input": [
        47,
        83,
        43
      ],
      "output": [
        83,
        43,
        47
      ]
    },
    "demos": [
      {
        "input": [
          61,
          65,
          63,
          39,
          63,
          45
        ],
        "output": [
          65,
          63,
          39,
          63,
          45,
          61
        ]
      },
      {
        "input": [
          13,
          34,
          56,
          6,
          23
        ],
        "output": [
          34,
          56,
          6,
          23,
          13
        ]
      },
      {
        "input": [
          44,
          90,
          78,
          42
        ],
        "output": [
          90,
          78,
          42,
          44
        ]
      }
    ]
  },
  {
    "id": "c053",
    "difficulty": 92,
    "function": "def c053(x):\n    # replace x[1] with x[0]\n    x[1] = x[0]\n    return x\n\n",
    "data": {
      "input": [
        25,
        59,
        63,
        38,
        42,
        31
      ],
      "output": [
        25,
        25,
        63,
        38,
        42,
        31
      ]
    },
    "demos": [
      {
        "input": [
          94,
          39,
          41
        ],
        "output": [
          94,
          94,
          41
        ]
      },
      {
        "input": [
          4,
          31,
          8
        ],
        "output": [
          4,
          4,
          8
        ]
      },
      {
        "input": [
          76,
          99,
          83,
          39,
          86,
          18,
          3
        ],
        "output": [
          76,
          76,
          83,
          39,
          86,
          18,
          3
        ]
      }
    ]
  },
  {
    "id": "c047",
    "difficulty": 93,
    "function": "def c047(x):\n    # concatenate 9, 6, 3, 8, 5\n    return [9, 6, 3, 8, 5] + x\n\n",
    "data": {
      "input": [
        40,
        54,
        15,
        97,
        35,
        2,
        70
      ],
      "output": [
        9,
        6,
        3,
        8,
        5,
        40,
        54,
        15,
        97,
        35,
        2,
        70
      ]
    },
    "demos": [
      {
        "input": [
          98,
          65,
          93,
          42,
          64,
          65
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          98,
          65,
          93,
          42,
          64,
          65
        ]
      },
      {
        "input": [
          42,
          71,
          14,
          96
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          42,
          71,
          14,
          96
        ]
      },
      {
        "input": [
          81,
          49,
          59,
          20,
          60,
          24,
          89
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          81,
          49,
          59,
          20,
          60,
          24,
          89
        ]
      }
    ]
  },
  {
    "id": "c064",
    "difficulty": 94,
    "function": "def c064(x):\n    # remove the first and last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        29,
        45,
        5,
        39,
        74,
        26,
        40
      ],
      "output": [
        45,
        5,
        39,
        74,
        26
      ]
    },
    "demos": [
      {
        "input": [
          26,
          63,
          69,
          42
        ],
        "output": [
          63,
          69
        ]
      },
      {
        "input": [
          40,
          77,
          96,
          88,
          9
        ],
        "output": [
          77,
          96,
          88
        ]
      },
      {
        "input": [
          80,
          86,
          38
        ],
        "output": [
          86
        ]
      }
    ]
  },
  {
    "id": "c078",
    "difficulty": 95,
    "function": "def c078(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        63,
        46,
        34
      ],
      "output": [
        63
      ]
    },
    "demos": [
      {
        "input": [
          16,
          21,
          44,
          14,
          8,
          20
        ],
        "output": [
          44
        ]
      },
      {
        "input": [
          99,
          25,
          48,
          93,
          41
        ],
        "output": [
          99
        ]
      },
      {
        "input": [
          88,
          94,
          69,
          75,
          98,
          4
        ],
        "output": [
          98
        ]
      }
    ]
  },
  {
    "id": "c119",
    "difficulty": 96,
    "function": "def c119(x):\n    # make the list begin and ends with 8\n    if x[0] != 8:\n        x = [8] + x\n    if x[-1] != 8:\n        x = x + [8]\n    return x\n\n",
    "data": {
      "input": [
        17,
        95,
        22
      ],
      "output": [
        8,
        17,
        95,
        22,
        8
      ]
    },
    "demos": [
      {
        "input": [
          57,
          9,
          66,
          99,
          25
        ],
        "output": [
          8,
          57,
          9,
          66,
          99,
          25,
          8
        ]
      },
      {
        "input": [
          92,
          33,
          47,
          84,
          77
        ],
        "output": [
          8,
          92,
          33,
          47,
          84,
          77,
          8
        ]
      },
      {
        "input": [
          65,
          50,
          20,
          54
        ],
        "output": [
          8,
          65,
          50,
          20,
          54,
          8
        ]
      }
    ]
  },
  {
    "id": "c135",
    "difficulty": 97,
    "function": "def c135(x):\n    # remove the first 7\n    x.remove(7)\n    return x\n\n",
    "data": {
      "input": [
        6,
        7,
        0,
        8,
        4,
        7
      ],
      "output": [
        6,
        0,
        8,
        4,
        7
      ]
    },
    "demos": [
      {
        "input": [
          7,
          5,
          6,
          9,
          7,
          9,
          6
        ],
        "output": [
          5,
          6,
          9,
          7,
          9,
          6
        ]
      },
      {
        "input": [
          3,
          7,
          5,
          2,
          7,
          7
        ],
        "output": [
          3,
          5,
          2,
          7,
          7
        ]
      },
      {
        "input": [
          4,
          7,
          7,
          8,
          1,
          7,
          5,
          2
        ],
        "output": [
          4,
          7,
          8,
          1,
          7,
          5,
          2
        ]
      }
    ]
  },
  {
    "id": "c198",
    "difficulty": 98,
    "function": "def c198(x):\n    # unique elements in descending order\n    res = set(x)\n    return sorted(res, reverse=True)\n\n",
    "data": {
      "input": [
        28,
        27,
        28,
        28,
        53,
        73
      ],
      "output": [
        73,
        53,
        28,
        27
      ]
    },
    "demos": [
      {
        "input": [
          12,
          85,
          75,
          12,
          86,
          70,
          10,
          44,
          85
        ],
        "output": [
          86,
          85,
          75,
          70,
          44,
          12,
          10
        ]
      },
      {
        "input": [
          31,
          84,
          59,
          12,
          65,
          65,
          61,
          9,
          59
        ],
        "output": [
          84,
          65,
          61,
          59,
          31,
          12,
          9
        ]
      },
      {
        "input": [
          83,
          10,
          44,
          10
        ],
        "output": [
          83,
          44,
          10
        ]
      }
    ]
  },
  {
    "id": "c219",
    "difficulty": 99,
    "function": "def c219(x):\n    # keep only every other element\n    return x[::2]\n\n",
    "data": {
      "input": [
        22,
        99,
        67,
        34,
        82,
        3,
        13,
        65
      ],
      "output": [
        22,
        67,
        82,
        13
      ]
    },
    "demos": [
      {
        "input": [
          63,
          91,
          5,
          50,
          65,
          74,
          27,
          54,
          5
        ],
        "output": [
          63,
          5,
          65,
          27,
          5
        ]
      },
      {
        "input": [
          77,
          73,
          32,
          75,
          25,
          67
        ],
        "output": [
          77,
          32,
          25
        ]
      },
      {
        "input": [
          38,
          45,
          43,
          15
        ],
        "output": [
          38,
          43
        ]
      }
    ]
  },
  {
    "id": "c075",
    "difficulty": 100,
    "function": "def c075(x):\n    # remove even index\n    return x[1::2]\n\n",
    "data": {
      "input": [
        86,
        73,
        39,
        3,
        78,
        18,
        6,
        26,
        36
      ],
      "output": [
        73,
        3,
        18,
        26
      ]
    },
    "demos": [
      {
        "input": [
          69,
          81,
          99,
          29,
          20,
          23,
          87
        ],
        "output": [
          81,
          29,
          23
        ]
      },
      {
        "input": [
          0,
          84,
          80,
          46,
          87,
          94,
          77,
          82
        ],
        "output": [
          84,
          46,
          94,
          82
        ]
      },
      {
        "input": [
          31,
          83,
          54,
          81,
          71
        ],
        "output": [
          83,
          81
        ]
      }
    ]
  },
  {
    "id": "c177",
    "difficulty": 101,
    "function": "def c177(x):\n    # interleave the input and the reversed input\n    return [i for pair in zip(x, x[::-1]) for i in pair]\n\n",
    "data": {
      "input": [
        92,
        4,
        96,
        42,
        61
      ],
      "output": [
        92,
        61,
        4,
        42,
        96,
        96,
        42,
        4,
        61,
        92
      ]
    },
    "demos": [
      {
        "input": [
          45,
          92,
          75,
          46,
          7,
          95,
          32
        ],
        "output": [
          45,
          32,
          92,
          95,
          75,
          7,
          46,
          46,
          7,
          75,
          95,
          92,
          32,
          45
        ]
      },
      {
        "input": [
          41,
          21,
          13,
          22,
          81,
          81
        ],
        "output": [
          41,
          81,
          21,
          81,
          13,
          22,
          22,
          13,
          81,
          21,
          81,
          41
        ]
      },
      {
        "input": [
          34,
          54,
          56
        ],
        "output": [
          34,
          56,
          54,
          54,
          56,
          34
        ]
      }
    ]
  },
  {
    "id": "c025",
    "difficulty": 102,
    "function": "def c025(x):\n    # remove element 1\n    return x[:1] + x[2:]\n\n",
    "data": {
      "input": [
        21,
        97,
        11,
        34,
        36,
        85
      ],
      "output": [
        21,
        11,
        34,
        36,
        85
      ]
    },
    "demos": [
      {
        "input": [
          35,
          48,
          45,
          10
        ],
        "output": [
          35,
          45,
          10
        ]
      },
      {
        "input": [
          68,
          72,
          83,
          9,
          16
        ],
        "output": [
          68,
          83,
          9,
          16
        ]
      },
      {
        "input": [
          97,
          98,
          8,
          5,
          81,
          9
        ],
        "output": [
          97,
          8,
          5,
          81,
          9
        ]
      }
    ]
  },
  {
    "id": "c125",
    "difficulty": 103,
    "function": "def c125(x):\n    # keep only elements whose tens digit equals the tens digit of the first element\n    return [i for i in x if len(str(i)) > 1 and str(i)[-2] == str(x[0])[-2]]\n\n",
    "data": {
      "input": [
        96,
        102,
        104,
        1,
        105,
        78,
        97,
        39
      ],
      "output": [
        96,
        97
      ]
    },
    "demos": [
      {
        "input": [
          70,
          65,
          72,
          56,
          70,
          13,
          96,
          75,
          67
        ],
        "output": [
          70,
          72,
          70,
          75
        ]
      },
      {
        "input": [
          87,
          61,
          95,
          4,
          45
        ],
        "output": [
          87
        ]
      },
      {
        "input": [
          23,
          25,
          48,
          31,
          10,
          97,
          35,
          97
        ],
        "output": [
          23,
          25
        ]
      }
    ]
  },
  {
    "id": "c087",
    "difficulty": 105,
    "function": "def c087(x):\n    # swap second and third element\n    x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        47,
        91,
        7,
        39
      ],
      "output": [
        47,
        7,
        91,
        39
      ]
    },
    "demos": [
      {
        "input": [
          19,
          47,
          72,
          70,
          36
        ],
        "output": [
          19,
          72,
          47,
          70,
          36
        ]
      },
      {
        "input": [
          65,
          79,
          23
        ],
        "output": [
          65,
          23,
          79
        ]
      },
      {
        "input": [
          69,
          22,
          54,
          38
        ],
        "output": [
          69,
          54,
          22,
          38
        ]
      }
    ]
  },
  {
    "id": "c013",
    "difficulty": 106,
    "function": "def c013(x):\n    # element 2 through 6\n    return x[2:6]\n\n",
    "data": {
      "input": [
        71,
        49,
        22,
        56,
        80,
        22,
        54
      ],
      "output": [
        22,
        56,
        80,
        22
      ]
    },
    "demos": [
      {
        "input": [
          68,
          65,
          99,
          84,
          99,
          61
        ],
        "output": [
          99,
          84,
          99,
          61
        ]
      },
      {
        "input": [
          65,
          93,
          15,
          18,
          25,
          39,
          5,
          92
        ],
        "output": [
          15,
          18,
          25,
          39
        ]
      },
      {
        "input": [
          92,
          72,
          15,
          34,
          14,
          31,
          27,
          51,
          80
        ],
        "output": [
          15,
          34,
          14,
          31
        ]
      }
    ]
  },
  {
    "id": "c069",
    "difficulty": 107,
    "function": "def c069(x):\n    # 9,3,4,0, input, 7,2,9,1\n    return [9,3,4,0] + x + [7,2,9,1]\n\n",
    "data": {
      "input": [
        15,
        44,
        85,
        54,
        12,
        80
      ],
      "output": [
        9,
        3,
        4,
        0,
        15,
        44,
        85,
        54,
        12,
        80,
        7,
        2,
        9,
        1
      ]
    },
    "demos": [
      {
        "input": [
          0,
          84,
          63,
          52
        ],
        "output": [
          9,
          3,
          4,
          0,
          0,
          84,
          63,
          52,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          21,
          93,
          75,
          29
        ],
        "output": [
          9,
          3,
          4,
          0,
          21,
          93,
          75,
          29,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          12,
          42,
          69,
          41,
          42
        ],
        "output": [
          9,
          3,
          4,
          0,
          12,
          42,
          69,
          41,
          42,
          7,
          2,
          9,
          1
        ]
      }
    ]
  },
  {
    "id": "c117",
    "difficulty": 108,
    "function": "def c117(x):\n    # left rotate by 3\n    return x[3:] + x[:3]\n\n",
    "data": {
      "input": [
        42,
        25,
        69,
        36,
        65,
        49
      ],
      "output": [
        36,
        65,
        49,
        42,
        25,
        69
      ]
    },
    "demos": [
      {
        "input": [
          95,
          45,
          70,
          19
        ],
        "output": [
          19,
          95,
          45,
          70
        ]
      },
      {
        "input": [
          53,
          53,
          93,
          40,
          23
        ],
        "output": [
          40,
          23,
          53,
          53,
          93
        ]
      },
      {
        "input": [
          42,
          8,
          94,
          13,
          40
        ],
        "output": [
          13,
          40,
          42,
          8,
          94
        ]
      }
    ]
  },
  {
    "id": "c228",
    "difficulty": 109,
    "function": "def c228(x):\n    # replace each element with the number of occurrences of that element so far\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        21,
        20,
        64,
        65,
        21,
        20
      ],
      "output": [
        1,
        1,
        1,
        1,
        2,
        2
      ]
    },
    "demos": [
      {
        "input": [
          6,
          6,
          42,
          62,
          23,
          9,
          77,
          6
        ],
        "output": [
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          3
        ]
      },
      {
        "input": [
          81,
          81,
          81,
          24,
          13
        ],
        "output": [
          1,
          2,
          3,
          1,
          1
        ]
      },
      {
        "input": [
          49,
          68,
          92,
          22,
          93,
          65,
          93,
          34,
          80
        ],
        "output": [
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c197",
    "difficulty": 110,
    "function": "def c197(x):\n    # replace each element with the number of occurrences of that element\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in x:\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        60,
        25,
        3,
        62,
        39,
        60,
        39
      ],
      "output": [
        2,
        1,
        1,
        1,
        2,
        2,
        2
      ]
    },
    "demos": [
      {
        "input": [
          49,
          24,
          44,
          56,
          49,
          69,
          65
        ],
        "output": [
          2,
          1,
          1,
          1,
          2,
          1,
          1
        ]
      },
      {
        "input": [
          71,
          80,
          68,
          50,
          50,
          69,
          47,
          61
        ],
        "output": [
          1,
          1,
          1,
          2,
          2,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          9,
          71,
          28,
          71,
          85
        ],
        "output": [
          1,
          2,
          1,
          2,
          1
        ]
      }
    ]
  },
  {
    "id": "c065",
    "difficulty": 111,
    "function": "def c065(x):\n    # prepend 9 and append 7\n    return [9] + x + [7]\n\n",
    "data": {
      "input": [
        54,
        2,
        85
      ],
      "output": [
        9,
        54,
        2,
        85,
        7
      ]
    },
    "demos": [
      {
        "input": [
          76,
          44,
          18,
          36,
          4,
          26,
          19
        ],
        "output": [
          9,
          76,
          44,
          18,
          36,
          4,
          26,
          19,
          7
        ]
      },
      {
        "input": [
          75,
          13,
          86,
          19
        ],
        "output": [
          9,
          75,
          13,
          86,
          19,
          7
        ]
      },
      {
        "input": [
          66,
          92,
          35,
          11,
          52
        ],
        "output": [
          9,
          66,
          92,
          35,
          11,
          52,
          7
        ]
      }
    ]
  },
  {
    "id": "c156",
    "difficulty": 112,
    "function": "def c156(x):\n    # reverse the input and add each element to its new index\n    x = x[::-1]\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        38,
        84,
        94
      ],
      "output": [
        94,
        85,
        40
      ]
    },
    "demos": [
      {
        "input": [
          66,
          10,
          94,
          92,
          73,
          10
        ],
        "output": [
          10,
          74,
          94,
          97,
          14,
          71
        ]
      },
      {
        "input": [
          14,
          1,
          21,
          30,
          46
        ],
        "output": [
          46,
          31,
          23,
          4,
          18
        ]
      },
      {
        "input": [
          71,
          32,
          99,
          42
        ],
        "output": [
          42,
          100,
          34,
          74
        ]
      }
    ]
  },
  {
    "id": "c110",
    "difficulty": 113,
    "function": "def c110(x):\n    # three largest elements in descending order\n    return sorted(x, reverse=True)[:3]\n\n",
    "data": {
      "input": [
        79,
        65,
        55,
        34,
        3,
        78,
        8
      ],
      "output": [
        79,
        78,
        65
      ]
    },
    "demos": [
      {
        "input": [
          25,
          67,
          78,
          51,
          92,
          6,
          91
        ],
        "output": [
          92,
          91,
          78
        ]
      },
      {
        "input": [
          4,
          56,
          86,
          47,
          29,
          43,
          45
        ],
        "output": [
          86,
          56,
          47
        ]
      },
      {
        "input": [
          32,
          40,
          39,
          57,
          48,
          96
        ],
        "output": [
          96,
          57,
          48
        ]
      }
    ]
  },
  {
    "id": "c233",
    "difficulty": 114,
    "function": "def c233(x):\n    # number of occurrences of each unique element, in order of appearance\n    numbers = []\n    res = []\n    for i in x:\n        if i not in numbers:\n            numbers.append(i)\n            res.append(x.count(i))\n    return res\n\n",
    "data": {
      "input": [
        7,
        9,
        3,
        8,
        3,
        3,
        0,
        9,
        6
      ],
      "output": [
        1,
        2,
        3,
        1,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          0,
          5,
          2,
          9,
          10,
          0,
          1,
          10
        ],
        "output": [
          2,
          1,
          1,
          1,
          2,
          1
        ]
      },
      {
        "input": [
          8,
          4,
          4,
          3,
          1,
          0,
          8,
          8,
          3
        ],
        "output": [
          3,
          2,
          2,
          1,
          1
        ]
      },
      {
        "input": [
          4,
          6,
          4,
          7,
          2
        ],
        "output": [
          2,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c003",
    "difficulty": 115,
    "function": "def c003(x):\n    # remove all but seventh element\n    return [x[6]]\n\n",
    "data": {
      "input": [
        75,
        96,
        3,
        99,
        13,
        93,
        18,
        30,
        93
      ],
      "output": [
        18
      ]
    },
    "demos": [
      {
        "input": [
          94,
          58,
          46,
          63,
          73,
          66,
          83,
          60
        ],
        "output": [
          83
        ]
      },
      {
        "input": [
          25,
          91,
          15,
          16,
          65,
          80,
          84,
          60,
          15
        ],
        "output": [
          84
        ]
      },
      {
        "input": [
          51,
          68,
          51,
          97,
          88,
          47,
          88,
          38,
          97,
          57
        ],
        "output": [
          88
        ]
      }
    ]
  },
  {
    "id": "c230",
    "difficulty": 116,
    "function": "def c230(x):\n    # count by 2 from the smallest element to the largest element\n    return list(range(min(x), max(x)+1, 2))\n\n",
    "data": {
      "input": [
        43,
        42,
        30
      ],
      "output": [
        30,
        32,
        34,
        36,
        38,
        40,
        42
      ]
    },
    "demos": [
      {
        "input": [
          79,
          84,
          73
        ],
        "output": [
          73,
          75,
          77,
          79,
          81,
          83
        ]
      },
      {
        "input": [
          69,
          88,
          71
        ],
        "output": [
          69,
          71,
          73,
          75,
          77,
          79,
          81,
          83,
          85,
          87
        ]
      },
      {
        "input": [
          54,
          59,
          56
        ],
        "output": [
          54,
          56,
          58
        ]
      }
    ]
  },
  {
    "id": "c122",
    "difficulty": 117,
    "function": "def c122(x):\n    # remove all but penultimate element\n    return [x[-2]]\n\n",
    "data": {
      "input": [
        29,
        42,
        39,
        99,
        50,
        84
      ],
      "output": [
        50
      ]
    },
    "demos": [
      {
        "input": [
          92,
          53,
          6,
          68,
          18,
          79,
          88
        ],
        "output": [
          79
        ]
      },
      {
        "input": [
          49,
          88,
          41
        ],
        "output": [
          88
        ]
      },
      {
        "input": [
          47,
          97,
          4,
          55,
          13,
          6
        ],
        "output": [
          13
        ]
      }
    ]
  },
  {
    "id": "c020",
    "difficulty": 118,
    "function": "def c020(x):\n    # replace the first element with the last element\n    x[0] = x[-1]\n    return x\n\n",
    "data": {
      "input": [
        87,
        67,
        49,
        62
      ],
      "output": [
        62,
        67,
        49,
        62
      ]
    },
    "demos": [
      {
        "input": [
          6,
          68,
          76
        ],
        "output": [
          76,
          68,
          76
        ]
      },
      {
        "input": [
          90,
          2,
          90,
          79,
          18,
          13,
          93
        ],
        "output": [
          93,
          2,
          90,
          79,
          18,
          13,
          93
        ]
      },
      {
        "input": [
          81,
          43,
          72,
          58,
          32,
          13,
          56
        ],
        "output": [
          56,
          43,
          72,
          58,
          32,
          13,
          56
        ]
      }
    ]
  },
  {
    "id": "c235",
    "difficulty": 119,
    "function": "def c235(x):\n    # count up and down between elements\n    res = []\n    for i in range(len(x)-1):\n        if x[i] < x[i+1]:\n            res += list(range(x[i], x[i+1]+1))\n        else:\n            res += list(range(x[i], x[i+1]-1, -1))\n    return res\n\n",
    "data": {
      "input": [
        9,
        13,
        14
      ],
      "output": [
        9,
        10,
        11,
        12,
        13,
        13,
        14
      ]
    },
    "demos": [
      {
        "input": [
          48,
          45,
          48
        ],
        "output": [
          48,
          47,
          46,
          45,
          45,
          46,
          47,
          48
        ]
      },
      {
        "input": [
          66,
          65,
          66
        ],
        "output": [
          66,
          65,
          65,
          66
        ]
      },
      {
        "input": [
          95,
          90,
          91
        ],
        "output": [
          95,
          94,
          93,
          92,
          91,
          90,
          90,
          91
        ]
      }
    ]
  },
  {
    "id": "c157",
    "difficulty": 120,
    "function": "def c157(x):\n    # each element followed by 0 if even, 1 if odd\n    res = []\n    for i in x:\n        res.append(i)\n        res.append(i % 2)\n    return res\n\n",
    "data": {
      "input": [
        27,
        80,
        22,
        81
      ],
      "output": [
        27,
        1,
        80,
        0,
        22,
        0,
        81,
        1
      ]
    },
    "demos": [
      {
        "input": [
          47,
          17,
          13,
          21,
          19,
          22
        ],
        "output": [
          47,
          1,
          17,
          1,
          13,
          1,
          21,
          1,
          19,
          1,
          22,
          0
        ]
      },
      {
        "input": [
          19,
          71,
          33,
          32,
          7,
          62
        ],
        "output": [
          19,
          1,
          71,
          1,
          33,
          1,
          32,
          0,
          7,
          1,
          62,
          0
        ]
      },
      {
        "input": [
          53,
          29,
          72,
          84,
          67
        ],
        "output": [
          53,
          1,
          29,
          1,
          72,
          0,
          84,
          0,
          67,
          1
        ]
      }
    ]
  },
  {
    "id": "c185",
    "difficulty": 121,
    "function": "def c185(x):\n    # replace the sublist between the first and last with its sum\n    return x[:1] + [sum(x[1:-1])] + x[-1:]\n\n",
    "data": {
      "input": [
        2,
        16,
        5
      ],
      "output": [
        2,
        16,
        5
      ]
    },
    "demos": [
      {
        "input": [
          3,
          0,
          3,
          12
        ],
        "output": [
          3,
          3,
          12
        ]
      },
      {
        "input": [
          7,
          1,
          19,
          20
        ],
        "output": [
          7,
          20,
          20
        ]
      },
      {
        "input": [
          6,
          18,
          2,
          15
        ],
        "output": [
          6,
          20,
          15
        ]
      }
    ]
  },
  {
    "id": "c213",
    "difficulty": 122,
    "function": "def c213(x):\n    # three smallest elements in ascending order\n    return sorted(x)[:3]\n\n",
    "data": {
      "input": [
        59,
        42,
        44,
        74
      ],
      "output": [
        42,
        44,
        59
      ]
    },
    "demos": [
      {
        "input": [
          22,
          93,
          92,
          97,
          55,
          39
        ],
        "output": [
          22,
          39,
          55
        ]
      },
      {
        "input": [
          64,
          89,
          25,
          66,
          95,
          52
        ],
        "output": [
          25,
          52,
          64
        ]
      },
      {
        "input": [
          4,
          15,
          14,
          65
        ],
        "output": [
          4,
          14,
          15
        ]
      }
    ]
  },
  {
    "id": "c184",
    "difficulty": 123,
    "function": "def c184(x):\n    # keep only odd elements with an even index\n    return [i for i in x if i % 2 == 1 and x.index(i) % 2 == 0]\n\n",
    "data": {
      "input": [
        7,
        49,
        28,
        53,
        80,
        57,
        40,
        4
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          56,
          81,
          80,
          35,
          68,
          82,
          77,
          49
        ],
        "output": [
          77
        ]
      },
      {
        "input": [
          22,
          39,
          92,
          54,
          81,
          40,
          78,
          74,
          37,
          86
        ],
        "output": [
          81,
          37
        ]
      },
      {
        "input": [
          99,
          40,
          5,
          66,
          72,
          57,
          53,
          71
        ],
        "output": [
          99,
          5,
          53
        ]
      }
    ]
  },
  {
    "id": "c155",
    "difficulty": 124,
    "function": "def c155(x):\n    # multiply each element by its index\n    return [i*j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        11,
        70,
        19,
        18
      ],
      "output": [
        0,
        70,
        38,
        54
      ]
    },
    "demos": [
      {
        "input": [
          89,
          49,
          82
        ],
        "output": [
          0,
          49,
          164
        ]
      },
      {
        "input": [
          83,
          5,
          40
        ],
        "output": [
          0,
          5,
          80
        ]
      },
      {
        "input": [
          9,
          14,
          32,
          68
        ],
        "output": [
          0,
          14,
          64,
          204
        ]
      }
    ]
  },
  {
    "id": "c082",
    "difficulty": 125,
    "function": "def c082(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        12,
        96,
        54,
        92,
        3,
        47,
        16
      ],
      "output": [
        54
      ]
    },
    "demos": [
      {
        "input": [
          48,
          90,
          36
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          27,
          78,
          8
        ],
        "output": [
          8
        ]
      },
      {
        "input": [
          69,
          50,
          42,
          96
        ],
        "output": [
          42
        ]
      }
    ]
  },
  {
    "id": "c231",
    "difficulty": 126,
    "function": "def c231(x):\n    # the number of occurrences of each unique element in ascending order\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    return sorted(res.values())\n\n",
    "data": {
      "input": [
        5,
        7,
        4,
        10,
        4,
        5,
        5,
        6,
        7
      ],
      "output": [
        1,
        1,
        2,
        2,
        3
      ]
    },
    "demos": [
      {
        "input": [
          4,
          7,
          3,
          9,
          9,
          9,
          5,
          4,
          5,
          9,
          4
        ],
        "output": [
          1,
          1,
          2,
          3,
          4
        ]
      },
      {
        "input": [
          6,
          6,
          10,
          5,
          5,
          5,
          6,
          5,
          10
        ],
        "output": [
          2,
          3,
          4
        ]
      },
      {
        "input": [
          8,
          6,
          7,
          10,
          10,
          2,
          8,
          7,
          7
        ],
        "output": [
          1,
          1,
          2,
          2,
          3
        ]
      }
    ]
  },
  {
    "id": "c099",
    "difficulty": 127,
    "function": "def c099(x):\n    # remove the lower half of the list\n    median = sorted(x)[len(x)//2]\n    return [i for i in x if i >= median]\n\n",
    "data": {
      "input": [
        64,
        25,
        12,
        10,
        58,
        80,
        81,
        91,
        9
      ],
      "output": [
        64,
        58,
        80,
        81,
        91
      ]
    },
    "demos": [
      {
        "input": [
          11,
          10,
          54,
          45,
          85,
          46,
          7
        ],
        "output": [
          54,
          45,
          85,
          46
        ]
      },
      {
        "input": [
          61,
          92,
          75,
          45,
          32,
          60
        ],
        "output": [
          61,
          92,
          75
        ]
      },
      {
        "input": [
          93,
          36,
          68,
          88,
          54,
          21
        ],
        "output": [
          93,
          68,
          88
        ]
      }
    ]
  },
  {
    "id": "c247",
    "difficulty": 128,
    "function": "def c247(x):\n    # elements before the first 0\n    return x[:x.index(0)]\n\n",
    "data": {
      "input": [
        17,
        29,
        0,
        0,
        22,
        95,
        31
      ],
      "output": [
        17,
        29
      ]
    },
    "demos": [
      {
        "input": [
          27,
          19,
          74,
          17,
          0,
          0,
          42
        ],
        "output": [
          27,
          19,
          74,
          17
        ]
      },
      {
        "input": [
          59,
          11,
          0,
          0,
          39,
          0,
          27
        ],
        "output": [
          59,
          11
        ]
      },
      {
        "input": [
          53,
          0,
          44,
          0,
          2,
          35
        ],
        "output": [
          53
        ]
      }
    ]
  },
  {
    "id": "c008",
    "difficulty": 129,
    "function": "def c008(x):\n    # the first 5 elements\n    return x[:5]\n\n",
    "data": {
      "input": [
        93,
        2,
        69,
        68,
        19,
        54,
        89
      ],
      "output": [
        93,
        2,
        69,
        68,
        19
      ]
    },
    "demos": [
      {
        "input": [
          79,
          55,
          76,
          90,
          63,
          89,
          72,
          59
        ],
        "output": [
          79,
          55,
          76,
          90,
          63
        ]
      },
      {
        "input": [
          10,
          34,
          16,
          4,
          78
        ],
        "output": [
          10,
          34,
          16,
          4,
          78
        ]
      },
      {
        "input": [
          18,
          86,
          64,
          33,
          88,
          80,
          13,
          57
        ],
        "output": [
          18,
          86,
          64,
          33,
          88
        ]
      }
    ]
  },
  {
    "id": "c055",
    "difficulty": 130,
    "function": "def c055(x):\n    # swap x[0], x[2] and x[1], x[3]\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        94,
        3,
        94,
        55
      ],
      "output": [
        94,
        55,
        94,
        3
      ]
    },
    "demos": [
      {
        "input": [
          12,
          35,
          4,
          79,
          72
        ],
        "output": [
          4,
          79,
          12,
          35,
          72
        ]
      },
      {
        "input": [
          36,
          79,
          16,
          64,
          46,
          35
        ],
        "output": [
          16,
          64,
          36,
          79,
          46,
          35
        ]
      },
      {
        "input": [
          8,
          1,
          77,
          32
        ],
        "output": [
          77,
          32,
          8,
          1
        ]
      }
    ]
  },
  {
    "id": "c029",
    "difficulty": 131,
    "function": "def c029(x):\n    # remove the first 2 elements\n    return x[2:]\n\n",
    "data": {
      "input": [
        16,
        22,
        30,
        57,
        77,
        42
      ],
      "output": [
        30,
        57,
        77,
        42
      ]
    },
    "demos": [
      {
        "input": [
          83,
          20,
          26,
          51,
          95
        ],
        "output": [
          26,
          51,
          95
        ]
      },
      {
        "input": [
          57,
          35,
          32,
          31,
          50
        ],
        "output": [
          32,
          31,
          50
        ]
      },
      {
        "input": [
          83,
          30,
          74,
          50,
          79
        ],
        "output": [
          74,
          50,
          79
        ]
      }
    ]
  },
  {
    "id": "c168",
    "difficulty": 132,
    "function": "def c168(x):\n    # count from 1 to 10, skipping the length of the input\n    return [i for i in range(1, 11) if i != len(x)]\n\n",
    "data": {
      "input": [
        36,
        93,
        5,
        6,
        19
      ],
      "output": [
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10
      ]
    },
    "demos": [
      {
        "input": [
          39,
          34,
          72,
          58
        ],
        "output": [
          1,
          2,
          3,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          8,
          86,
          17,
          6,
          69
        ],
        "output": [
          1,
          2,
          3,
          4,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          79,
          44,
          78
        ],
        "output": [
          1,
          2,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      }
    ]
  },
  {
    "id": "c009",
    "difficulty": 133,
    "function": "def c009(x):\n    # remove all but the first 3 elements\n    return x[:3]\n\n",
    "data": {
      "input": [
        43,
        41,
        80,
        67,
        85,
        64,
        20
      ],
      "output": [
        43,
        41,
        80
      ]
    },
    "demos": [
      {
        "input": [
          18,
          33,
          42,
          80,
          40,
          84,
          63
        ],
        "output": [
          18,
          33,
          42
        ]
      },
      {
        "input": [
          95,
          33,
          71,
          90,
          60,
          58,
          82
        ],
        "output": [
          95,
          33,
          71
        ]
      },
      {
        "input": [
          18,
          32,
          64,
          76,
          95
        ],
        "output": [
          18,
          32,
          64
        ]
      }
    ]
  },
  {
    "id": "c133",
    "difficulty": 134,
    "function": "def c133(x):\n    # remove elements 1 through 4\n    return x[:1] + x[5:]\n\n",
    "data": {
      "input": [
        47,
        24,
        32,
        26,
        64,
        31
      ],
      "output": [
        47,
        31
      ]
    },
    "demos": [
      {
        "input": [
          2,
          71,
          94,
          62,
          16,
          52,
          16
        ],
        "output": [
          2,
          52,
          16
        ]
      },
      {
        "input": [
          36,
          64,
          70,
          89,
          58
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          40,
          76,
          67,
          73,
          73
        ],
        "output": [
          40
        ]
      }
    ]
  },
  {
    "id": "c146",
    "difficulty": 135,
    "function": "def c146(x):\n    # absolute difference between each consecutive pair of elements\n    return [abs(x[i] - x[i+1]) for i in range(len(x)-1)]\n\n",
    "data": {
      "input": [
        73,
        81,
        44,
        31,
        67,
        71,
        4,
        33
      ],
      "output": [
        8,
        37,
        13,
        36,
        4,
        67,
        29
      ]
    },
    "demos": [
      {
        "input": [
          64,
          41,
          72,
          43,
          84,
          36,
          51
        ],
        "output": [
          23,
          31,
          29,
          41,
          48,
          15
        ]
      },
      {
        "input": [
          79,
          14,
          36,
          89,
          13,
          42,
          46,
          26
        ],
        "output": [
          65,
          22,
          53,
          76,
          29,
          4,
          20
        ]
      },
      {
        "input": [
          8,
          61,
          43,
          91,
          99
        ],
        "output": [
          53,
          18,
          48,
          8
        ]
      }
    ]
  },
  {
    "id": "c004",
    "difficulty": 136,
    "function": "def c004(x):\n    # remove all but element 3\n    return [x[2]]\n\n",
    "data": {
      "input": [
        0,
        71,
        93,
        7,
        59,
        66,
        40
      ],
      "output": [
        93
      ]
    },
    "demos": [
      {
        "input": [
          39,
          68,
          99,
          7,
          21,
          54,
          5
        ],
        "output": [
          99
        ]
      },
      {
        "input": [
          29,
          0,
          29
        ],
        "output": [
          29
        ]
      },
      {
        "input": [
          54,
          36,
          76
        ],
        "output": [
          76
        ]
      }
    ]
  },
  {
    "id": "c240",
    "difficulty": 137,
    "function": "def c240(x):\n    # number of elements equal to the input length\n    return [x.count(len(x))]\n\n",
    "data": {
      "input": [
        13,
        6,
        6,
        90,
        35,
        94
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          88,
          21,
          34,
          46,
          48,
          9,
          9,
          9,
          68
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          27,
          4,
          31,
          9
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          8,
          11,
          86,
          87,
          21,
          47,
          8,
          8
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c239",
    "difficulty": 138,
    "function": "def c239(x):\n    # number of repetitions in the input\n    res = {}\n    out = 0\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out += 1\n    return [out]\n\n",
    "data": {
      "input": [
        10,
        0,
        7,
        1,
        9,
        1,
        8,
        10,
        10
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          7,
          6,
          4,
          6,
          0,
          4,
          7,
          4
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          7,
          10,
          5,
          10,
          9,
          10,
          9,
          2,
          9,
          10
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          7,
          5,
          5,
          9,
          9,
          3,
          9,
          1,
          3,
          2,
          2
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c246",
    "difficulty": 139,
    "function": "def c246(x):\n    # number of unique elements\n    return [len(set(x))]\n\n",
    "data": {
      "input": [
        52,
        69,
        69,
        42,
        52,
        69,
        69,
        5
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          26,
          94,
          80,
          26,
          6,
          94,
          6
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          36,
          14,
          84,
          76,
          84,
          53,
          36,
          85,
          93,
          53
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          70,
          55,
          92,
          96,
          96,
          99,
          70,
          96,
          70,
          7
        ],
        "output": [
          6
        ]
      }
    ]
  },
  {
    "id": "c138",
    "difficulty": 140,
    "function": "def c138(x):\n    # remove all occurrences of the first element\n    return [i for i in x if i != x[0]]\n\n",
    "data": {
      "input": [
        92,
        10,
        1,
        63,
        92,
        56,
        39,
        40,
        92
      ],
      "output": [
        10,
        1,
        63,
        56,
        39,
        40
      ]
    },
    "demos": [
      {
        "input": [
          12,
          6,
          6,
          16,
          6,
          0,
          6,
          33,
          41
        ],
        "output": [
          6,
          6,
          16,
          6,
          0,
          6,
          33,
          41
        ]
      },
      {
        "input": [
          76,
          27,
          64,
          15,
          15,
          15,
          34
        ],
        "output": [
          27,
          64,
          15,
          15,
          15,
          34
        ]
      },
      {
        "input": [
          44,
          47,
          6,
          6
        ],
        "output": [
          47,
          6,
          6
        ]
      }
    ]
  },
  {
    "id": "c018",
    "difficulty": 141,
    "function": "def c018(x):\n    # replace element 1 with 9\n    x[1] = 9\n    return x\n\n",
    "data": {
      "input": [
        94,
        60,
        78
      ],
      "output": [
        94,
        9,
        78
      ]
    },
    "demos": [
      {
        "input": [
          0,
          34,
          54,
          62,
          93,
          90,
          77
        ],
        "output": [
          0,
          9,
          54,
          62,
          93,
          90,
          77
        ]
      },
      {
        "input": [
          52,
          50,
          78,
          67,
          61
        ],
        "output": [
          52,
          9,
          78,
          67,
          61
        ]
      },
      {
        "input": [
          25,
          38,
          22,
          60,
          85,
          78,
          27
        ],
        "output": [
          25,
          9,
          22,
          60,
          85,
          78,
          27
        ]
      }
    ]
  },
  {
    "id": "c012",
    "difficulty": 142,
    "function": "def c012(x):\n    # remove all but elements 1 through 3\n    return x[1:4]\n\n",
    "data": {
      "input": [
        89,
        49,
        28,
        56,
        90
      ],
      "output": [
        49,
        28,
        56
      ]
    },
    "demos": [
      {
        "input": [
          23,
          7,
          3,
          36,
          9,
          66,
          90
        ],
        "output": [
          7,
          3,
          36
        ]
      },
      {
        "input": [
          61,
          91,
          85,
          68,
          44
        ],
        "output": [
          91,
          85,
          68
        ]
      },
      {
        "input": [
          80,
          59,
          74,
          80,
          84,
          40
        ],
        "output": [
          59,
          74,
          80
        ]
      }
    ]
  },
  {
    "id": "c232",
    "difficulty": 143,
    "function": "def c232(x):\n    # mean of the list, rounded to the nearest integer\n    return [round(sum(x)/len(x))]\n\n",
    "data": {
      "input": [
        87,
        80,
        0,
        37,
        55,
        26,
        14
      ],
      "output": [
        43
      ]
    },
    "demos": [
      {
        "input": [
          17,
          90,
          3,
          1,
          47,
          41
        ],
        "output": [
          33
        ]
      },
      {
        "input": [
          89,
          43,
          58,
          43,
          81,
          48
        ],
        "output": [
          60
        ]
      },
      {
        "input": [
          98,
          34,
          86,
          30
        ],
        "output": [
          62
        ]
      }
    ]
  },
  {
    "id": "c094",
    "difficulty": 144,
    "function": "def c094(x):\n    # swap 0,2 and 1,3\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        47,
        61,
        29,
        26,
        1,
        68
      ],
      "output": [
        29,
        26,
        47,
        61,
        1,
        68
      ]
    },
    "demos": [
      {
        "input": [
          28,
          38,
          68,
          37,
          14,
          21
        ],
        "output": [
          68,
          37,
          28,
          38,
          14,
          21
        ]
      },
      {
        "input": [
          10,
          46,
          34,
          46,
          0
        ],
        "output": [
          34,
          46,
          10,
          46,
          0
        ]
      },
      {
        "input": [
          32,
          12,
          84,
          18,
          22,
          24
        ],
        "output": [
          84,
          18,
          32,
          12,
          22,
          24
        ]
      }
    ]
  },
  {
    "id": "c086",
    "difficulty": 145,
    "function": "def c086(x):\n    # swap elements 0 and 3\n    x[0], x[3] = x[3], x[0]\n    return x\n\n",
    "data": {
      "input": [
        77,
        70,
        92,
        47,
        39,
        25,
        99
      ],
      "output": [
        47,
        70,
        92,
        77,
        39,
        25,
        99
      ]
    },
    "demos": [
      {
        "input": [
          79,
          35,
          60,
          67,
          80,
          67,
          31
        ],
        "output": [
          67,
          35,
          60,
          79,
          80,
          67,
          31
        ]
      },
      {
        "input": [
          73,
          9,
          25,
          73,
          30,
          20
        ],
        "output": [
          73,
          9,
          25,
          73,
          30,
          20
        ]
      },
      {
        "input": [
          96,
          39,
          53,
          68,
          95,
          71
        ],
        "output": [
          68,
          39,
          53,
          96,
          95,
          71
        ]
      }
    ]
  },
  {
    "id": "c193",
    "difficulty": 146,
    "function": "def c193(x):\n    # remove the smallest element and the largest element, output in ascending order\n    return sorted(x[1:-1])\n\n",
    "data": {
      "input": [
        57,
        16,
        4,
        92
      ],
      "output": [
        4,
        16
      ]
    },
    "demos": [
      {
        "input": [
          25,
          55,
          49,
          34,
          23,
          25,
          99
        ],
        "output": [
          23,
          25,
          34,
          49,
          55
        ]
      },
      {
        "input": [
          87,
          65,
          99,
          45,
          60,
          59,
          27
        ],
        "output": [
          45,
          59,
          60,
          65,
          99
        ]
      },
      {
        "input": [
          7,
          99,
          86,
          11,
          95,
          87
        ],
        "output": [
          11,
          86,
          95,
          99
        ]
      }
    ]
  },
  {
    "id": "c056",
    "difficulty": 147,
    "function": "def c056(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        62,
        62,
        57,
        42
      ],
      "output": [
        62,
        62,
        42
      ]
    },
    "demos": [
      {
        "input": [
          41,
          12,
          80,
          77
        ],
        "output": [
          41,
          12,
          77
        ]
      },
      {
        "input": [
          71,
          50,
          3,
          66,
          26,
          8
        ],
        "output": [
          71,
          50,
          66,
          26,
          8
        ]
      },
      {
        "input": [
          97,
          47,
          11,
          85,
          99,
          20
        ],
        "output": [
          97,
          47,
          85,
          99,
          20
        ]
      }
    ]
  },
  {
    "id": "c028",
    "difficulty": 148,
    "function": "def c028(x):\n    # remove element 1 if element 0 > element 1, else remove element 2\n    if x[0] > x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        92,
        79,
        37,
        29,
        42
      ],
      "output": [
        92,
        37,
        29,
        42
      ]
    },
    "demos": [
      {
        "input": [
          5,
          77,
          74,
          57,
          92,
          39,
          25
        ],
        "output": [
          5,
          77,
          57,
          92,
          39,
          25
        ]
      },
      {
        "input": [
          5,
          36,
          30,
          27,
          80
        ],
        "output": [
          5,
          36,
          27,
          80
        ]
      },
      {
        "input": [
          38,
          78,
          96,
          46
        ],
        "output": [
          38,
          78,
          46
        ]
      }
    ]
  },
  {
    "id": "c220",
    "difficulty": 149,
    "function": "def c220(x):\n    # if input length is even, double each element, else triple each element\n    if len(x) % 2 == 0:\n        return [i*2 for i in x]\n    else:\n        return [i*3 for i in x]\n\n",
    "data": {
      "input": [
        87,
        23,
        88,
        88,
        11
      ],
      "output": [
        261,
        69,
        264,
        264,
        33
      ]
    },
    "demos": [
      {
        "input": [
          14,
          1,
          56,
          80,
          76,
          59
        ],
        "output": [
          28,
          2,
          112,
          160,
          152,
          118
        ]
      },
      {
        "input": [
          33,
          24,
          30,
          8
        ],
        "output": [
          66,
          48,
          60,
          16
        ]
      },
      {
        "input": [
          80,
          65,
          61,
          37
        ],
        "output": [
          160,
          130,
          122,
          74
        ]
      }
    ]
  },
  {
    "id": "c241",
    "difficulty": 150,
    "function": "def c241(x):\n    # number of even elements\n    return [len([i for i in x if i % 2 == 0])]\n\n",
    "data": {
      "input": [
        70,
        3,
        98,
        78,
        77
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          2,
          50,
          3,
          9,
          25
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          30,
          3,
          9,
          51
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          50,
          26,
          12,
          7,
          1
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c060",
    "difficulty": 151,
    "function": "def c060(x):\n    # element 2,1,0,3,4,6 remove the rest\n    return [x[2], x[1], x[0], x[3], x[4], x[6]]\n\n",
    "data": {
      "input": [
        47,
        11,
        94,
        9,
        69,
        44,
        15,
        94
      ],
      "output": [
        94,
        11,
        47,
        9,
        69,
        15
      ]
    },
    "demos": [
      {
        "input": [
          88,
          12,
          81,
          16,
          28,
          41,
          74,
          62,
          36
        ],
        "output": [
          81,
          12,
          88,
          16,
          28,
          74
        ]
      },
      {
        "input": [
          91,
          14,
          82,
          30,
          13,
          14,
          27,
          86,
          28
        ],
        "output": [
          82,
          14,
          91,
          30,
          13,
          27
        ]
      },
      {
        "input": [
          56,
          59,
          48,
          74,
          8,
          88,
          58,
          86,
          36,
          36
        ],
        "output": [
          48,
          59,
          56,
          74,
          8,
          58
        ]
      }
    ]
  },
  {
    "id": "c169",
    "difficulty": 152,
    "function": "def c169(x):\n    # second largest element\n    return [sorted(x)[-2]]\n\n",
    "data": {
      "input": [
        93,
        44,
        74,
        38
      ],
      "output": [
        74
      ]
    },
    "demos": [
      {
        "input": [
          11,
          33,
          64,
          13,
          50,
          4
        ],
        "output": [
          50
        ]
      },
      {
        "input": [
          99,
          25,
          70,
          91,
          41,
          88,
          46
        ],
        "output": [
          91
        ]
      },
      {
        "input": [
          25,
          50,
          57,
          68,
          68
        ],
        "output": [
          68
        ]
      }
    ]
  },
  {
    "id": "c057",
    "difficulty": 153,
    "function": "def c057(x):\n    # insert a 4 as element 2\n    return x[:2] + [4] + x[2:]\n\n",
    "data": {
      "input": [
        10,
        71,
        98,
        45,
        1,
        9,
        1
      ],
      "output": [
        10,
        71,
        4,
        98,
        45,
        1,
        9,
        1
      ]
    },
    "demos": [
      {
        "input": [
          78,
          22,
          78,
          4,
          24
        ],
        "output": [
          78,
          22,
          4,
          78,
          4,
          24
        ]
      },
      {
        "input": [
          79,
          39,
          74,
          66
        ],
        "output": [
          79,
          39,
          4,
          74,
          66
        ]
      },
      {
        "input": [
          3,
          60,
          75,
          87,
          97,
          75
        ],
        "output": [
          3,
          60,
          4,
          75,
          87,
          97,
          75
        ]
      }
    ]
  },
  {
    "id": "c150",
    "difficulty": 154,
    "function": "def c150(x):\n    # count from first element to each element if the element is greater than the first element\n    res = []\n    for i in x:\n        if i > x[0]:\n            res += list(range(x[0], i+1))\n        else:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        83,
        19,
        7,
        32,
        9,
        86
      ],
      "output": [
        83,
        19,
        7,
        32,
        9,
        83,
        84,
        85,
        86
      ]
    },
    "demos": [
      {
        "input": [
          24,
          26,
          27,
          4
        ],
        "output": [
          24,
          24,
          25,
          26,
          24,
          25,
          26,
          27,
          4
        ]
      },
      {
        "input": [
          25,
          30,
          20,
          23
        ],
        "output": [
          25,
          25,
          26,
          27,
          28,
          29,
          30,
          20,
          23
        ]
      },
      {
        "input": [
          89,
          50,
          91,
          75
        ],
        "output": [
          89,
          50,
          89,
          90,
          91,
          75
        ]
      }
    ]
  },
  {
    "id": "c033",
    "difficulty": 155,
    "function": "def c033(x):\n    # swap element 0 and 2\n    x[0], x[2] = x[2], x[0]\n    return x\n\n",
    "data": {
      "input": [
        28,
        66,
        56,
        68,
        88,
        90,
        0
      ],
      "output": [
        56,
        66,
        28,
        68,
        88,
        90,
        0
      ]
    },
    "demos": [
      {
        "input": [
          65,
          91,
          98,
          30
        ],
        "output": [
          98,
          91,
          65,
          30
        ]
      },
      {
        "input": [
          42,
          97,
          46,
          24
        ],
        "output": [
          46,
          97,
          42,
          24
        ]
      },
      {
        "input": [
          44,
          61,
          69,
          1,
          11,
          83
        ],
        "output": [
          69,
          61,
          44,
          1,
          11,
          83
        ]
      }
    ]
  },
  {
    "id": "c218",
    "difficulty": 156,
    "function": "def c218(x):\n    # keep only second element and following equal to the first element\n    return [x[1]] + [i for i in x[2:] if i == x[0]]\n\n",
    "data": {
      "input": [
        14,
        14,
        24,
        31,
        61,
        72,
        39
      ],
      "output": [
        14
      ]
    },
    "demos": [
      {
        "input": [
          28,
          62,
          99,
          28,
          79,
          10,
          28,
          70,
          8,
          26
        ],
        "output": [
          62,
          28,
          28
        ]
      },
      {
        "input": [
          52,
          58,
          40,
          84,
          85,
          5,
          52,
          44,
          48,
          52
        ],
        "output": [
          58,
          52,
          52
        ]
      },
      {
        "input": [
          20,
          84,
          13,
          20,
          69
        ],
        "output": [
          84,
          20
        ]
      }
    ]
  },
  {
    "id": "c136",
    "difficulty": 158,
    "function": "def c136(x):\n    # remove the first occurrence of the largest element, keep the rest\n    x.remove(max(x))\n    return x\n\n",
    "data": {
      "input": [
        25,
        12,
        39,
        86,
        95,
        96,
        8
      ],
      "output": [
        25,
        12,
        39,
        86,
        95,
        8
      ]
    },
    "demos": [
      {
        "input": [
          9,
          23,
          35,
          49
        ],
        "output": [
          9,
          23,
          35
        ]
      },
      {
        "input": [
          81,
          66,
          77,
          41,
          67,
          14
        ],
        "output": [
          66,
          77,
          41,
          67,
          14
        ]
      },
      {
        "input": [
          16,
          44,
          8,
          59,
          63,
          63
        ],
        "output": [
          16,
          44,
          8,
          59,
          63
        ]
      }
    ]
  },
  {
    "id": "c083",
    "difficulty": 159,
    "function": "def c083(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        33,
        61,
        63,
        3,
        8,
        1,
        35,
        93
      ],
      "output": [
        35
      ]
    },
    "demos": [
      {
        "input": [
          88,
          8,
          42,
          6,
          55,
          8,
          50,
          82
        ],
        "output": [
          50
        ]
      },
      {
        "input": [
          34,
          10,
          17,
          59,
          99,
          43,
          27,
          23
        ],
        "output": [
          27
        ]
      },
      {
        "input": [
          60,
          71,
          27,
          24,
          49,
          59,
          78
        ],
        "output": [
          78
        ]
      }
    ]
  },
  {
    "id": "c019",
    "difficulty": 160,
    "function": "def c019(x):\n    # replace element 5 with a 3 if there is an element 5\n    if len(x) > 5:\n        x[4] = 3\n    return x\n\n",
    "data": {
      "input": [
        57,
        52,
        74,
        57
      ],
      "output": [
        57,
        52,
        74,
        57
      ]
    },
    "demos": [
      {
        "input": [
          54,
          13,
          87,
          74,
          25
        ],
        "output": [
          54,
          13,
          87,
          74,
          25
        ]
      },
      {
        "input": [
          41,
          0,
          49,
          17,
          50
        ],
        "output": [
          41,
          0,
          49,
          17,
          50
        ]
      },
      {
        "input": [
          19,
          39,
          44,
          75,
          11,
          50
        ],
        "output": [
          19,
          39,
          44,
          75,
          3,
          50
        ]
      }
    ]
  },
  {
    "id": "c203",
    "difficulty": 161,
    "function": "def c203(x):\n    # the first M positive multiples of the smallest element, M is the length of the input\n    return [min(x)*i for i in range(1, len(x)+1)]\n\n",
    "data": {
      "input": [
        19,
        18,
        20,
        13,
        11
      ],
      "output": [
        11,
        22,
        33,
        44,
        55
      ]
    },
    "demos": [
      {
        "input": [
          6,
          22,
          21,
          10,
          15,
          19,
          9
        ],
        "output": [
          6,
          12,
          18,
          24,
          30,
          36,
          42
        ]
      },
      {
        "input": [
          20,
          15,
          2,
          23,
          5,
          19,
          17
        ],
        "output": [
          2,
          4,
          6,
          8,
          10,
          12,
          14
        ]
      },
      {
        "input": [
          6,
          23,
          13,
          25,
          17,
          3
        ],
        "output": [
          3,
          6,
          9,
          12,
          15,
          18
        ]
      }
    ]
  },
  {
    "id": "c115",
    "difficulty": 162,
    "function": "def c115(x):\n    # the unique elements, prepended and appended by their sum\n    res = list(set(x))\n    return [sum(res)] + res + [sum(res)]\n\n",
    "data": {
      "input": [
        0,
        10,
        22,
        10,
        17,
        10,
        5
      ],
      "output": [
        54,
        0,
        5,
        10,
        17,
        22,
        54
      ]
    },
    "demos": [
      {
        "input": [
          3,
          3,
          20,
          13,
          11,
          18,
          3
        ],
        "output": [
          65,
          3,
          11,
          13,
          18,
          20,
          65
        ]
      },
      {
        "input": [
          12,
          20,
          0,
          7
        ],
        "output": [
          39,
          0,
          12,
          20,
          7,
          39
        ]
      },
      {
        "input": [
          1,
          21,
          25,
          25
        ],
        "output": [
          47,
          1,
          21,
          25,
          47
        ]
      }
    ]
  },
  {
    "id": "c207",
    "difficulty": 163,
    "function": "def c207(x):\n    # element-wise sum of the input and the reverse of the input\n    return [i+j for i, j in zip(x, x[::-1])]\n\n",
    "data": {
      "input": [
        45,
        31,
        15,
        32,
        7,
        18
      ],
      "output": [
        63,
        38,
        47,
        47,
        38,
        63
      ]
    },
    "demos": [
      {
        "input": [
          6,
          23,
          19,
          23,
          5,
          20
        ],
        "output": [
          26,
          28,
          42,
          42,
          28,
          26
        ]
      },
      {
        "input": [
          22,
          50,
          23,
          5,
          14
        ],
        "output": [
          36,
          55,
          46,
          55,
          36
        ]
      },
      {
        "input": [
          9,
          45,
          10,
          25,
          35,
          45
        ],
        "output": [
          54,
          80,
          35,
          35,
          80,
          54
        ]
      }
    ]
  },
  {
    "id": "c088",
    "difficulty": 164,
    "function": "def c088(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        10,
        7,
        7,
        36,
        64,
        53
      ],
      "output": [
        36,
        7,
        7,
        10,
        64,
        53
      ]
    },
    "demos": [
      {
        "input": [
          56,
          30,
          30,
          57,
          28,
          7,
          67
        ],
        "output": [
          57,
          30,
          30,
          56,
          28,
          7,
          67
        ]
      },
      {
        "input": [
          30,
          5,
          48,
          12,
          16
        ],
        "output": [
          30,
          48,
          5,
          12,
          16
        ]
      },
      {
        "input": [
          14,
          65,
          65,
          4,
          69
        ],
        "output": [
          4,
          65,
          65,
          14,
          69
        ]
      }
    ]
  },
  {
    "id": "c040",
    "difficulty": 165,
    "function": "def c040(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        12,
        3,
        29,
        28,
        23,
        12
      ],
      "output": [
        12,
        3,
        29,
        28,
        23,
        12,
        3
      ]
    },
    "demos": [
      {
        "input": [
          17,
          20,
          14,
          19,
          26
        ],
        "output": [
          17,
          20,
          14,
          19,
          26
        ]
      },
      {
        "input": [
          23,
          12,
          1,
          7,
          3,
          24,
          3
        ],
        "output": [
          23,
          12,
          1,
          7,
          3,
          24,
          3,
          3
        ]
      },
      {
        "input": [
          26,
          15,
          11,
          11,
          14,
          19,
          4
        ],
        "output": [
          26,
          15,
          11,
          11,
          14,
          19,
          4
        ]
      }
    ]
  },
  {
    "id": "c085",
    "difficulty": 166,
    "function": "def c085(x):\n    # remove all but element N, N=first element\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        1,
        19,
        28,
        9,
        16,
        1,
        5
      ],
      "output": [
        19
      ]
    },
    "demos": [
      {
        "input": [
          5,
          34,
          14,
          49,
          4,
          2
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          3,
          32,
          24,
          8
        ],
        "output": [
          8
        ]
      },
      {
        "input": [
          6,
          18,
          14,
          25,
          10,
          28,
          19
        ],
        "output": [
          19
        ]
      }
    ]
  },
  {
    "id": "c111",
    "difficulty": 167,
    "function": "def c111(x):\n    # repeat the largest element N times, where N is the smallest element\n    return [max(x)] * min(x)\n\n",
    "data": {
      "input": [
        11,
        14,
        25,
        27,
        8
      ],
      "output": [
        27,
        27,
        27,
        27,
        27,
        27,
        27,
        27
      ]
    },
    "demos": [
      {
        "input": [
          28,
          10,
          16,
          10,
          19,
          17,
          4,
          15
        ],
        "output": [
          28,
          28,
          28,
          28
        ]
      },
      {
        "input": [
          30,
          6,
          2,
          8,
          2
        ],
        "output": [
          30,
          30
        ]
      },
      {
        "input": [
          5,
          10,
          14,
          8,
          3,
          27,
          1
        ],
        "output": [
          27
        ]
      }
    ]
  },
  {
    "id": "c073",
    "difficulty": 168,
    "function": "def c073(x):\n    # add the index to every element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        23,
        37,
        41,
        14
      ],
      "output": [
        23,
        38,
        43,
        17
      ]
    },
    "demos": [
      {
        "input": [
          6,
          35,
          36,
          31,
          14,
          49
        ],
        "output": [
          6,
          36,
          38,
          34,
          18,
          54
        ]
      },
      {
        "input": [
          28,
          26,
          31,
          0,
          34,
          9,
          43
        ],
        "output": [
          28,
          27,
          33,
          3,
          38,
          14,
          49
        ]
      },
      {
        "input": [
          7,
          1,
          13,
          25,
          30,
          27,
          16
        ],
        "output": [
          7,
          2,
          15,
          28,
          34,
          32,
          22
        ]
      }
    ]
  },
  {
    "id": "c027",
    "difficulty": 169,
    "function": "def c027(x):\n    # remove element 1 if element 0 = element 1, else remove element 2\n    if x[0] == x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        52,
        76,
        73,
        48,
        42,
        79,
        1
      ],
      "output": [
        52,
        76,
        48,
        42,
        79,
        1
      ]
    },
    "demos": [
      {
        "input": [
          11,
          11,
          43,
          85,
          73
        ],
        "output": [
          11,
          43,
          85,
          73
        ]
      },
      {
        "input": [
          5,
          37,
          49,
          11,
          31,
          97,
          94
        ],
        "output": [
          5,
          37,
          11,
          31,
          97,
          94
        ]
      },
      {
        "input": [
          91,
          91,
          80,
          90,
          85,
          77
        ],
        "output": [
          91,
          80,
          90,
          85,
          77
        ]
      }
    ]
  },
  {
    "id": "c234",
    "difficulty": 170,
    "function": "def c234(x):\n    # repetitions in order of first appearance\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out.append(i)\n    return out\n\n",
    "data": {
      "input": [
        9,
        59,
        87,
        80,
        9,
        12,
        12
      ],
      "output": [
        9,
        12
      ]
    },
    "demos": [
      {
        "input": [
          90,
          52,
          37,
          52,
          68,
          52,
          99,
          52,
          0
        ],
        "output": [
          52
        ]
      },
      {
        "input": [
          99,
          40,
          7,
          88,
          90,
          7,
          88
        ],
        "output": [
          7,
          88
        ]
      },
      {
        "input": [
          35,
          35,
          12,
          53,
          7,
          53,
          97,
          12,
          28
        ],
        "output": [
          35,
          12,
          53
        ]
      }
    ]
  },
  {
    "id": "c165",
    "difficulty": 171,
    "function": "def c165(x):\n    # reverse the input and keep only even elements\n    return [i for i in x[::-1] if i % 2 == 0]\n\n",
    "data": {
      "input": [
        21,
        42,
        78,
        81,
        58,
        19
      ],
      "output": [
        58,
        78,
        42
      ]
    },
    "demos": [
      {
        "input": [
          98,
          29,
          53,
          73,
          37,
          40
        ],
        "output": [
          40,
          98
        ]
      },
      {
        "input": [
          29,
          38,
          69,
          1,
          65,
          47,
          28,
          85
        ],
        "output": [
          28,
          38
        ]
      },
      {
        "input": [
          41,
          27,
          40,
          18,
          41,
          2,
          2,
          95
        ],
        "output": [
          2,
          2,
          18,
          40
        ]
      }
    ]
  },
  {
    "id": "c191",
    "difficulty": 172,
    "function": "def c191(x):\n    # repeat each element N times, where N is its tens digit\n    out = []\n    for i in x:\n        if len(str(i)) > 1:\n            out += [i] * int(str(i)[-2])\n    return out\n\n",
    "data": {
      "input": [
        6,
        22,
        39,
        20,
        15,
        23
      ],
      "output": [
        22,
        22,
        39,
        39,
        39,
        20,
        20,
        15,
        23,
        23
      ]
    },
    "demos": [
      {
        "input": [
          20,
          21,
          21,
          13
        ],
        "output": [
          20,
          20,
          21,
          21,
          21,
          21,
          13
        ]
      },
      {
        "input": [
          27,
          19,
          14,
          38,
          21,
          32
        ],
        "output": [
          27,
          27,
          19,
          14,
          38,
          38,
          38,
          21,
          21,
          32,
          32,
          32
        ]
      },
      {
        "input": [
          23,
          40,
          3,
          4,
          33,
          1
        ],
        "output": [
          23,
          23,
          40,
          40,
          40,
          40,
          33,
          33,
          33
        ]
      }
    ]
  },
  {
    "id": "c026",
    "difficulty": 173,
    "function": "def c026(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        48,
        98,
        27,
        2,
        97,
        39
      ],
      "output": [
        48,
        98,
        2,
        97,
        39
      ]
    },
    "demos": [
      {
        "input": [
          94,
          69,
          24,
          9
        ],
        "output": [
          94,
          69,
          9
        ]
      },
      {
        "input": [
          16,
          75,
          90,
          60
        ],
        "output": [
          16,
          75,
          60
        ]
      },
      {
        "input": [
          78,
          5,
          37,
          79,
          58
        ],
        "output": [
          78,
          5,
          79,
          58
        ]
      }
    ]
  },
  {
    "id": "c059",
    "difficulty": 174,
    "function": "def c059(x):\n    # swap element 2 and element 5\n    x[2], x[5] = x[5], x[2]\n    return x\n\n",
    "data": {
      "input": [
        23,
        86,
        43,
        47,
        92,
        64,
        42,
        29
      ],
      "output": [
        23,
        86,
        64,
        47,
        92,
        43,
        42,
        29
      ]
    },
    "demos": [
      {
        "input": [
          83,
          45,
          20,
          8,
          41,
          42,
          44
        ],
        "output": [
          83,
          45,
          42,
          8,
          41,
          20,
          44
        ]
      },
      {
        "input": [
          53,
          21,
          23,
          26,
          14,
          75,
          79
        ],
        "output": [
          53,
          21,
          75,
          26,
          14,
          23,
          79
        ]
      },
      {
        "input": [
          8,
          95,
          97,
          56,
          23,
          1,
          76,
          91
        ],
        "output": [
          8,
          95,
          1,
          56,
          23,
          97,
          76,
          91
        ]
      }
    ]
  },
  {
    "id": "c074",
    "difficulty": 175,
    "function": "def c074(x):\n    # remove every element whose value < 8\n    return [i for i in x if i >= 8]\n\n",
    "data": {
      "input": [
        8,
        13,
        1,
        13,
        18,
        0
      ],
      "output": [
        8,
        13,
        13,
        18
      ]
    },
    "demos": [
      {
        "input": [
          4,
          16,
          24,
          25,
          25,
          11
        ],
        "output": [
          16,
          24,
          25,
          25,
          11
        ]
      },
      {
        "input": [
          22,
          7,
          25,
          5,
          26,
          25,
          30,
          11
        ],
        "output": [
          22,
          25,
          26,
          25,
          30,
          11
        ]
      },
      {
        "input": [
          21,
          28,
          7,
          23,
          20,
          30
        ],
        "output": [
          21,
          28,
          23,
          20,
          30
        ]
      }
    ]
  },
  {
    "id": "c173",
    "difficulty": 176,
    "function": "def c173(x):\n    # replace element N with the largest element in element 0 through N\n    for i in range(len(x)):\n        x[i] = max(x[:i+1])\n    return x\n\n",
    "data": {
      "input": [
        9,
        33,
        33,
        59,
        68,
        36,
        20,
        63
      ],
      "output": [
        9,
        33,
        33,
        59,
        68,
        68,
        68,
        68
      ]
    },
    "demos": [
      {
        "input": [
          18,
          97,
          68,
          85,
          47
        ],
        "output": [
          18,
          97,
          97,
          97,
          97
        ]
      },
      {
        "input": [
          0,
          90,
          57,
          97,
          18,
          46
        ],
        "output": [
          0,
          90,
          90,
          97,
          97,
          97
        ]
      },
      {
        "input": [
          54,
          75,
          77,
          0,
          54,
          23
        ],
        "output": [
          54,
          75,
          77,
          77,
          77,
          77
        ]
      }
    ]
  },
  {
    "id": "c175",
    "difficulty": 177,
    "function": "def c175(x):\n    # keep only elements larger than any preceding element\n    res = [x[0]]\n    for i in x[1:]:\n        if i > res[-1]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        46,
        24,
        88,
        10,
        68,
        64,
        84,
        24
      ],
      "output": [
        46,
        88
      ]
    },
    "demos": [
      {
        "input": [
          61,
          48,
          66,
          99,
          7
        ],
        "output": [
          61,
          66,
          99
        ]
      },
      {
        "input": [
          25,
          44,
          0,
          36,
          31
        ],
        "output": [
          25,
          44
        ]
      },
      {
        "input": [
          5,
          10,
          25,
          57,
          2,
          37,
          82,
          29
        ],
        "output": [
          5,
          10,
          25,
          57,
          82
        ]
      }
    ]
  },
  {
    "id": "c204",
    "difficulty": 178,
    "function": "def c204(x):\n    # keep only elements followed by 0\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] == 0:\n            res.append(x[i])\n    return res\n\n",
    "data": {
      "input": [
        26,
        22,
        4,
        29,
        22,
        27,
        0
      ],
      "output": [
        27
      ]
    },
    "demos": [
      {
        "input": [
          2,
          25,
          13,
          12,
          3,
          24,
          22
        ],
        "output": []
      },
      {
        "input": [
          26,
          21,
          0,
          0,
          5,
          0,
          24,
          30,
          24,
          15
        ],
        "output": [
          21,
          0,
          5
        ]
      },
      {
        "input": [
          20,
          0,
          15,
          12,
          10,
          29,
          16,
          0,
          0
        ],
        "output": [
          20,
          16,
          0
        ]
      }
    ]
  },
  {
    "id": "c031",
    "difficulty": 179,
    "function": "def c031(x):\n    # remove whichever are equal, the first 2 elements or the last 2 elements\n    if x[0] == x[1]:\n        return x[2:]\n    elif x[-1] == x[-2]:\n        return x[:-2]\n    return x\n\n",
    "data": {
      "input": [
        64,
        15,
        97,
        42,
        18,
        47,
        68,
        68
      ],
      "output": [
        64,
        15,
        97,
        42,
        18,
        47
      ]
    },
    "demos": [
      {
        "input": [
          14,
          14,
          90,
          1,
          82,
          62
        ],
        "output": [
          90,
          1,
          82,
          62
        ]
      },
      {
        "input": [
          25,
          82,
          48,
          51,
          2,
          38,
          48,
          52
        ],
        "output": [
          25,
          82,
          48,
          51,
          2,
          38,
          48,
          52
        ]
      },
      {
        "input": [
          28,
          69,
          12,
          92,
          3,
          3
        ],
        "output": [
          28,
          69,
          12,
          92
        ]
      }
    ]
  },
  {
    "id": "c236",
    "difficulty": 180,
    "function": "def c236(x):\n    # even elements divided by 2\n    return [i//2 for i in x if i % 2 == 0]\n\n",
    "data": {
      "input": [
        72,
        61,
        95,
        59,
        97,
        47,
        74
      ],
      "output": [
        36,
        37
      ]
    },
    "demos": [
      {
        "input": [
          32,
          35,
          24,
          22,
          54,
          84,
          58,
          81,
          33,
          25
        ],
        "output": [
          16,
          12,
          11,
          27,
          42,
          29
        ]
      },
      {
        "input": [
          0,
          60,
          98,
          62,
          57,
          13
        ],
        "output": [
          0,
          30,
          49,
          31
        ]
      },
      {
        "input": [
          71,
          51,
          87,
          75,
          94,
          46,
          48,
          32,
          83,
          76
        ],
        "output": [
          47,
          23,
          24,
          16,
          38
        ]
      }
    ]
  },
  {
    "id": "c054",
    "difficulty": 181,
    "function": "def c054(x):\n    # replace element 0 and 1 with element 2\n    x[0] = x[2]\n    x[1] = x[2]\n    return x\n\n",
    "data": {
      "input": [
        23,
        91,
        49,
        32
      ],
      "output": [
        49,
        49,
        49,
        32
      ]
    },
    "demos": [
      {
        "input": [
          20,
          12,
          38,
          12,
          50
        ],
        "output": [
          38,
          38,
          38,
          12,
          50
        ]
      },
      {
        "input": [
          78,
          37,
          28,
          43,
          22,
          4,
          21
        ],
        "output": [
          28,
          28,
          28,
          43,
          22,
          4,
          21
        ]
      },
      {
        "input": [
          89,
          10,
          83,
          28,
          65,
          89,
          71
        ],
        "output": [
          83,
          83,
          83,
          28,
          65,
          89,
          71
        ]
      }
    ]
  },
  {
    "id": "c227",
    "difficulty": 182,
    "function": "def c227(x):\n    # interleave the input and reversed input, keep only unique elements in order of appearance\n    res = []\n    mid = len(x) // 2\n    for i in range(mid):\n        if x[i] not in res:\n            res.append(x[i])\n        if x[-i-1] not in res:\n            res.append(x[-i-1])\n    if len(x) % 2 == 1 and x[mid] not in res:\n        res.append(x[mid])\n    return res\n\n",
    "data": {
      "input": [
        18,
        86,
        18,
        5,
        47,
        5
      ],
      "output": [
        18,
        5,
        86,
        47
      ]
    },
    "demos": [
      {
        "input": [
          0,
          15,
          0,
          53,
          5,
          30,
          42,
          0,
          50
        ],
        "output": [
          0,
          50,
          15,
          42,
          53,
          30,
          5
        ]
      },
      {
        "input": [
          32,
          39,
          15,
          56,
          64
        ],
        "output": [
          32,
          64,
          39,
          56,
          15
        ]
      },
      {
        "input": [
          40,
          80,
          97,
          34,
          51,
          9
        ],
        "output": [
          40,
          9,
          80,
          51,
          97,
          34
        ]
      }
    ]
  },
  {
    "id": "c024",
    "difficulty": 183,
    "function": "def c024(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        16,
        12,
        0,
        15
      ],
      "output": [
        16,
        8,
        12,
        0,
        15
      ]
    },
    "demos": [
      {
        "input": [
          9,
          11,
          5,
          20,
          7,
          20
        ],
        "output": [
          9,
          8,
          11,
          5,
          20,
          7,
          20
        ]
      },
      {
        "input": [
          3,
          19,
          14,
          18,
          12,
          10,
          6
        ],
        "output": [
          3,
          5,
          19,
          14,
          18,
          12,
          10,
          6
        ]
      },
      {
        "input": [
          11,
          4,
          14,
          2,
          2,
          4
        ],
        "output": [
          11,
          8,
          4,
          14,
          2,
          2,
          4
        ]
      }
    ]
  },
  {
    "id": "c200",
    "difficulty": 184,
    "function": "def c200(x):\n    # tens digits of the elements in ascending order\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append(int(str(i)[-2]))\n        else:\n            res.append(0)\n    return sorted(res)\n\n",
    "data": {
      "input": [
        0,
        49,
        62,
        97,
        45
      ],
      "output": [
        0,
        4,
        4,
        6,
        9
      ]
    },
    "demos": [
      {
        "input": [
          7,
          75,
          8,
          65,
          2
        ],
        "output": [
          0,
          0,
          0,
          6,
          7
        ]
      },
      {
        "input": [
          6,
          87,
          76,
          88,
          23,
          21
        ],
        "output": [
          0,
          2,
          2,
          7,
          8,
          8
        ]
      },
      {
        "input": [
          20,
          24,
          0,
          2,
          47,
          76
        ],
        "output": [
          0,
          0,
          2,
          2,
          4,
          7
        ]
      }
    ]
  },
  {
    "id": "c010",
    "difficulty": 185,
    "function": "def c010(x):\n    # elements 1 through N + 1, N is the first element\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        4,
        8,
        9,
        1,
        14,
        17,
        5
      ],
      "output": [
        8,
        9,
        1,
        14
      ]
    },
    "demos": [
      {
        "input": [
          5,
          11,
          20,
          13,
          5,
          4,
          13,
          12
        ],
        "output": [
          11,
          20,
          13,
          5,
          4
        ]
      },
      {
        "input": [
          6,
          14,
          8,
          13,
          17,
          11,
          18
        ],
        "output": [
          14,
          8,
          13,
          17,
          11,
          18
        ]
      },
      {
        "input": [
          2,
          4,
          10,
          19,
          11
        ],
        "output": [
          4,
          10
        ]
      }
    ]
  },
  {
    "id": "c123",
    "difficulty": 186,
    "function": "def c123(x):\n    # remove all but element N, N is the last element\n    return [x[x[-1]]]\n\n",
    "data": {
      "input": [
        0,
        7,
        19,
        20,
        1,
        0
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          3,
          9,
          3,
          19,
          4
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          2,
          3,
          16,
          16,
          1
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          0,
          13,
          5,
          12,
          12,
          2
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c023",
    "difficulty": 187,
    "function": "def c023(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        10,
        19,
        13,
        1,
        18,
        9,
        8
      ],
      "output": [
        10,
        8,
        19,
        13,
        1,
        18,
        9,
        8
      ]
    },
    "demos": [
      {
        "input": [
          5,
          7,
          16,
          11,
          13,
          9,
          16,
          2
        ],
        "output": [
          5,
          5,
          7,
          16,
          11,
          13,
          9,
          16,
          2
        ]
      },
      {
        "input": [
          9,
          5,
          9,
          6,
          17,
          6
        ],
        "output": [
          9,
          8,
          5,
          9,
          6,
          17,
          6
        ]
      },
      {
        "input": [
          20,
          3,
          18,
          14
        ],
        "output": [
          20,
          8,
          3,
          18,
          14
        ]
      }
    ]
  },
  {
    "id": "c194",
    "difficulty": 188,
    "function": "def c194(x):\n    # reverse the input; prepend and append the length of the input\n    return [len(x)] + x[::-1] + [len(x)]\n\n",
    "data": {
      "input": [
        17,
        13,
        6,
        19,
        10,
        15,
        6,
        4
      ],
      "output": [
        8,
        4,
        6,
        15,
        10,
        19,
        6,
        13,
        17,
        8
      ]
    },
    "demos": [
      {
        "input": [
          16,
          8,
          3,
          4,
          18
        ],
        "output": [
          5,
          18,
          4,
          3,
          8,
          16,
          5
        ]
      },
      {
        "input": [
          3,
          15,
          15,
          7,
          18,
          5,
          14,
          16
        ],
        "output": [
          8,
          16,
          14,
          5,
          18,
          7,
          15,
          15,
          3,
          8
        ]
      },
      {
        "input": [
          19,
          7,
          2,
          18,
          10,
          9
        ],
        "output": [
          6,
          9,
          10,
          18,
          2,
          7,
          19,
          6
        ]
      }
    ]
  },
  {
    "id": "c245",
    "difficulty": 189,
    "function": "def c245(x):\n    # number of times element 0 appears in the following elements\n    return [x[1:].count(x[0])]\n\n",
    "data": {
      "input": [
        2,
        7,
        2,
        8,
        2,
        14,
        7
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          15,
          19,
          19,
          11,
          15,
          15
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          0,
          0,
          6,
          20,
          7,
          8
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          0,
          3,
          15,
          19,
          5,
          19,
          8
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c032",
    "difficulty": 190,
    "function": "def c032(x):\n    # remove first 2 elements if element 0 > last element, else remove last 2 elements\n    if x[0] > x[-1]:\n        return x[2:]\n    else:\n        return x[:-2]\n    \n",
    "data": {
      "input": [
        24,
        5,
        17,
        8,
        52,
        0,
        14
      ],
      "output": [
        17,
        8,
        52,
        0,
        14
      ]
    },
    "demos": [
      {
        "input": [
          61,
          83,
          5,
          46,
          76,
          96,
          55
        ],
        "output": [
          5,
          46,
          76,
          96,
          55
        ]
      },
      {
        "input": [
          17,
          51,
          59,
          67,
          1
        ],
        "output": [
          59,
          67,
          1
        ]
      },
      {
        "input": [
          55,
          29,
          20,
          8,
          99,
          87,
          14
        ],
        "output": [
          20,
          8,
          99,
          87,
          14
        ]
      }
    ]
  },
  {
    "id": "c058",
    "difficulty": 191,
    "function": "def c058(x):\n    # remove the first 5 elements\n    return x[5:]\n\n",
    "data": {
      "input": [
        53,
        37,
        21,
        70,
        91,
        48,
        38,
        26
      ],
      "output": [
        48,
        38,
        26
      ]
    },
    "demos": [
      {
        "input": [
          90,
          33,
          9,
          34,
          19
        ],
        "output": []
      },
      {
        "input": [
          84,
          68,
          35,
          50,
          30,
          34,
          96,
          53
        ],
        "output": [
          34,
          96,
          53
        ]
      },
      {
        "input": [
          6,
          12,
          97,
          1,
          10,
          96,
          55,
          77
        ],
        "output": [
          96,
          55,
          77
        ]
      }
    ]
  },
  {
    "id": "c174",
    "difficulty": 192,
    "function": "def c174(x):\n    # keep the first M elements, where M is the number of unique elements\n    return x[:len(set(x))]\n\n",
    "data": {
      "input": [
        33,
        94,
        71,
        50,
        54,
        33,
        71,
        33,
        42,
        71
      ],
      "output": [
        33,
        94,
        71,
        50,
        54,
        33
      ]
    },
    "demos": [
      {
        "input": [
          37,
          17,
          96,
          87,
          96,
          96,
          17,
          49,
          1
        ],
        "output": [
          37,
          17,
          96,
          87,
          96,
          96
        ]
      },
      {
        "input": [
          44,
          73,
          61,
          73,
          95,
          34,
          95,
          95,
          81
        ],
        "output": [
          44,
          73,
          61,
          73,
          95,
          34
        ]
      },
      {
        "input": [
          35,
          57,
          4,
          55,
          20
        ],
        "output": [
          35,
          57,
          4,
          55,
          20
        ]
      }
    ]
  },
  {
    "id": "c229",
    "difficulty": 193,
    "function": "def c229(x):\n    # keep only first N elements of the reversed input, N is the first element\n    length = x[0]\n    return x[::-1][:length]\n\n",
    "data": {
      "input": [
        0,
        40,
        87,
        68,
        88
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          0,
          90,
          23,
          37,
          52
        ],
        "output": []
      },
      {
        "input": [
          2,
          52,
          13,
          8,
          23,
          90,
          3
        ],
        "output": [
          3,
          90
        ]
      },
      {
        "input": [
          1,
          24,
          73,
          74,
          85,
          18,
          40
        ],
        "output": [
          40
        ]
      }
    ]
  },
  {
    "id": "c162",
    "difficulty": 194,
    "function": "def c162(x):\n    # replace each element M with 3 * M + 7\n    return [3*i+7 for i in x]\n\n",
    "data": {
      "input": [
        18,
        0,
        6,
        28,
        8,
        28,
        22
      ],
      "output": [
        61,
        7,
        25,
        91,
        31,
        91,
        73
      ]
    },
    "demos": [
      {
        "input": [
          13,
          13,
          19,
          26,
          10,
          17,
          29
        ],
        "output": [
          46,
          46,
          64,
          85,
          37,
          58,
          94
        ]
      },
      {
        "input": [
          2,
          22,
          7,
          3,
          12,
          0
        ],
        "output": [
          13,
          73,
          28,
          16,
          43,
          7
        ]
      },
      {
        "input": [
          7,
          18,
          22,
          21,
          15
        ],
        "output": [
          28,
          61,
          73,
          70,
          52
        ]
      }
    ]
  },
  {
    "id": "c039",
    "difficulty": 195,
    "function": "def c039(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        24,
        40,
        16,
        41,
        9,
        11,
        44
      ],
      "output": [
        24,
        40,
        16,
        41,
        9,
        11,
        44,
        9
      ]
    },
    "demos": [
      {
        "input": [
          9,
          24,
          0,
          2,
          11,
          21,
          42
        ],
        "output": [
          9,
          24,
          0,
          2,
          11,
          21,
          42,
          9
        ]
      },
      {
        "input": [
          12,
          50,
          17,
          18,
          18,
          23,
          31,
          3
        ],
        "output": [
          12,
          50,
          17,
          18,
          18,
          23,
          31,
          3,
          3
        ]
      },
      {
        "input": [
          6,
          20,
          50,
          3,
          3,
          3,
          32,
          23,
          19
        ],
        "output": [
          6,
          20,
          50,
          3,
          3,
          3,
          32,
          23,
          19,
          3
        ]
      }
    ]
  },
  {
    "id": "c181",
    "difficulty": 196,
    "function": "def c181(x):\n    # reverse the order of elements with even index\n    return [x[i] if i % 2 == 1 else x[-i-1] for i in range(len(x))]\n\n",
    "data": {
      "input": [
        50,
        28,
        36,
        1,
        6,
        73,
        46,
        30
      ],
      "output": [
        30,
        28,
        73,
        1,
        1,
        73,
        28,
        30
      ]
    },
    "demos": [
      {
        "input": [
          84,
          85,
          92,
          73,
          76,
          19,
          52
        ],
        "output": [
          52,
          85,
          76,
          73,
          92,
          19,
          84
        ]
      },
      {
        "input": [
          98,
          3,
          14,
          72,
          42
        ],
        "output": [
          42,
          3,
          14,
          72,
          98
        ]
      },
      {
        "input": [
          25,
          17,
          3,
          76,
          23,
          43,
          71,
          10
        ],
        "output": [
          10,
          17,
          43,
          76,
          76,
          43,
          17,
          10
        ]
      }
    ]
  },
  {
    "id": "c163",
    "difficulty": 197,
    "function": "def c163(x):\n    # replace each element M with 2 * M - 10\n    return [2*i-10 for i in x]\n\n",
    "data": {
      "input": [
        26,
        90,
        30,
        77,
        43,
        32,
        98,
        12
      ],
      "output": [
        42,
        170,
        50,
        144,
        76,
        54,
        186,
        14
      ]
    },
    "demos": [
      {
        "input": [
          85,
          26,
          32,
          25,
          27,
          14,
          13,
          39
        ],
        "output": [
          160,
          42,
          54,
          40,
          44,
          18,
          16,
          68
        ]
      },
      {
        "input": [
          35,
          71,
          12,
          42,
          82,
          62,
          20
        ],
        "output": [
          60,
          132,
          14,
          74,
          154,
          114,
          30
        ]
      },
      {
        "input": [
          96,
          84,
          66,
          10,
          23,
          14
        ],
        "output": [
          182,
          158,
          122,
          10,
          36,
          18
        ]
      }
    ]
  },
  {
    "id": "c154",
    "difficulty": 198,
    "function": "def c154(x):\n    # triple each even element\n    return [i*3 if i % 2 == 0 else i for i in x]\n\n",
    "data": {
      "input": [
        22,
        30,
        19,
        33,
        33,
        11
      ],
      "output": [
        66,
        90,
        19,
        33,
        33,
        11
      ]
    },
    "demos": [
      {
        "input": [
          23,
          15,
          9,
          8,
          11,
          26,
          31,
          3
        ],
        "output": [
          23,
          15,
          9,
          24,
          11,
          78,
          31,
          3
        ]
      },
      {
        "input": [
          16,
          8,
          5,
          12,
          19,
          1,
          9
        ],
        "output": [
          48,
          24,
          5,
          36,
          19,
          1,
          9
        ]
      },
      {
        "input": [
          5,
          0,
          30,
          24,
          29
        ],
        "output": [
          5,
          0,
          90,
          72,
          29
        ]
      }
    ]
  },
  {
    "id": "c166",
    "difficulty": 199,
    "function": "def c166(x):\n    # unique elements in ascending order by the sum of their digits\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = sum(map(int, str(i)))\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        52,
        87,
        26,
        87,
        37
      ],
      "output": [
        52,
        26,
        37,
        87
      ]
    },
    "demos": [
      {
        "input": [
          6,
          7,
          23,
          23,
          72,
          54
        ],
        "output": [
          23,
          6,
          7,
          72,
          54
        ]
      },
      {
        "input": [
          54,
          63,
          47,
          5,
          57
        ],
        "output": [
          5,
          54,
          63,
          47,
          57
        ]
      },
      {
        "input": [
          65,
          43,
          11,
          92,
          92,
          0,
          43
        ],
        "output": [
          0,
          11,
          43,
          65,
          92
        ]
      }
    ]
  },
  {
    "id": "c084",
    "difficulty": 200,
    "function": "def c084(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        2,
        41,
        92,
        10,
        6,
        12,
        33,
        96,
        66
      ],
      "output": [
        33
      ]
    },
    "demos": [
      {
        "input": [
          89,
          62,
          49,
          54,
          18,
          49,
          26,
          24,
          78,
          50
        ],
        "output": [
          26
        ]
      },
      {
        "input": [
          57,
          72,
          74,
          56,
          66,
          20,
          94,
          96,
          36,
          75
        ],
        "output": [
          94
        ]
      },
      {
        "input": [
          99,
          62,
          77,
          11,
          68,
          27,
          40
        ],
        "output": [
          40
        ]
      }
    ]
  },
  {
    "id": "c249",
    "difficulty": 201,
    "function": "def c249(x):\n    # use 0s to delimit sublists, give the first element of each sublist\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            if sublist:\n                res.append(sublist[0])\n                sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res.append(sublist[0])\n    return res\n\n",
    "data": {
      "input": [
        20,
        1,
        91,
        12,
        62,
        97,
        56
      ],
      "output": [
        20
      ]
    },
    "demos": [
      {
        "input": [
          93,
          11,
          30,
          0,
          0,
          96,
          1,
          27,
          51
        ],
        "output": [
          93,
          96
        ]
      },
      {
        "input": [
          0,
          0,
          87,
          0,
          36,
          63,
          79,
          76,
          55,
          72,
          52
        ],
        "output": [
          87,
          36
        ]
      },
      {
        "input": [
          4,
          46,
          99,
          0,
          11,
          41,
          34,
          99
        ],
        "output": [
          4,
          11
        ]
      }
    ]
  },
  {
    "id": "c118",
    "difficulty": 202,
    "function": "def c118(x):\n    # left rotate by N elements, N is the last element\n    return x[x[-1]:] + x[:x[-1]]\n\n",
    "data": {
      "input": [
        44,
        36,
        95,
        15,
        1,
        37,
        1
      ],
      "output": [
        36,
        95,
        15,
        1,
        37,
        1,
        44
      ]
    },
    "demos": [
      {
        "input": [
          69,
          89,
          28,
          46,
          1,
          23,
          39,
          1
        ],
        "output": [
          89,
          28,
          46,
          1,
          23,
          39,
          1,
          69
        ]
      },
      {
        "input": [
          88,
          29,
          76,
          23,
          89,
          60,
          79,
          3
        ],
        "output": [
          23,
          89,
          60,
          79,
          3,
          88,
          29,
          76
        ]
      },
      {
        "input": [
          44,
          44,
          8,
          44,
          59,
          4
        ],
        "output": [
          59,
          4,
          44,
          44,
          8,
          44
        ]
      }
    ]
  },
  {
    "id": "c152",
    "difficulty": 203,
    "function": "def c152(x):\n    # replace each element with the product of its digits\n    res = []\n    for i in x:\n        if i < 10:\n            res.append(0)\n        else:\n            res.append(int(str(i)[0]) * int(str(i)[1]))\n    return res\n\n",
    "data": {
      "input": [
        72,
        16,
        55,
        33,
        9,
        56
      ],
      "output": [
        14,
        6,
        25,
        9,
        0,
        30
      ]
    },
    "demos": [
      {
        "input": [
          32,
          72,
          86,
          56,
          11,
          39,
          64,
          22
        ],
        "output": [
          6,
          14,
          48,
          30,
          1,
          27,
          24,
          4
        ]
      },
      {
        "input": [
          70,
          35,
          1,
          63,
          53,
          36,
          64
        ],
        "output": [
          0,
          15,
          0,
          18,
          15,
          18,
          24
        ]
      },
      {
        "input": [
          18,
          96,
          30,
          91,
          58,
          52
        ],
        "output": [
          8,
          54,
          0,
          9,
          40,
          10
        ]
      }
    ]
  },
  {
    "id": "c237",
    "difficulty": 204,
    "function": "def c237(x):\n    # cumulative sum of unique elements\n    res = []\n    s = 0\n    for i in x:\n        if i not in res:\n            res.append(i)\n    for i in range(len(res)):\n        s += res[i]\n        res[i] = s\n    return res\n\n",
    "data": {
      "input": [
        0,
        9,
        13,
        9,
        12,
        29,
        0
      ],
      "output": [
        0,
        9,
        22,
        34,
        63
      ]
    },
    "demos": [
      {
        "input": [
          14,
          8,
          8,
          28,
          21,
          14,
          8,
          28
        ],
        "output": [
          14,
          22,
          50,
          71
        ]
      },
      {
        "input": [
          16,
          3,
          14,
          30,
          14
        ],
        "output": [
          16,
          19,
          33,
          63
        ]
      },
      {
        "input": [
          17,
          17,
          11,
          17,
          23,
          11,
          6,
          23,
          17
        ],
        "output": [
          17,
          28,
          51,
          57
        ]
      }
    ]
  },
  {
    "id": "c243",
    "difficulty": 205,
    "function": "def c243(x):\n    # number of odd elements\n    return [len([i for i in x if i % 2 == 1])]\n\n",
    "data": {
      "input": [
        43,
        15,
        7,
        38,
        95,
        90,
        20
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          62,
          54,
          83,
          25,
          55,
          28
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          51,
          88,
          12,
          70,
          64,
          83
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          14,
          77,
          66,
          66,
          26,
          86
        ],
        "output": [
          1
        ]
      }
    ]
  },
  {
    "id": "c188",
    "difficulty": 206,
    "function": "def c188(x):\n    # replace each element with 1 if it is divisible by 3, else replace with 0\n    return [1 if i % 3 == 0 else 0 for i in x]\n\n",
    "data": {
      "input": [
        31,
        12,
        98,
        20,
        99,
        52
      ],
      "output": [
        0,
        1,
        0,
        0,
        1,
        0
      ]
    },
    "demos": [
      {
        "input": [
          91,
          91,
          26,
          69,
          83,
          82,
          19,
          55
        ],
        "output": [
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          80,
          31,
          72,
          8,
          89,
          76,
          12,
          4
        ],
        "output": [
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0
        ]
      },
      {
        "input": [
          64,
          66,
          30,
          29,
          4,
          92,
          43,
          20
        ],
        "output": [
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      }
    ]
  },
  {
    "id": "c139",
    "difficulty": 207,
    "function": "def c139(x):\n    # remove all occurrences of the smallest element and the largest element\n    min_val = min(x)\n    max_val = max(x)\n    return [i for i in x if i != min_val and i != max_val]\n\n",
    "data": {
      "input": [
        8,
        4,
        4,
        1,
        2,
        7,
        2
      ],
      "output": [
        4,
        4,
        2,
        7,
        2
      ]
    },
    "demos": [
      {
        "input": [
          9,
          9,
          3,
          8,
          9
        ],
        "output": [
          8
        ]
      },
      {
        "input": [
          1,
          4,
          8,
          6,
          9
        ],
        "output": [
          4,
          8,
          6
        ]
      },
      {
        "input": [
          5,
          10,
          5,
          4,
          4,
          3
        ],
        "output": [
          5,
          5,
          4,
          4
        ]
      }
    ]
  },
  {
    "id": "c036",
    "difficulty": 208,
    "function": "def c036(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        2,
        7,
        0,
        7,
        10,
        9,
        3,
        5
      ],
      "output": [
        2,
        10,
        0,
        7,
        7,
        9,
        3,
        5
      ]
    },
    "demos": [
      {
        "input": [
          3,
          8,
          9,
          9,
          1,
          1,
          9,
          3
        ],
        "output": [
          3,
          1,
          9,
          9,
          8,
          1,
          9,
          3
        ]
      },
      {
        "input": [
          5,
          9,
          0,
          10,
          6,
          3
        ],
        "output": [
          5,
          6,
          0,
          10,
          9,
          3
        ]
      },
      {
        "input": [
          10,
          2,
          9,
          0,
          10,
          8
        ],
        "output": [
          10,
          2,
          0,
          9,
          10,
          8
        ]
      }
    ]
  },
  {
    "id": "c201",
    "difficulty": 209,
    "function": "def c201(x):\n    # elements > first element, followed by elements < first element\n    return [i for i in x if i > x[0]] + [i for i in x if i < x[0]]\n\n",
    "data": {
      "input": [
        41,
        2,
        35,
        68,
        68,
        86,
        20
      ],
      "output": [
        68,
        68,
        86,
        2,
        35,
        20
      ]
    },
    "demos": [
      {
        "input": [
          52,
          5,
          85,
          22,
          11
        ],
        "output": [
          85,
          5,
          22,
          11
        ]
      },
      {
        "input": [
          75,
          88,
          86,
          10,
          74,
          79
        ],
        "output": [
          88,
          86,
          79,
          10,
          74
        ]
      },
      {
        "input": [
          5,
          4,
          88,
          22,
          87
        ],
        "output": [
          88,
          22,
          87,
          4
        ]
      }
    ]
  },
  {
    "id": "c217",
    "difficulty": 210,
    "function": "def c217(x):\n    # elements in ascending order by ones digit\n    return sorted(x, key=lambda i: i % 10)\n\n",
    "data": {
      "input": [
        54,
        11,
        8,
        81,
        49,
        23,
        34,
        12
      ],
      "output": [
        11,
        81,
        12,
        23,
        54,
        34,
        8,
        49
      ]
    },
    "demos": [
      {
        "input": [
          15,
          22,
          83,
          13,
          34,
          34,
          79
        ],
        "output": [
          22,
          83,
          13,
          34,
          34,
          15,
          79
        ]
      },
      {
        "input": [
          58,
          5,
          64,
          9,
          63,
          78
        ],
        "output": [
          63,
          64,
          5,
          58,
          78,
          9
        ]
      },
      {
        "input": [
          95,
          51,
          67,
          75,
          30
        ],
        "output": [
          30,
          51,
          95,
          75,
          67
        ]
      }
    ]
  },
  {
    "id": "c005",
    "difficulty": 211,
    "function": "def c005(x):\n    # remove all but element N + 1, N is the first element\n    return [x[x[0]+1]]\n\n",
    "data": {
      "input": [
        4,
        10,
        29,
        3,
        72,
        7
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          1,
          5,
          46,
          35,
          58
        ],
        "output": [
          46
        ]
      },
      {
        "input": [
          1,
          32,
          73,
          77,
          64
        ],
        "output": [
          73
        ]
      },
      {
        "input": [
          0,
          59,
          89,
          10,
          17,
          42,
          64,
          57
        ],
        "output": [
          59
        ]
      }
    ]
  },
  {
    "id": "c063",
    "difficulty": 213,
    "function": "def c063(x):\n    # remove the first N + 1 elements, N is the first element\n    return x[x[0]+1:]\n\n",
    "data": {
      "input": [
        4,
        10,
        1,
        6,
        8,
        3
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          2,
          10,
          2,
          3,
          10
        ],
        "output": [
          3,
          10
        ]
      },
      {
        "input": [
          0,
          10,
          10,
          5,
          3
        ],
        "output": [
          10,
          10,
          5,
          3
        ]
      },
      {
        "input": [
          5,
          6,
          8,
          6,
          3,
          5,
          2
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c141",
    "difficulty": 214,
    "function": "def c141(x):\n    # replace element M + 2 with N, M = element 0, N = element 1; remove elements 0 and 1\n    x[x[0]+2] = x[1]\n    return x[2:]\n\n",
    "data": {
      "input": [
        2,
        4,
        0,
        10,
        2,
        3,
        6,
        9
      ],
      "output": [
        0,
        10,
        4,
        3,
        6,
        9
      ]
    },
    "demos": [
      {
        "input": [
          1,
          7,
          0,
          7,
          7
        ],
        "output": [
          0,
          7,
          7
        ]
      },
      {
        "input": [
          2,
          8,
          1,
          5,
          4,
          1,
          3
        ],
        "output": [
          1,
          5,
          8,
          1,
          3
        ]
      },
      {
        "input": [
          0,
          2,
          3,
          0,
          9,
          3,
          2
        ],
        "output": [
          2,
          0,
          9,
          3,
          2
        ]
      }
    ]
  },
  {
    "id": "c089",
    "difficulty": 215,
    "function": "def c089(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        90,
        54,
        78,
        87,
        1,
        44,
        74
      ],
      "output": [
        90,
        1,
        78,
        87,
        54,
        44,
        74
      ]
    },
    "demos": [
      {
        "input": [
          29,
          77,
          19,
          47,
          84,
          61,
          77,
          58
        ],
        "output": [
          29,
          84,
          19,
          47,
          77,
          61,
          77,
          58
        ]
      },
      {
        "input": [
          40,
          75,
          77,
          29,
          21,
          84
        ],
        "output": [
          40,
          75,
          29,
          77,
          21,
          84
        ]
      },
      {
        "input": [
          49,
          90,
          15,
          36,
          47,
          9,
          30
        ],
        "output": [
          49,
          47,
          15,
          36,
          90,
          9,
          30
        ]
      }
    ]
  },
  {
    "id": "c124",
    "difficulty": 216,
    "function": "def c124(x):\n    # element M, M = element N, N = element 0\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        2,
        6,
        5,
        8,
        4,
        3,
        8,
        8,
        5,
        3
      ],
      "output": [
        5
      ]
    },
    "demos": [
      {
        "input": [
          3,
          2,
          8,
          9,
          5,
          3,
          6,
          1,
          7,
          8
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          5,
          4,
          2,
          0,
          2,
          4,
          4,
          1,
          3
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          5,
          3,
          1,
          2,
          5,
          1,
          6,
          8,
          2,
          5
        ],
        "output": [
          1
        ]
      }
    ]
  },
  {
    "id": "c216",
    "difficulty": 217,
    "function": "def c216(x):\n    # elements in ascending order by tens digit\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append([i, int(str(i)[-2])])\n        else:\n            res.append([i, 0])\n    return [i[0] for i in sorted(res, key=lambda i: i[1])]\n\n",
    "data": {
      "input": [
        46,
        13,
        71,
        30,
        40
      ],
      "output": [
        13,
        30,
        46,
        40,
        71
      ]
    },
    "demos": [
      {
        "input": [
          77,
          49,
          20,
          41,
          39,
          93,
          46,
          47
        ],
        "output": [
          20,
          39,
          49,
          41,
          46,
          47,
          77,
          93
        ]
      },
      {
        "input": [
          61,
          19,
          22,
          58,
          19,
          26
        ],
        "output": [
          19,
          19,
          22,
          26,
          58,
          61
        ]
      },
      {
        "input": [
          42,
          95,
          82,
          99,
          96
        ],
        "output": [
          42,
          82,
          95,
          99,
          96
        ]
      }
    ]
  },
  {
    "id": "c143",
    "difficulty": 218,
    "function": "def c143(x):\n    # replace every occurrence of the largest element with the smallest element\n    max_val = max(x)\n    min_val = min(x)\n    return [min_val if i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        6,
        10,
        7,
        5,
        8,
        7
      ],
      "output": [
        6,
        5,
        7,
        5,
        8,
        7
      ]
    },
    "demos": [
      {
        "input": [
          2,
          4,
          10,
          5,
          0,
          2,
          7
        ],
        "output": [
          2,
          4,
          0,
          5,
          0,
          2,
          7
        ]
      },
      {
        "input": [
          1,
          5,
          6,
          3,
          10,
          4,
          0,
          7
        ],
        "output": [
          1,
          5,
          6,
          3,
          0,
          4,
          0,
          7
        ]
      },
      {
        "input": [
          3,
          2,
          0,
          9,
          2
        ],
        "output": [
          3,
          2,
          0,
          0,
          2
        ]
      }
    ]
  },
  {
    "id": "c215",
    "difficulty": 219,
    "function": "def c215(x):\n    # elements in ascending order by hundreds digit\n    res = {}\n    for i in x:\n        if len(str(i)) > 2:\n            res[i] = int(str(i)[-3])\n        else:\n            res[i] = 0\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        883,
        330,
        98,
        22,
        793,
        767
      ],
      "output": [
        98,
        22,
        330,
        793,
        767,
        883
      ]
    },
    "demos": [
      {
        "input": [
          417,
          724,
          173,
          205,
          404,
          838
        ],
        "output": [
          173,
          205,
          417,
          404,
          724,
          838
        ]
      },
      {
        "input": [
          690,
          937,
          267,
          250,
          56,
          807
        ],
        "output": [
          56,
          267,
          250,
          690,
          807,
          937
        ]
      },
      {
        "input": [
          173,
          726,
          14,
          89,
          789
        ],
        "output": [
          14,
          89,
          173,
          726,
          789
        ]
      }
    ]
  },
  {
    "id": "c144",
    "difficulty": 220,
    "function": "def c144(x):\n    # replace every occurrence of the largest or smallest element with their absolute difference\n    max_val = max(x)\n    min_val = min(x)\n    return [abs(min_val - max_val) if i == min_val or i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        4,
        19,
        95
      ],
      "output": [
        91,
        19,
        91
      ]
    },
    "demos": [
      {
        "input": [
          67,
          41,
          79
        ],
        "output": [
          67,
          38,
          38
        ]
      },
      {
        "input": [
          39
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          73,
          45
        ],
        "output": [
          28,
          28
        ]
      }
    ]
  },
  {
    "id": "c128",
    "difficulty": 221,
    "function": "def c128(x):\n    # elements in ascending order after removing elements 0,1,and 4\n    x = x[2:4] + x[5:]\n    return sorted(x)\n\n",
    "data": {
      "input": [
        87,
        71,
        93,
        57,
        46
      ],
      "output": [
        57,
        93
      ]
    },
    "demos": [
      {
        "input": [
          19,
          65,
          61,
          12,
          86,
          98,
          5,
          43
        ],
        "output": [
          5,
          12,
          43,
          61,
          98
        ]
      },
      {
        "input": [
          53,
          65,
          30,
          30,
          90,
          26
        ],
        "output": [
          26,
          30,
          30
        ]
      },
      {
        "input": [
          42,
          79,
          61,
          48,
          65
        ],
        "output": [
          48,
          61
        ]
      }
    ]
  },
  {
    "id": "c208",
    "difficulty": 222,
    "function": "def c208(x):\n    # keep only last N elements, N is the last element\n    return x[-x[-1]:]\n\n",
    "data": {
      "input": [
        1,
        9,
        3,
        9,
        1,
        7,
        3
      ],
      "output": [
        1,
        7,
        3
      ]
    },
    "demos": [
      {
        "input": [
          8,
          7,
          5,
          10,
          9,
          4,
          4
        ],
        "output": [
          10,
          9,
          4,
          4
        ]
      },
      {
        "input": [
          6,
          7,
          7,
          2,
          2,
          2,
          6,
          4
        ],
        "output": [
          2,
          2,
          6,
          4
        ]
      },
      {
        "input": [
          9,
          7,
          1,
          6,
          4,
          3,
          3,
          5
        ],
        "output": [
          6,
          4,
          3,
          3,
          5
        ]
      }
    ]
  },
  {
    "id": "c035",
    "difficulty": 223,
    "function": "def c035(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        4,
        1,
        3,
        4,
        3,
        9
      ],
      "output": [
        4,
        3,
        1,
        4,
        3,
        9
      ]
    },
    "demos": [
      {
        "input": [
          7,
          2,
          2,
          7,
          5
        ],
        "output": [
          7,
          2,
          2,
          7,
          5
        ]
      },
      {
        "input": [
          0,
          8,
          8,
          7,
          7
        ],
        "output": [
          7,
          8,
          8,
          0,
          7
        ]
      },
      {
        "input": [
          4,
          6,
          6,
          4,
          10,
          5
        ],
        "output": [
          4,
          6,
          6,
          4,
          10,
          5
        ]
      }
    ]
  },
  {
    "id": "c214",
    "difficulty": 224,
    "function": "def c214(x):\n    # remove elements 0 and N + 1, N is the first element\n    x = x[1:x[0]+1] + x[x[0]+2:]\n    return x\n\n",
    "data": {
      "input": [
        1,
        13,
        45,
        3,
        1,
        72,
        85
      ],
      "output": [
        13,
        3,
        1,
        72,
        85
      ]
    },
    "demos": [
      {
        "input": [
          4,
          5,
          74,
          89,
          27,
          1
        ],
        "output": [
          5,
          74,
          89,
          27
        ]
      },
      {
        "input": [
          0,
          74,
          52,
          12,
          0,
          28,
          74,
          31
        ],
        "output": [
          52,
          12,
          0,
          28,
          74,
          31
        ]
      },
      {
        "input": [
          2,
          25,
          67,
          96,
          70,
          37,
          89
        ],
        "output": [
          25,
          67,
          70,
          37,
          89
        ]
      }
    ]
  },
  {
    "id": "c130",
    "difficulty": 225,
    "function": "def c130(x):\n    # elements 1 through N + 1, N = element 0\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        5,
        31,
        85,
        44,
        12,
        6
      ],
      "output": [
        31,
        85,
        44,
        12,
        6
      ]
    },
    "demos": [
      {
        "input": [
          2,
          14,
          55,
          95,
          35,
          54
        ],
        "output": [
          14,
          55
        ]
      },
      {
        "input": [
          0,
          22,
          53,
          13,
          4,
          59,
          91,
          31
        ],
        "output": []
      },
      {
        "input": [
          6,
          63,
          12,
          18,
          71,
          80,
          9,
          59
        ],
        "output": [
          63,
          12,
          18,
          71,
          80,
          9
        ]
      }
    ]
  },
  {
    "id": "c159",
    "difficulty": 226,
    "function": "def c159(x):\n    # element N counts the number of occurrences of N, up to the largest element\n    out = []\n    for i, j in enumerate(range(max(x)+1)):\n        out.append(x.count(j))\n    return out\n\n",
    "data": {
      "input": [
        3,
        7,
        7,
        1,
        9,
        2
      ],
      "output": [
        0,
        1,
        1,
        1,
        0,
        0,
        0,
        2,
        0,
        1
      ]
    },
    "demos": [
      {
        "input": [
          7,
          0,
          5,
          9,
          0,
          7,
          2
        ],
        "output": [
          2,
          0,
          1,
          0,
          0,
          1,
          0,
          2,
          0,
          1
        ]
      },
      {
        "input": [
          9,
          1,
          1,
          9,
          0,
          5,
          7,
          8
        ],
        "output": [
          1,
          2,
          0,
          0,
          0,
          1,
          0,
          1,
          1,
          2
        ]
      },
      {
        "input": [
          9,
          6,
          8,
          5,
          9,
          2,
          1
        ],
        "output": [
          0,
          1,
          1,
          0,
          0,
          1,
          1,
          0,
          1,
          2
        ]
      }
    ]
  },
  {
    "id": "c205",
    "difficulty": 227,
    "function": "def c205(x):\n    # product of elements divisible by 4\n    res = 1\n    for i in x:\n        if i % 4 == 0:\n            res *= i\n    return [res]\n\n",
    "data": {
      "input": [
        13,
        4,
        5,
        4,
        5,
        7,
        5,
        4
      ],
      "output": [
        64
      ]
    },
    "demos": [
      {
        "input": [
          5,
          8,
          15,
          17,
          12,
          9,
          14
        ],
        "output": [
          96
        ]
      },
      {
        "input": [
          10,
          12,
          8,
          15,
          7,
          1
        ],
        "output": [
          96
        ]
      },
      {
        "input": [
          8,
          0,
          5,
          20,
          0,
          11,
          10,
          1
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c076",
    "difficulty": 228,
    "function": "def c076(x):\n    # the max, last, length, first, and min elements\n    return [max(x), x[-1], len(x), x[0], min(x)]\n\n",
    "data": {
      "input": [
        63,
        61,
        89,
        50,
        74,
        20,
        87
      ],
      "output": [
        89,
        87,
        7,
        63,
        20
      ]
    },
    "demos": [
      {
        "input": [
          1,
          6,
          18,
          77,
          20,
          7
        ],
        "output": [
          77,
          7,
          6,
          1,
          1
        ]
      },
      {
        "input": [
          24,
          63,
          57,
          67,
          22,
          46
        ],
        "output": [
          67,
          46,
          6,
          24,
          22
        ]
      },
      {
        "input": [
          45,
          82,
          30,
          74,
          20,
          77,
          7,
          75
        ],
        "output": [
          82,
          75,
          8,
          45,
          7
        ]
      }
    ]
  },
  {
    "id": "c250",
    "difficulty": 229,
    "function": "def c250(x):\n    # use 0s to delimit sublists, concatenate reversed sublists\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            res += sublist[::-1]\n            sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res += sublist[::-1]\n    return res\n\n",
    "data": {
      "input": [
        64,
        0,
        0,
        1,
        56,
        65,
        75,
        0,
        17,
        60,
        31
      ],
      "output": [
        64,
        75,
        65,
        56,
        1,
        31,
        60,
        17
      ]
    },
    "demos": [
      {
        "input": [
          72,
          42,
          26,
          14,
          57,
          16,
          0,
          35,
          8
        ],
        "output": [
          16,
          57,
          14,
          26,
          42,
          72,
          8,
          35
        ]
      },
      {
        "input": [
          0,
          75,
          0,
          22,
          13,
          0,
          75,
          25,
          36
        ],
        "output": [
          75,
          13,
          22,
          36,
          25,
          75
        ]
      },
      {
        "input": [
          2,
          51,
          68,
          2,
          0,
          16,
          0,
          81
        ],
        "output": [
          2,
          68,
          51,
          2,
          16,
          81
        ]
      }
    ]
  },
  {
    "id": "c186",
    "difficulty": 230,
    "function": "def c186(x):\n    # keep only elements greater than element 0\n    return [i for i in x if i > x[0]]\n\n",
    "data": {
      "input": [
        57,
        5,
        69,
        31,
        69,
        81,
        52,
        26
      ],
      "output": [
        69,
        69,
        81
      ]
    },
    "demos": [
      {
        "input": [
          76,
          90,
          30,
          89,
          52,
          60,
          97
        ],
        "output": [
          90,
          89,
          97
        ]
      },
      {
        "input": [
          5,
          96,
          37,
          39,
          32,
          66,
          34
        ],
        "output": [
          96,
          37,
          39,
          32,
          66,
          34
        ]
      },
      {
        "input": [
          68,
          36,
          1,
          91,
          32,
          11
        ],
        "output": [
          91
        ]
      }
    ]
  },
  {
    "id": "c242",
    "difficulty": 231,
    "function": "def c242(x):\n    # take the largest unique element, append the second largest unique element, prepend the third largest unique element, append the fourth largest unique element, and so on\n    unique = sorted(set(x), reverse=True)\n    res = [max(unique)]\n    unique.remove(max(unique))\n    for i in range(len(unique)):\n        if i % 2 == 0:\n            res.append(unique[i])\n        else:\n            res.insert(0, unique[i])\n    return res\n\n",
    "data": {
      "input": [
        1,
        7,
        6,
        6,
        4,
        8
      ],
      "output": [
        1,
        6,
        8,
        7,
        4
      ]
    },
    "demos": [
      {
        "input": [
          1,
          4,
          5,
          9,
          1,
          6,
          1,
          5
        ],
        "output": [
          1,
          5,
          9,
          6,
          4
        ]
      },
      {
        "input": [
          5,
          5,
          5,
          1,
          4,
          1,
          3,
          7
        ],
        "output": [
          1,
          4,
          7,
          5,
          3
        ]
      },
      {
        "input": [
          6,
          7,
          5,
          8,
          9,
          4,
          7
        ],
        "output": [
          5,
          7,
          9,
          8,
          6,
          4
        ]
      }
    ]
  },
  {
    "id": "c160",
    "difficulty": 232,
    "function": "def c160(x):\n    # replace each element with 99 - element\n    return [99-i for i in x]\n\n",
    "data": {
      "input": [
        12,
        53,
        42,
        6,
        3,
        13,
        45
      ],
      "output": [
        87,
        46,
        57,
        93,
        96,
        86,
        54
      ]
    },
    "demos": [
      {
        "input": [
          49,
          16,
          91,
          4,
          38,
          23,
          87,
          75
        ],
        "output": [
          50,
          83,
          8,
          95,
          61,
          76,
          12,
          24
        ]
      },
      {
        "input": [
          92,
          83,
          57,
          44,
          79,
          15,
          61,
          3
        ],
        "output": [
          7,
          16,
          42,
          55,
          20,
          84,
          38,
          96
        ]
      },
      {
        "input": [
          74,
          79,
          49,
          59,
          40,
          52,
          17
        ],
        "output": [
          25,
          20,
          50,
          40,
          59,
          47,
          82
        ]
      }
    ]
  },
  {
    "id": "c167",
    "difficulty": 233,
    "function": "def c167(x):\n    # keep only elements divisible by 3\n    return [i for i in x if i % 3 == 0]\n\n",
    "data": {
      "input": [
        54,
        52,
        4,
        8,
        39,
        61,
        41,
        0
      ],
      "output": [
        54,
        39,
        0
      ]
    },
    "demos": [
      {
        "input": [
          30,
          56,
          14,
          78,
          21,
          90,
          29
        ],
        "output": [
          30,
          78,
          21,
          90
        ]
      },
      {
        "input": [
          25,
          35,
          54,
          37,
          75,
          7
        ],
        "output": [
          54,
          75
        ]
      },
      {
        "input": [
          11,
          85,
          41,
          5,
          15,
          12,
          0,
          23
        ],
        "output": [
          15,
          12,
          0
        ]
      }
    ]
  },
  {
    "id": "c202",
    "difficulty": 234,
    "function": "def c202(x):\n    # the indices of every even number\n    return [i for i, j in enumerate(x) if j % 2 == 0]\n\n\n",
    "data": {
      "input": [
        75,
        72,
        36,
        97,
        9,
        82
      ],
      "output": [
        1,
        2,
        5
      ]
    },
    "demos": [
      {
        "input": [
          44,
          15,
          21,
          4,
          36,
          33
        ],
        "output": [
          0,
          3,
          4
        ]
      },
      {
        "input": [
          55,
          12,
          72,
          2,
          21,
          66,
          82,
          60
        ],
        "output": [
          1,
          2,
          3,
          5,
          6,
          7
        ]
      },
      {
        "input": [
          1,
          14,
          76,
          24,
          41,
          44,
          70
        ],
        "output": [
          1,
          2,
          3,
          5,
          6
        ]
      }
    ]
  },
  {
    "id": "c129",
    "difficulty": 235,
    "function": "def c129(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        2,
        5,
        34,
        68,
        33,
        29,
        54
      ],
      "output": [
        33,
        29,
        54
      ]
    },
    "demos": [
      {
        "input": [
          4,
          5,
          77,
          75,
          83,
          4,
          14,
          71,
          72,
          23
        ],
        "output": [
          14
        ]
      },
      {
        "input": [
          1,
          1,
          0,
          52,
          55,
          54,
          47,
          69,
          95
        ],
        "output": []
      },
      {
        "input": [
          4,
          8,
          87,
          61,
          16,
          25,
          59,
          30,
          85,
          16
        ],
        "output": [
          59,
          30,
          85,
          16
        ]
      }
    ]
  },
  {
    "id": "c221",
    "difficulty": 236,
    "function": "def c221(x):\n    # sum of even elements\n    return [sum(i for i in x if i % 2 == 0)]\n\n",
    "data": {
      "input": [
        27,
        26,
        5,
        49,
        21,
        43,
        39
      ],
      "output": [
        26
      ]
    },
    "demos": [
      {
        "input": [
          5,
          42,
          4,
          46,
          33,
          41
        ],
        "output": [
          92
        ]
      },
      {
        "input": [
          32,
          25,
          1,
          24,
          9,
          42,
          3
        ],
        "output": [
          98
        ]
      },
      {
        "input": [
          3,
          43,
          10,
          5,
          35,
          9,
          25
        ],
        "output": [
          10
        ]
      }
    ]
  },
  {
    "id": "c131",
    "difficulty": 237,
    "function": "def c131(x):\n    # keep only elements whose tens digit is even\n    res = []\n    for i in x:\n        if len(str(i)) < 2:\n            res.append(i)\n        elif int(str(i)[-2]) % 2 == 0:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        15,
        41,
        98,
        55,
        31,
        84,
        27
      ],
      "output": [
        41,
        84,
        27
      ]
    },
    "demos": [
      {
        "input": [
          33,
          85,
          33,
          99,
          24,
          17,
          81,
          8
        ],
        "output": [
          85,
          24,
          81,
          8
        ]
      },
      {
        "input": [
          66,
          3,
          40,
          52,
          45,
          83
        ],
        "output": [
          66,
          3,
          40,
          45,
          83
        ]
      },
      {
        "input": [
          29,
          7,
          3,
          75,
          40,
          38,
          27,
          29
        ],
        "output": [
          29,
          7,
          3,
          40,
          27,
          29
        ]
      }
    ]
  },
  {
    "id": "c180",
    "difficulty": 238,
    "function": "def c180(x):\n    # take the smallest element, append the second smallest element, prepend the third smallest element, append the fourth smallest element, and so on\n    sorted_x = sorted(x)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        28,
        2,
        8,
        12,
        73,
        71,
        94,
        97
      ],
      "output": [
        94,
        71,
        12,
        2,
        8,
        28,
        73,
        97
      ]
    },
    "demos": [
      {
        "input": [
          74,
          80,
          97,
          7,
          46,
          56,
          63,
          11
        ],
        "output": [
          80,
          63,
          46,
          7,
          11,
          56,
          74,
          97
        ]
      },
      {
        "input": [
          8,
          52,
          42,
          15,
          94,
          95,
          41
        ],
        "output": [
          95,
          52,
          41,
          8,
          15,
          42,
          94
        ]
      },
      {
        "input": [
          4,
          13,
          7,
          64,
          11,
          9
        ],
        "output": [
          13,
          9,
          4,
          7,
          11,
          64
        ]
      }
    ]
  },
  {
    "id": "c015",
    "difficulty": 239,
    "function": "def c015(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        3,
        4,
        3,
        2,
        12,
        15
      ],
      "output": [
        15
      ]
    },
    "demos": [
      {
        "input": [
          1,
          5,
          6,
          4,
          15,
          6,
          10,
          3,
          2
        ],
        "output": [
          4,
          15,
          6,
          10
        ]
      },
      {
        "input": [
          4,
          5,
          9,
          15,
          2,
          0,
          12,
          5,
          10,
          11
        ],
        "output": [
          12
        ]
      },
      {
        "input": [
          0,
          3,
          3,
          1,
          8,
          10
        ],
        "output": [
          3,
          1,
          8
        ]
      }
    ]
  },
  {
    "id": "c179",
    "difficulty": 240,
    "function": "def c179(x):\n    # take the largest element, append the second largest element, prepend the third largest element, append the fourth largest element, and so on\n    sorted_x = sorted(x, reverse=True)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        84,
        91,
        44,
        83,
        1,
        72,
        55
      ],
      "output": [
        1,
        55,
        83,
        91,
        84,
        72,
        44
      ]
    },
    "demos": [
      {
        "input": [
          10,
          59,
          88,
          59,
          56,
          18
        ],
        "output": [
          18,
          59,
          88,
          59,
          56,
          10
        ]
      },
      {
        "input": [
          56,
          98,
          93,
          62,
          99,
          76,
          71
        ],
        "output": [
          56,
          71,
          93,
          99,
          98,
          76,
          62
        ]
      },
      {
        "input": [
          95,
          57,
          59,
          33,
          36,
          3
        ],
        "output": [
          33,
          57,
          95,
          59,
          36,
          3
        ]
      }
    ]
  },
  {
    "id": "c226",
    "difficulty": 241,
    "function": "def c226(x):\n    # remove first M and last N elements, M is the first element, N is the last element\n    if x[-1] == 0:\n        return x[x[0]:]\n    return x[x[0]:-x[-1]]\n\n",
    "data": {
      "input": [
        2,
        6,
        5,
        12,
        9,
        3
      ],
      "output": [
        5
      ]
    },
    "demos": [
      {
        "input": [
          5,
          12,
          7,
          0,
          15,
          9,
          15,
          1,
          10,
          1
        ],
        "output": [
          9,
          15,
          1,
          10
        ]
      },
      {
        "input": [
          4,
          9,
          13,
          11,
          0,
          7,
          10,
          11,
          8,
          1
        ],
        "output": [
          0,
          7,
          10,
          11,
          8
        ]
      },
      {
        "input": [
          5,
          15,
          0,
          0,
          11,
          2,
          0
        ],
        "output": [
          2,
          0
        ]
      }
    ]
  },
  {
    "id": "c134",
    "difficulty": 242,
    "function": "def c134(x):\n    # remove elements M through N, M is the first element, N is the second element\n    return x[:x[0]] + x[x[1]+1:]\n\n",
    "data": {
      "input": [
        0,
        6,
        15,
        2,
        14,
        6,
        15,
        12
      ],
      "output": [
        12
      ]
    },
    "demos": [
      {
        "input": [
          3,
          7,
          6,
          0,
          13,
          9,
          3,
          12
        ],
        "output": [
          3,
          7,
          6
        ]
      },
      {
        "input": [
          3,
          7,
          6,
          11,
          7,
          15,
          4,
          1
        ],
        "output": [
          3,
          7,
          6
        ]
      },
      {
        "input": [
          3,
          9,
          11,
          11,
          9,
          6,
          4,
          3,
          9,
          1
        ],
        "output": [
          3,
          9,
          11
        ]
      }
    ]
  },
  {
    "id": "c164",
    "difficulty": 243,
    "function": "def c164(x):\n    # replace each element M with M // 4 + 5\n    return [i//4+5 for i in x]\n\n",
    "data": {
      "input": [
        62,
        8,
        66,
        56,
        1,
        30
      ],
      "output": [
        20,
        7,
        21,
        19,
        5,
        12
      ]
    },
    "demos": [
      {
        "input": [
          57,
          10,
          57,
          73,
          81,
          25
        ],
        "output": [
          19,
          7,
          19,
          23,
          25,
          11
        ]
      },
      {
        "input": [
          2,
          34,
          51,
          32,
          87,
          30
        ],
        "output": [
          5,
          13,
          17,
          13,
          26,
          12
        ]
      },
      {
        "input": [
          3,
          14,
          79,
          13,
          29,
          71
        ],
        "output": [
          5,
          8,
          24,
          8,
          12,
          22
        ]
      }
    ]
  },
  {
    "id": "c178",
    "difficulty": 244,
    "function": "def c178(x):\n    # keep only elements followed by an even number\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] % 2 == 0:\n            res.append(x[i])\n    return res \n\n",
    "data": {
      "input": [
        80,
        68,
        66,
        24,
        4,
        97
      ],
      "output": [
        80,
        68,
        66,
        24
      ]
    },
    "demos": [
      {
        "input": [
          27,
          37,
          58,
          13,
          33,
          71
        ],
        "output": [
          37
        ]
      },
      {
        "input": [
          57,
          86,
          17,
          52,
          93,
          86,
          32,
          78
        ],
        "output": [
          57,
          17,
          93,
          86,
          32
        ]
      },
      {
        "input": [
          63,
          43,
          41,
          64,
          28,
          87,
          92
        ],
        "output": [
          41,
          64,
          87
        ]
      }
    ]
  },
  {
    "id": "c113",
    "difficulty": 245,
    "function": "def c113(x):\n    # keep only elements whose ones digit is greater than the first element\n    res = []\n    for i in x:\n        if i % 10 > x[0]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        7,
        9,
        27,
        42,
        30,
        25,
        15,
        25,
        36,
        28
      ],
      "output": [
        9,
        28
      ]
    },
    "demos": [
      {
        "input": [
          9,
          44,
          25,
          15,
          24,
          3,
          8,
          35,
          27,
          23
        ],
        "output": []
      },
      {
        "input": [
          1,
          2,
          44,
          30,
          14,
          45,
          36,
          2
        ],
        "output": [
          2,
          44,
          14,
          45,
          36,
          2
        ]
      },
      {
        "input": [
          7,
          45,
          20,
          38,
          21,
          5,
          7,
          41
        ],
        "output": [
          38
        ]
      }
    ]
  },
  {
    "id": "c206",
    "difficulty": 246,
    "function": "def c206(x):\n    # keep only elements whose value is between the first and second element\n    return [i for i in x if x[0] < i < x[1]]\n\n",
    "data": {
      "input": [
        5,
        52,
        49,
        19,
        5,
        22,
        16,
        25,
        0
      ],
      "output": [
        49,
        19,
        22,
        16,
        25
      ]
    },
    "demos": [
      {
        "input": [
          6,
          12,
          20,
          46,
          46,
          7,
          1
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          13,
          28,
          38,
          22,
          21,
          44,
          37
        ],
        "output": [
          22,
          21
        ]
      },
      {
        "input": [
          2,
          57,
          2,
          41,
          46,
          9,
          32
        ],
        "output": [
          41,
          46,
          9,
          32
        ]
      }
    ]
  },
  {
    "id": "c210",
    "difficulty": 247,
    "function": "def c210(x):\n    # unique elements with last element inserted at index M, where M is the first element\n    unique = []\n    for i in x:\n        if i not in unique:\n            unique.append(i)\n    unique.insert(x[0], x[-1])\n    return unique\n\n",
    "data": {
      "input": [
        0,
        7,
        5,
        3,
        4,
        7,
        0,
        2
      ],
      "output": [
        2,
        0,
        7,
        5,
        3,
        4,
        2
      ]
    },
    "demos": [
      {
        "input": [
          1,
          7,
          9,
          6,
          4,
          2,
          3
        ],
        "output": [
          1,
          3,
          7,
          9,
          6,
          4,
          2,
          3
        ]
      },
      {
        "input": [
          4,
          3,
          8,
          3,
          9,
          8,
          6
        ],
        "output": [
          4,
          3,
          8,
          9,
          6,
          6
        ]
      },
      {
        "input": [
          0,
          8,
          7,
          4,
          5,
          5,
          5
        ],
        "output": [
          5,
          0,
          8,
          7,
          4,
          5
        ]
      }
    ]
  },
  {
    "id": "c158",
    "difficulty": 248,
    "function": "def c158(x):\n    # replace each element with 1 if element N equals N, else 0\n    res = []\n    for i, j in enumerate(x):\n        if i == j:\n            res.append(1)\n        else:\n            res.append(0)\n    return res\n\n",
    "data": {
      "input": [
        0,
        7,
        2,
        3,
        4,
        5,
        8,
        7,
        8
      ],
      "output": [
        1,
        0,
        1,
        1,
        1,
        1,
        0,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          0,
          0,
          2,
          3,
          8,
          5
        ],
        "output": [
          1,
          0,
          1,
          1,
          0,
          1
        ]
      },
      {
        "input": [
          5,
          5,
          7,
          3,
          4,
          3
        ],
        "output": [
          0,
          0,
          0,
          1,
          1,
          0
        ]
      },
      {
        "input": [
          0,
          1,
          6,
          3,
          6,
          5,
          6,
          7,
          8,
          9
        ],
        "output": [
          1,
          1,
          0,
          1,
          0,
          1,
          1,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c183",
    "difficulty": 249,
    "function": "def c183(x):\n    # list the index of second elements and following equal to first element\n    res = []\n    for i in range(1, len(x)):\n        if x[i] == x[0]:\n            res.append(i)\n    return res",
    "data": {
      "input": [
        0,
        0,
        7,
        13,
        5,
        2,
        9,
        3,
        10,
        0
      ],
      "output": [
        1,
        9
      ]
    },
    "demos": [
      {
        "input": [
          13,
          12,
          5,
          13,
          11,
          3,
          13
        ],
        "output": [
          3,
          6
        ]
      },
      {
        "input": [
          3,
          7,
          2,
          4,
          15,
          4,
          1
        ],
        "output": []
      },
      {
        "input": [
          6,
          5,
          8,
          6,
          12,
          6,
          6
        ],
        "output": [
          3,
          5,
          6
        ]
      }
    ]
  },
  {
    "id": "c014",
    "difficulty": 157,
    "function": "def c014(x):\n    # remove all but elements 2 through 5\n    return x[2:5]\n\n",
    "data": {
      "input": [
        59,
        55,
        87,
        33,
        99,
        41,
        74
      ],
      "output": [
        87,
        33,
        99
      ]
    },
    "demos": [
      {
        "input": [
          71,
          36,
          3,
          28,
          62,
          91,
          23,
          99
        ],
        "output": [
          3,
          28,
          62
        ]
      },
      {
        "input": [
          60,
          60,
          94,
          10,
          35,
          14
        ],
        "output": [
          94,
          10,
          35
        ]
      },
      {
        "input": [
          88,
          11,
          12,
          78,
          84,
          91,
          67
        ],
        "output": [
          12,
          78,
          84
        ]
      }
    ]
  },
  {
    "id": "c098",
    "difficulty": 86,
    "function": "def c098(x):\n    # add the index to each element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        7,
        4,
        4,
        8,
        1,
        6,
        4,
        5
      ],
      "output": [
        7,
        5,
        6,
        11,
        5,
        11,
        10,
        12
      ]
    },
    "demos": [
      {
        "input": [
          7,
          5,
          6,
          1,
          0,
          1,
          6,
          8
        ],
        "output": [
          7,
          6,
          8,
          4,
          4,
          6,
          12,
          15
        ]
      },
      {
        "input": [
          0,
          9,
          3,
          4,
          6,
          8,
          5
        ],
        "output": [
          0,
          10,
          5,
          7,
          10,
          13,
          11
        ]
      },
      {
        "input": [
          7,
          5,
          8,
          2,
          3,
          1,
          0
        ],
        "output": [
          7,
          6,
          10,
          5,
          7,
          6,
          6
        ]
      }
    ]
  },
  {
    "id": "c209",
    "difficulty": 212,
    "function": "def c209(x):\n    # elements in ascending order, insert sum of smallest and largest element at index 3\n    x = sorted(x)\n    x.insert(3, x[0] + x[-1])\n    return x\n\n",
    "data": {
      "input": [
        11,
        19,
        15,
        29,
        6,
        20,
        1,
        29
      ],
      "output": [
        1,
        6,
        11,
        30,
        15,
        19,
        20,
        29,
        29
      ]
    },
    "demos": [
      {
        "input": [
          11,
          11,
          12,
          21,
          14,
          19,
          25
        ],
        "output": [
          11,
          11,
          12,
          36,
          14,
          19,
          21,
          25
        ]
      },
      {
        "input": [
          26,
          8,
          5,
          22,
          28,
          25
        ],
        "output": [
          5,
          8,
          22,
          33,
          25,
          26,
          28
        ]
      },
      {
        "input": [
          1,
          11,
          13,
          13,
          19,
          3,
          19,
          16
        ],
        "output": [
          1,
          3,
          11,
          20,
          13,
          13,
          16,
          19,
          19
        ]
      }
    ]
  },
  {
    "id": "c211",
    "difficulty": 104,
    "function": "def c211(x):\n    # reverse input, insert fouth element and fifth element so they are fourth and third from the end respectively\n    x = x[::-1]\n    x.insert(-3, x[3])\n    x.insert(-4, x[4])\n    return x\n\n",
    "data": {
      "input": [
        84,
        4,
        34,
        33,
        29,
        20
      ],
      "output": [
        20,
        29,
        33,
        34,
        34,
        34,
        4,
        84
      ]
    },
    "demos": [
      {
        "input": [
          81,
          43,
          23,
          99,
          24,
          10
        ],
        "output": [
          10,
          24,
          99,
          23,
          23,
          23,
          43,
          81
        ]
      },
      {
        "input": [
          7,
          37,
          92,
          49,
          91,
          80
        ],
        "output": [
          80,
          91,
          49,
          92,
          92,
          92,
          37,
          7
        ]
      },
      {
        "input": [
          39,
          5,
          5,
          60,
          85,
          70,
          86
        ],
        "output": [
          86,
          70,
          85,
          60,
          60,
          60,
          5,
          5,
          39
        ]
      }
    ]
  },
  {
    "id": "c102",
    "difficulty": 0,
    "function": "def c102(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        76,
        90,
        30,
        49,
        28,
        39,
        27,
        42
      ],
      "output": [
        76,
        90,
        30,
        49,
        28,
        39,
        27,
        42
      ]
    },
    "demos": [
      {
        "input": [
          74,
          71,
          64,
          97,
          41,
          34,
          78,
          94
        ],
        "output": [
          74,
          71,
          64,
          97,
          41,
          34,
          78,
          94
        ]
      },
      {
        "input": [
          22,
          61,
          18,
          89,
          76
        ],
        "output": [
          22,
          61,
          18,
          89,
          76
        ]
      },
      {
        "input": [
          67,
          68,
          5,
          31,
          67,
          41,
          97
        ],
        "output": [
          67,
          68,
          5,
          31,
          67,
          41,
          97
        ]
      }
    ]
  },
  {
    "id": "c170",
    "difficulty": 1,
    "function": "def c170(x):\n    # remove all but the first and last element\n    return [x[0], x[-1]]\n    \n",
    "data": {
      "input": [
        1,
        7,
        49,
        86,
        62
      ],
      "output": [
        1,
        62
      ]
    },
    "demos": [
      {
        "input": [
          62,
          36,
          14,
          42,
          30
        ],
        "output": [
          62,
          30
        ]
      },
      {
        "input": [
          68,
          26,
          100,
          46,
          16,
          40,
          45
        ],
        "output": [
          68,
          45
        ]
      },
      {
        "input": [
          39,
          59,
          17,
          57,
          32
        ],
        "output": [
          39,
          32
        ]
      }
    ]
  },
  {
    "id": "c121",
    "difficulty": 2,
    "function": "def c121(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        90,
        41,
        79,
        66
      ],
      "output": [
        66
      ]
    },
    "demos": [
      {
        "input": [
          88,
          34,
          84,
          95,
          76
        ],
        "output": [
          76
        ]
      },
      {
        "input": [
          18,
          57,
          64,
          16,
          31,
          51
        ],
        "output": [
          51
        ]
      },
      {
        "input": [
          34,
          83,
          35,
          53,
          48,
          95
        ],
        "output": [
          95
        ]
      }
    ]
  },
  {
    "id": "c045",
    "difficulty": 3,
    "function": "def c045(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        45,
        81,
        83,
        19,
        82
      ],
      "output": [
        45,
        81,
        83,
        19,
        82
      ]
    },
    "demos": [
      {
        "input": [
          71,
          57,
          40
        ],
        "output": [
          71,
          57,
          40
        ]
      },
      {
        "input": [
          17,
          28,
          71,
          19,
          33,
          50
        ],
        "output": [
          17,
          28,
          71,
          19,
          33,
          50
        ]
      },
      {
        "input": [
          59,
          63,
          24,
          90,
          78,
          80
        ],
        "output": [
          59,
          63,
          24,
          90,
          78,
          80
        ]
      }
    ]
  },
  {
    "id": "c072",
    "difficulty": 4,
    "function": "def c072(x):\n    # repeat every element twice\n    return [i for i in x for _ in (0, 1)]\n\n",
    "data": {
      "input": [
        21,
        61,
        62,
        89,
        69
      ],
      "output": [
        21,
        21,
        61,
        61,
        62,
        62,
        89,
        89,
        69,
        69
      ]
    },
    "demos": [
      {
        "input": [
          36,
          66,
          86,
          83,
          11
        ],
        "output": [
          36,
          36,
          66,
          66,
          86,
          86,
          83,
          83,
          11,
          11
        ]
      },
      {
        "input": [
          49,
          49,
          77,
          36
        ],
        "output": [
          49,
          49,
          49,
          49,
          77,
          77,
          36,
          36
        ]
      },
      {
        "input": [
          33,
          42,
          39,
          63,
          17
        ],
        "output": [
          33,
          33,
          42,
          42,
          39,
          39,
          63,
          63,
          17,
          17
        ]
      }
    ]
  },
  {
    "id": "c151",
    "difficulty": 5,
    "function": "def c151(x):\n    # repeat each element, M, M times, in order of appearance\n    return [i for i in x for _ in range(i)]\n\n",
    "data": {
      "input": [
        4,
        5,
        2,
        2,
        4,
        4
      ],
      "output": [
        4,
        4,
        4,
        4,
        5,
        5,
        5,
        5,
        5,
        2,
        2,
        2,
        2,
        4,
        4,
        4,
        4,
        4,
        4,
        4,
        4
      ]
    },
    "demos": [
      {
        "input": [
          1,
          3,
          1,
          3,
          3,
          5
        ],
        "output": [
          1,
          3,
          3,
          3,
          1,
          3,
          3,
          3,
          3,
          3,
          3,
          5,
          5,
          5,
          5,
          5
        ]
      },
      {
        "input": [
          2,
          4,
          1,
          0
        ],
        "output": [
          2,
          2,
          4,
          4,
          4,
          4,
          1
        ]
      },
      {
        "input": [
          5,
          0,
          0,
          4,
          0
        ],
        "output": [
          5,
          5,
          5,
          5,
          5,
          4,
          4,
          4,
          4
        ]
      }
    ]
  },
  {
    "id": "c080",
    "difficulty": 6,
    "function": "def c080(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        79,
        1,
        40,
        75,
        19,
        18,
        89,
        97
      ],
      "output": [
        97,
        89,
        18,
        19,
        75,
        40,
        1,
        79
      ]
    },
    "demos": [
      {
        "input": [
          39,
          26,
          98
        ],
        "output": [
          98,
          26,
          39
        ]
      },
      {
        "input": [
          23,
          24,
          48,
          43,
          66
        ],
        "output": [
          66,
          43,
          48,
          24,
          23
        ]
      },
      {
        "input": [
          2,
          78,
          80,
          35
        ],
        "output": [
          35,
          80,
          78,
          2
        ]
      }
    ]
  },
  {
    "id": "c061",
    "difficulty": 7,
    "function": "def c061(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        20,
        93,
        26
      ],
      "output": [
        26
      ]
    },
    "demos": [
      {
        "input": [
          75,
          75,
          49
        ],
        "output": [
          49
        ]
      },
      {
        "input": [
          58,
          60,
          44,
          15,
          14,
          53
        ],
        "output": [
          53
        ]
      },
      {
        "input": [
          10,
          40,
          81,
          90,
          80,
          66
        ],
        "output": [
          66
        ]
      }
    ]
  },
  {
    "id": "c189",
    "difficulty": 8,
    "function": "def c189(x):\n    # count from the smallest element to the largest element\n    return list(range(min(x), max(x)+1))\n\n",
    "data": {
      "input": [
        52,
        51,
        53
      ],
      "output": [
        51,
        52,
        53
      ]
    },
    "demos": [
      {
        "input": [
          49,
          47,
          52,
          54
        ],
        "output": [
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54
        ]
      },
      {
        "input": [
          78,
          76,
          73
        ],
        "output": [
          73,
          74,
          75,
          76,
          77,
          78
        ]
      },
      {
        "input": [
          26,
          19,
          23
        ],
        "output": [
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26
        ]
      }
    ]
  },
  {
    "id": "c050",
    "difficulty": 9,
    "function": "def c050(x):\n    # prepend first element to the list\n    return [x[0]] + x\n\n",
    "data": {
      "input": [
        70,
        28,
        70,
        15,
        72,
        69,
        3
      ],
      "output": [
        70,
        70,
        28,
        70,
        15,
        72,
        69,
        3
      ]
    },
    "demos": [
      {
        "input": [
          32,
          97,
          10,
          29,
          65,
          89
        ],
        "output": [
          32,
          32,
          97,
          10,
          29,
          65,
          89
        ]
      },
      {
        "input": [
          14,
          82,
          26,
          18,
          59,
          40
        ],
        "output": [
          14,
          14,
          82,
          26,
          18,
          59,
          40
        ]
      },
      {
        "input": [
          71,
          38,
          92,
          65,
          61
        ],
        "output": [
          71,
          71,
          38,
          92,
          65,
          61
        ]
      }
    ]
  },
  {
    "id": "c048",
    "difficulty": 10,
    "function": "def c048(x):\n    # remove all but the first element\n    return [x[0]]\n    \n",
    "data": {
      "input": [
        44,
        22,
        69,
        59
      ],
      "output": [
        44
      ]
    },
    "demos": [
      {
        "input": [
          42,
          42,
          27,
          94
        ],
        "output": [
          42
        ]
      },
      {
        "input": [
          67,
          91,
          43,
          90,
          39,
          78
        ],
        "output": [
          67
        ]
      },
      {
        "input": [
          78,
          83,
          56,
          89
        ],
        "output": [
          78
        ]
      }
    ]
  },
  {
    "id": "c147",
    "difficulty": 11,
    "function": "def c147(x):\n    # each element, followed by its index\n    res = []\n    for i, v in enumerate(x):\n        res.append(v)\n        res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        18,
        35,
        91,
        70,
        85,
        70,
        27
      ],
      "output": [
        18,
        0,
        35,
        1,
        91,
        2,
        70,
        3,
        85,
        4,
        70,
        5,
        27,
        6
      ]
    },
    "demos": [
      {
        "input": [
          83,
          57,
          25
        ],
        "output": [
          83,
          0,
          57,
          1,
          25,
          2
        ]
      },
      {
        "input": [
          84,
          89,
          2,
          89,
          29,
          21,
          92
        ],
        "output": [
          84,
          0,
          89,
          1,
          2,
          2,
          89,
          3,
          29,
          4,
          21,
          5,
          92,
          6
        ]
      },
      {
        "input": [
          51,
          31,
          15,
          94,
          84,
          48,
          38
        ],
        "output": [
          51,
          0,
          31,
          1,
          15,
          2,
          94,
          3,
          84,
          4,
          48,
          5,
          38,
          6
        ]
      }
    ]
  },
  {
    "id": "c120",
    "difficulty": 12,
    "function": "def c120(x):\n    # remove all but the first element\n    return [x[0]]\n\n",
    "data": {
      "input": [
        30,
        63,
        52,
        46,
        20
      ],
      "output": [
        30
      ]
    },
    "demos": [
      {
        "input": [
          27,
          89,
          97,
          83,
          83
        ],
        "output": [
          27
        ]
      },
      {
        "input": [
          24,
          58,
          39,
          10,
          10
        ],
        "output": [
          24
        ]
      },
      {
        "input": [
          12,
          92,
          76,
          3,
          98
        ],
        "output": [
          12
        ]
      }
    ]
  },
  {
    "id": "c127",
    "difficulty": 13,
    "function": "def c127(x):\n    # remove last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        54,
        44,
        41
      ],
      "output": [
        54,
        44
      ]
    },
    "demos": [
      {
        "input": [
          72,
          77,
          53,
          64,
          66
        ],
        "output": [
          72,
          77,
          53,
          64
        ]
      },
      {
        "input": [
          98,
          57,
          6,
          80,
          42
        ],
        "output": [
          98,
          57,
          6,
          80
        ]
      },
      {
        "input": [
          93,
          68,
          15
        ],
        "output": [
          93,
          68
        ]
      }
    ]
  },
  {
    "id": "c100",
    "difficulty": 14,
    "function": "def c100(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        74,
        94,
        35,
        56
      ],
      "output": [
        56,
        35,
        94,
        74
      ]
    },
    "demos": [
      {
        "input": [
          0,
          66,
          92
        ],
        "output": [
          92,
          66,
          0
        ]
      },
      {
        "input": [
          28,
          86,
          6,
          74
        ],
        "output": [
          74,
          6,
          86,
          28
        ]
      },
      {
        "input": [
          75,
          40,
          51
        ],
        "output": [
          51,
          40,
          75
        ]
      }
    ]
  },
  {
    "id": "c145",
    "difficulty": 15,
    "function": "def c145(x):\n    # replace every element with the first element\n    return [x[0]] * len(x)\n\n",
    "data": {
      "input": [
        97,
        17,
        75,
        92,
        25,
        87
      ],
      "output": [
        97,
        97,
        97,
        97,
        97,
        97
      ]
    },
    "demos": [
      {
        "input": [
          35,
          99,
          22
        ],
        "output": [
          35,
          35,
          35
        ]
      },
      {
        "input": [
          85,
          14,
          85,
          67,
          82
        ],
        "output": [
          85,
          85,
          85,
          85,
          85
        ]
      },
      {
        "input": [
          54,
          40,
          23,
          78,
          30
        ],
        "output": [
          54,
          54,
          54,
          54,
          54
        ]
      }
    ]
  },
  {
    "id": "c079",
    "difficulty": 16,
    "function": "def c079(x):\n    # sum of the list\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        0,
        15,
        12,
        12,
        2,
        13,
        8
      ],
      "output": [
        62
      ]
    },
    "demos": [
      {
        "input": [
          5,
          6,
          13
        ],
        "output": [
          24
        ]
      },
      {
        "input": [
          17,
          15,
          14,
          15,
          5,
          1
        ],
        "output": [
          67
        ]
      },
      {
        "input": [
          5,
          12,
          2,
          9,
          16,
          11
        ],
        "output": [
          55
        ]
      }
    ]
  },
  {
    "id": "c043",
    "difficulty": 17,
    "function": "def c043(x):\n    return [8, 2, 7, 0, 3]\n\n",
    "data": {
      "input": [
        68,
        24,
        54
      ],
      "output": [
        8,
        2,
        7,
        0,
        3
      ]
    },
    "demos": [
      {
        "input": [
          56,
          90,
          30,
          74,
          36,
          72,
          94
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          99,
          1,
          49,
          90,
          40,
          75
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          4,
          64,
          17,
          4,
          12,
          77
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      }
    ]
  },
  {
    "id": "c038",
    "difficulty": 18,
    "function": "def c038(x):\n    # append 9\n    return x + [9]\n\n",
    "data": {
      "input": [
        80,
        99,
        98,
        7,
        15,
        28
      ],
      "output": [
        80,
        99,
        98,
        7,
        15,
        28,
        9
      ]
    },
    "demos": [
      {
        "input": [
          82,
          39,
          37,
          69,
          73,
          73
        ],
        "output": [
          82,
          39,
          37,
          69,
          73,
          73,
          9
        ]
      },
      {
        "input": [
          10,
          91,
          65,
          77,
          67
        ],
        "output": [
          10,
          91,
          65,
          77,
          67,
          9
        ]
      },
      {
        "input": [
          76,
          47,
          27,
          24,
          90,
          2,
          79
        ],
        "output": [
          76,
          47,
          27,
          24,
          90,
          2,
          79,
          9
        ]
      }
    ]
  },
  {
    "id": "c042",
    "difficulty": 19,
    "function": "def c042(x):\n    return [5, 2]\n\n",
    "data": {
      "input": [
        90,
        56,
        60,
        10
      ],
      "output": [
        5,
        2
      ]
    },
    "demos": [
      {
        "input": [
          31,
          47,
          1,
          6
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          65,
          17,
          58,
          57,
          71,
          59
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          91,
          61,
          20,
          35,
          64,
          19,
          11
        ],
        "output": [
          5,
          2
        ]
      }
    ]
  },
  {
    "id": "c223",
    "difficulty": 20,
    "function": "def c223(x):\n    # swap the digits of each element\n    return [int(str(i)[::-1]) for i in x]\n\n",
    "data": {
      "input": [
        30,
        50,
        37,
        23,
        42
      ],
      "output": [
        3,
        5,
        73,
        32,
        24
      ]
    },
    "demos": [
      {
        "input": [
          47,
          40,
          66,
          77,
          20,
          3
        ],
        "output": [
          74,
          4,
          66,
          77,
          2,
          3
        ]
      },
      {
        "input": [
          4,
          46,
          99,
          70,
          89,
          11
        ],
        "output": [
          4,
          64,
          99,
          7,
          98,
          11
        ]
      },
      {
        "input": [
          83,
          8,
          4,
          97,
          59,
          82
        ],
        "output": [
          38,
          8,
          4,
          79,
          95,
          28
        ]
      }
    ]
  },
  {
    "id": "c137",
    "difficulty": 21,
    "function": "def c137(x):\n    # remove all 3\n    return [i for i in x if i != 3]\n\n",
    "data": {
      "input": [
        3,
        38,
        8,
        16,
        50,
        62,
        3
      ],
      "output": [
        38,
        8,
        16,
        50,
        62
      ]
    },
    "demos": [
      {
        "input": [
          93,
          72,
          3,
          24,
          34,
          94,
          3,
          13
        ],
        "output": [
          93,
          72,
          24,
          34,
          94,
          13
        ]
      },
      {
        "input": [
          96,
          16,
          13,
          62,
          34,
          3,
          56,
          33
        ],
        "output": [
          96,
          16,
          13,
          62,
          34,
          56,
          33
        ]
      },
      {
        "input": [
          86,
          93,
          48,
          3,
          23,
          64,
          44
        ],
        "output": [
          86,
          93,
          48,
          23,
          64,
          44
        ]
      }
    ]
  },
  {
    "id": "c238",
    "difficulty": 22,
    "function": "def c238(x):\n    # keep only elements that appear exactly once\n    return [i for i in x if x.count(i) == 1]\n\n",
    "data": {
      "input": [
        0,
        17,
        4,
        8,
        4,
        10,
        1
      ],
      "output": [
        0,
        17,
        8,
        10,
        1
      ]
    },
    "demos": [
      {
        "input": [
          12,
          34,
          12,
          56,
          78,
          12,
          34,
          34
        ],
        "output": [
          56,
          78
        ]
      },
      {
        "input": [
          8,
          19,
          7,
          8,
          8,
          8,
          7,
          7,
          7,
          7
        ],
        "output": [
          19
        ]
      },
      {
        "input": [
          5,
          3,
          1,
          6,
          6,
          3,
          4,
          4
        ],
        "output": [
          5,
          1
        ]
      }
    ]
  },
  {
    "id": "c108",
    "difficulty": 23,
    "function": "def c108(x):\n    # sum of elements\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        5,
        7,
        4,
        0
      ],
      "output": [
        16
      ]
    },
    "demos": [
      {
        "input": [
          20,
          7,
          0
        ],
        "output": [
          27
        ]
      },
      {
        "input": [
          0,
          6,
          10,
          5
        ],
        "output": [
          21
        ]
      },
      {
        "input": [
          13,
          6,
          19,
          12,
          2,
          8,
          14
        ],
        "output": [
          74
        ]
      }
    ]
  },
  {
    "id": "c126",
    "difficulty": 24,
    "function": "def c126(x):\n    # remove first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        99,
        11,
        36,
        23,
        75
      ],
      "output": [
        11,
        36,
        23,
        75
      ]
    },
    "demos": [
      {
        "input": [
          60,
          62,
          58,
          90,
          25,
          97
        ],
        "output": [
          62,
          58,
          90,
          25,
          97
        ]
      },
      {
        "input": [
          86,
          92,
          54,
          26,
          19,
          16,
          14
        ],
        "output": [
          92,
          54,
          26,
          19,
          16,
          14
        ]
      },
      {
        "input": [
          3,
          31,
          40,
          45,
          9,
          4
        ],
        "output": [
          31,
          40,
          45,
          9,
          4
        ]
      }
    ]
  },
  {
    "id": "c187",
    "difficulty": 25,
    "function": "def c187(x):\n    # concatenate input with itself, separated by 0\n    return x + [0] + x\n\n",
    "data": {
      "input": [
        6,
        84,
        61
      ],
      "output": [
        6,
        84,
        61,
        0,
        6,
        84,
        61
      ]
    },
    "demos": [
      {
        "input": [
          88,
          99,
          62,
          73
        ],
        "output": [
          88,
          99,
          62,
          73,
          0,
          88,
          99,
          62,
          73
        ]
      },
      {
        "input": [
          51,
          31,
          81
        ],
        "output": [
          51,
          31,
          81,
          0,
          51,
          31,
          81
        ]
      },
      {
        "input": [
          6,
          34,
          82,
          84,
          66
        ],
        "output": [
          6,
          34,
          82,
          84,
          66,
          0,
          6,
          34,
          82,
          84,
          66
        ]
      }
    ]
  },
  {
    "id": "c022",
    "difficulty": 26,
    "function": "def c022(x):\n    # insert a 5 as element 1\n    return x[:1] + [5] + x[1:]\n\n",
    "data": {
      "input": [
        70,
        37,
        93,
        6,
        46,
        7,
        17
      ],
      "output": [
        70,
        5,
        37,
        93,
        6,
        46,
        7,
        17
      ]
    },
    "demos": [
      {
        "input": [
          38,
          91,
          77,
          61,
          3,
          46,
          95
        ],
        "output": [
          38,
          5,
          91,
          77,
          61,
          3,
          46,
          95
        ]
      },
      {
        "input": [
          41,
          83,
          77
        ],
        "output": [
          41,
          5,
          83,
          77
        ]
      },
      {
        "input": [
          90,
          35,
          79,
          67,
          65,
          60,
          5
        ],
        "output": [
          90,
          5,
          35,
          79,
          67,
          65,
          60,
          5
        ]
      }
    ]
  },
  {
    "id": "c212",
    "difficulty": 27,
    "function": "def c212(x):\n    # insert 3 at index 2, 3 times\n    return x[:3] + [3,3,3] + x[3:]\n\n",
    "data": {
      "input": [
        10,
        45,
        74,
        95,
        43,
        84
      ],
      "output": [
        10,
        45,
        74,
        3,
        3,
        3,
        95,
        43,
        84
      ]
    },
    "demos": [
      {
        "input": [
          15,
          72,
          3,
          80,
          56,
          8
        ],
        "output": [
          15,
          72,
          3,
          3,
          3,
          3,
          80,
          56,
          8
        ]
      },
      {
        "input": [
          48,
          99,
          86
        ],
        "output": [
          48,
          99,
          86,
          3,
          3,
          3
        ]
      },
      {
        "input": [
          63,
          95,
          52,
          96,
          38
        ],
        "output": [
          63,
          95,
          52,
          3,
          3,
          3,
          96,
          38
        ]
      }
    ]
  },
  {
    "id": "c101",
    "difficulty": 28,
    "function": "def c101(x):\n    return [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]\n\n",
    "data": {
      "input": [
        64,
        74,
        9,
        23,
        50
      ],
      "output": [
        11,
        19,
        24,
        33,
        42,
        5,
        82,
        0,
        64,
        9
      ]
    },
    "demos": [
      {
        "input": [
          53,
          90,
          18,
          93,
          6
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          66,
          46,
          75,
          72,
          39,
          90
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          99,
          59,
          51,
          10,
          16
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      }
    ]
  },
  {
    "id": "c021",
    "difficulty": 29,
    "function": "def c021(x):\n    # insert 8 as element 1\n    return x[:1] + [8] + x[1:]\n\n",
    "data": {
      "input": [
        42,
        70,
        53,
        89,
        23,
        74
      ],
      "output": [
        42,
        8,
        70,
        53,
        89,
        23,
        74
      ]
    },
    "demos": [
      {
        "input": [
          78,
          25,
          44,
          90,
          68,
          50,
          83
        ],
        "output": [
          78,
          8,
          25,
          44,
          90,
          68,
          50,
          83
        ]
      },
      {
        "input": [
          43,
          43,
          31,
          6,
          42,
          6
        ],
        "output": [
          43,
          8,
          43,
          31,
          6,
          42,
          6
        ]
      },
      {
        "input": [
          97,
          89,
          41,
          36,
          47
        ],
        "output": [
          97,
          8,
          89,
          41,
          36,
          47
        ]
      }
    ]
  },
  {
    "id": "c105",
    "difficulty": 30,
    "function": "def c105(x):\n    # concatenate all but the last element with all but the first element\n    return x[:-1] + x[1:]\n\n",
    "data": {
      "input": [
        51,
        46,
        62,
        83,
        61
      ],
      "output": [
        51,
        46,
        62,
        83,
        46,
        62,
        83,
        61
      ]
    },
    "demos": [
      {
        "input": [
          2,
          49,
          69,
          95,
          95
        ],
        "output": [
          2,
          49,
          69,
          95,
          49,
          69,
          95,
          95
        ]
      },
      {
        "input": [
          94,
          45,
          42,
          36,
          33
        ],
        "output": [
          94,
          45,
          42,
          36,
          45,
          42,
          36,
          33
        ]
      },
      {
        "input": [
          49,
          3,
          22
        ],
        "output": [
          49,
          3,
          3,
          22
        ]
      }
    ]
  },
  {
    "id": "c041",
    "difficulty": 31,
    "function": "def c041(x):\n    return [9]\n\n",
    "data": {
      "input": [
        47,
        80,
        49,
        51,
        68,
        26,
        87
      ],
      "output": [
        9
      ]
    },
    "demos": [
      {
        "input": [
          93,
          19,
          31,
          4,
          16,
          32
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          59,
          55,
          2,
          98,
          44,
          64,
          3
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          13,
          66,
          81,
          4,
          55
        ],
        "output": [
          9
        ]
      }
    ]
  },
  {
    "id": "c070",
    "difficulty": 32,
    "function": "def c070(x):\n    # concatenate the input\n    return x + x\n\n",
    "data": {
      "input": [
        13,
        98,
        97,
        47,
        75
      ],
      "output": [
        13,
        98,
        97,
        47,
        75,
        13,
        98,
        97,
        47,
        75
      ]
    },
    "demos": [
      {
        "input": [
          27,
          24,
          55,
          74,
          4
        ],
        "output": [
          27,
          24,
          55,
          74,
          4,
          27,
          24,
          55,
          74,
          4
        ]
      },
      {
        "input": [
          55,
          10,
          40,
          51
        ],
        "output": [
          55,
          10,
          40,
          51,
          55,
          10,
          40,
          51
        ]
      },
      {
        "input": [
          63,
          52,
          22,
          18,
          33,
          42
        ],
        "output": [
          63,
          52,
          22,
          18,
          33,
          42,
          63,
          52,
          22,
          18,
          33,
          42
        ]
      }
    ]
  },
  {
    "id": "c052",
    "difficulty": 33,
    "function": "def c052(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        74,
        17,
        88
      ],
      "output": [
        74,
        74,
        74,
        74,
        74,
        74,
        74
      ]
    },
    "demos": [
      {
        "input": [
          62,
          42,
          85,
          47,
          59,
          58
        ],
        "output": [
          62,
          62,
          62,
          62,
          62,
          62,
          62
        ]
      },
      {
        "input": [
          40,
          87,
          26,
          46
        ],
        "output": [
          40,
          40,
          40,
          40,
          40,
          40,
          40
        ]
      },
      {
        "input": [
          63,
          13,
          8
        ],
        "output": [
          63,
          63,
          63,
          63,
          63,
          63,
          63
        ]
      }
    ]
  },
  {
    "id": "c044",
    "difficulty": 34,
    "function": "def c044(x):\n    return [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]\n\n",
    "data": {
      "input": [
        84,
        2,
        21,
        72
      ],
      "output": [
        1,
        9,
        4,
        3,
        2,
        5,
        8,
        0,
        4,
        9
      ]
    },
    "demos": [
      {
        "input": [
          88,
          84,
          49
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          45,
          49,
          8,
          25
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          65,
          55,
          84,
          95,
          24,
          38
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      }
    ]
  },
  {
    "id": "c190",
    "difficulty": 35,
    "function": "def c190(x):\n    # count by 2 from the first element to the last element\n    if x[0] < x[-1]:\n        return list(range(x[0], x[-1]+1, 2))\n    else:\n        return list(range(x[0], x[-1]-1, -2))\n\n",
    "data": {
      "input": [
        78,
        82,
        84
      ],
      "output": [
        78,
        80,
        82,
        84
      ]
    },
    "demos": [
      {
        "input": [
          39,
          42,
          39
        ],
        "output": [
          39
        ]
      },
      {
        "input": [
          87,
          52,
          88,
          10,
          11,
          11,
          91
        ],
        "output": [
          87,
          89,
          91
        ]
      },
      {
        "input": [
          80,
          67,
          86
        ],
        "output": [
          80,
          82,
          84,
          86
        ]
      }
    ]
  },
  {
    "id": "c037",
    "difficulty": 36,
    "function": "def c037(x):\n    # append 3\n    return x + [3]\n\n",
    "data": {
      "input": [
        30,
        53,
        54,
        41,
        94,
        39
      ],
      "output": [
        30,
        53,
        54,
        41,
        94,
        39,
        3
      ]
    },
    "demos": [
      {
        "input": [
          44,
          37,
          12,
          22,
          62,
          57,
          10
        ],
        "output": [
          44,
          37,
          12,
          22,
          62,
          57,
          10,
          3
        ]
      },
      {
        "input": [
          53,
          79,
          15,
          81,
          3
        ],
        "output": [
          53,
          79,
          15,
          81,
          3,
          3
        ]
      },
      {
        "input": [
          73,
          63,
          84,
          15,
          66
        ],
        "output": [
          73,
          63,
          84,
          15,
          66,
          3
        ]
      }
    ]
  },
  {
    "id": "c222",
    "difficulty": 37,
    "function": "def c222(x):\n    # remove each element with the input length\n    return [len(x) for _ in x]\n\n",
    "data": {
      "input": [
        51,
        11,
        81,
        53
      ],
      "output": [
        4,
        4,
        4,
        4
      ]
    },
    "demos": [
      {
        "input": [
          82,
          83,
          70,
          24,
          31,
          30
        ],
        "output": [
          6,
          6,
          6,
          6,
          6,
          6
        ]
      },
      {
        "input": [
          86,
          8,
          13
        ],
        "output": [
          3,
          3,
          3
        ]
      },
      {
        "input": [
          81,
          85,
          5,
          29,
          37,
          27
        ],
        "output": [
          6,
          6,
          6,
          6,
          6,
          6
        ]
      }
    ]
  },
  {
    "id": "c107",
    "difficulty": 38,
    "function": "def c107(x):\n    # unique elements, in order of appearance\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        11,
        97,
        21,
        85,
        46,
        97,
        20,
        21,
        21
      ],
      "output": [
        11,
        97,
        21,
        85,
        46,
        20
      ]
    },
    "demos": [
      {
        "input": [
          19,
          19,
          15,
          29,
          15,
          45
        ],
        "output": [
          19,
          15,
          29,
          45
        ]
      },
      {
        "input": [
          38,
          91,
          29,
          76,
          11,
          38,
          74,
          91,
          11,
          27
        ],
        "output": [
          38,
          91,
          29,
          76,
          11,
          74,
          27
        ]
      },
      {
        "input": [
          47,
          79,
          61,
          12,
          85,
          79
        ],
        "output": [
          47,
          79,
          61,
          12,
          85
        ]
      }
    ]
  },
  {
    "id": "c011",
    "difficulty": 39,
    "function": "def c011(x):\n    # [1:4] of the input\n    return x[1:4]\n\n",
    "data": {
      "input": [
        57,
        75,
        72,
        75
      ],
      "output": [
        75,
        72,
        75
      ]
    },
    "demos": [
      {
        "input": [
          47,
          21,
          93,
          93,
          59,
          35
        ],
        "output": [
          21,
          93,
          93
        ]
      },
      {
        "input": [
          52,
          49,
          88,
          98,
          76,
          46,
          25
        ],
        "output": [
          49,
          88,
          98
        ]
      },
      {
        "input": [
          12,
          48,
          57,
          48,
          71,
          20,
          96
        ],
        "output": [
          48,
          57,
          48
        ]
      }
    ]
  },
  {
    "id": "c104",
    "difficulty": 40,
    "function": "def c104(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        56,
        62,
        33,
        65
      ],
      "output": [
        65
      ]
    },
    "demos": [
      {
        "input": [
          11,
          34,
          10,
          80,
          69
        ],
        "output": [
          80
        ]
      },
      {
        "input": [
          10,
          4,
          99,
          46,
          14
        ],
        "output": [
          99
        ]
      },
      {
        "input": [
          21,
          56,
          63,
          86,
          47,
          2,
          50
        ],
        "output": [
          86
        ]
      }
    ]
  },
  {
    "id": "c192",
    "difficulty": 41,
    "function": "def c192(x):\n    # replace each element, M, with its tens digit, if no tens digit, replace with 0\n    return [int(str(i)[-2]) if len(str(i)) > 1 else 0 for i in x]\n\n",
    "data": {
      "input": [
        90,
        24,
        95,
        37,
        86,
        84
      ],
      "output": [
        9,
        2,
        9,
        3,
        8,
        8
      ]
    },
    "demos": [
      {
        "input": [
          27,
          21,
          51,
          83,
          2,
          27,
          41
        ],
        "output": [
          2,
          2,
          5,
          8,
          0,
          2,
          4
        ]
      },
      {
        "input": [
          67,
          45,
          71,
          12,
          46
        ],
        "output": [
          6,
          4,
          7,
          1,
          4
        ]
      },
      {
        "input": [
          47,
          54,
          91,
          82
        ],
        "output": [
          4,
          5,
          9,
          8
        ]
      }
    ]
  },
  {
    "id": "c182",
    "difficulty": 42,
    "function": "def c182(x):\n    # keep every third element\n    return x[::3]\n\n",
    "data": {
      "input": [
        95,
        45,
        68,
        36,
        49
      ],
      "output": [
        95,
        36
      ]
    },
    "demos": [
      {
        "input": [
          0,
          45,
          36,
          68,
          53,
          97,
          69,
          30,
          23
        ],
        "output": [
          0,
          68,
          69
        ]
      },
      {
        "input": [
          46,
          63,
          55,
          43,
          32,
          53
        ],
        "output": [
          46,
          43
        ]
      },
      {
        "input": [
          25,
          27,
          53,
          56,
          80,
          2
        ],
        "output": [
          25,
          56
        ]
      }
    ]
  },
  {
    "id": "c006",
    "difficulty": 43,
    "function": "def c006(x):\n    # the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        26,
        62,
        3,
        36,
        58,
        92
      ],
      "output": [
        26,
        62
      ]
    },
    "demos": [
      {
        "input": [
          21,
          80,
          72,
          11,
          67,
          19
        ],
        "output": [
          21,
          80
        ]
      },
      {
        "input": [
          11,
          45,
          69,
          74,
          29,
          93,
          35
        ],
        "output": [
          11,
          45
        ]
      },
      {
        "input": [
          91,
          93,
          52,
          1,
          75,
          83,
          80
        ],
        "output": [
          91,
          93
        ]
      }
    ]
  },
  {
    "id": "c046",
    "difficulty": 44,
    "function": "def c046(x):\n    # prepend 7\n    return [7] + x\n\n",
    "data": {
      "input": [
        13,
        13,
        63,
        51
      ],
      "output": [
        7,
        13,
        13,
        63,
        51
      ]
    },
    "demos": [
      {
        "input": [
          72,
          5,
          69,
          88
        ],
        "output": [
          7,
          72,
          5,
          69,
          88
        ]
      },
      {
        "input": [
          8,
          61,
          11
        ],
        "output": [
          7,
          8,
          61,
          11
        ]
      },
      {
        "input": [
          85,
          40,
          18,
          58,
          89,
          42
        ],
        "output": [
          7,
          85,
          40,
          18,
          58,
          89,
          42
        ]
      }
    ]
  },
  {
    "id": "c106",
    "difficulty": 45,
    "function": "def c106(x):\n    # elements in ascending order\n    return sorted(x)\n\n",
    "data": {
      "input": [
        46,
        31,
        30,
        65,
        59,
        82
      ],
      "output": [
        30,
        31,
        46,
        59,
        65,
        82
      ]
    },
    "demos": [
      {
        "input": [
          71,
          31,
          57
        ],
        "output": [
          31,
          57,
          71
        ]
      },
      {
        "input": [
          68,
          5,
          27,
          99,
          68,
          81,
          2
        ],
        "output": [
          2,
          5,
          27,
          68,
          68,
          81,
          99
        ]
      },
      {
        "input": [
          97,
          78,
          43
        ],
        "output": [
          43,
          78,
          97
        ]
      }
    ]
  },
  {
    "id": "c114",
    "difficulty": 46,
    "function": "def c114(x):\n    # prepend the last element\n    return [x[-1]] + x\n\n",
    "data": {
      "input": [
        69,
        68,
        53,
        83,
        72,
        32
      ],
      "output": [
        32,
        69,
        68,
        53,
        83,
        72,
        32
      ]
    },
    "demos": [
      {
        "input": [
          90,
          63,
          15,
          92,
          29,
          91,
          79
        ],
        "output": [
          79,
          90,
          63,
          15,
          92,
          29,
          91,
          79
        ]
      },
      {
        "input": [
          63,
          3,
          14,
          83,
          43,
          52
        ],
        "output": [
          52,
          63,
          3,
          14,
          83,
          43,
          52
        ]
      },
      {
        "input": [
          49,
          20,
          18
        ],
        "output": [
          18,
          49,
          20,
          18
        ]
      }
    ]
  },
  {
    "id": "c093",
    "difficulty": 47,
    "function": "def c093(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        89,
        26,
        75,
        91
      ],
      "output": [
        89,
        89,
        89,
        89,
        89,
        89,
        89
      ]
    },
    "demos": [
      {
        "input": [
          25,
          85,
          82,
          16
        ],
        "output": [
          25,
          25,
          25,
          25,
          25,
          25,
          25
        ]
      },
      {
        "input": [
          41,
          68,
          45,
          8,
          74,
          66
        ],
        "output": [
          41,
          41,
          41,
          41,
          41,
          41,
          41
        ]
      },
      {
        "input": [
          89,
          53,
          75,
          64
        ],
        "output": [
          89,
          89,
          89,
          89,
          89,
          89,
          89
        ]
      }
    ]
  },
  {
    "id": "c195",
    "difficulty": 48,
    "function": "def c195(x):\n    # element 1, followed by 23, 68, 42, 99, 71, followed by last element\n    return [x[0], 23, 68, 42, 99, 71, x[-1]]\n\n",
    "data": {
      "input": [
        96,
        84,
        94,
        25,
        19
      ],
      "output": [
        96,
        23,
        68,
        42,
        99,
        71,
        19
      ]
    },
    "demos": [
      {
        "input": [
          85,
          23,
          71
        ],
        "output": [
          85,
          23,
          68,
          42,
          99,
          71,
          71
        ]
      },
      {
        "input": [
          86,
          48,
          14,
          39,
          38
        ],
        "output": [
          86,
          23,
          68,
          42,
          99,
          71,
          38
        ]
      },
      {
        "input": [
          65,
          32,
          62,
          22,
          7,
          68
        ],
        "output": [
          65,
          23,
          68,
          42,
          99,
          71,
          68
        ]
      }
    ]
  },
  {
    "id": "c196",
    "difficulty": 49,
    "function": "def c196(x):\n    # concatenate 17, 38, 82 input 1 55 27\n    return [17, 38, 82] + x + [1, 55, 27]\n\n",
    "data": {
      "input": [
        78,
        75,
        80
      ],
      "output": [
        17,
        38,
        82,
        78,
        75,
        80,
        1,
        55,
        27
      ]
    },
    "demos": [
      {
        "input": [
          31,
          6,
          93,
          95,
          10
        ],
        "output": [
          17,
          38,
          82,
          31,
          6,
          93,
          95,
          10,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          39,
          17
        ],
        "output": [
          17,
          38,
          82,
          39,
          17,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          52,
          69,
          12,
          6,
          36
        ],
        "output": [
          17,
          38,
          82,
          52,
          69,
          12,
          6,
          36,
          1,
          55,
          27
        ]
      }
    ]
  },
  {
    "id": "c095",
    "difficulty": 50,
    "function": "def c095(x):\n    # remove the first element and the last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        1,
        15,
        26,
        13,
        30,
        19,
        82
      ],
      "output": [
        15,
        26,
        13,
        30,
        19
      ]
    },
    "demos": [
      {
        "input": [
          17,
          60,
          62,
          58,
          38,
          29,
          88
        ],
        "output": [
          60,
          62,
          58,
          38,
          29
        ]
      },
      {
        "input": [
          99,
          42,
          82,
          16,
          70
        ],
        "output": [
          42,
          82,
          16
        ]
      },
      {
        "input": [
          28,
          21,
          64,
          79,
          73,
          40
        ],
        "output": [
          21,
          64,
          79,
          73
        ]
      }
    ]
  },
  {
    "id": "c016",
    "difficulty": 51,
    "function": "def c016(x):\n    # replace element 1 with 8\n    return [8] + x[1:]\n\n",
    "data": {
      "input": [
        73,
        11,
        7,
        79,
        95
      ],
      "output": [
        8,
        11,
        7,
        79,
        95
      ]
    },
    "demos": [
      {
        "input": [
          43,
          6,
          63,
          72,
          10
        ],
        "output": [
          8,
          6,
          63,
          72,
          10
        ]
      },
      {
        "input": [
          54,
          10,
          24,
          51,
          4,
          27
        ],
        "output": [
          8,
          10,
          24,
          51,
          4,
          27
        ]
      },
      {
        "input": [
          94,
          18,
          47,
          11,
          86,
          55,
          15
        ],
        "output": [
          8,
          18,
          47,
          11,
          86,
          55,
          15
        ]
      }
    ]
  },
  {
    "id": "c224",
    "difficulty": 52,
    "function": "def c224(x):\n    # reverse the list, then take every other element starting from the second element, then take every other element starting from the first element\n    return x[::-2] + x[(len(x) % 2)::2]\n\n",
    "data": {
      "input": [
        87,
        94,
        55,
        40
      ],
      "output": [
        40,
        94,
        87,
        55
      ]
    },
    "demos": [
      {
        "input": [
          76,
          86,
          73,
          65
        ],
        "output": [
          65,
          86,
          76,
          73
        ]
      },
      {
        "input": [
          43,
          15,
          35,
          6,
          39,
          56
        ],
        "output": [
          56,
          6,
          15,
          43,
          35,
          39
        ]
      },
      {
        "input": [
          84,
          87,
          67,
          29,
          59,
          28,
          82
        ],
        "output": [
          82,
          59,
          67,
          84,
          87,
          29,
          28
        ]
      }
    ]
  },
  {
    "id": "c116",
    "difficulty": 53,
    "function": "def c116(x):\n    # reflect the input on itself\n    return x[::-1] + x[1:]\n\n",
    "data": {
      "input": [
        41,
        79,
        53
      ],
      "output": [
        53,
        79,
        41,
        79,
        53
      ]
    },
    "demos": [
      {
        "input": [
          99,
          41,
          48,
          64,
          34,
          53
        ],
        "output": [
          53,
          34,
          64,
          48,
          41,
          99,
          41,
          48,
          64,
          34,
          53
        ]
      },
      {
        "input": [
          42,
          19,
          57,
          65,
          91,
          42
        ],
        "output": [
          42,
          91,
          65,
          57,
          19,
          42,
          19,
          57,
          65,
          91,
          42
        ]
      },
      {
        "input": [
          33,
          86,
          30,
          65,
          58,
          85,
          95
        ],
        "output": [
          95,
          85,
          58,
          65,
          30,
          86,
          33,
          86,
          30,
          65,
          58,
          85,
          95
        ]
      }
    ]
  },
  {
    "id": "c140",
    "difficulty": 54,
    "function": "def c140(x):\n    # replace element 1 with 9\n    return x[:1] + [9] + x[2:]\n\n",
    "data": {
      "input": [
        81,
        12,
        65,
        65
      ],
      "output": [
        81,
        9,
        65,
        65
      ]
    },
    "demos": [
      {
        "input": [
          52,
          96,
          53,
          4,
          1,
          51
        ],
        "output": [
          52,
          9,
          53,
          4,
          1,
          51
        ]
      },
      {
        "input": [
          32,
          87,
          56,
          58,
          35,
          88,
          98
        ],
        "output": [
          32,
          9,
          56,
          58,
          35,
          88,
          98
        ]
      },
      {
        "input": [
          87,
          96,
          8,
          87,
          18,
          66,
          8
        ],
        "output": [
          87,
          9,
          8,
          87,
          18,
          66,
          8
        ]
      }
    ]
  },
  {
    "id": "c049",
    "difficulty": 55,
    "function": "def c049(x):\n    # remove the first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        33,
        67,
        53
      ],
      "output": [
        67,
        53
      ]
    },
    "demos": [
      {
        "input": [
          59,
          57,
          19,
          84,
          11,
          94,
          22
        ],
        "output": [
          57,
          19,
          84,
          11,
          94,
          22
        ]
      },
      {
        "input": [
          90,
          21,
          43
        ],
        "output": [
          21,
          43
        ]
      },
      {
        "input": [
          82,
          98,
          15,
          38
        ],
        "output": [
          98,
          15,
          38
        ]
      }
    ]
  },
  {
    "id": "c071",
    "difficulty": 56,
    "function": "def c071(x):\n    # add 2 to each element\n    return [i+2 for i in x]\n\n",
    "data": {
      "input": [
        26,
        60,
        72,
        23,
        4,
        73,
        14
      ],
      "output": [
        28,
        62,
        74,
        25,
        6,
        75,
        16
      ]
    },
    "demos": [
      {
        "input": [
          82,
          84,
          92,
          18,
          62,
          84
        ],
        "output": [
          84,
          86,
          94,
          20,
          64,
          86
        ]
      },
      {
        "input": [
          48,
          23,
          49
        ],
        "output": [
          50,
          25,
          51
        ]
      },
      {
        "input": [
          91,
          26,
          97,
          69
        ],
        "output": [
          93,
          28,
          99,
          71
        ]
      }
    ]
  },
  {
    "id": "c161",
    "difficulty": 57,
    "function": "def c161(x):\n    # replace each element, M, with M + the input length - M index\n    return [i + len(x) - j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        46,
        62,
        39,
        15,
        86,
        6
      ],
      "output": [
        52,
        67,
        43,
        18,
        88,
        7
      ]
    },
    "demos": [
      {
        "input": [
          46,
          42,
          1,
          70
        ],
        "output": [
          50,
          45,
          3,
          71
        ]
      },
      {
        "input": [
          59,
          66,
          88,
          92,
          94
        ],
        "output": [
          64,
          70,
          91,
          94,
          95
        ]
      },
      {
        "input": [
          99,
          2,
          16,
          76,
          2,
          6
        ],
        "output": [
          105,
          7,
          20,
          79,
          4,
          7
        ]
      }
    ]
  },
  {
    "id": "c068",
    "difficulty": 58,
    "function": "def c068(x):\n    # concatenate the input with 7, 3, 8, 4, 3\n    return x + [7, 3, 8, 4, 3]\n\n",
    "data": {
      "input": [
        13,
        18,
        7,
        22,
        8,
        72
      ],
      "output": [
        13,
        18,
        7,
        22,
        8,
        72,
        7,
        3,
        8,
        4,
        3
      ]
    },
    "demos": [
      {
        "input": [
          26,
          92,
          27
        ],
        "output": [
          26,
          92,
          27,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          27,
          40,
          25,
          0,
          69
        ],
        "output": [
          27,
          40,
          25,
          0,
          69,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          21,
          96,
          37,
          36,
          96
        ],
        "output": [
          21,
          96,
          37,
          36,
          96,
          7,
          3,
          8,
          4,
          3
        ]
      }
    ]
  },
  {
    "id": "c103",
    "difficulty": 59,
    "function": "def c103(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        77,
        48,
        68,
        47,
        91
      ],
      "output": [
        5
      ]
    },
    "demos": [
      {
        "input": [
          30,
          59,
          55,
          13,
          71
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          63,
          51,
          75,
          15
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          19,
          41,
          88,
          97,
          95,
          72
        ],
        "output": [
          6
        ]
      }
    ]
  },
  {
    "id": "c001",
    "difficulty": 60,
    "function": "def c001(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        25,
        81,
        62,
        89,
        14,
        80
      ],
      "output": [
        62
      ]
    },
    "demos": [
      {
        "input": [
          90,
          30,
          46,
          80
        ],
        "output": [
          46
        ]
      },
      {
        "input": [
          14,
          56,
          0,
          69,
          34,
          19,
          37
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          81,
          45,
          13
        ],
        "output": [
          13
        ]
      }
    ]
  },
  {
    "id": "c090",
    "difficulty": 61,
    "function": "def c090(x):\n    return [18, 42, 77, 20, 36]\n\n",
    "data": {
      "input": [
        84,
        42,
        30,
        90,
        57,
        47,
        53
      ],
      "output": [
        18,
        42,
        77,
        20,
        36
      ]
    },
    "demos": [
      {
        "input": [
          37,
          95,
          46,
          7,
          57,
          94
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          68,
          89,
          93,
          82
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          93,
          45,
          69,
          72,
          10
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      }
    ]
  },
  {
    "id": "c097",
    "difficulty": 62,
    "function": "def c097(x):\n    # concatenate 11, 21, 43 input 7 89 0\n    return [11, 21, 43] + x + [7, 89, 0]\n\n",
    "data": {
      "input": [
        88,
        39,
        97,
        70,
        46
      ],
      "output": [
        11,
        21,
        43,
        88,
        39,
        97,
        70,
        46,
        7,
        89,
        0
      ]
    },
    "demos": [
      {
        "input": [
          52,
          16,
          62
        ],
        "output": [
          11,
          21,
          43,
          52,
          16,
          62,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          10,
          91,
          64
        ],
        "output": [
          11,
          21,
          43,
          10,
          91,
          64,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          20,
          63,
          97,
          66,
          52
        ],
        "output": [
          11,
          21,
          43,
          20,
          63,
          97,
          66,
          52,
          7,
          89,
          0
        ]
      }
    ]
  },
  {
    "id": "c142",
    "difficulty": 63,
    "function": "def c142(x):\n    # every digit in order of appearance\n    res = []\n    for i in x:\n        for j in str(i):\n            res.append(int(j))\n    return res\n\n",
    "data": {
      "input": [
        9,
        84,
        51,
        55
      ],
      "output": [
        9,
        8,
        4,
        5,
        1,
        5,
        5
      ]
    },
    "demos": [
      {
        "input": [
          2,
          27,
          41,
          94,
          8,
          10,
          2
        ],
        "output": [
          2,
          2,
          7,
          4,
          1,
          9,
          4,
          8,
          1,
          0,
          2
        ]
      },
      {
        "input": [
          20,
          92,
          31,
          96
        ],
        "output": [
          2,
          0,
          9,
          2,
          3,
          1,
          9,
          6
        ]
      },
      {
        "input": [
          84,
          99,
          77,
          75,
          24,
          11,
          25
        ],
        "output": [
          8,
          4,
          9,
          9,
          7,
          7,
          7,
          5,
          2,
          4,
          1,
          1,
          2,
          5
        ]
      }
    ]
  },
  {
    "id": "c091",
    "difficulty": 64,
    "function": "def c091(x):\n    return [81, 99, 41, 23, 22, 75, 68, 30]\n\n",
    "data": {
      "input": [
        98,
        67,
        41
      ],
      "output": [
        81,
        99,
        41,
        23,
        22,
        75,
        68,
        30
      ]
    },
    "demos": [
      {
        "input": [
          86,
          12,
          29
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          59,
          46,
          33,
          9
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          12,
          11,
          56,
          40
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      }
    ]
  },
  {
    "id": "c034",
    "difficulty": 65,
    "function": "def c034(x):\n    # swap element 1 and element 2\n    x[0], x[1] = x[1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        1,
        85,
        30,
        2,
        47,
        14,
        37
      ],
      "output": [
        85,
        1,
        30,
        2,
        47,
        14,
        37
      ]
    },
    "demos": [
      {
        "input": [
          35,
          32,
          32,
          83
        ],
        "output": [
          32,
          35,
          32,
          83
        ]
      },
      {
        "input": [
          40,
          5,
          50,
          92
        ],
        "output": [
          5,
          40,
          50,
          92
        ]
      },
      {
        "input": [
          62,
          3,
          83,
          39,
          75,
          58
        ],
        "output": [
          3,
          62,
          83,
          39,
          75,
          58
        ]
      }
    ]
  },
  {
    "id": "c244",
    "difficulty": 66,
    "function": "def c244(x):\n    # number of 3s\n    return [x.count(3)]\n\n",
    "data": {
      "input": [
        21,
        67,
        25,
        34,
        2
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          45,
          79,
          87
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          75,
          88,
          16,
          3,
          82,
          13
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          52,
          47,
          3,
          90,
          24,
          76,
          3
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c171",
    "difficulty": 67,
    "function": "def c171(x):\n    # cumulative sum\n    res = []\n    s = 0\n    for i in x:\n        s += i\n        res.append(s)\n    return res\n\n",
    "data": {
      "input": [
        13,
        11,
        18
      ],
      "output": [
        13,
        24,
        42
      ]
    },
    "demos": [
      {
        "input": [
          18,
          16,
          15,
          10,
          8,
          0
        ],
        "output": [
          18,
          34,
          49,
          59,
          67,
          67
        ]
      },
      {
        "input": [
          20,
          18,
          12,
          2,
          2,
          4,
          8
        ],
        "output": [
          20,
          38,
          50,
          52,
          54,
          58,
          66
        ]
      },
      {
        "input": [
          6,
          7,
          3
        ],
        "output": [
          6,
          13,
          16
        ]
      }
    ]
  },
  {
    "id": "c172",
    "difficulty": 68,
    "function": "def c172(x):\n    # cumulative product\n    res = []\n    p = 1\n    for i in x:\n        p *= i\n        res.append(p)\n    return res\n\n",
    "data": {
      "input": [
        3,
        4,
        6,
        7,
        5,
        2
      ],
      "output": [
        3,
        12,
        72,
        504,
        2520,
        5040
      ]
    },
    "demos": [
      {
        "input": [
          2,
          0,
          10,
          8,
          4,
          1
        ],
        "output": [
          2,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          1,
          3,
          4,
          4,
          10
        ],
        "output": [
          1,
          3,
          12,
          48,
          480
        ]
      },
      {
        "input": [
          0,
          2,
          3,
          8,
          1,
          8
        ],
        "output": [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      }
    ]
  },
  {
    "id": "c062",
    "difficulty": 69,
    "function": "def c062(x):\n    # remove the last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        78,
        32,
        80,
        25,
        67,
        55
      ],
      "output": [
        78,
        32,
        80,
        25,
        67
      ]
    },
    "demos": [
      {
        "input": [
          49,
          50,
          1
        ],
        "output": [
          49,
          50
        ]
      },
      {
        "input": [
          23,
          7,
          78,
          34
        ],
        "output": [
          23,
          7,
          78
        ]
      },
      {
        "input": [
          61,
          50,
          81
        ],
        "output": [
          61,
          50
        ]
      }
    ]
  },
  {
    "id": "c096",
    "difficulty": 70,
    "function": "def c096(x):\n    # prepend 98 and append 37\n    return [98] + x + [37]\n\n",
    "data": {
      "input": [
        5,
        76,
        97
      ],
      "output": [
        98,
        5,
        76,
        97,
        37
      ]
    },
    "demos": [
      {
        "input": [
          21,
          73,
          24,
          30,
          8
        ],
        "output": [
          98,
          21,
          73,
          24,
          30,
          8,
          37
        ]
      },
      {
        "input": [
          15,
          68,
          97,
          86,
          20,
          65,
          86
        ],
        "output": [
          98,
          15,
          68,
          97,
          86,
          20,
          65,
          86,
          37
        ]
      },
      {
        "input": [
          48,
          24,
          76,
          55,
          93
        ],
        "output": [
          98,
          48,
          24,
          76,
          55,
          93,
          37
        ]
      }
    ]
  },
  {
    "id": "c081",
    "difficulty": 71,
    "function": "def c081(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        84,
        48,
        45,
        35,
        55,
        10
      ],
      "output": [
        45
      ]
    },
    "demos": [
      {
        "input": [
          60,
          13,
          35,
          5,
          14
        ],
        "output": [
          35
        ]
      },
      {
        "input": [
          29,
          46,
          38
        ],
        "output": [
          38
        ]
      },
      {
        "input": [
          63,
          10,
          69
        ],
        "output": [
          69
        ]
      }
    ]
  },
  {
    "id": "c109",
    "difficulty": 72,
    "function": "def c109(x):\n    # product of elements\n    p = 1\n    for i in x:\n        p *= i\n    return [p]\n\n",
    "data": {
      "input": [
        6,
        10,
        2,
        3,
        6,
        2
      ],
      "output": [
        4320
      ]
    },
    "demos": [
      {
        "input": [
          6,
          0,
          8,
          4,
          4,
          8,
          0
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          5,
          7,
          2,
          4,
          0
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          0,
          3,
          2,
          2,
          2,
          9,
          10
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c002",
    "difficulty": 73,
    "function": "def c002(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        37,
        37,
        14,
        93,
        46
      ],
      "output": [
        14
      ]
    },
    "demos": [
      {
        "input": [
          42,
          28,
          0,
          64,
          66
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          24,
          92,
          75,
          98,
          48,
          80
        ],
        "output": [
          75
        ]
      },
      {
        "input": [
          97,
          59,
          44,
          53,
          12
        ],
        "output": [
          44
        ]
      }
    ]
  },
  {
    "id": "c132",
    "difficulty": 74,
    "function": "def c132(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        29,
        64,
        23,
        30,
        25,
        62
      ],
      "output": [
        29,
        64,
        30,
        25,
        62
      ]
    },
    "demos": [
      {
        "input": [
          97,
          91,
          11,
          98
        ],
        "output": [
          97,
          91,
          98
        ]
      },
      {
        "input": [
          37,
          26,
          37,
          70,
          43,
          12,
          7
        ],
        "output": [
          37,
          26,
          70,
          43,
          12,
          7
        ]
      },
      {
        "input": [
          20,
          28,
          58,
          6,
          94
        ],
        "output": [
          20,
          28,
          6,
          94
        ]
      }
    ]
  },
  {
    "id": "c153",
    "difficulty": 75,
    "function": "def c153(x):\n    # each unique element followed by its number of occurrences\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    out = []\n    for k, v in res.items():\n        out.append(k)\n        out.append(v)\n    return out\n\n",
    "data": {
      "input": [
        78,
        15,
        63,
        15,
        15
      ],
      "output": [
        78,
        1,
        15,
        3,
        63,
        1
      ]
    },
    "demos": [
      {
        "input": [
          82,
          82,
          82,
          41,
          41,
          65,
          67
        ],
        "output": [
          82,
          3,
          41,
          2,
          65,
          1,
          67,
          1
        ]
      },
      {
        "input": [
          32,
          34,
          34,
          37,
          32,
          73,
          3,
          32
        ],
        "output": [
          32,
          3,
          34,
          2,
          37,
          1,
          73,
          1,
          3,
          1
        ]
      },
      {
        "input": [
          95,
          24,
          17,
          17,
          61
        ],
        "output": [
          95,
          1,
          24,
          1,
          17,
          2,
          61,
          1
        ]
      }
    ]
  },
  {
    "id": "c051",
    "difficulty": 76,
    "function": "def c051(x):\n    # prepend first element 4 times\n    return [x[0]] * 4 + x\n\n",
    "data": {
      "input": [
        98,
        53,
        66,
        8,
        25
      ],
      "output": [
        98,
        98,
        98,
        98,
        98,
        53,
        66,
        8,
        25
      ]
    },
    "demos": [
      {
        "input": [
          74,
          15,
          38
        ],
        "output": [
          74,
          74,
          74,
          74,
          74,
          15,
          38
        ]
      },
      {
        "input": [
          11,
          19,
          66,
          52,
          2
        ],
        "output": [
          11,
          11,
          11,
          11,
          11,
          19,
          66,
          52,
          2
        ]
      },
      {
        "input": [
          86,
          9,
          92,
          16,
          2
        ],
        "output": [
          86,
          86,
          86,
          86,
          86,
          9,
          92,
          16,
          2
        ]
      }
    ]
  },
  {
    "id": "c225",
    "difficulty": 77,
    "function": "def c225(x):\n    # remove first and last two elements\n    return x[2:-2]\n\n",
    "data": {
      "input": [
        65,
        86,
        82,
        57,
        48,
        18,
        5
      ],
      "output": [
        82,
        57,
        48
      ]
    },
    "demos": [
      {
        "input": [
          37,
          33,
          53,
          55,
          45,
          17
        ],
        "output": [
          53,
          55
        ]
      },
      {
        "input": [
          89,
          57,
          42,
          29,
          36,
          4,
          50,
          33
        ],
        "output": [
          42,
          29,
          36,
          4
        ]
      },
      {
        "input": [
          25,
          21,
          9,
          69,
          30,
          71,
          55
        ],
        "output": [
          9,
          69,
          30
        ]
      }
    ]
  },
  {
    "id": "c067",
    "difficulty": 78,
    "function": "def c067(x):\n    # swap the first and last element\n    x[0], x[-1] = x[-1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        0,
        74,
        90
      ],
      "output": [
        90,
        74,
        0
      ]
    },
    "demos": [
      {
        "input": [
          79,
          25,
          92
        ],
        "output": [
          92,
          25,
          79
        ]
      },
      {
        "input": [
          87,
          63,
          61
        ],
        "output": [
          61,
          63,
          87
        ]
      },
      {
        "input": [
          20,
          37,
          59,
          72,
          45
        ],
        "output": [
          45,
          37,
          59,
          72,
          20
        ]
      }
    ]
  },
  {
    "id": "c112",
    "difficulty": 79,
    "function": "def c112(x):\n    # count from 1 to the last element\n    return list(range(1, x[-1]+1))\n\n",
    "data": {
      "input": [
        49,
        20,
        50,
        3
      ],
      "output": [
        1,
        2,
        3
      ]
    },
    "demos": [
      {
        "input": [
          92,
          33,
          34,
          64,
          34,
          99,
          3
        ],
        "output": [
          1,
          2,
          3
        ]
      },
      {
        "input": [
          58,
          25,
          12,
          85,
          9
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      },
      {
        "input": [
          14,
          19,
          70,
          13
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ]
      }
    ]
  },
  {
    "id": "c030",
    "difficulty": 80,
    "function": "def c030(x):\n    # remove the last 2 elements\n    return x[:-2]\n\n",
    "data": {
      "input": [
        62,
        91,
        74,
        28,
        66
      ],
      "output": [
        62,
        91,
        74
      ]
    },
    "demos": [
      {
        "input": [
          51,
          75,
          75,
          87,
          93
        ],
        "output": [
          51,
          75,
          75
        ]
      },
      {
        "input": [
          33,
          43,
          23,
          70,
          73,
          33,
          40
        ],
        "output": [
          33,
          43,
          23,
          70,
          73
        ]
      },
      {
        "input": [
          77,
          26,
          74,
          48,
          45,
          73
        ],
        "output": [
          77,
          26,
          74,
          48
        ]
      }
    ]
  },
  {
    "id": "c149",
    "difficulty": 81,
    "function": "def c149(x):\n    # replace each element, M with M * first element; remove the first element\n    return [i*x[0] for i in x[1:]]\n\n",
    "data": {
      "input": [
        8,
        8,
        11,
        1
      ],
      "output": [
        64,
        88,
        8
      ]
    },
    "demos": [
      {
        "input": [
          18,
          8,
          8
        ],
        "output": [
          144,
          144
        ]
      },
      {
        "input": [
          20,
          12,
          6,
          5,
          0,
          20,
          3
        ],
        "output": [
          240,
          120,
          100,
          0,
          400,
          60
        ]
      },
      {
        "input": [
          12,
          11,
          16,
          11,
          17,
          11,
          11
        ],
        "output": [
          132,
          192,
          132,
          204,
          132,
          132
        ]
      }
    ]
  },
  {
    "id": "c148",
    "difficulty": 82,
    "function": "def c148(x):\n    # count from 1 to each element\n    res = []\n    for i in x:\n        res += list(range(1, i+1))\n    return res\n\n",
    "data": {
      "input": [
        0,
        5,
        4,
        2,
        2,
        2
      ],
      "output": [
        1,
        2,
        3,
        4,
        5,
        1,
        2,
        3,
        4,
        1,
        2,
        1,
        2,
        1,
        2
      ]
    },
    "demos": [
      {
        "input": [
          2,
          0,
          4,
          1,
          1,
          3
        ],
        "output": [
          1,
          2,
          1,
          2,
          3,
          4,
          1,
          1,
          1,
          2,
          3
        ]
      },
      {
        "input": [
          3,
          4,
          3,
          4
        ],
        "output": [
          1,
          2,
          3,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          1,
          2,
          3,
          4
        ]
      },
      {
        "input": [
          3,
          1,
          3,
          5
        ],
        "output": [
          1,
          2,
          3,
          1,
          1,
          2,
          3,
          1,
          2,
          3,
          4,
          5
        ]
      }
    ]
  },
  {
    "id": "c017",
    "difficulty": 83,
    "function": "def c017(x):\n    # replace x[1] with 8\n    x[1] = 8\n    return x\n\n",
    "data": {
      "input": [
        87,
        1,
        21,
        27,
        96
      ],
      "output": [
        87,
        8,
        21,
        27,
        96
      ]
    },
    "demos": [
      {
        "input": [
          88,
          16,
          60
        ],
        "output": [
          88,
          8,
          60
        ]
      },
      {
        "input": [
          53,
          63,
          0,
          93,
          27,
          14
        ],
        "output": [
          53,
          8,
          0,
          93,
          27,
          14
        ]
      },
      {
        "input": [
          56,
          37,
          39,
          42,
          39
        ],
        "output": [
          56,
          8,
          39,
          42,
          39
        ]
      }
    ]
  },
  {
    "id": "c092",
    "difficulty": 84,
    "function": "def c092(x):\n    # concatenate 92, 63, 34, 18, 55\n    return x + [92, 63, 34, 18, 55]\n\n",
    "data": {
      "input": [
        83,
        1,
        90,
        62
      ],
      "output": [
        83,
        1,
        90,
        62,
        92,
        63,
        34,
        18,
        55
      ]
    },
    "demos": [
      {
        "input": [
          25,
          59,
          11,
          66,
          52
        ],
        "output": [
          25,
          59,
          11,
          66,
          52,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          85,
          28,
          52
        ],
        "output": [
          85,
          28,
          52,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          64,
          80,
          42,
          37,
          90
        ],
        "output": [
          64,
          80,
          42,
          37,
          90,
          92,
          63,
          34,
          18,
          55
        ]
      }
    ]
  },
  {
    "id": "c077",
    "difficulty": 85,
    "function": "def c077(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        33,
        5,
        29,
        81,
        14
      ],
      "output": [
        5
      ]
    },
    "demos": [
      {
        "input": [
          29,
          0,
          21,
          77,
          60,
          37,
          43
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          92,
          19,
          41,
          76,
          70,
          35
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          59,
          14,
          3,
          21,
          73,
          78,
          65
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c248",
    "difficulty": 87,
    "function": "def c248(x):\n    # elements after the first 0\n    return x[x.index(0)+1:]\n\n",
    "data": {
      "input": [
        81,
        18,
        0,
        41,
        0,
        89
      ],
      "output": [
        41,
        0,
        89
      ]
    },
    "demos": [
      {
        "input": [
          76,
          0,
          7,
          46,
          60,
          98,
          23
        ],
        "output": [
          7,
          46,
          60,
          98,
          23
        ]
      },
      {
        "input": [
          90,
          39,
          51,
          0,
          93,
          84,
          82
        ],
        "output": [
          93,
          84,
          82
        ]
      },
      {
        "input": [
          57,
          82,
          0,
          77,
          16,
          11
        ],
        "output": [
          77,
          16,
          11
        ]
      }
    ]
  },
  {
    "id": "c199",
    "difficulty": 88,
    "function": "def c199(x):\n    # elements in ascending order, each preceded by its rank\n    res = []\n    for i, v in enumerate(sorted(x)):\n        res.append(i+1)\n        res.append(v)\n    return res\n\n",
    "data": {
      "input": [
        55,
        82,
        15,
        46,
        17
      ],
      "output": [
        1,
        15,
        2,
        17,
        3,
        46,
        4,
        55,
        5,
        82
      ]
    },
    "demos": [
      {
        "input": [
          52,
          20,
          77,
          62,
          7
        ],
        "output": [
          1,
          7,
          2,
          20,
          3,
          52,
          4,
          62,
          5,
          77
        ]
      },
      {
        "input": [
          13,
          47,
          33,
          88,
          74,
          74
        ],
        "output": [
          1,
          13,
          2,
          33,
          3,
          47,
          4,
          74,
          5,
          74,
          6,
          88
        ]
      },
      {
        "input": [
          55,
          58,
          18,
          51,
          42,
          83,
          66
        ],
        "output": [
          1,
          18,
          2,
          42,
          3,
          51,
          4,
          55,
          5,
          58,
          6,
          66,
          7,
          83
        ]
      }
    ]
  },
  {
    "id": "c007",
    "difficulty": 89,
    "function": "def c007(x):\n    # remove all but the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        57,
        79,
        49,
        45,
        68
      ],
      "output": [
        57,
        79
      ]
    },
    "demos": [
      {
        "input": [
          41,
          2,
          49
        ],
        "output": [
          41,
          2
        ]
      },
      {
        "input": [
          99,
          77,
          50
        ],
        "output": [
          99,
          77
        ]
      },
      {
        "input": [
          96,
          96,
          58
        ],
        "output": [
          96,
          96
        ]
      }
    ]
  },
  {
    "id": "c176",
    "difficulty": 90,
    "function": "def c176(x):\n    # sum of each consecutive pair of elements\n    return [x[i] + x[i+1] for i in range(0, len(x)-1)]\n\n",
    "data": {
      "input": [
        31,
        17,
        60,
        15,
        42
      ],
      "output": [
        48,
        77,
        75,
        57
      ]
    },
    "demos": [
      {
        "input": [
          68,
          90,
          69,
          99,
          11,
          36,
          72
        ],
        "output": [
          158,
          159,
          168,
          110,
          47,
          108
        ]
      },
      {
        "input": [
          13,
          95,
          73,
          10
        ],
        "output": [
          108,
          168,
          83
        ]
      },
      {
        "input": [
          53,
          21,
          70
        ],
        "output": [
          74,
          91
        ]
      }
    ]
  },
  {
    "id": "c066",
    "difficulty": 91,
    "function": "def c066(x):\n    # left rotate the list by 1\n    return x[1:] + x[:1]\n\n",
    "data": {
      "input": [
        61,
        65,
        63,
        39,
        63,
        45
      ],
      "output": [
        65,
        63,
        39,
        63,
        45,
        61
      ]
    },
    "demos": [
      {
        "input": [
          85,
          26,
          60,
          95,
          51,
          18,
          25
        ],
        "output": [
          26,
          60,
          95,
          51,
          18,
          25,
          85
        ]
      },
      {
        "input": [
          61,
          68,
          82,
          96
        ],
        "output": [
          68,
          82,
          96,
          61
        ]
      },
      {
        "input": [
          46,
          45,
          18,
          30
        ],
        "output": [
          45,
          18,
          30,
          46
        ]
      }
    ]
  },
  {
    "id": "c053",
    "difficulty": 92,
    "function": "def c053(x):\n    # replace x[1] with x[0]\n    x[1] = x[0]\n    return x\n\n",
    "data": {
      "input": [
        94,
        39,
        41
      ],
      "output": [
        94,
        94,
        41
      ]
    },
    "demos": [
      {
        "input": [
          90,
          63,
          82,
          38
        ],
        "output": [
          90,
          90,
          82,
          38
        ]
      },
      {
        "input": [
          44,
          16,
          47,
          84,
          70
        ],
        "output": [
          44,
          44,
          47,
          84,
          70
        ]
      },
      {
        "input": [
          4,
          31,
          8
        ],
        "output": [
          4,
          4,
          8
        ]
      }
    ]
  },
  {
    "id": "c047",
    "difficulty": 93,
    "function": "def c047(x):\n    # concatenate 9, 6, 3, 8, 5\n    return [9, 6, 3, 8, 5] + x\n\n",
    "data": {
      "input": [
        19,
        16,
        83,
        46
      ],
      "output": [
        9,
        6,
        3,
        8,
        5,
        19,
        16,
        83,
        46
      ]
    },
    "demos": [
      {
        "input": [
          98,
          65,
          93,
          42,
          64,
          65
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          98,
          65,
          93,
          42,
          64,
          65
        ]
      },
      {
        "input": [
          81,
          49,
          59,
          20,
          60,
          24,
          89
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          81,
          49,
          59,
          20,
          60,
          24,
          89
        ]
      },
      {
        "input": [
          34,
          62,
          72,
          69
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          34,
          62,
          72,
          69
        ]
      }
    ]
  },
  {
    "id": "c064",
    "difficulty": 94,
    "function": "def c064(x):\n    # remove the first and last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        94,
        62,
        61
      ],
      "output": [
        62
      ]
    },
    "demos": [
      {
        "input": [
          29,
          45,
          5,
          39,
          74,
          26,
          40
        ],
        "output": [
          45,
          5,
          39,
          74,
          26
        ]
      },
      {
        "input": [
          48,
          15,
          83,
          54
        ],
        "output": [
          15,
          83
        ]
      },
      {
        "input": [
          40,
          77,
          96,
          88,
          9
        ],
        "output": [
          77,
          96,
          88
        ]
      }
    ]
  },
  {
    "id": "c078",
    "difficulty": 95,
    "function": "def c078(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        16,
        21,
        44,
        14,
        8,
        20
      ],
      "output": [
        44
      ]
    },
    "demos": [
      {
        "input": [
          63,
          46,
          34
        ],
        "output": [
          63
        ]
      },
      {
        "input": [
          88,
          94,
          69,
          75,
          98,
          4
        ],
        "output": [
          98
        ]
      },
      {
        "input": [
          70,
          80,
          17,
          86,
          70,
          87,
          84
        ],
        "output": [
          87
        ]
      }
    ]
  },
  {
    "id": "c119",
    "difficulty": 96,
    "function": "def c119(x):\n    # make the list begin and ends with 8\n    if x[0] != 8:\n        x = [8] + x\n    if x[-1] != 8:\n        x = x + [8]\n    return x\n\n",
    "data": {
      "input": [
        57,
        81,
        14,
        22,
        15
      ],
      "output": [
        8,
        57,
        81,
        14,
        22,
        15,
        8
      ]
    },
    "demos": [
      {
        "input": [
          57,
          73,
          72
        ],
        "output": [
          8,
          57,
          73,
          72,
          8
        ]
      },
      {
        "input": [
          86,
          30,
          59,
          26,
          42,
          63
        ],
        "output": [
          8,
          86,
          30,
          59,
          26,
          42,
          63,
          8
        ]
      },
      {
        "input": [
          62,
          0,
          11,
          71,
          18,
          99
        ],
        "output": [
          8,
          62,
          0,
          11,
          71,
          18,
          99,
          8
        ]
      }
    ]
  },
  {
    "id": "c135",
    "difficulty": 97,
    "function": "def c135(x):\n    # remove the first 7\n    x.remove(7)\n    return x\n\n",
    "data": {
      "input": [
        4,
        7,
        7,
        8,
        1,
        7,
        5,
        2
      ],
      "output": [
        4,
        7,
        8,
        1,
        7,
        5,
        2
      ]
    },
    "demos": [
      {
        "input": [
          3,
          9,
          3,
          5,
          7,
          3
        ],
        "output": [
          3,
          9,
          3,
          5,
          3
        ]
      },
      {
        "input": [
          4,
          4,
          7,
          9,
          7,
          7,
          7,
          0
        ],
        "output": [
          4,
          4,
          9,
          7,
          7,
          7,
          0
        ]
      },
      {
        "input": [
          8,
          1,
          5,
          5,
          7
        ],
        "output": [
          8,
          1,
          5,
          5
        ]
      }
    ]
  },
  {
    "id": "c198",
    "difficulty": 98,
    "function": "def c198(x):\n    # unique elements in descending order\n    res = set(x)\n    return sorted(res, reverse=True)\n\n",
    "data": {
      "input": [
        51,
        87,
        42,
        70,
        87
      ],
      "output": [
        87,
        70,
        51,
        42
      ]
    },
    "demos": [
      {
        "input": [
          67,
          91,
          92,
          84,
          92,
          48,
          23,
          60
        ],
        "output": [
          92,
          91,
          84,
          67,
          60,
          48,
          23
        ]
      },
      {
        "input": [
          20,
          47,
          20,
          17,
          74
        ],
        "output": [
          74,
          47,
          20,
          17
        ]
      },
      {
        "input": [
          24,
          71,
          71,
          16
        ],
        "output": [
          71,
          24,
          16
        ]
      }
    ]
  },
  {
    "id": "c219",
    "difficulty": 99,
    "function": "def c219(x):\n    # keep only every other element\n    return x[::2]\n\n",
    "data": {
      "input": [
        63,
        91,
        5,
        50,
        65,
        74,
        27,
        54,
        5
      ],
      "output": [
        63,
        5,
        65,
        27,
        5
      ]
    },
    "demos": [
      {
        "input": [
          81,
          36,
          34,
          39,
          45
        ],
        "output": [
          81,
          34,
          45
        ]
      },
      {
        "input": [
          38,
          45,
          43,
          15
        ],
        "output": [
          38,
          43
        ]
      },
      {
        "input": [
          2,
          69,
          67,
          26,
          12,
          98,
          37
        ],
        "output": [
          2,
          67,
          12,
          37
        ]
      }
    ]
  },
  {
    "id": "c075",
    "difficulty": 100,
    "function": "def c075(x):\n    # remove even index\n    return x[1::2]\n\n",
    "data": {
      "input": [
        79,
        97,
        77,
        52
      ],
      "output": [
        97,
        52
      ]
    },
    "demos": [
      {
        "input": [
          74,
          25,
          6,
          89,
          81,
          81
        ],
        "output": [
          25,
          89,
          81
        ]
      },
      {
        "input": [
          34,
          57,
          38,
          47
        ],
        "output": [
          57,
          47
        ]
      },
      {
        "input": [
          39,
          32,
          68,
          0,
          33,
          75
        ],
        "output": [
          32,
          0,
          75
        ]
      }
    ]
  },
  {
    "id": "c177",
    "difficulty": 101,
    "function": "def c177(x):\n    # interleave the input and the reversed input\n    return [i for pair in zip(x, x[::-1]) for i in pair]\n\n",
    "data": {
      "input": [
        45,
        92,
        75,
        46,
        7,
        95,
        32
      ],
      "output": [
        45,
        32,
        92,
        95,
        75,
        7,
        46,
        46,
        7,
        75,
        95,
        92,
        32,
        45
      ]
    },
    "demos": [
      {
        "input": [
          34,
          54,
          56
        ],
        "output": [
          34,
          56,
          54,
          54,
          56,
          34
        ]
      },
      {
        "input": [
          52,
          23,
          42,
          65,
          99,
          15
        ],
        "output": [
          52,
          15,
          23,
          99,
          42,
          65,
          65,
          42,
          99,
          23,
          15,
          52
        ]
      },
      {
        "input": [
          86,
          74,
          2,
          75,
          74
        ],
        "output": [
          86,
          74,
          74,
          75,
          2,
          2,
          75,
          74,
          74,
          86
        ]
      }
    ]
  },
  {
    "id": "c025",
    "difficulty": 102,
    "function": "def c025(x):\n    # remove element 1\n    return x[:1] + x[2:]\n\n",
    "data": {
      "input": [
        97,
        98,
        8,
        5,
        81,
        9
      ],
      "output": [
        97,
        8,
        5,
        81,
        9
      ]
    },
    "demos": [
      {
        "input": [
          1,
          95,
          38
        ],
        "output": [
          1,
          38
        ]
      },
      {
        "input": [
          61,
          54,
          89,
          43,
          25,
          8
        ],
        "output": [
          61,
          89,
          43,
          25,
          8
        ]
      },
      {
        "input": [
          1,
          38,
          42,
          3,
          56,
          46,
          42
        ],
        "output": [
          1,
          42,
          3,
          56,
          46,
          42
        ]
      }
    ]
  },
  {
    "id": "c125",
    "difficulty": 103,
    "function": "def c125(x):\n    # keep only elements whose tens digit equals the tens digit of the first element\n    return [i for i in x if len(str(i)) > 1 and str(i)[-2] == str(x[0])[-2]]\n\n",
    "data": {
      "input": [
        80,
        4,
        19,
        85,
        11,
        85,
        92,
        67,
        88
      ],
      "output": [
        80,
        85,
        85,
        88
      ]
    },
    "demos": [
      {
        "input": [
          93,
          97,
          34,
          74,
          31,
          84,
          68
        ],
        "output": [
          93,
          97
        ]
      },
      {
        "input": [
          31,
          31,
          12,
          17,
          78,
          63,
          37
        ],
        "output": [
          31,
          31,
          37
        ]
      },
      {
        "input": [
          94,
          20,
          61,
          94,
          83,
          101,
          98,
          102,
          71
        ],
        "output": [
          94,
          94,
          98
        ]
      }
    ]
  },
  {
    "id": "c087",
    "difficulty": 105,
    "function": "def c087(x):\n    # swap second and third element\n    x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        21,
        82,
        64,
        66,
        51,
        68
      ],
      "output": [
        21,
        64,
        82,
        66,
        51,
        68
      ]
    },
    "demos": [
      {
        "input": [
          47,
          91,
          7,
          39
        ],
        "output": [
          47,
          7,
          91,
          39
        ]
      },
      {
        "input": [
          19,
          47,
          72,
          70,
          36
        ],
        "output": [
          19,
          72,
          47,
          70,
          36
        ]
      },
      {
        "input": [
          77,
          23,
          65,
          55,
          67,
          80,
          36
        ],
        "output": [
          77,
          65,
          23,
          55,
          67,
          80,
          36
        ]
      }
    ]
  },
  {
    "id": "c013",
    "difficulty": 106,
    "function": "def c013(x):\n    # element 2 through 6\n    return x[2:6]\n\n",
    "data": {
      "input": [
        49,
        83,
        33,
        99,
        64,
        80,
        49,
        20,
        28
      ],
      "output": [
        33,
        99,
        64,
        80
      ]
    },
    "demos": [
      {
        "input": [
          71,
          49,
          22,
          56,
          80,
          22,
          54
        ],
        "output": [
          22,
          56,
          80,
          22
        ]
      },
      {
        "input": [
          65,
          93,
          15,
          18,
          25,
          39,
          5,
          92
        ],
        "output": [
          15,
          18,
          25,
          39
        ]
      },
      {
        "input": [
          28,
          3,
          29,
          8,
          9,
          71,
          31,
          67
        ],
        "output": [
          29,
          8,
          9,
          71
        ]
      }
    ]
  },
  {
    "id": "c069",
    "difficulty": 107,
    "function": "def c069(x):\n    # 9,3,4,0, input, 7,2,9,1\n    return [9,3,4,0] + x + [7,2,9,1]\n\n",
    "data": {
      "input": [
        45,
        18,
        10,
        30,
        30
      ],
      "output": [
        9,
        3,
        4,
        0,
        45,
        18,
        10,
        30,
        30,
        7,
        2,
        9,
        1
      ]
    },
    "demos": [
      {
        "input": [
          21,
          93,
          75,
          29
        ],
        "output": [
          9,
          3,
          4,
          0,
          21,
          93,
          75,
          29,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          12,
          42,
          69,
          41,
          42
        ],
        "output": [
          9,
          3,
          4,
          0,
          12,
          42,
          69,
          41,
          42,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          99,
          92,
          78,
          2
        ],
        "output": [
          9,
          3,
          4,
          0,
          99,
          92,
          78,
          2,
          7,
          2,
          9,
          1
        ]
      }
    ]
  },
  {
    "id": "c117",
    "difficulty": 108,
    "function": "def c117(x):\n    # left rotate by 3\n    return x[3:] + x[:3]\n\n",
    "data": {
      "input": [
        75,
        12,
        79,
        41
      ],
      "output": [
        41,
        75,
        12,
        79
      ]
    },
    "demos": [
      {
        "input": [
          50,
          30,
          32
        ],
        "output": [
          50,
          30,
          32
        ]
      },
      {
        "input": [
          71,
          89,
          92,
          10,
          70
        ],
        "output": [
          10,
          70,
          71,
          89,
          92
        ]
      },
      {
        "input": [
          42,
          25,
          69,
          36,
          65,
          49
        ],
        "output": [
          36,
          65,
          49,
          42,
          25,
          69
        ]
      }
    ]
  },
  {
    "id": "c228",
    "difficulty": 109,
    "function": "def c228(x):\n    # replace each element with the number of occurrences of that element so far\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        43,
        80,
        56,
        43,
        43,
        8
      ],
      "output": [
        1,
        1,
        1,
        2,
        3,
        1
      ]
    },
    "demos": [
      {
        "input": [
          81,
          81,
          81,
          24,
          13
        ],
        "output": [
          1,
          2,
          3,
          1,
          1
        ]
      },
      {
        "input": [
          92,
          92,
          69,
          54,
          98,
          92
        ],
        "output": [
          1,
          2,
          1,
          1,
          1,
          3
        ]
      },
      {
        "input": [
          73,
          34,
          10,
          73,
          10,
          70
        ],
        "output": [
          1,
          1,
          1,
          2,
          2,
          1
        ]
      }
    ]
  },
  {
    "id": "c197",
    "difficulty": 110,
    "function": "def c197(x):\n    # replace each element with the number of occurrences of that element\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in x:\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        63,
        14,
        3,
        14,
        40,
        3
      ],
      "output": [
        1,
        2,
        2,
        2,
        1,
        2
      ]
    },
    "demos": [
      {
        "input": [
          71,
          80,
          68,
          50,
          50,
          69,
          47,
          61
        ],
        "output": [
          1,
          1,
          1,
          2,
          2,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          79,
          43,
          79,
          37,
          79,
          54
        ],
        "output": [
          3,
          1,
          3,
          1,
          3,
          1
        ]
      },
      {
        "input": [
          87,
          25,
          31,
          53,
          46,
          55,
          53,
          29
        ],
        "output": [
          1,
          1,
          1,
          2,
          1,
          1,
          2,
          1
        ]
      }
    ]
  },
  {
    "id": "c065",
    "difficulty": 111,
    "function": "def c065(x):\n    # prepend 9 and append 7\n    return [9] + x + [7]\n\n",
    "data": {
      "input": [
        80,
        93,
        5,
        54,
        83,
        89
      ],
      "output": [
        9,
        80,
        93,
        5,
        54,
        83,
        89,
        7
      ]
    },
    "demos": [
      {
        "input": [
          23,
          37,
          43,
          91,
          37,
          86
        ],
        "output": [
          9,
          23,
          37,
          43,
          91,
          37,
          86,
          7
        ]
      },
      {
        "input": [
          75,
          13,
          86,
          19
        ],
        "output": [
          9,
          75,
          13,
          86,
          19,
          7
        ]
      },
      {
        "input": [
          76,
          44,
          18,
          36,
          4,
          26,
          19
        ],
        "output": [
          9,
          76,
          44,
          18,
          36,
          4,
          26,
          19,
          7
        ]
      }
    ]
  },
  {
    "id": "c156",
    "difficulty": 112,
    "function": "def c156(x):\n    # reverse the input and add each element to its new index\n    x = x[::-1]\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        14,
        1,
        21,
        30,
        46
      ],
      "output": [
        46,
        31,
        23,
        4,
        18
      ]
    },
    "demos": [
      {
        "input": [
          38,
          84,
          94
        ],
        "output": [
          94,
          85,
          40
        ]
      },
      {
        "input": [
          52,
          54,
          74,
          22,
          43
        ],
        "output": [
          43,
          23,
          76,
          57,
          56
        ]
      },
      {
        "input": [
          63,
          97,
          42
        ],
        "output": [
          42,
          98,
          65
        ]
      }
    ]
  },
  {
    "id": "c110",
    "difficulty": 113,
    "function": "def c110(x):\n    # three largest elements in descending order\n    return sorted(x, reverse=True)[:3]\n\n",
    "data": {
      "input": [
        32,
        40,
        39,
        57,
        48,
        96
      ],
      "output": [
        96,
        57,
        48
      ]
    },
    "demos": [
      {
        "input": [
          95,
          17,
          59,
          7,
          89,
          33
        ],
        "output": [
          95,
          89,
          59
        ]
      },
      {
        "input": [
          94,
          29,
          52
        ],
        "output": [
          94,
          52,
          29
        ]
      },
      {
        "input": [
          9,
          64,
          2,
          91
        ],
        "output": [
          91,
          64,
          9
        ]
      }
    ]
  },
  {
    "id": "c233",
    "difficulty": 114,
    "function": "def c233(x):\n    # number of occurrences of each unique element, in order of appearance\n    numbers = []\n    res = []\n    for i in x:\n        if i not in numbers:\n            numbers.append(i)\n            res.append(x.count(i))\n    return res\n\n",
    "data": {
      "input": [
        9,
        9,
        8,
        5,
        4,
        4,
        2
      ],
      "output": [
        2,
        1,
        1,
        2,
        1
      ]
    },
    "demos": [
      {
        "input": [
          7,
          9,
          3,
          8,
          3,
          3,
          0,
          9,
          6
        ],
        "output": [
          1,
          2,
          3,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          0,
          3,
          1,
          3,
          0,
          2,
          1,
          10
        ],
        "output": [
          2,
          2,
          2,
          1,
          1
        ]
      },
      {
        "input": [
          0,
          8,
          3,
          9,
          9,
          0,
          9,
          8
        ],
        "output": [
          2,
          2,
          1,
          3
        ]
      }
    ]
  },
  {
    "id": "c003",
    "difficulty": 115,
    "function": "def c003(x):\n    # remove all but seventh element\n    return [x[6]]\n\n",
    "data": {
      "input": [
        45,
        36,
        76,
        21,
        96,
        91,
        53,
        27
      ],
      "output": [
        53
      ]
    },
    "demos": [
      {
        "input": [
          35,
          65,
          26,
          21,
          94,
          38,
          57,
          41,
          84,
          67
        ],
        "output": [
          57
        ]
      },
      {
        "input": [
          25,
          91,
          15,
          16,
          65,
          80,
          84,
          60,
          15
        ],
        "output": [
          84
        ]
      },
      {
        "input": [
          58,
          52,
          38,
          19,
          11,
          26,
          12,
          61
        ],
        "output": [
          12
        ]
      }
    ]
  },
  {
    "id": "c230",
    "difficulty": 116,
    "function": "def c230(x):\n    # count by 2 from the smallest element to the largest element\n    return list(range(min(x), max(x)+1, 2))\n\n",
    "data": {
      "input": [
        60,
        52,
        59
      ],
      "output": [
        52,
        54,
        56,
        58,
        60
      ]
    },
    "demos": [
      {
        "input": [
          43,
          42,
          30
        ],
        "output": [
          30,
          32,
          34,
          36,
          38,
          40,
          42
        ]
      },
      {
        "input": [
          61,
          61,
          77
        ],
        "output": [
          61,
          63,
          65,
          67,
          69,
          71,
          73,
          75,
          77
        ]
      },
      {
        "input": [
          49,
          45,
          37,
          52
        ],
        "output": [
          37,
          39,
          41,
          43,
          45,
          47,
          49,
          51
        ]
      }
    ]
  },
  {
    "id": "c122",
    "difficulty": 117,
    "function": "def c122(x):\n    # remove all but penultimate element\n    return [x[-2]]\n\n",
    "data": {
      "input": [
        47,
        97,
        4,
        55,
        13,
        6
      ],
      "output": [
        13
      ]
    },
    "demos": [
      {
        "input": [
          29,
          42,
          39,
          99,
          50,
          84
        ],
        "output": [
          50
        ]
      },
      {
        "input": [
          91,
          25,
          31,
          61,
          61,
          94,
          89
        ],
        "output": [
          94
        ]
      },
      {
        "input": [
          22,
          35,
          52,
          55
        ],
        "output": [
          52
        ]
      }
    ]
  },
  {
    "id": "c020",
    "difficulty": 118,
    "function": "def c020(x):\n    # replace the first element with the last element\n    x[0] = x[-1]\n    return x\n\n",
    "data": {
      "input": [
        57,
        23,
        46,
        62,
        4
      ],
      "output": [
        4,
        23,
        46,
        62,
        4
      ]
    },
    "demos": [
      {
        "input": [
          93,
          21,
          21,
          28
        ],
        "output": [
          28,
          21,
          21,
          28
        ]
      },
      {
        "input": [
          90,
          2,
          90,
          79,
          18,
          13,
          93
        ],
        "output": [
          93,
          2,
          90,
          79,
          18,
          13,
          93
        ]
      },
      {
        "input": [
          85,
          3,
          92,
          53,
          74,
          46
        ],
        "output": [
          46,
          3,
          92,
          53,
          74,
          46
        ]
      }
    ]
  },
  {
    "id": "c235",
    "difficulty": 119,
    "function": "def c235(x):\n    # count up and down between elements\n    res = []\n    for i in range(len(x)-1):\n        if x[i] < x[i+1]:\n            res += list(range(x[i], x[i+1]+1))\n        else:\n            res += list(range(x[i], x[i+1]-1, -1))\n    return res\n\n",
    "data": {
      "input": [
        48,
        45,
        48
      ],
      "output": [
        48,
        47,
        46,
        45,
        45,
        46,
        47,
        48
      ]
    },
    "demos": [
      {
        "input": [
          9,
          13,
          14
        ],
        "output": [
          9,
          10,
          11,
          12,
          13,
          13,
          14
        ]
      },
      {
        "input": [
          66,
          65,
          66
        ],
        "output": [
          66,
          65,
          65,
          66
        ]
      },
      {
        "input": [
          95,
          90,
          91
        ],
        "output": [
          95,
          94,
          93,
          92,
          91,
          90,
          90,
          91
        ]
      }
    ]
  },
  {
    "id": "c157",
    "difficulty": 120,
    "function": "def c157(x):\n    # each element followed by 0 if even, 1 if odd\n    res = []\n    for i in x:\n        res.append(i)\n        res.append(i % 2)\n    return res\n\n",
    "data": {
      "input": [
        19,
        71,
        33,
        32,
        7,
        62
      ],
      "output": [
        19,
        1,
        71,
        1,
        33,
        1,
        32,
        0,
        7,
        1,
        62,
        0
      ]
    },
    "demos": [
      {
        "input": [
          45,
          17,
          86,
          73
        ],
        "output": [
          45,
          1,
          17,
          1,
          86,
          0,
          73,
          1
        ]
      },
      {
        "input": [
          47,
          17,
          13,
          21,
          19,
          22
        ],
        "output": [
          47,
          1,
          17,
          1,
          13,
          1,
          21,
          1,
          19,
          1,
          22,
          0
        ]
      },
      {
        "input": [
          60,
          9,
          51,
          96,
          59,
          29,
          45
        ],
        "output": [
          60,
          0,
          9,
          1,
          51,
          1,
          96,
          0,
          59,
          1,
          29,
          1,
          45,
          1
        ]
      }
    ]
  },
  {
    "id": "c185",
    "difficulty": 121,
    "function": "def c185(x):\n    # replace the sublist between the first and last with its sum\n    return x[:1] + [sum(x[1:-1])] + x[-1:]\n\n",
    "data": {
      "input": [
        6,
        18,
        2,
        15
      ],
      "output": [
        6,
        20,
        15
      ]
    },
    "demos": [
      {
        "input": [
          2,
          16,
          5
        ],
        "output": [
          2,
          16,
          5
        ]
      },
      {
        "input": [
          5,
          17,
          12,
          7,
          20,
          11
        ],
        "output": [
          5,
          56,
          11
        ]
      },
      {
        "input": [
          18,
          18,
          2,
          19,
          8
        ],
        "output": [
          18,
          39,
          8
        ]
      }
    ]
  },
  {
    "id": "c213",
    "difficulty": 122,
    "function": "def c213(x):\n    # three smallest elements in ascending order\n    return sorted(x)[:3]\n\n",
    "data": {
      "input": [
        22,
        48,
        28,
        80,
        93,
        70
      ],
      "output": [
        22,
        28,
        48
      ]
    },
    "demos": [
      {
        "input": [
          99,
          11,
          86,
          51,
          85
        ],
        "output": [
          11,
          51,
          85
        ]
      },
      {
        "input": [
          8,
          55,
          39
        ],
        "output": [
          8,
          39,
          55
        ]
      },
      {
        "input": [
          43,
          86,
          38
        ],
        "output": [
          38,
          43,
          86
        ]
      }
    ]
  },
  {
    "id": "c184",
    "difficulty": 123,
    "function": "def c184(x):\n    # keep only odd elements with an even index\n    return [i for i in x if i % 2 == 1 and x.index(i) % 2 == 0]\n\n",
    "data": {
      "input": [
        80,
        7,
        88,
        77,
        47,
        18,
        57
      ],
      "output": [
        47,
        57
      ]
    },
    "demos": [
      {
        "input": [
          99,
          40,
          5,
          66,
          72,
          57,
          53,
          71
        ],
        "output": [
          99,
          5,
          53
        ]
      },
      {
        "input": [
          56,
          81,
          80,
          35,
          68,
          82,
          77,
          49
        ],
        "output": [
          77
        ]
      },
      {
        "input": [
          55,
          15,
          17,
          79,
          47,
          75,
          40
        ],
        "output": [
          55,
          17,
          47
        ]
      }
    ]
  },
  {
    "id": "c155",
    "difficulty": 124,
    "function": "def c155(x):\n    # multiply each element by its index\n    return [i*j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        19,
        28,
        84,
        6
      ],
      "output": [
        0,
        28,
        168,
        18
      ]
    },
    "demos": [
      {
        "input": [
          4,
          9,
          19,
          86,
          53
        ],
        "output": [
          0,
          9,
          38,
          258,
          212
        ]
      },
      {
        "input": [
          78,
          69,
          68
        ],
        "output": [
          0,
          69,
          136
        ]
      },
      {
        "input": [
          89,
          49,
          82
        ],
        "output": [
          0,
          49,
          164
        ]
      }
    ]
  },
  {
    "id": "c082",
    "difficulty": 125,
    "function": "def c082(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        48,
        90,
        36
      ],
      "output": [
        36
      ]
    },
    "demos": [
      {
        "input": [
          93,
          47,
          98,
          10,
          95,
          95,
          14
        ],
        "output": [
          98
        ]
      },
      {
        "input": [
          69,
          50,
          42,
          96
        ],
        "output": [
          42
        ]
      },
      {
        "input": [
          27,
          78,
          8
        ],
        "output": [
          8
        ]
      }
    ]
  },
  {
    "id": "c231",
    "difficulty": 126,
    "function": "def c231(x):\n    # the number of occurrences of each unique element in ascending order\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    return sorted(res.values())\n\n",
    "data": {
      "input": [
        0,
        0,
        9,
        5,
        0,
        0,
        0,
        0
      ],
      "output": [
        1,
        1,
        6
      ]
    },
    "demos": [
      {
        "input": [
          8,
          6,
          7,
          10,
          10,
          2,
          8,
          7,
          7
        ],
        "output": [
          1,
          1,
          2,
          2,
          3
        ]
      },
      {
        "input": [
          4,
          7,
          3,
          9,
          9,
          9,
          5,
          4,
          5,
          9,
          4
        ],
        "output": [
          1,
          1,
          2,
          3,
          4
        ]
      },
      {
        "input": [
          6,
          6,
          10,
          5,
          5,
          5,
          6,
          5,
          10
        ],
        "output": [
          2,
          3,
          4
        ]
      }
    ]
  },
  {
    "id": "c099",
    "difficulty": 127,
    "function": "def c099(x):\n    # remove the lower half of the list\n    median = sorted(x)[len(x)//2]\n    return [i for i in x if i >= median]\n\n",
    "data": {
      "input": [
        72,
        14,
        15,
        81,
        29,
        1,
        86
      ],
      "output": [
        72,
        81,
        29,
        86
      ]
    },
    "demos": [
      {
        "input": [
          67,
          53,
          38,
          24,
          77,
          38
        ],
        "output": [
          67,
          53,
          77
        ]
      },
      {
        "input": [
          64,
          25,
          12,
          10,
          58,
          80,
          81,
          91,
          9
        ],
        "output": [
          64,
          58,
          80,
          81,
          91
        ]
      },
      {
        "input": [
          97,
          22,
          73,
          90,
          7,
          72,
          4,
          44,
          48
        ],
        "output": [
          97,
          73,
          90,
          72,
          48
        ]
      }
    ]
  },
  {
    "id": "c247",
    "difficulty": 128,
    "function": "def c247(x):\n    # elements before the first 0\n    return x[:x.index(0)]\n\n",
    "data": {
      "input": [
        62,
        44,
        0,
        0,
        13,
        72,
        26,
        99,
        0
      ],
      "output": [
        62,
        44
      ]
    },
    "demos": [
      {
        "input": [
          17,
          29,
          0,
          0,
          22,
          95,
          31
        ],
        "output": [
          17,
          29
        ]
      },
      {
        "input": [
          5,
          0,
          11,
          0,
          85,
          0,
          0,
          66
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          59,
          11,
          0,
          0,
          39,
          0,
          27
        ],
        "output": [
          59,
          11
        ]
      }
    ]
  },
  {
    "id": "c008",
    "difficulty": 129,
    "function": "def c008(x):\n    # the first 5 elements\n    return x[:5]\n\n",
    "data": {
      "input": [
        10,
        34,
        16,
        4,
        78
      ],
      "output": [
        10,
        34,
        16,
        4,
        78
      ]
    },
    "demos": [
      {
        "input": [
          39,
          41,
          52,
          44,
          62,
          7,
          10,
          85
        ],
        "output": [
          39,
          41,
          52,
          44,
          62
        ]
      },
      {
        "input": [
          18,
          86,
          64,
          33,
          88,
          80,
          13,
          57
        ],
        "output": [
          18,
          86,
          64,
          33,
          88
        ]
      },
      {
        "input": [
          93,
          2,
          69,
          68,
          19,
          54,
          89
        ],
        "output": [
          93,
          2,
          69,
          68,
          19
        ]
      }
    ]
  },
  {
    "id": "c055",
    "difficulty": 130,
    "function": "def c055(x):\n    # swap x[0], x[2] and x[1], x[3]\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        99,
        9,
        82,
        78,
        5
      ],
      "output": [
        82,
        78,
        99,
        9,
        5
      ]
    },
    "demos": [
      {
        "input": [
          77,
          84,
          60,
          37,
          0
        ],
        "output": [
          60,
          37,
          77,
          84,
          0
        ]
      },
      {
        "input": [
          29,
          74,
          40,
          78
        ],
        "output": [
          40,
          78,
          29,
          74
        ]
      },
      {
        "input": [
          48,
          72,
          31,
          25,
          55
        ],
        "output": [
          31,
          25,
          48,
          72,
          55
        ]
      }
    ]
  },
  {
    "id": "c029",
    "difficulty": 131,
    "function": "def c029(x):\n    # remove the first 2 elements\n    return x[2:]\n\n",
    "data": {
      "input": [
        49,
        79,
        45,
        30,
        4,
        14
      ],
      "output": [
        45,
        30,
        4,
        14
      ]
    },
    "demos": [
      {
        "input": [
          3,
          91,
          95,
          26,
          26,
          8,
          7
        ],
        "output": [
          95,
          26,
          26,
          8,
          7
        ]
      },
      {
        "input": [
          83,
          20,
          26,
          51,
          95
        ],
        "output": [
          26,
          51,
          95
        ]
      },
      {
        "input": [
          1,
          97,
          29,
          25,
          29,
          62
        ],
        "output": [
          29,
          25,
          29,
          62
        ]
      }
    ]
  },
  {
    "id": "c168",
    "difficulty": 132,
    "function": "def c168(x):\n    # count from 1 to 10, skipping the length of the input\n    return [i for i in range(1, 11) if i != len(x)]\n\n",
    "data": {
      "input": [
        64,
        30,
        15,
        8,
        79
      ],
      "output": [
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10
      ]
    },
    "demos": [
      {
        "input": [
          39,
          34,
          72,
          58
        ],
        "output": [
          1,
          2,
          3,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          36,
          93,
          5,
          6,
          19
        ],
        "output": [
          1,
          2,
          3,
          4,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          46,
          92,
          52,
          48,
          0,
          34
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          7,
          8,
          9,
          10
        ]
      }
    ]
  },
  {
    "id": "c009",
    "difficulty": 133,
    "function": "def c009(x):\n    # remove all but the first 3 elements\n    return x[:3]\n\n",
    "data": {
      "input": [
        26,
        88,
        79,
        5
      ],
      "output": [
        26,
        88,
        79
      ]
    },
    "demos": [
      {
        "input": [
          18,
          33,
          42,
          80,
          40,
          84,
          63
        ],
        "output": [
          18,
          33,
          42
        ]
      },
      {
        "input": [
          95,
          33,
          71,
          90,
          60,
          58,
          82
        ],
        "output": [
          95,
          33,
          71
        ]
      },
      {
        "input": [
          43,
          41,
          80,
          67,
          85,
          64,
          20
        ],
        "output": [
          43,
          41,
          80
        ]
      }
    ]
  },
  {
    "id": "c133",
    "difficulty": 134,
    "function": "def c133(x):\n    # remove elements 1 through 4\n    return x[:1] + x[5:]\n\n",
    "data": {
      "input": [
        40,
        76,
        67,
        73,
        73
      ],
      "output": [
        40
      ]
    },
    "demos": [
      {
        "input": [
          40,
          2,
          9,
          20,
          49,
          65,
          83,
          67
        ],
        "output": [
          40,
          65,
          83,
          67
        ]
      },
      {
        "input": [
          2,
          71,
          94,
          62,
          16,
          52,
          16
        ],
        "output": [
          2,
          52,
          16
        ]
      },
      {
        "input": [
          63,
          7,
          11,
          62,
          32,
          52,
          41,
          4
        ],
        "output": [
          63,
          52,
          41,
          4
        ]
      }
    ]
  },
  {
    "id": "c146",
    "difficulty": 135,
    "function": "def c146(x):\n    # absolute difference between each consecutive pair of elements\n    return [abs(x[i] - x[i+1]) for i in range(len(x)-1)]\n\n",
    "data": {
      "input": [
        99,
        57,
        9,
        75,
        26,
        25,
        69,
        34,
        63
      ],
      "output": [
        42,
        48,
        66,
        49,
        1,
        44,
        35,
        29
      ]
    },
    "demos": [
      {
        "input": [
          64,
          41,
          72,
          43,
          84,
          36,
          51
        ],
        "output": [
          23,
          31,
          29,
          41,
          48,
          15
        ]
      },
      {
        "input": [
          8,
          61,
          43,
          91,
          99
        ],
        "output": [
          53,
          18,
          48,
          8
        ]
      },
      {
        "input": [
          79,
          14,
          36,
          89,
          13,
          42,
          46,
          26
        ],
        "output": [
          65,
          22,
          53,
          76,
          29,
          4,
          20
        ]
      }
    ]
  },
  {
    "id": "c004",
    "difficulty": 136,
    "function": "def c004(x):\n    # remove all but element 3\n    return [x[2]]\n\n",
    "data": {
      "input": [
        27,
        19,
        45,
        9
      ],
      "output": [
        45
      ]
    },
    "demos": [
      {
        "input": [
          39,
          68,
          99,
          7,
          21,
          54,
          5
        ],
        "output": [
          99
        ]
      },
      {
        "input": [
          29,
          0,
          29
        ],
        "output": [
          29
        ]
      },
      {
        "input": [
          45,
          19,
          3
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c240",
    "difficulty": 137,
    "function": "def c240(x):\n    # number of elements equal to the input length\n    return [x.count(len(x))]\n\n",
    "data": {
      "input": [
        27,
        4,
        31,
        9
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          71,
          3,
          8,
          96,
          8,
          8,
          92,
          77
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          88,
          21,
          34,
          46,
          48,
          9,
          9,
          9,
          68
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          8,
          11,
          86,
          87,
          21,
          47,
          8,
          8
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c239",
    "difficulty": 138,
    "function": "def c239(x):\n    # number of repetitions in the input\n    res = {}\n    out = 0\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out += 1\n    return [out]\n\n",
    "data": {
      "input": [
        1,
        1,
        2,
        3,
        2,
        8,
        8
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          7,
          10,
          5,
          10,
          9,
          10,
          9,
          2,
          9,
          10
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          10,
          0,
          7,
          1,
          9,
          1,
          8,
          10,
          10
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          4,
          0,
          0,
          0,
          8,
          10,
          10,
          0,
          0
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c246",
    "difficulty": 139,
    "function": "def c246(x):\n    # number of unique elements\n    return [len(set(x))]\n\n",
    "data": {
      "input": [
        2,
        55,
        32,
        27,
        46,
        32,
        11,
        32
      ],
      "output": [
        6
      ]
    },
    "demos": [
      {
        "input": [
          47,
          26,
          94,
          55,
          59,
          94,
          81,
          55,
          59,
          8
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          52,
          69,
          69,
          42,
          52,
          69,
          69,
          5
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          24,
          46,
          68,
          24,
          24,
          68,
          89,
          24,
          29,
          24
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c138",
    "difficulty": 140,
    "function": "def c138(x):\n    # remove all occurrences of the first element\n    return [i for i in x if i != x[0]]\n\n",
    "data": {
      "input": [
        44,
        47,
        6,
        6
      ],
      "output": [
        47,
        6,
        6
      ]
    },
    "demos": [
      {
        "input": [
          46,
          58,
          20,
          22,
          46,
          46,
          48,
          46,
          79
        ],
        "output": [
          58,
          20,
          22,
          48,
          79
        ]
      },
      {
        "input": [
          76,
          27,
          64,
          15,
          15,
          15,
          34
        ],
        "output": [
          27,
          64,
          15,
          15,
          15,
          34
        ]
      },
      {
        "input": [
          92,
          10,
          1,
          63,
          92,
          56,
          39,
          40,
          92
        ],
        "output": [
          10,
          1,
          63,
          56,
          39,
          40
        ]
      }
    ]
  },
  {
    "id": "c018",
    "difficulty": 141,
    "function": "def c018(x):\n    # replace element 1 with 9\n    x[1] = 9\n    return x\n\n",
    "data": {
      "input": [
        99,
        47,
        65,
        68
      ],
      "output": [
        99,
        9,
        65,
        68
      ]
    },
    "demos": [
      {
        "input": [
          25,
          38,
          22,
          60,
          85,
          78,
          27
        ],
        "output": [
          25,
          9,
          22,
          60,
          85,
          78,
          27
        ]
      },
      {
        "input": [
          52,
          10,
          28,
          85,
          28,
          2,
          74
        ],
        "output": [
          52,
          9,
          28,
          85,
          28,
          2,
          74
        ]
      },
      {
        "input": [
          95,
          69,
          12
        ],
        "output": [
          95,
          9,
          12
        ]
      }
    ]
  },
  {
    "id": "c012",
    "difficulty": 142,
    "function": "def c012(x):\n    # remove all but elements 1 through 3\n    return x[1:4]\n\n",
    "data": {
      "input": [
        28,
        50,
        54,
        77,
        36,
        3,
        43
      ],
      "output": [
        50,
        54,
        77
      ]
    },
    "demos": [
      {
        "input": [
          23,
          67,
          39,
          64,
          97
        ],
        "output": [
          67,
          39,
          64
        ]
      },
      {
        "input": [
          10,
          28,
          18,
          82,
          54
        ],
        "output": [
          28,
          18,
          82
        ]
      },
      {
        "input": [
          77,
          53,
          14,
          94,
          95,
          73,
          37
        ],
        "output": [
          53,
          14,
          94
        ]
      }
    ]
  },
  {
    "id": "c232",
    "difficulty": 143,
    "function": "def c232(x):\n    # mean of the list, rounded to the nearest integer\n    return [round(sum(x)/len(x))]\n\n",
    "data": {
      "input": [
        57,
        76,
        78
      ],
      "output": [
        70
      ]
    },
    "demos": [
      {
        "input": [
          98,
          34,
          86,
          30
        ],
        "output": [
          62
        ]
      },
      {
        "input": [
          17,
          90,
          3,
          1,
          47,
          41
        ],
        "output": [
          33
        ]
      },
      {
        "input": [
          46,
          47,
          48,
          61,
          23,
          22
        ],
        "output": [
          41
        ]
      }
    ]
  },
  {
    "id": "c094",
    "difficulty": 144,
    "function": "def c094(x):\n    # swap 0,2 and 1,3\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        37,
        61,
        10,
        69,
        27,
        76,
        99
      ],
      "output": [
        10,
        69,
        37,
        61,
        27,
        76,
        99
      ]
    },
    "demos": [
      {
        "input": [
          10,
          46,
          34,
          46,
          0
        ],
        "output": [
          34,
          46,
          10,
          46,
          0
        ]
      },
      {
        "input": [
          47,
          61,
          29,
          26,
          1,
          68
        ],
        "output": [
          29,
          26,
          47,
          61,
          1,
          68
        ]
      },
      {
        "input": [
          87,
          62,
          36,
          84,
          49,
          86,
          19
        ],
        "output": [
          36,
          84,
          87,
          62,
          49,
          86,
          19
        ]
      }
    ]
  },
  {
    "id": "c086",
    "difficulty": 145,
    "function": "def c086(x):\n    # swap elements 0 and 3\n    x[0], x[3] = x[3], x[0]\n    return x\n\n",
    "data": {
      "input": [
        23,
        25,
        87,
        64,
        98
      ],
      "output": [
        64,
        25,
        87,
        23,
        98
      ]
    },
    "demos": [
      {
        "input": [
          77,
          70,
          92,
          47,
          39,
          25,
          99
        ],
        "output": [
          47,
          70,
          92,
          77,
          39,
          25,
          99
        ]
      },
      {
        "input": [
          49,
          44,
          79,
          18,
          69,
          64
        ],
        "output": [
          18,
          44,
          79,
          49,
          69,
          64
        ]
      },
      {
        "input": [
          72,
          72,
          87,
          91,
          8,
          27
        ],
        "output": [
          91,
          72,
          87,
          72,
          8,
          27
        ]
      }
    ]
  },
  {
    "id": "c193",
    "difficulty": 146,
    "function": "def c193(x):\n    # remove the smallest element and the largest element, output in ascending order\n    return sorted(x[1:-1])\n\n",
    "data": {
      "input": [
        87,
        65,
        99,
        45,
        60,
        59,
        27
      ],
      "output": [
        45,
        59,
        60,
        65,
        99
      ]
    },
    "demos": [
      {
        "input": [
          12,
          9,
          26,
          80,
          52,
          54,
          41
        ],
        "output": [
          9,
          26,
          52,
          54,
          80
        ]
      },
      {
        "input": [
          13,
          97,
          48,
          59,
          97
        ],
        "output": [
          48,
          59,
          97
        ]
      },
      {
        "input": [
          12,
          82,
          41,
          71,
          36,
          58,
          72
        ],
        "output": [
          36,
          41,
          58,
          71,
          82
        ]
      }
    ]
  },
  {
    "id": "c056",
    "difficulty": 147,
    "function": "def c056(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        97,
        47,
        11,
        85,
        99,
        20
      ],
      "output": [
        97,
        47,
        85,
        99,
        20
      ]
    },
    "demos": [
      {
        "input": [
          67,
          51,
          55,
          1,
          55,
          36,
          77
        ],
        "output": [
          67,
          51,
          1,
          55,
          36,
          77
        ]
      },
      {
        "input": [
          0,
          74,
          89,
          90,
          17,
          76,
          25
        ],
        "output": [
          0,
          74,
          90,
          17,
          76,
          25
        ]
      },
      {
        "input": [
          71,
          50,
          3,
          66,
          26,
          8
        ],
        "output": [
          71,
          50,
          66,
          26,
          8
        ]
      }
    ]
  },
  {
    "id": "c028",
    "difficulty": 148,
    "function": "def c028(x):\n    # remove element 1 if element 0 > element 1, else remove element 2\n    if x[0] > x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        5,
        36,
        30,
        27,
        80
      ],
      "output": [
        5,
        36,
        27,
        80
      ]
    },
    "demos": [
      {
        "input": [
          5,
          77,
          74,
          57,
          92,
          39,
          25
        ],
        "output": [
          5,
          77,
          57,
          92,
          39,
          25
        ]
      },
      {
        "input": [
          81,
          73,
          78,
          74
        ],
        "output": [
          81,
          78,
          74
        ]
      },
      {
        "input": [
          4,
          63,
          33,
          77,
          29
        ],
        "output": [
          4,
          63,
          77,
          29
        ]
      }
    ]
  },
  {
    "id": "c220",
    "difficulty": 149,
    "function": "def c220(x):\n    # if input length is even, double each element, else triple each element\n    if len(x) % 2 == 0:\n        return [i*2 for i in x]\n    else:\n        return [i*3 for i in x]\n\n",
    "data": {
      "input": [
        14,
        1,
        56,
        80,
        76,
        59
      ],
      "output": [
        28,
        2,
        112,
        160,
        152,
        118
      ]
    },
    "demos": [
      {
        "input": [
          33,
          24,
          30,
          8
        ],
        "output": [
          66,
          48,
          60,
          16
        ]
      },
      {
        "input": [
          87,
          23,
          88,
          88,
          11
        ],
        "output": [
          261,
          69,
          264,
          264,
          33
        ]
      },
      {
        "input": [
          29,
          44,
          43,
          81,
          11,
          88,
          98
        ],
        "output": [
          87,
          132,
          129,
          243,
          33,
          264,
          294
        ]
      }
    ]
  },
  {
    "id": "c241",
    "difficulty": 150,
    "function": "def c241(x):\n    # number of even elements\n    return [len([i for i in x if i % 2 == 0])]\n\n",
    "data": {
      "input": [
        7,
        43,
        77,
        52
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          27,
          66,
          65,
          48
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          65,
          56,
          50,
          56,
          53
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          92,
          44,
          74,
          26,
          8
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c060",
    "difficulty": 151,
    "function": "def c060(x):\n    # element 2,1,0,3,4,6 remove the rest\n    return [x[2], x[1], x[0], x[3], x[4], x[6]]\n\n",
    "data": {
      "input": [
        94,
        17,
        32,
        48,
        97,
        18,
        24,
        95,
        27
      ],
      "output": [
        32,
        17,
        94,
        48,
        97,
        24
      ]
    },
    "demos": [
      {
        "input": [
          60,
          72,
          26,
          35,
          62,
          74,
          85,
          48,
          80
        ],
        "output": [
          26,
          72,
          60,
          35,
          62,
          85
        ]
      },
      {
        "input": [
          91,
          14,
          82,
          30,
          13,
          14,
          27,
          86,
          28
        ],
        "output": [
          82,
          14,
          91,
          30,
          13,
          27
        ]
      },
      {
        "input": [
          60,
          85,
          2,
          77,
          3,
          6,
          16,
          81,
          57,
          99
        ],
        "output": [
          2,
          85,
          60,
          77,
          3,
          16
        ]
      }
    ]
  },
  {
    "id": "c169",
    "difficulty": 152,
    "function": "def c169(x):\n    # second largest element\n    return [sorted(x)[-2]]\n\n",
    "data": {
      "input": [
        77,
        82,
        85,
        36,
        63,
        27
      ],
      "output": [
        82
      ]
    },
    "demos": [
      {
        "input": [
          59,
          95,
          9,
          65
        ],
        "output": [
          65
        ]
      },
      {
        "input": [
          88,
          56,
          93,
          96,
          8,
          79
        ],
        "output": [
          93
        ]
      },
      {
        "input": [
          84,
          1,
          38,
          79,
          78,
          35
        ],
        "output": [
          79
        ]
      }
    ]
  },
  {
    "id": "c057",
    "difficulty": 153,
    "function": "def c057(x):\n    # insert a 4 as element 2\n    return x[:2] + [4] + x[2:]\n\n",
    "data": {
      "input": [
        3,
        60,
        75,
        87,
        97,
        75
      ],
      "output": [
        3,
        60,
        4,
        75,
        87,
        97,
        75
      ]
    },
    "demos": [
      {
        "input": [
          63,
          19,
          8,
          37,
          4
        ],
        "output": [
          63,
          19,
          4,
          8,
          37,
          4
        ]
      },
      {
        "input": [
          79,
          39,
          74,
          66
        ],
        "output": [
          79,
          39,
          4,
          74,
          66
        ]
      },
      {
        "input": [
          24,
          22,
          33,
          51
        ],
        "output": [
          24,
          22,
          4,
          33,
          51
        ]
      }
    ]
  },
  {
    "id": "c150",
    "difficulty": 154,
    "function": "def c150(x):\n    # count from first element to each element if the element is greater than the first element\n    res = []\n    for i in x:\n        if i > x[0]:\n            res += list(range(x[0], i+1))\n        else:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        13,
        1,
        18
      ],
      "output": [
        13,
        1,
        13,
        14,
        15,
        16,
        17,
        18
      ]
    },
    "demos": [
      {
        "input": [
          25,
          30,
          20,
          23
        ],
        "output": [
          25,
          25,
          26,
          27,
          28,
          29,
          30,
          20,
          23
        ]
      },
      {
        "input": [
          83,
          19,
          7,
          32,
          9,
          86
        ],
        "output": [
          83,
          19,
          7,
          32,
          9,
          83,
          84,
          85,
          86
        ]
      },
      {
        "input": [
          37,
          20,
          47,
          8,
          5
        ],
        "output": [
          37,
          20,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          8,
          5
        ]
      }
    ]
  },
  {
    "id": "c033",
    "difficulty": 155,
    "function": "def c033(x):\n    # swap element 0 and 2\n    x[0], x[2] = x[2], x[0]\n    return x\n\n",
    "data": {
      "input": [
        65,
        91,
        98,
        30
      ],
      "output": [
        98,
        91,
        65,
        30
      ]
    },
    "demos": [
      {
        "input": [
          94,
          26,
          75,
          47,
          6,
          64,
          43
        ],
        "output": [
          75,
          26,
          94,
          47,
          6,
          64,
          43
        ]
      },
      {
        "input": [
          28,
          66,
          56,
          68,
          88,
          90,
          0
        ],
        "output": [
          56,
          66,
          28,
          68,
          88,
          90,
          0
        ]
      },
      {
        "input": [
          60,
          16,
          36,
          11,
          35,
          70
        ],
        "output": [
          36,
          16,
          60,
          11,
          35,
          70
        ]
      }
    ]
  },
  {
    "id": "c218",
    "difficulty": 156,
    "function": "def c218(x):\n    # keep only second element and following equal to the first element\n    return [x[1]] + [i for i in x[2:] if i == x[0]]\n\n",
    "data": {
      "input": [
        5,
        91,
        53,
        74,
        25,
        13,
        5,
        2
      ],
      "output": [
        91,
        5
      ]
    },
    "demos": [
      {
        "input": [
          28,
          62,
          99,
          28,
          79,
          10,
          28,
          70,
          8,
          26
        ],
        "output": [
          62,
          28,
          28
        ]
      },
      {
        "input": [
          14,
          14,
          24,
          31,
          61,
          72,
          39
        ],
        "output": [
          14
        ]
      },
      {
        "input": [
          52,
          58,
          40,
          84,
          85,
          5,
          52,
          44,
          48,
          52
        ],
        "output": [
          58,
          52,
          52
        ]
      }
    ]
  },
  {
    "id": "c136",
    "difficulty": 158,
    "function": "def c136(x):\n    # remove the first occurrence of the largest element, keep the rest\n    x.remove(max(x))\n    return x\n\n",
    "data": {
      "input": [
        57,
        41,
        78,
        19
      ],
      "output": [
        57,
        41,
        19
      ]
    },
    "demos": [
      {
        "input": [
          68,
          32,
          82,
          29,
          21
        ],
        "output": [
          68,
          32,
          29,
          21
        ]
      },
      {
        "input": [
          25,
          12,
          39,
          86,
          95,
          96,
          8
        ],
        "output": [
          25,
          12,
          39,
          86,
          95,
          8
        ]
      },
      {
        "input": [
          83,
          83,
          21,
          33,
          43,
          12
        ],
        "output": [
          83,
          21,
          33,
          43,
          12
        ]
      }
    ]
  },
  {
    "id": "c083",
    "difficulty": 159,
    "function": "def c083(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        34,
        10,
        17,
        59,
        99,
        43,
        27,
        23
      ],
      "output": [
        27
      ]
    },
    "demos": [
      {
        "input": [
          8,
          62,
          99,
          1,
          35,
          30,
          19,
          85,
          90
        ],
        "output": [
          19
        ]
      },
      {
        "input": [
          59,
          53,
          7,
          79,
          52,
          1,
          78
        ],
        "output": [
          78
        ]
      },
      {
        "input": [
          60,
          71,
          27,
          24,
          49,
          59,
          78
        ],
        "output": [
          78
        ]
      }
    ]
  },
  {
    "id": "c019",
    "difficulty": 160,
    "function": "def c019(x):\n    # replace element 5 with a 3 if there is an element 5\n    if len(x) > 5:\n        x[4] = 3\n    return x\n\n",
    "data": {
      "input": [
        99,
        72,
        78
      ],
      "output": [
        99,
        72,
        78
      ]
    },
    "demos": [
      {
        "input": [
          45,
          3,
          18,
          5,
          65,
          38
        ],
        "output": [
          45,
          3,
          18,
          5,
          3,
          38
        ]
      },
      {
        "input": [
          41,
          0,
          49,
          17,
          50
        ],
        "output": [
          41,
          0,
          49,
          17,
          50
        ]
      },
      {
        "input": [
          57,
          52,
          74,
          57
        ],
        "output": [
          57,
          52,
          74,
          57
        ]
      }
    ]
  },
  {
    "id": "c203",
    "difficulty": 161,
    "function": "def c203(x):\n    # the first M positive multiples of the smallest element, M is the length of the input\n    return [min(x)*i for i in range(1, len(x)+1)]\n\n",
    "data": {
      "input": [
        6,
        11,
        12,
        20,
        3
      ],
      "output": [
        3,
        6,
        9,
        12,
        15
      ]
    },
    "demos": [
      {
        "input": [
          20,
          15,
          2,
          23,
          5,
          19,
          17
        ],
        "output": [
          2,
          4,
          6,
          8,
          10,
          12,
          14
        ]
      },
      {
        "input": [
          23,
          1,
          15,
          9,
          21
        ],
        "output": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      {
        "input": [
          6,
          22,
          21,
          10,
          15,
          19,
          9
        ],
        "output": [
          6,
          12,
          18,
          24,
          30,
          36,
          42
        ]
      }
    ]
  },
  {
    "id": "c115",
    "difficulty": 162,
    "function": "def c115(x):\n    # the unique elements, prepended and appended by their sum\n    res = list(set(x))\n    return [sum(res)] + res + [sum(res)]\n\n",
    "data": {
      "input": [
        12,
        20,
        0,
        7
      ],
      "output": [
        39,
        0,
        12,
        20,
        7,
        39
      ]
    },
    "demos": [
      {
        "input": [
          6,
          6,
          2,
          23,
          6,
          20,
          8,
          17,
          4
        ],
        "output": [
          80,
          2,
          4,
          6,
          8,
          17,
          20,
          23,
          80
        ]
      },
      {
        "input": [
          0,
          10,
          22,
          10,
          17,
          10,
          5
        ],
        "output": [
          54,
          0,
          5,
          10,
          17,
          22,
          54
        ]
      },
      {
        "input": [
          25,
          15,
          15,
          25,
          18,
          27,
          22
        ],
        "output": [
          107,
          15,
          18,
          22,
          25,
          27,
          107
        ]
      }
    ]
  },
  {
    "id": "c207",
    "difficulty": 163,
    "function": "def c207(x):\n    # element-wise sum of the input and the reverse of the input\n    return [i+j for i, j in zip(x, x[::-1])]\n\n",
    "data": {
      "input": [
        9,
        45,
        10,
        25,
        35,
        45
      ],
      "output": [
        54,
        80,
        35,
        35,
        80,
        54
      ]
    },
    "demos": [
      {
        "input": [
          3,
          1,
          44,
          15,
          47
        ],
        "output": [
          50,
          16,
          88,
          16,
          50
        ]
      },
      {
        "input": [
          46,
          48,
          42,
          26,
          46
        ],
        "output": [
          92,
          74,
          84,
          74,
          92
        ]
      },
      {
        "input": [
          45,
          31,
          15,
          32,
          7,
          18
        ],
        "output": [
          63,
          38,
          47,
          47,
          38,
          63
        ]
      }
    ]
  },
  {
    "id": "c088",
    "difficulty": 164,
    "function": "def c088(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        68,
        43,
        43,
        46,
        17,
        1
      ],
      "output": [
        46,
        43,
        43,
        68,
        17,
        1
      ]
    },
    "demos": [
      {
        "input": [
          14,
          65,
          65,
          4,
          69
        ],
        "output": [
          4,
          65,
          65,
          14,
          69
        ]
      },
      {
        "input": [
          30,
          5,
          48,
          12,
          16
        ],
        "output": [
          30,
          48,
          5,
          12,
          16
        ]
      },
      {
        "input": [
          63,
          41,
          87,
          80,
          29,
          73,
          57
        ],
        "output": [
          63,
          87,
          41,
          80,
          29,
          73,
          57
        ]
      }
    ]
  },
  {
    "id": "c040",
    "difficulty": 165,
    "function": "def c040(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        16,
        20,
        29,
        20,
        9,
        22,
        8,
        9
      ],
      "output": [
        16,
        20,
        29,
        20,
        9,
        22,
        8,
        9,
        9
      ]
    },
    "demos": [
      {
        "input": [
          26,
          15,
          11,
          11,
          14,
          19,
          4
        ],
        "output": [
          26,
          15,
          11,
          11,
          14,
          19,
          4
        ]
      },
      {
        "input": [
          20,
          6,
          9,
          9,
          17,
          10,
          28
        ],
        "output": [
          20,
          6,
          9,
          9,
          17,
          10,
          28,
          9
        ]
      },
      {
        "input": [
          25,
          8,
          3,
          20,
          20
        ],
        "output": [
          25,
          8,
          3,
          20,
          20,
          3
        ]
      }
    ]
  },
  {
    "id": "c085",
    "difficulty": 166,
    "function": "def c085(x):\n    # remove all but element N, N=first element\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        6,
        46,
        14,
        39,
        25,
        21,
        14
      ],
      "output": [
        14
      ]
    },
    "demos": [
      {
        "input": [
          2,
          28,
          4,
          7
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          6,
          18,
          14,
          25,
          10,
          28,
          19
        ],
        "output": [
          19
        ]
      },
      {
        "input": [
          0,
          21,
          5,
          15
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c111",
    "difficulty": 167,
    "function": "def c111(x):\n    # repeat the largest element N times, where N is the smallest element\n    return [max(x)] * min(x)\n\n",
    "data": {
      "input": [
        30,
        6,
        2,
        8,
        2
      ],
      "output": [
        30,
        30
      ]
    },
    "demos": [
      {
        "input": [
          14,
          24,
          6,
          9,
          23
        ],
        "output": [
          24,
          24,
          24,
          24,
          24,
          24
        ]
      },
      {
        "input": [
          12,
          13,
          6,
          3,
          15,
          26
        ],
        "output": [
          26,
          26,
          26
        ]
      },
      {
        "input": [
          5,
          10,
          14,
          8,
          3,
          27,
          1
        ],
        "output": [
          27
        ]
      }
    ]
  },
  {
    "id": "c073",
    "difficulty": 168,
    "function": "def c073(x):\n    # add the index to every element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        23,
        50,
        26,
        40,
        28,
        7
      ],
      "output": [
        23,
        51,
        28,
        43,
        32,
        12
      ]
    },
    "demos": [
      {
        "input": [
          5,
          9,
          34,
          24,
          32,
          25
        ],
        "output": [
          5,
          10,
          36,
          27,
          36,
          30
        ]
      },
      {
        "input": [
          23,
          30,
          3,
          22
        ],
        "output": [
          23,
          31,
          5,
          25
        ]
      },
      {
        "input": [
          6,
          35,
          36,
          31,
          14,
          49
        ],
        "output": [
          6,
          36,
          38,
          34,
          18,
          54
        ]
      }
    ]
  },
  {
    "id": "c027",
    "difficulty": 169,
    "function": "def c027(x):\n    # remove element 1 if element 0 = element 1, else remove element 2\n    if x[0] == x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        28,
        96,
        57,
        98,
        79,
        18
      ],
      "output": [
        28,
        96,
        98,
        79,
        18
      ]
    },
    "demos": [
      {
        "input": [
          48,
          48,
          71,
          80,
          34,
          8
        ],
        "output": [
          48,
          71,
          80,
          34,
          8
        ]
      },
      {
        "input": [
          12,
          75,
          67,
          82,
          40
        ],
        "output": [
          12,
          75,
          82,
          40
        ]
      },
      {
        "input": [
          12,
          12,
          94,
          71,
          82
        ],
        "output": [
          12,
          94,
          71,
          82
        ]
      }
    ]
  },
  {
    "id": "c234",
    "difficulty": 170,
    "function": "def c234(x):\n    # repetitions in order of first appearance\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out.append(i)\n    return out\n\n",
    "data": {
      "input": [
        90,
        52,
        37,
        52,
        68,
        52,
        99,
        52,
        0
      ],
      "output": [
        52
      ]
    },
    "demos": [
      {
        "input": [
          35,
          35,
          12,
          53,
          7,
          53,
          97,
          12,
          28
        ],
        "output": [
          35,
          12,
          53
        ]
      },
      {
        "input": [
          27,
          95,
          27,
          95,
          64,
          44,
          38,
          27
        ],
        "output": [
          27,
          95
        ]
      },
      {
        "input": [
          61,
          32,
          87,
          32,
          65,
          3,
          74,
          74,
          45
        ],
        "output": [
          32,
          74
        ]
      }
    ]
  },
  {
    "id": "c165",
    "difficulty": 171,
    "function": "def c165(x):\n    # reverse the input and keep only even elements\n    return [i for i in x[::-1] if i % 2 == 0]\n\n",
    "data": {
      "input": [
        20,
        47,
        32,
        96,
        69,
        78,
        80
      ],
      "output": [
        80,
        78,
        96,
        32,
        20
      ]
    },
    "demos": [
      {
        "input": [
          14,
          93,
          41,
          77,
          55,
          7,
          87
        ],
        "output": [
          14
        ]
      },
      {
        "input": [
          36,
          53,
          6,
          53,
          91,
          28,
          75,
          88
        ],
        "output": [
          88,
          28,
          6,
          36
        ]
      },
      {
        "input": [
          25,
          44,
          92,
          65,
          21,
          25,
          51
        ],
        "output": [
          92,
          44
        ]
      }
    ]
  },
  {
    "id": "c191",
    "difficulty": 172,
    "function": "def c191(x):\n    # repeat each element N times, where N is its tens digit\n    out = []\n    for i in x:\n        if len(str(i)) > 1:\n            out += [i] * int(str(i)[-2])\n    return out\n\n",
    "data": {
      "input": [
        23,
        40,
        3,
        4,
        33,
        1
      ],
      "output": [
        23,
        23,
        40,
        40,
        40,
        40,
        33,
        33,
        33
      ]
    },
    "demos": [
      {
        "input": [
          39,
          29,
          40,
          18
        ],
        "output": [
          39,
          39,
          39,
          29,
          29,
          40,
          40,
          40,
          40,
          18
        ]
      },
      {
        "input": [
          18,
          18,
          35,
          37,
          26
        ],
        "output": [
          18,
          18,
          35,
          35,
          35,
          37,
          37,
          37,
          26,
          26
        ]
      },
      {
        "input": [
          16,
          40,
          12,
          27,
          27
        ],
        "output": [
          16,
          40,
          40,
          40,
          40,
          12,
          27,
          27,
          27,
          27
        ]
      }
    ]
  },
  {
    "id": "c026",
    "difficulty": 173,
    "function": "def c026(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        11,
        7,
        16,
        89,
        31
      ],
      "output": [
        11,
        7,
        89,
        31
      ]
    },
    "demos": [
      {
        "input": [
          43,
          5,
          30,
          62,
          40,
          12,
          31
        ],
        "output": [
          43,
          5,
          62,
          40,
          12,
          31
        ]
      },
      {
        "input": [
          16,
          75,
          90,
          60
        ],
        "output": [
          16,
          75,
          60
        ]
      },
      {
        "input": [
          48,
          98,
          27,
          2,
          97,
          39
        ],
        "output": [
          48,
          98,
          2,
          97,
          39
        ]
      }
    ]
  },
  {
    "id": "c059",
    "difficulty": 174,
    "function": "def c059(x):\n    # swap element 2 and element 5\n    x[2], x[5] = x[5], x[2]\n    return x\n\n",
    "data": {
      "input": [
        50,
        27,
        30,
        76,
        70,
        9,
        98,
        52
      ],
      "output": [
        50,
        27,
        9,
        76,
        70,
        30,
        98,
        52
      ]
    },
    "demos": [
      {
        "input": [
          83,
          45,
          20,
          8,
          41,
          42,
          44
        ],
        "output": [
          83,
          45,
          42,
          8,
          41,
          20,
          44
        ]
      },
      {
        "input": [
          55,
          0,
          41,
          50,
          42,
          46,
          24,
          9
        ],
        "output": [
          55,
          0,
          46,
          50,
          42,
          41,
          24,
          9
        ]
      },
      {
        "input": [
          10,
          6,
          57,
          4,
          18,
          22,
          27,
          64
        ],
        "output": [
          10,
          6,
          22,
          4,
          18,
          57,
          27,
          64
        ]
      }
    ]
  },
  {
    "id": "c074",
    "difficulty": 175,
    "function": "def c074(x):\n    # remove every element whose value < 8\n    return [i for i in x if i >= 8]\n\n",
    "data": {
      "input": [
        23,
        15,
        17,
        8,
        5
      ],
      "output": [
        23,
        15,
        17,
        8
      ]
    },
    "demos": [
      {
        "input": [
          21,
          28,
          7,
          23,
          20,
          30
        ],
        "output": [
          21,
          28,
          23,
          20,
          30
        ]
      },
      {
        "input": [
          7,
          1,
          21,
          16,
          21,
          9,
          14
        ],
        "output": [
          21,
          16,
          21,
          9,
          14
        ]
      },
      {
        "input": [
          10,
          36,
          16,
          27,
          16,
          8,
          14,
          26
        ],
        "output": [
          10,
          36,
          16,
          27,
          16,
          8,
          14,
          26
        ]
      }
    ]
  },
  {
    "id": "c173",
    "difficulty": 176,
    "function": "def c173(x):\n    # replace element N with the largest element in element 0 through N\n    for i in range(len(x)):\n        x[i] = max(x[:i+1])\n    return x\n\n",
    "data": {
      "input": [
        33,
        2,
        25,
        24,
        81,
        58
      ],
      "output": [
        33,
        33,
        33,
        33,
        81,
        81
      ]
    },
    "demos": [
      {
        "input": [
          0,
          90,
          57,
          97,
          18,
          46
        ],
        "output": [
          0,
          90,
          90,
          97,
          97,
          97
        ]
      },
      {
        "input": [
          18,
          97,
          68,
          85,
          47
        ],
        "output": [
          18,
          97,
          97,
          97,
          97
        ]
      },
      {
        "input": [
          93,
          67,
          10,
          68,
          86,
          26,
          67,
          16
        ],
        "output": [
          93,
          93,
          93,
          93,
          93,
          93,
          93,
          93
        ]
      }
    ]
  },
  {
    "id": "c175",
    "difficulty": 177,
    "function": "def c175(x):\n    # keep only elements larger than any preceding element\n    res = [x[0]]\n    for i in x[1:]:\n        if i > res[-1]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        49,
        45,
        82,
        60,
        73,
        54,
        82
      ],
      "output": [
        49,
        82
      ]
    },
    "demos": [
      {
        "input": [
          5,
          10,
          25,
          57,
          2,
          37,
          82,
          29
        ],
        "output": [
          5,
          10,
          25,
          57,
          82
        ]
      },
      {
        "input": [
          61,
          48,
          66,
          99,
          7
        ],
        "output": [
          61,
          66,
          99
        ]
      },
      {
        "input": [
          46,
          24,
          88,
          10,
          68,
          64,
          84,
          24
        ],
        "output": [
          46,
          88
        ]
      }
    ]
  },
  {
    "id": "c204",
    "difficulty": 178,
    "function": "def c204(x):\n    # keep only elements followed by 0\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] == 0:\n            res.append(x[i])\n    return res\n\n",
    "data": {
      "input": [
        0,
        28,
        3,
        7,
        30,
        0,
        20
      ],
      "output": [
        30
      ]
    },
    "demos": [
      {
        "input": [
          29,
          26,
          29,
          3,
          28,
          18,
          24,
          0
        ],
        "output": [
          24
        ]
      },
      {
        "input": [
          0,
          19,
          2,
          23,
          0,
          13,
          27,
          0,
          0,
          0
        ],
        "output": [
          23,
          27,
          0,
          0
        ]
      },
      {
        "input": [
          23,
          21,
          21,
          0,
          27,
          13,
          3,
          0
        ],
        "output": [
          21,
          3
        ]
      }
    ]
  },
  {
    "id": "c031",
    "difficulty": 179,
    "function": "def c031(x):\n    # remove whichever are equal, the first 2 elements or the last 2 elements\n    if x[0] == x[1]:\n        return x[2:]\n    elif x[-1] == x[-2]:\n        return x[:-2]\n    return x\n\n",
    "data": {
      "input": [
        20,
        23,
        96,
        99,
        62,
        28,
        57
      ],
      "output": [
        20,
        23,
        96,
        99,
        62,
        28,
        57
      ]
    },
    "demos": [
      {
        "input": [
          14,
          14,
          90,
          1,
          82,
          62
        ],
        "output": [
          90,
          1,
          82,
          62
        ]
      },
      {
        "input": [
          64,
          15,
          97,
          42,
          18,
          47,
          68,
          68
        ],
        "output": [
          64,
          15,
          97,
          42,
          18,
          47
        ]
      },
      {
        "input": [
          77,
          8,
          81,
          22,
          86,
          9
        ],
        "output": [
          77,
          8,
          81,
          22,
          86,
          9
        ]
      }
    ]
  },
  {
    "id": "c236",
    "difficulty": 180,
    "function": "def c236(x):\n    # even elements divided by 2\n    return [i//2 for i in x if i % 2 == 0]\n\n",
    "data": {
      "input": [
        71,
        51,
        87,
        75,
        94,
        46,
        48,
        32,
        83,
        76
      ],
      "output": [
        47,
        23,
        24,
        16,
        38
      ]
    },
    "demos": [
      {
        "input": [
          0,
          60,
          98,
          62,
          57,
          13
        ],
        "output": [
          0,
          30,
          49,
          31
        ]
      },
      {
        "input": [
          17,
          6,
          50,
          60,
          89,
          38
        ],
        "output": [
          3,
          25,
          30,
          19
        ]
      },
      {
        "input": [
          32,
          35,
          24,
          22,
          54,
          84,
          58,
          81,
          33,
          25
        ],
        "output": [
          16,
          12,
          11,
          27,
          42,
          29
        ]
      }
    ]
  },
  {
    "id": "c054",
    "difficulty": 181,
    "function": "def c054(x):\n    # replace element 0 and 1 with element 2\n    x[0] = x[2]\n    x[1] = x[2]\n    return x\n\n",
    "data": {
      "input": [
        19,
        52,
        13,
        23,
        76
      ],
      "output": [
        13,
        13,
        13,
        23,
        76
      ]
    },
    "demos": [
      {
        "input": [
          36,
          57,
          67,
          31,
          49
        ],
        "output": [
          67,
          67,
          67,
          31,
          49
        ]
      },
      {
        "input": [
          8,
          54,
          28,
          74,
          61
        ],
        "output": [
          28,
          28,
          28,
          74,
          61
        ]
      },
      {
        "input": [
          2,
          92,
          35,
          17,
          69
        ],
        "output": [
          35,
          35,
          35,
          17,
          69
        ]
      }
    ]
  },
  {
    "id": "c227",
    "difficulty": 182,
    "function": "def c227(x):\n    # interleave the input and reversed input, keep only unique elements in order of appearance\n    res = []\n    mid = len(x) // 2\n    for i in range(mid):\n        if x[i] not in res:\n            res.append(x[i])\n        if x[-i-1] not in res:\n            res.append(x[-i-1])\n    if len(x) % 2 == 1 and x[mid] not in res:\n        res.append(x[mid])\n    return res\n\n",
    "data": {
      "input": [
        0,
        15,
        0,
        53,
        5,
        30,
        42,
        0,
        50
      ],
      "output": [
        0,
        50,
        15,
        42,
        53,
        30,
        5
      ]
    },
    "demos": [
      {
        "input": [
          62,
          22,
          3,
          32,
          28
        ],
        "output": [
          62,
          28,
          22,
          32,
          3
        ]
      },
      {
        "input": [
          18,
          86,
          18,
          5,
          47,
          5
        ],
        "output": [
          18,
          5,
          86,
          47
        ]
      },
      {
        "input": [
          69,
          76,
          45,
          85,
          80,
          74,
          0,
          22
        ],
        "output": [
          69,
          22,
          76,
          0,
          45,
          74,
          85,
          80
        ]
      }
    ]
  },
  {
    "id": "c024",
    "difficulty": 183,
    "function": "def c024(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        3,
        0,
        13,
        20,
        14,
        4,
        18
      ],
      "output": [
        3,
        5,
        0,
        13,
        20,
        14,
        4,
        18
      ]
    },
    "demos": [
      {
        "input": [
          3,
          1,
          9,
          15,
          10
        ],
        "output": [
          3,
          5,
          1,
          9,
          15,
          10
        ]
      },
      {
        "input": [
          16,
          12,
          0,
          15
        ],
        "output": [
          16,
          8,
          12,
          0,
          15
        ]
      },
      {
        "input": [
          12,
          16,
          16,
          15,
          16,
          9,
          12,
          20
        ],
        "output": [
          12,
          8,
          16,
          16,
          15,
          16,
          9,
          12,
          20
        ]
      }
    ]
  },
  {
    "id": "c200",
    "difficulty": 184,
    "function": "def c200(x):\n    # tens digits of the elements in ascending order\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append(int(str(i)[-2]))\n        else:\n            res.append(0)\n    return sorted(res)\n\n",
    "data": {
      "input": [
        7,
        75,
        8,
        65,
        2
      ],
      "output": [
        0,
        0,
        0,
        6,
        7
      ]
    },
    "demos": [
      {
        "input": [
          48,
          93,
          42,
          97,
          89
        ],
        "output": [
          4,
          4,
          8,
          9,
          9
        ]
      },
      {
        "input": [
          6,
          87,
          76,
          88,
          23,
          21
        ],
        "output": [
          0,
          2,
          2,
          7,
          8,
          8
        ]
      },
      {
        "input": [
          99,
          99,
          20,
          58,
          81,
          10,
          92,
          6
        ],
        "output": [
          0,
          1,
          2,
          5,
          8,
          9,
          9,
          9
        ]
      }
    ]
  },
  {
    "id": "c010",
    "difficulty": 185,
    "function": "def c010(x):\n    # elements 1 through N + 1, N is the first element\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        5,
        11,
        20,
        13,
        5,
        4,
        13,
        12
      ],
      "output": [
        11,
        20,
        13,
        5,
        4
      ]
    },
    "demos": [
      {
        "input": [
          6,
          1,
          10,
          6,
          17,
          1
        ],
        "output": [
          1,
          10,
          6,
          17,
          1
        ]
      },
      {
        "input": [
          3,
          7,
          17,
          18,
          8
        ],
        "output": [
          7,
          17,
          18
        ]
      },
      {
        "input": [
          4,
          8,
          9,
          1,
          14,
          17,
          5
        ],
        "output": [
          8,
          9,
          1,
          14
        ]
      }
    ]
  },
  {
    "id": "c123",
    "difficulty": 186,
    "function": "def c123(x):\n    # remove all but element N, N is the last element\n    return [x[x[-1]]]\n\n",
    "data": {
      "input": [
        14,
        6,
        3,
        14,
        0,
        6,
        1,
        7
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          2,
          3,
          16,
          16,
          1
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          13,
          10,
          8,
          8,
          1,
          13,
          2
        ],
        "output": [
          8
        ]
      },
      {
        "input": [
          0,
          7,
          19,
          20,
          1,
          0
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c023",
    "difficulty": 187,
    "function": "def c023(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        2,
        13,
        16,
        6,
        19,
        5,
        5,
        5
      ],
      "output": [
        2,
        5,
        13,
        16,
        6,
        19,
        5,
        5,
        5
      ]
    },
    "demos": [
      {
        "input": [
          18,
          10,
          8,
          9,
          20,
          4
        ],
        "output": [
          18,
          8,
          10,
          8,
          9,
          20,
          4
        ]
      },
      {
        "input": [
          20,
          3,
          18,
          14
        ],
        "output": [
          20,
          8,
          3,
          18,
          14
        ]
      },
      {
        "input": [
          0,
          0,
          2,
          1,
          2,
          8
        ],
        "output": [
          0,
          5,
          0,
          2,
          1,
          2,
          8
        ]
      }
    ]
  },
  {
    "id": "c194",
    "difficulty": 188,
    "function": "def c194(x):\n    # reverse the input; prepend and append the length of the input\n    return [len(x)] + x[::-1] + [len(x)]\n\n",
    "data": {
      "input": [
        3,
        15,
        15,
        7,
        18,
        5,
        14,
        16
      ],
      "output": [
        8,
        16,
        14,
        5,
        18,
        7,
        15,
        15,
        3,
        8
      ]
    },
    "demos": [
      {
        "input": [
          17,
          13,
          6,
          19,
          10,
          15,
          6,
          4
        ],
        "output": [
          8,
          4,
          6,
          15,
          10,
          19,
          6,
          13,
          17,
          8
        ]
      },
      {
        "input": [
          19,
          19,
          13,
          3,
          13,
          15,
          1
        ],
        "output": [
          7,
          1,
          15,
          13,
          3,
          13,
          19,
          19,
          7
        ]
      },
      {
        "input": [
          4,
          11,
          12,
          9,
          14
        ],
        "output": [
          5,
          14,
          9,
          12,
          11,
          4,
          5
        ]
      }
    ]
  },
  {
    "id": "c245",
    "difficulty": 189,
    "function": "def c245(x):\n    # number of times element 0 appears in the following elements\n    return [x[1:].count(x[0])]\n\n",
    "data": {
      "input": [
        0,
        0,
        6,
        20,
        7,
        8
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          12,
          2,
          12,
          4,
          2,
          12,
          19
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          15,
          19,
          19,
          11,
          15,
          15
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          2,
          7,
          2,
          8,
          2,
          14,
          7
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c032",
    "difficulty": 190,
    "function": "def c032(x):\n    # remove first 2 elements if element 0 > last element, else remove last 2 elements\n    if x[0] > x[-1]:\n        return x[2:]\n    else:\n        return x[:-2]\n    \n",
    "data": {
      "input": [
        5,
        74,
        66,
        31,
        71,
        1
      ],
      "output": [
        66,
        31,
        71,
        1
      ]
    },
    "demos": [
      {
        "input": [
          60,
          52,
          56,
          97,
          17,
          19,
          57
        ],
        "output": [
          56,
          97,
          17,
          19,
          57
        ]
      },
      {
        "input": [
          24,
          5,
          17,
          8,
          52,
          0,
          14
        ],
        "output": [
          17,
          8,
          52,
          0,
          14
        ]
      },
      {
        "input": [
          64,
          47,
          80,
          55,
          9
        ],
        "output": [
          80,
          55,
          9
        ]
      }
    ]
  },
  {
    "id": "c058",
    "difficulty": 191,
    "function": "def c058(x):\n    # remove the first 5 elements\n    return x[5:]\n\n",
    "data": {
      "input": [
        57,
        4,
        26,
        61,
        54,
        71
      ],
      "output": [
        71
      ]
    },
    "demos": [
      {
        "input": [
          51,
          52,
          78,
          26,
          78,
          25,
          77
        ],
        "output": [
          25,
          77
        ]
      },
      {
        "input": [
          90,
          33,
          9,
          34,
          19
        ],
        "output": []
      },
      {
        "input": [
          53,
          37,
          21,
          70,
          91,
          48,
          38,
          26
        ],
        "output": [
          48,
          38,
          26
        ]
      }
    ]
  },
  {
    "id": "c174",
    "difficulty": 192,
    "function": "def c174(x):\n    # keep the first M elements, where M is the number of unique elements\n    return x[:len(set(x))]\n\n",
    "data": {
      "input": [
        46,
        78,
        65,
        62,
        78,
        27,
        22,
        16,
        65,
        78
      ],
      "output": [
        46,
        78,
        65,
        62,
        78,
        27,
        22
      ]
    },
    "demos": [
      {
        "input": [
          40,
          92,
          32,
          47,
          0
        ],
        "output": [
          40,
          92,
          32,
          47,
          0
        ]
      },
      {
        "input": [
          84,
          87,
          69,
          19,
          13
        ],
        "output": [
          84,
          87,
          69,
          19,
          13
        ]
      },
      {
        "input": [
          40,
          82,
          8,
          65,
          65,
          47,
          32
        ],
        "output": [
          40,
          82,
          8,
          65,
          65,
          47
        ]
      }
    ]
  },
  {
    "id": "c229",
    "difficulty": 193,
    "function": "def c229(x):\n    # keep only first N elements of the reversed input, N is the first element\n    length = x[0]\n    return x[::-1][:length]\n\n",
    "data": {
      "input": [
        2,
        52,
        13,
        8,
        23,
        90,
        3
      ],
      "output": [
        3,
        90
      ]
    },
    "demos": [
      {
        "input": [
          1,
          24,
          73,
          74,
          85,
          18,
          40
        ],
        "output": [
          40
        ]
      },
      {
        "input": [
          6,
          22,
          97,
          11,
          29,
          41
        ],
        "output": [
          41,
          29,
          11,
          97,
          22,
          6
        ]
      },
      {
        "input": [
          5,
          62,
          58,
          29,
          43,
          99,
          48,
          33
        ],
        "output": [
          33,
          48,
          99,
          43,
          29
        ]
      }
    ]
  },
  {
    "id": "c162",
    "difficulty": 194,
    "function": "def c162(x):\n    # replace each element M with 3 * M + 7\n    return [3*i+7 for i in x]\n\n",
    "data": {
      "input": [
        10,
        11,
        7,
        28,
        12,
        28,
        8
      ],
      "output": [
        37,
        40,
        28,
        91,
        43,
        91,
        31
      ]
    },
    "demos": [
      {
        "input": [
          1,
          26,
          24,
          19,
          6,
          8,
          24
        ],
        "output": [
          10,
          85,
          79,
          64,
          25,
          31,
          79
        ]
      },
      {
        "input": [
          9,
          6,
          15,
          17,
          17,
          23,
          22
        ],
        "output": [
          34,
          25,
          52,
          58,
          58,
          76,
          73
        ]
      },
      {
        "input": [
          16,
          5,
          26,
          14,
          19,
          16,
          15,
          5
        ],
        "output": [
          55,
          22,
          85,
          49,
          64,
          55,
          52,
          22
        ]
      }
    ]
  },
  {
    "id": "c039",
    "difficulty": 195,
    "function": "def c039(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        25,
        3,
        19,
        9,
        3,
        17,
        3,
        1
      ],
      "output": [
        25,
        3,
        19,
        9,
        3,
        17,
        3,
        1,
        3
      ]
    },
    "demos": [
      {
        "input": [
          3,
          40,
          20,
          43,
          23,
          10
        ],
        "output": [
          3,
          40,
          20,
          43,
          23,
          10,
          3
        ]
      },
      {
        "input": [
          18,
          1,
          4,
          43,
          37,
          46
        ],
        "output": [
          18,
          1,
          4,
          43,
          37,
          46
        ]
      },
      {
        "input": [
          12,
          50,
          17,
          18,
          18,
          23,
          31,
          3
        ],
        "output": [
          12,
          50,
          17,
          18,
          18,
          23,
          31,
          3,
          3
        ]
      }
    ]
  },
  {
    "id": "c181",
    "difficulty": 196,
    "function": "def c181(x):\n    # reverse the order of elements with even index\n    return [x[i] if i % 2 == 1 else x[-i-1] for i in range(len(x))]\n\n",
    "data": {
      "input": [
        6,
        47,
        86,
        47,
        80,
        42,
        36
      ],
      "output": [
        36,
        47,
        80,
        47,
        86,
        42,
        6
      ]
    },
    "demos": [
      {
        "input": [
          84,
          85,
          92,
          73,
          76,
          19,
          52
        ],
        "output": [
          52,
          85,
          76,
          73,
          92,
          19,
          84
        ]
      },
      {
        "input": [
          98,
          3,
          14,
          72,
          42
        ],
        "output": [
          42,
          3,
          14,
          72,
          98
        ]
      },
      {
        "input": [
          15,
          21,
          18,
          82,
          9,
          5,
          35,
          70
        ],
        "output": [
          70,
          21,
          5,
          82,
          82,
          5,
          21,
          70
        ]
      }
    ]
  },
  {
    "id": "c163",
    "difficulty": 197,
    "function": "def c163(x):\n    # replace each element M with 2 * M - 10\n    return [2*i-10 for i in x]\n\n",
    "data": {
      "input": [
        87,
        32,
        74,
        74,
        69,
        35,
        81,
        45
      ],
      "output": [
        164,
        54,
        138,
        138,
        128,
        60,
        152,
        80
      ]
    },
    "demos": [
      {
        "input": [
          10,
          83,
          65,
          63,
          97,
          85,
          71
        ],
        "output": [
          10,
          156,
          120,
          116,
          184,
          160,
          132
        ]
      },
      {
        "input": [
          26,
          85,
          54,
          72,
          89,
          60
        ],
        "output": [
          42,
          160,
          98,
          134,
          168,
          110
        ]
      },
      {
        "input": [
          26,
          90,
          30,
          77,
          43,
          32,
          98,
          12
        ],
        "output": [
          42,
          170,
          50,
          144,
          76,
          54,
          186,
          14
        ]
      }
    ]
  },
  {
    "id": "c154",
    "difficulty": 198,
    "function": "def c154(x):\n    # triple each even element\n    return [i*3 if i % 2 == 0 else i for i in x]\n\n",
    "data": {
      "input": [
        19,
        23,
        18,
        18,
        19,
        8,
        17
      ],
      "output": [
        19,
        23,
        54,
        54,
        19,
        24,
        17
      ]
    },
    "demos": [
      {
        "input": [
          23,
          30,
          1,
          32,
          17
        ],
        "output": [
          23,
          90,
          1,
          96,
          17
        ]
      },
      {
        "input": [
          22,
          30,
          19,
          33,
          33,
          11
        ],
        "output": [
          66,
          90,
          19,
          33,
          33,
          11
        ]
      },
      {
        "input": [
          5,
          23,
          20,
          0,
          2,
          14,
          29,
          18
        ],
        "output": [
          5,
          23,
          60,
          0,
          6,
          42,
          29,
          54
        ]
      }
    ]
  },
  {
    "id": "c166",
    "difficulty": 199,
    "function": "def c166(x):\n    # unique elements in ascending order by the sum of their digits\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = sum(map(int, str(i)))\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        6,
        7,
        23,
        23,
        72,
        54
      ],
      "output": [
        23,
        6,
        7,
        72,
        54
      ]
    },
    "demos": [
      {
        "input": [
          54,
          63,
          47,
          5,
          57
        ],
        "output": [
          5,
          54,
          63,
          47,
          57
        ]
      },
      {
        "input": [
          52,
          87,
          26,
          87,
          37
        ],
        "output": [
          52,
          26,
          37,
          87
        ]
      },
      {
        "input": [
          4,
          97,
          28,
          4,
          22,
          22,
          2
        ],
        "output": [
          2,
          4,
          22,
          28,
          97
        ]
      }
    ]
  },
  {
    "id": "c084",
    "difficulty": 200,
    "function": "def c084(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        53,
        97,
        1,
        6,
        38,
        42,
        5
      ],
      "output": [
        5
      ]
    },
    "demos": [
      {
        "input": [
          38,
          98,
          84,
          16,
          20,
          26,
          16,
          90
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          57,
          72,
          74,
          56,
          66,
          20,
          94,
          96,
          36,
          75
        ],
        "output": [
          94
        ]
      },
      {
        "input": [
          51,
          10,
          6,
          23,
          60,
          11,
          32,
          66
        ],
        "output": [
          32
        ]
      }
    ]
  },
  {
    "id": "c249",
    "difficulty": 201,
    "function": "def c249(x):\n    # use 0s to delimit sublists, give the first element of each sublist\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            if sublist:\n                res.append(sublist[0])\n                sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res.append(sublist[0])\n    return res\n\n",
    "data": {
      "input": [
        0,
        58,
        5,
        12,
        75,
        11,
        0,
        73,
        98,
        0
      ],
      "output": [
        58,
        73
      ]
    },
    "demos": [
      {
        "input": [
          29,
          0,
          30,
          0,
          22,
          77,
          92,
          60,
          35,
          32,
          0,
          79
        ],
        "output": [
          29,
          30,
          22,
          79
        ]
      },
      {
        "input": [
          93,
          11,
          30,
          0,
          0,
          96,
          1,
          27,
          51
        ],
        "output": [
          93,
          96
        ]
      },
      {
        "input": [
          83,
          0,
          16,
          35,
          39,
          63,
          50,
          98
        ],
        "output": [
          83,
          16
        ]
      }
    ]
  },
  {
    "id": "c118",
    "difficulty": 202,
    "function": "def c118(x):\n    # left rotate by N elements, N is the last element\n    return x[x[-1]:] + x[:x[-1]]\n\n",
    "data": {
      "input": [
        91,
        34,
        96,
        25,
        93,
        72,
        1
      ],
      "output": [
        34,
        96,
        25,
        93,
        72,
        1,
        91
      ]
    },
    "demos": [
      {
        "input": [
          44,
          36,
          95,
          15,
          1,
          37,
          1
        ],
        "output": [
          36,
          95,
          15,
          1,
          37,
          1,
          44
        ]
      },
      {
        "input": [
          12,
          33,
          18,
          22,
          4,
          18,
          38,
          30,
          7
        ],
        "output": [
          30,
          7,
          12,
          33,
          18,
          22,
          4,
          18,
          38
        ]
      },
      {
        "input": [
          3,
          41,
          55,
          32,
          45,
          6,
          4
        ],
        "output": [
          45,
          6,
          4,
          3,
          41,
          55,
          32
        ]
      }
    ]
  },
  {
    "id": "c152",
    "difficulty": 203,
    "function": "def c152(x):\n    # replace each element with the product of its digits\n    res = []\n    for i in x:\n        if i < 10:\n            res.append(0)\n        else:\n            res.append(int(str(i)[0]) * int(str(i)[1]))\n    return res\n\n",
    "data": {
      "input": [
        89,
        78,
        7,
        40,
        27,
        80
      ],
      "output": [
        72,
        56,
        0,
        0,
        14,
        0
      ]
    },
    "demos": [
      {
        "input": [
          73,
          5,
          37,
          47,
          23
        ],
        "output": [
          21,
          0,
          21,
          28,
          6
        ]
      },
      {
        "input": [
          91,
          44,
          34,
          35,
          90,
          24,
          67,
          71
        ],
        "output": [
          9,
          16,
          12,
          15,
          0,
          8,
          42,
          7
        ]
      },
      {
        "input": [
          32,
          93,
          9,
          7,
          84,
          83,
          95
        ],
        "output": [
          6,
          27,
          0,
          0,
          32,
          24,
          45
        ]
      }
    ]
  },
  {
    "id": "c237",
    "difficulty": 204,
    "function": "def c237(x):\n    # cumulative sum of unique elements\n    res = []\n    s = 0\n    for i in x:\n        if i not in res:\n            res.append(i)\n    for i in range(len(res)):\n        s += res[i]\n        res[i] = s\n    return res\n\n",
    "data": {
      "input": [
        14,
        8,
        8,
        28,
        21,
        14,
        8,
        28
      ],
      "output": [
        14,
        22,
        50,
        71
      ]
    },
    "demos": [
      {
        "input": [
          16,
          3,
          14,
          30,
          14
        ],
        "output": [
          16,
          19,
          33,
          63
        ]
      },
      {
        "input": [
          0,
          9,
          13,
          9,
          12,
          29,
          0
        ],
        "output": [
          0,
          9,
          22,
          34,
          63
        ]
      },
      {
        "input": [
          7,
          27,
          25,
          12,
          25
        ],
        "output": [
          7,
          34,
          59,
          71
        ]
      }
    ]
  },
  {
    "id": "c243",
    "difficulty": 205,
    "function": "def c243(x):\n    # number of odd elements\n    return [len([i for i in x if i % 2 == 1])]\n\n",
    "data": {
      "input": [
        51,
        88,
        12,
        70,
        64,
        83
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          46,
          82,
          51,
          74,
          55,
          55
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          14,
          77,
          66,
          66,
          26,
          86
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          51,
          44,
          23,
          56,
          76,
          10,
          21,
          25
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c188",
    "difficulty": 206,
    "function": "def c188(x):\n    # replace each element with 1 if it is divisible by 3, else replace with 0\n    return [1 if i % 3 == 0 else 0 for i in x]\n\n",
    "data": {
      "input": [
        91,
        77,
        34,
        75,
        59,
        8
      ],
      "output": [
        0,
        0,
        0,
        1,
        0,
        0
      ]
    },
    "demos": [
      {
        "input": [
          50,
          92,
          91,
          16,
          31,
          13,
          59
        ],
        "output": [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          80,
          31,
          72,
          8,
          89,
          76,
          12,
          4
        ],
        "output": [
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0
        ]
      },
      {
        "input": [
          50,
          69,
          52,
          62,
          20,
          54
        ],
        "output": [
          0,
          1,
          0,
          0,
          0,
          1
        ]
      }
    ]
  },
  {
    "id": "c139",
    "difficulty": 207,
    "function": "def c139(x):\n    # remove all occurrences of the smallest element and the largest element\n    min_val = min(x)\n    max_val = max(x)\n    return [i for i in x if i != min_val and i != max_val]\n\n",
    "data": {
      "input": [
        9,
        9,
        3,
        8,
        9
      ],
      "output": [
        8
      ]
    },
    "demos": [
      {
        "input": [
          1,
          2,
          6,
          10,
          9,
          10
        ],
        "output": [
          2,
          6,
          9
        ]
      },
      {
        "input": [
          0,
          7,
          1,
          1,
          5,
          2,
          2
        ],
        "output": [
          1,
          1,
          5,
          2,
          2
        ]
      },
      {
        "input": [
          8,
          4,
          4,
          1,
          2,
          7,
          2
        ],
        "output": [
          4,
          4,
          2,
          7,
          2
        ]
      }
    ]
  },
  {
    "id": "c036",
    "difficulty": 208,
    "function": "def c036(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        10,
        2,
        9,
        0,
        10,
        8
      ],
      "output": [
        10,
        2,
        0,
        9,
        10,
        8
      ]
    },
    "demos": [
      {
        "input": [
          5,
          9,
          0,
          10,
          6,
          3
        ],
        "output": [
          5,
          6,
          0,
          10,
          9,
          3
        ]
      },
      {
        "input": [
          9,
          8,
          4,
          3,
          10
        ],
        "output": [
          9,
          8,
          3,
          4,
          10
        ]
      },
      {
        "input": [
          9,
          10,
          4,
          10,
          0,
          0,
          9
        ],
        "output": [
          9,
          0,
          4,
          10,
          10,
          0,
          9
        ]
      }
    ]
  },
  {
    "id": "c201",
    "difficulty": 209,
    "function": "def c201(x):\n    # elements > first element, followed by elements < first element\n    return [i for i in x if i > x[0]] + [i for i in x if i < x[0]]\n\n",
    "data": {
      "input": [
        35,
        36,
        7,
        40,
        23,
        32,
        78
      ],
      "output": [
        36,
        40,
        78,
        7,
        23,
        32
      ]
    },
    "demos": [
      {
        "input": [
          60,
          57,
          13,
          87,
          96
        ],
        "output": [
          87,
          96,
          57,
          13
        ]
      },
      {
        "input": [
          75,
          88,
          86,
          10,
          74,
          79
        ],
        "output": [
          88,
          86,
          79,
          10,
          74
        ]
      },
      {
        "input": [
          95,
          16,
          26,
          87,
          2,
          8,
          45,
          21
        ],
        "output": [
          16,
          26,
          87,
          2,
          8,
          45,
          21
        ]
      }
    ]
  },
  {
    "id": "c217",
    "difficulty": 210,
    "function": "def c217(x):\n    # elements in ascending order by ones digit\n    return sorted(x, key=lambda i: i % 10)\n\n",
    "data": {
      "input": [
        15,
        22,
        83,
        13,
        34,
        34,
        79
      ],
      "output": [
        22,
        83,
        13,
        34,
        34,
        15,
        79
      ]
    },
    "demos": [
      {
        "input": [
          54,
          11,
          8,
          81,
          49,
          23,
          34,
          12
        ],
        "output": [
          11,
          81,
          12,
          23,
          54,
          34,
          8,
          49
        ]
      },
      {
        "input": [
          95,
          51,
          67,
          75,
          30
        ],
        "output": [
          30,
          51,
          95,
          75,
          67
        ]
      },
      {
        "input": [
          28,
          98,
          32,
          31,
          82,
          2,
          74,
          54
        ],
        "output": [
          31,
          32,
          82,
          2,
          74,
          54,
          28,
          98
        ]
      }
    ]
  },
  {
    "id": "c005",
    "difficulty": 211,
    "function": "def c005(x):\n    # remove all but element N + 1, N is the first element\n    return [x[x[0]+1]]\n\n",
    "data": {
      "input": [
        0,
        59,
        89,
        10,
        17,
        42,
        64,
        57
      ],
      "output": [
        59
      ]
    },
    "demos": [
      {
        "input": [
          0,
          34,
          61,
          35,
          37,
          67,
          4,
          73
        ],
        "output": [
          34
        ]
      },
      {
        "input": [
          1,
          56,
          39,
          26,
          93,
          71,
          15,
          62
        ],
        "output": [
          39
        ]
      },
      {
        "input": [
          4,
          10,
          29,
          3,
          72,
          7
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c063",
    "difficulty": 213,
    "function": "def c063(x):\n    # remove the first N + 1 elements, N is the first element\n    return x[x[0]+1:]\n\n",
    "data": {
      "input": [
        0,
        10,
        8,
        5,
        10,
        2,
        4
      ],
      "output": [
        10,
        8,
        5,
        10,
        2,
        4
      ]
    },
    "demos": [
      {
        "input": [
          4,
          10,
          1,
          6,
          8,
          3
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          2,
          10,
          2,
          3,
          10
        ],
        "output": [
          3,
          10
        ]
      },
      {
        "input": [
          2,
          6,
          8,
          4,
          3
        ],
        "output": [
          4,
          3
        ]
      }
    ]
  },
  {
    "id": "c141",
    "difficulty": 214,
    "function": "def c141(x):\n    # replace element M + 2 with N, M = element 0, N = element 1; remove elements 0 and 1\n    x[x[0]+2] = x[1]\n    return x[2:]\n\n",
    "data": {
      "input": [
        2,
        8,
        1,
        5,
        4,
        1,
        3
      ],
      "output": [
        1,
        5,
        8,
        1,
        3
      ]
    },
    "demos": [
      {
        "input": [
          0,
          6,
          0,
          0,
          4,
          8
        ],
        "output": [
          6,
          0,
          4,
          8
        ]
      },
      {
        "input": [
          3,
          1,
          6,
          2,
          2,
          0,
          8,
          7
        ],
        "output": [
          6,
          2,
          2,
          1,
          8,
          7
        ]
      },
      {
        "input": [
          2,
          4,
          0,
          10,
          2,
          3,
          6,
          9
        ],
        "output": [
          0,
          10,
          4,
          3,
          6,
          9
        ]
      }
    ]
  },
  {
    "id": "c089",
    "difficulty": 215,
    "function": "def c089(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        86,
        87,
        13,
        44,
        75,
        57,
        2
      ],
      "output": [
        86,
        75,
        13,
        44,
        87,
        57,
        2
      ]
    },
    "demos": [
      {
        "input": [
          90,
          54,
          78,
          87,
          1,
          44,
          74
        ],
        "output": [
          90,
          1,
          78,
          87,
          54,
          44,
          74
        ]
      },
      {
        "input": [
          96,
          35,
          28,
          10,
          1,
          57,
          64
        ],
        "output": [
          96,
          35,
          10,
          28,
          1,
          57,
          64
        ]
      },
      {
        "input": [
          49,
          90,
          15,
          36,
          47,
          9,
          30
        ],
        "output": [
          49,
          47,
          15,
          36,
          90,
          9,
          30
        ]
      }
    ]
  },
  {
    "id": "c124",
    "difficulty": 216,
    "function": "def c124(x):\n    # element M, M = element N, N = element 0\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        5,
        4,
        2,
        0,
        2,
        4,
        4,
        1,
        3
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          5,
          3,
          1,
          2,
          5,
          1,
          6,
          8,
          2,
          5
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          4,
          4,
          3,
          4,
          5,
          9,
          0,
          0,
          0,
          1
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          6,
          0,
          6,
          6,
          6,
          0,
          2,
          6,
          4
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c216",
    "difficulty": 217,
    "function": "def c216(x):\n    # elements in ascending order by tens digit\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append([i, int(str(i)[-2])])\n        else:\n            res.append([i, 0])\n    return [i[0] for i in sorted(res, key=lambda i: i[1])]\n\n",
    "data": {
      "input": [
        61,
        8,
        27,
        30,
        57,
        97
      ],
      "output": [
        8,
        27,
        30,
        57,
        61,
        97
      ]
    },
    "demos": [
      {
        "input": [
          1,
          98,
          43,
          0,
          91,
          37,
          14,
          62
        ],
        "output": [
          1,
          0,
          14,
          37,
          43,
          62,
          98,
          91
        ]
      },
      {
        "input": [
          60,
          10,
          80,
          25,
          70,
          92,
          70,
          22
        ],
        "output": [
          10,
          25,
          22,
          60,
          70,
          70,
          80,
          92
        ]
      },
      {
        "input": [
          42,
          95,
          82,
          99,
          96
        ],
        "output": [
          42,
          82,
          95,
          99,
          96
        ]
      }
    ]
  },
  {
    "id": "c143",
    "difficulty": 218,
    "function": "def c143(x):\n    # replace every occurrence of the largest element with the smallest element\n    max_val = max(x)\n    min_val = min(x)\n    return [min_val if i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        3,
        2,
        0,
        9,
        2
      ],
      "output": [
        3,
        2,
        0,
        0,
        2
      ]
    },
    "demos": [
      {
        "input": [
          8,
          7,
          6,
          0,
          8,
          8
        ],
        "output": [
          0,
          7,
          6,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          2,
          10,
          6,
          10,
          5
        ],
        "output": [
          2,
          2,
          6,
          2,
          5
        ]
      },
      {
        "input": [
          6,
          10,
          7,
          5,
          8,
          7
        ],
        "output": [
          6,
          5,
          7,
          5,
          8,
          7
        ]
      }
    ]
  },
  {
    "id": "c215",
    "difficulty": 219,
    "function": "def c215(x):\n    # elements in ascending order by hundreds digit\n    res = {}\n    for i in x:\n        if len(str(i)) > 2:\n            res[i] = int(str(i)[-3])\n        else:\n            res[i] = 0\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        408,
        51,
        815,
        332,
        458
      ],
      "output": [
        51,
        332,
        408,
        458,
        815
      ]
    },
    "demos": [
      {
        "input": [
          173,
          726,
          14,
          89,
          789
        ],
        "output": [
          14,
          89,
          173,
          726,
          789
        ]
      },
      {
        "input": [
          883,
          330,
          98,
          22,
          793,
          767
        ],
        "output": [
          98,
          22,
          330,
          793,
          767,
          883
        ]
      },
      {
        "input": [
          936,
          371,
          23,
          381,
          268,
          651,
          441
        ],
        "output": [
          23,
          268,
          371,
          381,
          441,
          651,
          936
        ]
      }
    ]
  },
  {
    "id": "c144",
    "difficulty": 220,
    "function": "def c144(x):\n    # replace every occurrence of the largest or smallest element with their absolute difference\n    max_val = max(x)\n    min_val = min(x)\n    return [abs(min_val - max_val) if i == min_val or i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        30,
        85,
        94,
        58
      ],
      "output": [
        64,
        85,
        64,
        58
      ]
    },
    "demos": [
      {
        "input": [
          2,
          12,
          75,
          45,
          63
        ],
        "output": [
          73,
          12,
          73,
          45,
          63
        ]
      },
      {
        "input": [
          7,
          71,
          44
        ],
        "output": [
          64,
          64,
          44
        ]
      },
      {
        "input": [
          52,
          9,
          5,
          81
        ],
        "output": [
          52,
          9,
          76,
          76
        ]
      }
    ]
  },
  {
    "id": "c128",
    "difficulty": 221,
    "function": "def c128(x):\n    # elements in ascending order after removing elements 0,1,and 4\n    x = x[2:4] + x[5:]\n    return sorted(x)\n\n",
    "data": {
      "input": [
        31,
        15,
        3,
        7,
        95,
        19
      ],
      "output": [
        3,
        7,
        19
      ]
    },
    "demos": [
      {
        "input": [
          37,
          24,
          33,
          34,
          64,
          39
        ],
        "output": [
          33,
          34,
          39
        ]
      },
      {
        "input": [
          88,
          62,
          22,
          94,
          13
        ],
        "output": [
          22,
          94
        ]
      },
      {
        "input": [
          19,
          65,
          61,
          12,
          86,
          98,
          5,
          43
        ],
        "output": [
          5,
          12,
          43,
          61,
          98
        ]
      }
    ]
  },
  {
    "id": "c208",
    "difficulty": 222,
    "function": "def c208(x):\n    # keep only last N elements, N is the last element\n    return x[-x[-1]:]\n\n",
    "data": {
      "input": [
        4,
        9,
        6,
        7,
        0,
        10,
        2,
        6
      ],
      "output": [
        6,
        7,
        0,
        10,
        2,
        6
      ]
    },
    "demos": [
      {
        "input": [
          0,
          9,
          5,
          9,
          6,
          2,
          5,
          0
        ],
        "output": [
          0,
          9,
          5,
          9,
          6,
          2,
          5,
          0
        ]
      },
      {
        "input": [
          1,
          9,
          3,
          9,
          1,
          7,
          3
        ],
        "output": [
          1,
          7,
          3
        ]
      },
      {
        "input": [
          8,
          7,
          5,
          10,
          9,
          4,
          4
        ],
        "output": [
          10,
          9,
          4,
          4
        ]
      }
    ]
  },
  {
    "id": "c035",
    "difficulty": 223,
    "function": "def c035(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        0,
        3,
        3,
        6,
        8,
        7
      ],
      "output": [
        6,
        3,
        3,
        0,
        8,
        7
      ]
    },
    "demos": [
      {
        "input": [
          10,
          1,
          7,
          7,
          3,
          2,
          0,
          10
        ],
        "output": [
          10,
          7,
          1,
          7,
          3,
          2,
          0,
          10
        ]
      },
      {
        "input": [
          4,
          6,
          6,
          4,
          10,
          5
        ],
        "output": [
          4,
          6,
          6,
          4,
          10,
          5
        ]
      },
      {
        "input": [
          7,
          2,
          2,
          7,
          5
        ],
        "output": [
          7,
          2,
          2,
          7,
          5
        ]
      }
    ]
  },
  {
    "id": "c214",
    "difficulty": 224,
    "function": "def c214(x):\n    # remove elements 0 and N + 1, N is the first element\n    x = x[1:x[0]+1] + x[x[0]+2:]\n    return x\n\n",
    "data": {
      "input": [
        0,
        78,
        43,
        14,
        61,
        28,
        69,
        63
      ],
      "output": [
        43,
        14,
        61,
        28,
        69,
        63
      ]
    },
    "demos": [
      {
        "input": [
          2,
          25,
          67,
          96,
          70,
          37,
          89
        ],
        "output": [
          25,
          67,
          70,
          37,
          89
        ]
      },
      {
        "input": [
          0,
          74,
          52,
          12,
          0,
          28,
          74,
          31
        ],
        "output": [
          52,
          12,
          0,
          28,
          74,
          31
        ]
      },
      {
        "input": [
          4,
          95,
          26,
          71,
          86,
          3
        ],
        "output": [
          95,
          26,
          71,
          86
        ]
      }
    ]
  },
  {
    "id": "c130",
    "difficulty": 225,
    "function": "def c130(x):\n    # elements 1 through N + 1, N = element 0\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        1,
        89,
        5,
        11,
        90,
        70,
        19,
        69
      ],
      "output": [
        89
      ]
    },
    "demos": [
      {
        "input": [
          5,
          31,
          85,
          44,
          12,
          6
        ],
        "output": [
          31,
          85,
          44,
          12,
          6
        ]
      },
      {
        "input": [
          1,
          55,
          71,
          91,
          56
        ],
        "output": [
          55
        ]
      },
      {
        "input": [
          0,
          23,
          53,
          27,
          40
        ],
        "output": []
      }
    ]
  },
  {
    "id": "c159",
    "difficulty": 226,
    "function": "def c159(x):\n    # element N counts the number of occurrences of N, up to the largest element\n    out = []\n    for i, j in enumerate(range(max(x)+1)):\n        out.append(x.count(j))\n    return out\n\n",
    "data": {
      "input": [
        7,
        2,
        5,
        3,
        3,
        4,
        6
      ],
      "output": [
        0,
        0,
        1,
        2,
        1,
        1,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          9,
          1,
          1,
          9,
          0,
          5,
          7,
          8
        ],
        "output": [
          1,
          2,
          0,
          0,
          0,
          1,
          0,
          1,
          1,
          2
        ]
      },
      {
        "input": [
          8,
          0,
          3,
          7,
          7,
          3
        ],
        "output": [
          1,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          1
        ]
      },
      {
        "input": [
          3,
          7,
          7,
          1,
          9,
          2
        ],
        "output": [
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          2,
          0,
          1
        ]
      }
    ]
  },
  {
    "id": "c205",
    "difficulty": 227,
    "function": "def c205(x):\n    # product of elements divisible by 4\n    res = 1\n    for i in x:\n        if i % 4 == 0:\n            res *= i\n    return [res]\n\n",
    "data": {
      "input": [
        17,
        13,
        0,
        19,
        5,
        14
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          5,
          8,
          15,
          17,
          12,
          9,
          14
        ],
        "output": [
          96
        ]
      },
      {
        "input": [
          17,
          10,
          2,
          18,
          7,
          7
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          8,
          0,
          5,
          20,
          0,
          11,
          10,
          1
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c076",
    "difficulty": 228,
    "function": "def c076(x):\n    # the max, last, length, first, and min elements\n    return [max(x), x[-1], len(x), x[0], min(x)]\n\n",
    "data": {
      "input": [
        24,
        63,
        57,
        67,
        22,
        46
      ],
      "output": [
        67,
        46,
        6,
        24,
        22
      ]
    },
    "demos": [
      {
        "input": [
          7,
          29,
          12,
          39,
          12,
          88
        ],
        "output": [
          88,
          88,
          6,
          7,
          7
        ]
      },
      {
        "input": [
          0,
          12,
          60,
          16,
          88,
          5,
          26,
          61
        ],
        "output": [
          88,
          61,
          8,
          0,
          0
        ]
      },
      {
        "input": [
          85,
          59,
          59,
          30,
          57,
          13
        ],
        "output": [
          85,
          13,
          6,
          85,
          13
        ]
      }
    ]
  },
  {
    "id": "c250",
    "difficulty": 229,
    "function": "def c250(x):\n    # use 0s to delimit sublists, concatenate reversed sublists\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            res += sublist[::-1]\n            sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res += sublist[::-1]\n    return res\n\n",
    "data": {
      "input": [
        73,
        86,
        0,
        34,
        73,
        0,
        72,
        3,
        0,
        54,
        46
      ],
      "output": [
        86,
        73,
        73,
        34,
        3,
        72,
        46,
        54
      ]
    },
    "demos": [
      {
        "input": [
          91,
          22,
          75,
          63,
          0,
          27,
          29,
          0,
          0,
          65,
          77
        ],
        "output": [
          63,
          75,
          22,
          91,
          29,
          27,
          77,
          65
        ]
      },
      {
        "input": [
          0,
          73,
          22,
          34,
          19,
          24,
          95
        ],
        "output": [
          95,
          24,
          19,
          34,
          22,
          73
        ]
      },
      {
        "input": [
          64,
          0,
          0,
          1,
          56,
          65,
          75,
          0,
          17,
          60,
          31
        ],
        "output": [
          64,
          75,
          65,
          56,
          1,
          31,
          60,
          17
        ]
      }
    ]
  },
  {
    "id": "c186",
    "difficulty": 230,
    "function": "def c186(x):\n    # keep only elements greater than element 0\n    return [i for i in x if i > x[0]]\n\n",
    "data": {
      "input": [
        68,
        36,
        1,
        91,
        32,
        11
      ],
      "output": [
        91
      ]
    },
    "demos": [
      {
        "input": [
          57,
          5,
          69,
          31,
          69,
          81,
          52,
          26
        ],
        "output": [
          69,
          69,
          81
        ]
      },
      {
        "input": [
          57,
          13,
          65,
          68,
          40,
          24,
          14
        ],
        "output": [
          65,
          68
        ]
      },
      {
        "input": [
          76,
          48,
          63,
          61,
          29,
          19,
          97
        ],
        "output": [
          97
        ]
      }
    ]
  },
  {
    "id": "c242",
    "difficulty": 231,
    "function": "def c242(x):\n    # take the largest unique element, append the second largest unique element, prepend the third largest unique element, append the fourth largest unique element, and so on\n    unique = sorted(set(x), reverse=True)\n    res = [max(unique)]\n    unique.remove(max(unique))\n    for i in range(len(unique)):\n        if i % 2 == 0:\n            res.append(unique[i])\n        else:\n            res.insert(0, unique[i])\n    return res\n\n",
    "data": {
      "input": [
        5,
        5,
        5,
        1,
        4,
        1,
        3,
        7
      ],
      "output": [
        1,
        4,
        7,
        5,
        3
      ]
    },
    "demos": [
      {
        "input": [
          6,
          2,
          9,
          2,
          3,
          2,
          6,
          7
        ],
        "output": [
          2,
          6,
          9,
          7,
          3
        ]
      },
      {
        "input": [
          6,
          7,
          6,
          3,
          9,
          6,
          0
        ],
        "output": [
          0,
          6,
          9,
          7,
          3
        ]
      },
      {
        "input": [
          6,
          7,
          6,
          9,
          4,
          2
        ],
        "output": [
          2,
          6,
          9,
          7,
          4
        ]
      }
    ]
  },
  {
    "id": "c160",
    "difficulty": 232,
    "function": "def c160(x):\n    # replace each element with 99 - element\n    return [99-i for i in x]\n\n",
    "data": {
      "input": [
        97,
        94,
        36,
        36,
        50,
        59,
        16,
        36
      ],
      "output": [
        2,
        5,
        63,
        63,
        49,
        40,
        83,
        63
      ]
    },
    "demos": [
      {
        "input": [
          12,
          53,
          42,
          6,
          3,
          13,
          45
        ],
        "output": [
          87,
          46,
          57,
          93,
          96,
          86,
          54
        ]
      },
      {
        "input": [
          0,
          65,
          84,
          86,
          45,
          10,
          96
        ],
        "output": [
          99,
          34,
          15,
          13,
          54,
          89,
          3
        ]
      },
      {
        "input": [
          97,
          47,
          97,
          40,
          7,
          6,
          86
        ],
        "output": [
          2,
          52,
          2,
          59,
          92,
          93,
          13
        ]
      }
    ]
  },
  {
    "id": "c167",
    "difficulty": 233,
    "function": "def c167(x):\n    # keep only elements divisible by 3\n    return [i for i in x if i % 3 == 0]\n\n",
    "data": {
      "input": [
        5,
        74,
        60,
        81,
        52,
        26
      ],
      "output": [
        60,
        81
      ]
    },
    "demos": [
      {
        "input": [
          40,
          29,
          59,
          86,
          29,
          18,
          47,
          5
        ],
        "output": [
          18
        ]
      },
      {
        "input": [
          11,
          85,
          41,
          5,
          15,
          12,
          0,
          23
        ],
        "output": [
          15,
          12,
          0
        ]
      },
      {
        "input": [
          82,
          3,
          4,
          68,
          56,
          5,
          94,
          54
        ],
        "output": [
          3,
          54
        ]
      }
    ]
  },
  {
    "id": "c202",
    "difficulty": 234,
    "function": "def c202(x):\n    # the indices of every even number\n    return [i for i, j in enumerate(x) if j % 2 == 0]\n\n\n",
    "data": {
      "input": [
        55,
        12,
        72,
        2,
        21,
        66,
        82,
        60
      ],
      "output": [
        1,
        2,
        3,
        5,
        6,
        7
      ]
    },
    "demos": [
      {
        "input": [
          44,
          15,
          21,
          4,
          36,
          33
        ],
        "output": [
          0,
          3,
          4
        ]
      },
      {
        "input": [
          94,
          97,
          5,
          94,
          1,
          86,
          34,
          80
        ],
        "output": [
          0,
          3,
          5,
          6,
          7
        ]
      },
      {
        "input": [
          74,
          41,
          70,
          53,
          19,
          57,
          78,
          86
        ],
        "output": [
          0,
          2,
          6,
          7
        ]
      }
    ]
  },
  {
    "id": "c129",
    "difficulty": 235,
    "function": "def c129(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        1,
        1,
        0,
        52,
        55,
        54,
        47,
        69,
        95
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          0,
          6,
          63,
          36,
          37,
          66,
          51,
          34
        ],
        "output": [
          63,
          36,
          37,
          66,
          51,
          34
        ]
      },
      {
        "input": [
          2,
          4,
          4,
          26,
          67,
          66,
          74,
          51
        ],
        "output": [
          67,
          66
        ]
      },
      {
        "input": [
          4,
          5,
          77,
          75,
          83,
          4,
          14,
          71,
          72,
          23
        ],
        "output": [
          14
        ]
      }
    ]
  },
  {
    "id": "c221",
    "difficulty": 236,
    "function": "def c221(x):\n    # sum of even elements\n    return [sum(i for i in x if i % 2 == 0)]\n\n",
    "data": {
      "input": [
        21,
        36,
        11,
        30,
        0,
        43,
        27,
        4
      ],
      "output": [
        70
      ]
    },
    "demos": [
      {
        "input": [
          32,
          25,
          1,
          24,
          9,
          42,
          3
        ],
        "output": [
          98
        ]
      },
      {
        "input": [
          3,
          43,
          10,
          5,
          35,
          9,
          25
        ],
        "output": [
          10
        ]
      },
      {
        "input": [
          5,
          42,
          4,
          46,
          33,
          41
        ],
        "output": [
          92
        ]
      }
    ]
  },
  {
    "id": "c131",
    "difficulty": 237,
    "function": "def c131(x):\n    # keep only elements whose tens digit is even\n    res = []\n    for i in x:\n        if len(str(i)) < 2:\n            res.append(i)\n        elif int(str(i)[-2]) % 2 == 0:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        11,
        3,
        31,
        46,
        20,
        67
      ],
      "output": [
        3,
        46,
        20,
        67
      ]
    },
    "demos": [
      {
        "input": [
          28,
          69,
          54,
          46,
          48,
          82,
          55
        ],
        "output": [
          28,
          69,
          46,
          48,
          82
        ]
      },
      {
        "input": [
          83,
          79,
          29,
          64,
          43,
          2,
          82,
          39
        ],
        "output": [
          83,
          29,
          64,
          43,
          2,
          82
        ]
      },
      {
        "input": [
          10,
          57,
          2,
          79,
          59,
          36,
          49,
          70
        ],
        "output": [
          2,
          49
        ]
      }
    ]
  },
  {
    "id": "c180",
    "difficulty": 238,
    "function": "def c180(x):\n    # take the smallest element, append the second smallest element, prepend the third smallest element, append the fourth smallest element, and so on\n    sorted_x = sorted(x)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        74,
        80,
        97,
        7,
        46,
        56,
        63,
        11
      ],
      "output": [
        80,
        63,
        46,
        7,
        11,
        56,
        74,
        97
      ]
    },
    "demos": [
      {
        "input": [
          46,
          60,
          9,
          64,
          33,
          99,
          44,
          48
        ],
        "output": [
          64,
          48,
          44,
          9,
          33,
          46,
          60,
          99
        ]
      },
      {
        "input": [
          81,
          83,
          6,
          3,
          52,
          61,
          11
        ],
        "output": [
          83,
          61,
          11,
          3,
          6,
          52,
          81
        ]
      },
      {
        "input": [
          29,
          21,
          70,
          48,
          90,
          5
        ],
        "output": [
          70,
          29,
          5,
          21,
          48,
          90
        ]
      }
    ]
  },
  {
    "id": "c015",
    "difficulty": 239,
    "function": "def c015(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        3,
        5,
        13,
        3,
        9,
        8,
        15,
        6
      ],
      "output": [
        8,
        15
      ]
    },
    "demos": [
      {
        "input": [
          1,
          5,
          7,
          8,
          8,
          2
        ],
        "output": [
          8,
          8,
          2
        ]
      },
      {
        "input": [
          0,
          3,
          3,
          1,
          8,
          10
        ],
        "output": [
          3,
          1,
          8
        ]
      },
      {
        "input": [
          3,
          4,
          3,
          2,
          12,
          15
        ],
        "output": [
          15
        ]
      }
    ]
  },
  {
    "id": "c179",
    "difficulty": 240,
    "function": "def c179(x):\n    # take the largest element, append the second largest element, prepend the third largest element, append the fourth largest element, and so on\n    sorted_x = sorted(x, reverse=True)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        10,
        59,
        88,
        59,
        56,
        18
      ],
      "output": [
        18,
        59,
        88,
        59,
        56,
        10
      ]
    },
    "demos": [
      {
        "input": [
          31,
          48,
          44,
          53,
          5,
          70,
          59
        ],
        "output": [
          5,
          44,
          53,
          70,
          59,
          48,
          31
        ]
      },
      {
        "input": [
          95,
          57,
          59,
          33,
          36,
          3
        ],
        "output": [
          33,
          57,
          95,
          59,
          36,
          3
        ]
      },
      {
        "input": [
          60,
          67,
          85,
          36,
          52,
          15
        ],
        "output": [
          36,
          60,
          85,
          67,
          52,
          15
        ]
      }
    ]
  },
  {
    "id": "c226",
    "difficulty": 241,
    "function": "def c226(x):\n    # remove first M and last N elements, M is the first element, N is the last element\n    if x[-1] == 0:\n        return x[x[0]:]\n    return x[x[0]:-x[-1]]\n\n",
    "data": {
      "input": [
        4,
        9,
        13,
        11,
        0,
        7,
        10,
        11,
        8,
        1
      ],
      "output": [
        0,
        7,
        10,
        11,
        8
      ]
    },
    "demos": [
      {
        "input": [
          0,
          10,
          5,
          13,
          13,
          3,
          4,
          6,
          10,
          2
        ],
        "output": [
          0,
          10,
          5,
          13,
          13,
          3,
          4,
          6
        ]
      },
      {
        "input": [
          2,
          6,
          9,
          9,
          4,
          11,
          14,
          5,
          0
        ],
        "output": [
          9,
          9,
          4,
          11,
          14,
          5,
          0
        ]
      },
      {
        "input": [
          0,
          2,
          8,
          13,
          0,
          14,
          14,
          9,
          2
        ],
        "output": [
          0,
          2,
          8,
          13,
          0,
          14,
          14
        ]
      }
    ]
  },
  {
    "id": "c134",
    "difficulty": 242,
    "function": "def c134(x):\n    # remove elements M through N, M is the first element, N is the second element\n    return x[:x[0]] + x[x[1]+1:]\n\n",
    "data": {
      "input": [
        3,
        7,
        6,
        11,
        7,
        15,
        4,
        1
      ],
      "output": [
        3,
        7,
        6
      ]
    },
    "demos": [
      {
        "input": [
          0,
          6,
          15,
          2,
          14,
          6,
          15,
          12
        ],
        "output": [
          12
        ]
      },
      {
        "input": [
          3,
          9,
          11,
          11,
          9,
          6,
          4,
          3,
          9,
          1
        ],
        "output": [
          3,
          9,
          11
        ]
      },
      {
        "input": [
          3,
          4,
          12,
          4,
          4,
          1,
          4,
          3,
          7,
          7
        ],
        "output": [
          3,
          4,
          12,
          1,
          4,
          3,
          7,
          7
        ]
      }
    ]
  },
  {
    "id": "c164",
    "difficulty": 243,
    "function": "def c164(x):\n    # replace each element M with M // 4 + 5\n    return [i//4+5 for i in x]\n\n",
    "data": {
      "input": [
        70,
        76,
        11,
        88,
        25,
        93
      ],
      "output": [
        22,
        24,
        7,
        27,
        11,
        28
      ]
    },
    "demos": [
      {
        "input": [
          57,
          10,
          57,
          73,
          81,
          25
        ],
        "output": [
          19,
          7,
          19,
          23,
          25,
          11
        ]
      },
      {
        "input": [
          62,
          84,
          85,
          97,
          75,
          23
        ],
        "output": [
          20,
          26,
          26,
          29,
          23,
          10
        ]
      },
      {
        "input": [
          79,
          53,
          92,
          16,
          4,
          34
        ],
        "output": [
          24,
          18,
          28,
          9,
          6,
          13
        ]
      }
    ]
  },
  {
    "id": "c178",
    "difficulty": 244,
    "function": "def c178(x):\n    # keep only elements followed by an even number\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] % 2 == 0:\n            res.append(x[i])\n    return res \n\n",
    "data": {
      "input": [
        27,
        37,
        58,
        13,
        33,
        71
      ],
      "output": [
        37
      ]
    },
    "demos": [
      {
        "input": [
          57,
          86,
          17,
          52,
          93,
          86,
          32,
          78
        ],
        "output": [
          57,
          17,
          93,
          86,
          32
        ]
      },
      {
        "input": [
          63,
          43,
          41,
          64,
          28,
          87,
          92
        ],
        "output": [
          41,
          64,
          87
        ]
      },
      {
        "input": [
          59,
          99,
          76,
          99,
          7,
          94,
          41,
          67
        ],
        "output": [
          99,
          7
        ]
      }
    ]
  },
  {
    "id": "c113",
    "difficulty": 245,
    "function": "def c113(x):\n    # keep only elements whose ones digit is greater than the first element\n    res = []\n    for i in x:\n        if i % 10 > x[0]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        7,
        45,
        20,
        38,
        21,
        5,
        7,
        41
      ],
      "output": [
        38
      ]
    },
    "demos": [
      {
        "input": [
          7,
          9,
          27,
          42,
          30,
          25,
          15,
          25,
          36,
          28
        ],
        "output": [
          9,
          28
        ]
      },
      {
        "input": [
          0,
          4,
          31,
          28,
          10,
          39,
          18,
          34
        ],
        "output": [
          4,
          31,
          28,
          39,
          18,
          34
        ]
      },
      {
        "input": [
          1,
          13,
          7,
          45,
          49,
          28,
          24,
          22,
          11,
          34
        ],
        "output": [
          13,
          7,
          45,
          49,
          28,
          24,
          22,
          34
        ]
      }
    ]
  },
  {
    "id": "c206",
    "difficulty": 246,
    "function": "def c206(x):\n    # keep only elements whose value is between the first and second element\n    return [i for i in x if x[0] < i < x[1]]\n\n",
    "data": {
      "input": [
        6,
        12,
        20,
        46,
        46,
        7,
        1
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          0,
          26,
          26,
          40,
          11,
          2,
          1,
          31
        ],
        "output": [
          11,
          2,
          1
        ]
      },
      {
        "input": [
          2,
          57,
          2,
          41,
          46,
          9,
          32
        ],
        "output": [
          41,
          46,
          9,
          32
        ]
      },
      {
        "input": [
          3,
          35,
          26,
          18,
          32,
          37,
          3,
          42
        ],
        "output": [
          26,
          18,
          32
        ]
      }
    ]
  },
  {
    "id": "c210",
    "difficulty": 247,
    "function": "def c210(x):\n    # unique elements with last element inserted at index M, where M is the first element\n    unique = []\n    for i in x:\n        if i not in unique:\n            unique.append(i)\n    unique.insert(x[0], x[-1])\n    return unique\n\n",
    "data": {
      "input": [
        0,
        2,
        7,
        4,
        2,
        1,
        0
      ],
      "output": [
        0,
        0,
        2,
        7,
        4,
        1
      ]
    },
    "demos": [
      {
        "input": [
          0,
          8,
          7,
          4,
          5,
          5,
          5
        ],
        "output": [
          5,
          0,
          8,
          7,
          4,
          5
        ]
      },
      {
        "input": [
          0,
          2,
          3,
          0,
          2
        ],
        "output": [
          2,
          0,
          2,
          3
        ]
      },
      {
        "input": [
          1,
          0,
          7,
          0,
          1,
          3,
          0
        ],
        "output": [
          1,
          0,
          0,
          7,
          3
        ]
      }
    ]
  },
  {
    "id": "c158",
    "difficulty": 248,
    "function": "def c158(x):\n    # replace each element with 1 if element N equals N, else 0\n    res = []\n    for i, j in enumerate(x):\n        if i == j:\n            res.append(1)\n        else:\n            res.append(0)\n    return res\n\n",
    "data": {
      "input": [
        5,
        5,
        7,
        3,
        4,
        3
      ],
      "output": [
        0,
        0,
        0,
        1,
        1,
        0
      ]
    },
    "demos": [
      {
        "input": [
          6,
          1,
          2,
          3,
          4,
          5,
          6,
          0,
          8,
          7
        ],
        "output": [
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          0
        ]
      },
      {
        "input": [
          0,
          7,
          2,
          3,
          4,
          5,
          8,
          7,
          8
        ],
        "output": [
          1,
          0,
          1,
          1,
          1,
          1,
          0,
          1,
          1
        ]
      },
      {
        "input": [
          0,
          1,
          6,
          3,
          6,
          5,
          6,
          7,
          8,
          9
        ],
        "output": [
          1,
          1,
          0,
          1,
          0,
          1,
          1,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c183",
    "difficulty": 249,
    "function": "def c183(x):\n    # list the index of second elements and following equal to first element\n    res = []\n    for i in range(1, len(x)):\n        if x[i] == x[0]:\n            res.append(i)\n    return res",
    "data": {
      "input": [
        7,
        3,
        3,
        7,
        7,
        5,
        6,
        6,
        6,
        14
      ],
      "output": [
        3,
        4
      ]
    },
    "demos": [
      {
        "input": [
          8,
          8,
          13,
          10,
          2,
          15
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          13,
          3,
          10,
          13,
          15,
          3,
          11,
          13,
          0
        ],
        "output": [
          3,
          7
        ]
      },
      {
        "input": [
          13,
          12,
          5,
          13,
          11,
          3,
          13
        ],
        "output": [
          3,
          6
        ]
      }
    ]
  },
  {
    "id": "c014",
    "difficulty": 157,
    "function": "def c014(x):\n    # remove all but elements 2 through 5\n    return x[2:5]\n\n",
    "data": {
      "input": [
        58,
        41,
        71,
        10,
        16,
        93,
        97
      ],
      "output": [
        71,
        10,
        16
      ]
    },
    "demos": [
      {
        "input": [
          88,
          11,
          12,
          78,
          84,
          91,
          67
        ],
        "output": [
          12,
          78,
          84
        ]
      },
      {
        "input": [
          71,
          36,
          3,
          28,
          62,
          91,
          23,
          99
        ],
        "output": [
          3,
          28,
          62
        ]
      },
      {
        "input": [
          59,
          55,
          87,
          33,
          99,
          41,
          74
        ],
        "output": [
          87,
          33,
          99
        ]
      }
    ]
  },
  {
    "id": "c098",
    "difficulty": 86,
    "function": "def c098(x):\n    # add the index to each element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        4,
        4,
        4,
        6,
        1,
        1,
        5
      ],
      "output": [
        4,
        5,
        6,
        9,
        5,
        6,
        11
      ]
    },
    "demos": [
      {
        "input": [
          3,
          6,
          0,
          9,
          6,
          7,
          8,
          9
        ],
        "output": [
          3,
          7,
          2,
          12,
          10,
          12,
          14,
          16
        ]
      },
      {
        "input": [
          7,
          3,
          5,
          0,
          6,
          9
        ],
        "output": [
          7,
          4,
          7,
          3,
          10,
          14
        ]
      },
      {
        "input": [
          7,
          4,
          4,
          8,
          1,
          6,
          4,
          5
        ],
        "output": [
          7,
          5,
          6,
          11,
          5,
          11,
          10,
          12
        ]
      }
    ]
  },
  {
    "id": "c209",
    "difficulty": 212,
    "function": "def c209(x):\n    # elements in ascending order, insert sum of smallest and largest element at index 3\n    x = sorted(x)\n    x.insert(3, x[0] + x[-1])\n    return x\n\n",
    "data": {
      "input": [
        6,
        15,
        21,
        9,
        28,
        7
      ],
      "output": [
        6,
        7,
        9,
        34,
        15,
        21,
        28
      ]
    },
    "demos": [
      {
        "input": [
          13,
          3,
          16,
          14,
          20,
          25
        ],
        "output": [
          3,
          13,
          14,
          28,
          16,
          20,
          25
        ]
      },
      {
        "input": [
          22,
          7,
          17,
          16,
          14
        ],
        "output": [
          7,
          14,
          16,
          29,
          17,
          22
        ]
      },
      {
        "input": [
          11,
          11,
          12,
          21,
          14,
          19,
          25
        ],
        "output": [
          11,
          11,
          12,
          36,
          14,
          19,
          21,
          25
        ]
      }
    ]
  },
  {
    "id": "c211",
    "difficulty": 104,
    "function": "def c211(x):\n    # reverse input, insert fouth element and fifth element so they are fourth and third from the end respectively\n    x = x[::-1]\n    x.insert(-3, x[3])\n    x.insert(-4, x[4])\n    return x\n\n",
    "data": {
      "input": [
        7,
        37,
        92,
        49,
        91,
        80
      ],
      "output": [
        80,
        91,
        49,
        92,
        92,
        92,
        37,
        7
      ]
    },
    "demos": [
      {
        "input": [
          3,
          10,
          63,
          61,
          18,
          63,
          85,
          77
        ],
        "output": [
          77,
          85,
          63,
          18,
          61,
          61,
          18,
          63,
          10,
          3
        ]
      },
      {
        "input": [
          21,
          33,
          86,
          9,
          48,
          89,
          72
        ],
        "output": [
          72,
          89,
          48,
          9,
          9,
          9,
          86,
          33,
          21
        ]
      },
      {
        "input": [
          66,
          19,
          84,
          13,
          55,
          44,
          67
        ],
        "output": [
          67,
          44,
          55,
          13,
          13,
          13,
          84,
          19,
          66
        ]
      }
    ]
  },
  {
    "id": "c102",
    "difficulty": 0,
    "function": "def c102(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        8,
        60,
        62,
        53,
        40,
        9,
        57,
        12
      ],
      "output": [
        8,
        60,
        62,
        53,
        40,
        9,
        57,
        12
      ]
    },
    "demos": [
      {
        "input": [
          22,
          61,
          18,
          89,
          76
        ],
        "output": [
          22,
          61,
          18,
          89,
          76
        ]
      },
      {
        "input": [
          31,
          17,
          96,
          96,
          28,
          75,
          9,
          70
        ],
        "output": [
          31,
          17,
          96,
          96,
          28,
          75,
          9,
          70
        ]
      },
      {
        "input": [
          56,
          72,
          88,
          70,
          80,
          19
        ],
        "output": [
          56,
          72,
          88,
          70,
          80,
          19
        ]
      }
    ]
  },
  {
    "id": "c170",
    "difficulty": 1,
    "function": "def c170(x):\n    # remove all but the first and last element\n    return [x[0], x[-1]]\n    \n",
    "data": {
      "input": [
        57,
        13,
        29,
        16,
        93,
        76,
        24,
        93
      ],
      "output": [
        57,
        93
      ]
    },
    "demos": [
      {
        "input": [
          11,
          67,
          55,
          85,
          6,
          17,
          71
        ],
        "output": [
          11,
          71
        ]
      },
      {
        "input": [
          39,
          59,
          17,
          57,
          32
        ],
        "output": [
          39,
          32
        ]
      },
      {
        "input": [
          5,
          78,
          43,
          17,
          16,
          86
        ],
        "output": [
          5,
          86
        ]
      }
    ]
  },
  {
    "id": "c121",
    "difficulty": 2,
    "function": "def c121(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        50,
        64,
        91,
        69
      ],
      "output": [
        69
      ]
    },
    "demos": [
      {
        "input": [
          85,
          3,
          51,
          7,
          73,
          38,
          37,
          40
        ],
        "output": [
          40
        ]
      },
      {
        "input": [
          88,
          34,
          84,
          95,
          76
        ],
        "output": [
          76
        ]
      },
      {
        "input": [
          83,
          71,
          17
        ],
        "output": [
          17
        ]
      }
    ]
  },
  {
    "id": "c045",
    "difficulty": 3,
    "function": "def c045(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        71,
        57,
        40
      ],
      "output": [
        71,
        57,
        40
      ]
    },
    "demos": [
      {
        "input": [
          47,
          51,
          74,
          95
        ],
        "output": [
          47,
          51,
          74,
          95
        ]
      },
      {
        "input": [
          17,
          28,
          71,
          19,
          33,
          50
        ],
        "output": [
          17,
          28,
          71,
          19,
          33,
          50
        ]
      },
      {
        "input": [
          24,
          75,
          57,
          37,
          15,
          78
        ],
        "output": [
          24,
          75,
          57,
          37,
          15,
          78
        ]
      }
    ]
  },
  {
    "id": "c072",
    "difficulty": 4,
    "function": "def c072(x):\n    # repeat every element twice\n    return [i for i in x for _ in (0, 1)]\n\n",
    "data": {
      "input": [
        39,
        43,
        73,
        58,
        52,
        28
      ],
      "output": [
        39,
        39,
        43,
        43,
        73,
        73,
        58,
        58,
        52,
        52,
        28,
        28
      ]
    },
    "demos": [
      {
        "input": [
          59,
          12,
          67
        ],
        "output": [
          59,
          59,
          12,
          12,
          67,
          67
        ]
      },
      {
        "input": [
          34,
          32,
          42
        ],
        "output": [
          34,
          34,
          32,
          32,
          42,
          42
        ]
      },
      {
        "input": [
          81,
          7,
          90
        ],
        "output": [
          81,
          81,
          7,
          7,
          90,
          90
        ]
      }
    ]
  },
  {
    "id": "c151",
    "difficulty": 5,
    "function": "def c151(x):\n    # repeat each element, M, M times, in order of appearance\n    return [i for i in x for _ in range(i)]\n\n",
    "data": {
      "input": [
        3,
        5,
        1,
        0
      ],
      "output": [
        3,
        3,
        3,
        5,
        5,
        5,
        5,
        5,
        1
      ]
    },
    "demos": [
      {
        "input": [
          3,
          4,
          1
        ],
        "output": [
          3,
          3,
          3,
          4,
          4,
          4,
          4,
          1
        ]
      },
      {
        "input": [
          5,
          0,
          0,
          4,
          0
        ],
        "output": [
          5,
          5,
          5,
          5,
          5,
          4,
          4,
          4,
          4
        ]
      },
      {
        "input": [
          4,
          5,
          2,
          2,
          4,
          4
        ],
        "output": [
          4,
          4,
          4,
          4,
          5,
          5,
          5,
          5,
          5,
          2,
          2,
          2,
          2,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ]
      }
    ]
  },
  {
    "id": "c080",
    "difficulty": 6,
    "function": "def c080(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        39,
        26,
        98
      ],
      "output": [
        98,
        26,
        39
      ]
    },
    "demos": [
      {
        "input": [
          11,
          73,
          39
        ],
        "output": [
          39,
          73,
          11
        ]
      },
      {
        "input": [
          62,
          25,
          64,
          89,
          81
        ],
        "output": [
          81,
          89,
          64,
          25,
          62
        ]
      },
      {
        "input": [
          2,
          78,
          80,
          35
        ],
        "output": [
          35,
          80,
          78,
          2
        ]
      }
    ]
  },
  {
    "id": "c061",
    "difficulty": 7,
    "function": "def c061(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        10,
        40,
        81,
        90,
        80,
        66
      ],
      "output": [
        66
      ]
    },
    "demos": [
      {
        "input": [
          7,
          14,
          38,
          9,
          89,
          80
        ],
        "output": [
          80
        ]
      },
      {
        "input": [
          60,
          14,
          63
        ],
        "output": [
          63
        ]
      },
      {
        "input": [
          75,
          75,
          49
        ],
        "output": [
          49
        ]
      }
    ]
  },
  {
    "id": "c189",
    "difficulty": 8,
    "function": "def c189(x):\n    # count from the smallest element to the largest element\n    return list(range(min(x), max(x)+1))\n\n",
    "data": {
      "input": [
        47,
        50,
        48
      ],
      "output": [
        47,
        48,
        49,
        50
      ]
    },
    "demos": [
      {
        "input": [
          10,
          5,
          9
        ],
        "output": [
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          49,
          47,
          52,
          54
        ],
        "output": [
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54
        ]
      },
      {
        "input": [
          88,
          91,
          92
        ],
        "output": [
          88,
          89,
          90,
          91,
          92
        ]
      }
    ]
  },
  {
    "id": "c050",
    "difficulty": 9,
    "function": "def c050(x):\n    # prepend first element to the list\n    return [x[0]] + x\n\n",
    "data": {
      "input": [
        84,
        51,
        61
      ],
      "output": [
        84,
        84,
        51,
        61
      ]
    },
    "demos": [
      {
        "input": [
          16,
          12,
          86,
          23,
          43,
          77
        ],
        "output": [
          16,
          16,
          12,
          86,
          23,
          43,
          77
        ]
      },
      {
        "input": [
          14,
          82,
          26,
          18,
          59,
          40
        ],
        "output": [
          14,
          14,
          82,
          26,
          18,
          59,
          40
        ]
      },
      {
        "input": [
          7,
          88,
          97,
          17
        ],
        "output": [
          7,
          7,
          88,
          97,
          17
        ]
      }
    ]
  },
  {
    "id": "c048",
    "difficulty": 10,
    "function": "def c048(x):\n    # remove all but the first element\n    return [x[0]]\n    \n",
    "data": {
      "input": [
        46,
        90,
        75,
        70,
        49,
        59
      ],
      "output": [
        46
      ]
    },
    "demos": [
      {
        "input": [
          81,
          69,
          21,
          8,
          95,
          46,
          59
        ],
        "output": [
          81
        ]
      },
      {
        "input": [
          42,
          42,
          27,
          94
        ],
        "output": [
          42
        ]
      },
      {
        "input": [
          67,
          91,
          43,
          90,
          39,
          78
        ],
        "output": [
          67
        ]
      }
    ]
  },
  {
    "id": "c147",
    "difficulty": 11,
    "function": "def c147(x):\n    # each element, followed by its index\n    res = []\n    for i, v in enumerate(x):\n        res.append(v)\n        res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        84,
        89,
        2,
        89,
        29,
        21,
        92
      ],
      "output": [
        84,
        0,
        89,
        1,
        2,
        2,
        89,
        3,
        29,
        4,
        21,
        5,
        92,
        6
      ]
    },
    "demos": [
      {
        "input": [
          78,
          54,
          4,
          83,
          76,
          51,
          40
        ],
        "output": [
          78,
          0,
          54,
          1,
          4,
          2,
          83,
          3,
          76,
          4,
          51,
          5,
          40,
          6
        ]
      },
      {
        "input": [
          51,
          31,
          15,
          94,
          84,
          48,
          38
        ],
        "output": [
          51,
          0,
          31,
          1,
          15,
          2,
          94,
          3,
          84,
          4,
          48,
          5,
          38,
          6
        ]
      },
      {
        "input": [
          83,
          57,
          25
        ],
        "output": [
          83,
          0,
          57,
          1,
          25,
          2
        ]
      }
    ]
  },
  {
    "id": "c120",
    "difficulty": 12,
    "function": "def c120(x):\n    # remove all but the first element\n    return [x[0]]\n\n",
    "data": {
      "input": [
        24,
        58,
        39,
        10,
        10
      ],
      "output": [
        24
      ]
    },
    "demos": [
      {
        "input": [
          30,
          63,
          52,
          46,
          20
        ],
        "output": [
          30
        ]
      },
      {
        "input": [
          53,
          59,
          59,
          17
        ],
        "output": [
          53
        ]
      },
      {
        "input": [
          27,
          89,
          97,
          83,
          83
        ],
        "output": [
          27
        ]
      }
    ]
  },
  {
    "id": "c127",
    "difficulty": 13,
    "function": "def c127(x):\n    # remove last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        98,
        57,
        6,
        80,
        42
      ],
      "output": [
        98,
        57,
        6,
        80
      ]
    },
    "demos": [
      {
        "input": [
          62,
          70,
          2,
          89
        ],
        "output": [
          62,
          70,
          2
        ]
      },
      {
        "input": [
          54,
          44,
          41
        ],
        "output": [
          54,
          44
        ]
      },
      {
        "input": [
          51,
          23,
          14,
          62,
          74,
          2
        ],
        "output": [
          51,
          23,
          14,
          62,
          74
        ]
      }
    ]
  },
  {
    "id": "c100",
    "difficulty": 14,
    "function": "def c100(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        70,
        81,
        44,
        88,
        87,
        38,
        2
      ],
      "output": [
        2,
        38,
        87,
        88,
        44,
        81,
        70
      ]
    },
    "demos": [
      {
        "input": [
          33,
          82,
          73
        ],
        "output": [
          73,
          82,
          33
        ]
      },
      {
        "input": [
          28,
          86,
          6,
          74
        ],
        "output": [
          74,
          6,
          86,
          28
        ]
      },
      {
        "input": [
          75,
          40,
          51
        ],
        "output": [
          51,
          40,
          75
        ]
      }
    ]
  },
  {
    "id": "c145",
    "difficulty": 15,
    "function": "def c145(x):\n    # replace every element with the first element\n    return [x[0]] * len(x)\n\n",
    "data": {
      "input": [
        85,
        14,
        85,
        67,
        82
      ],
      "output": [
        85,
        85,
        85,
        85,
        85
      ]
    },
    "demos": [
      {
        "input": [
          10,
          99,
          85,
          7,
          59
        ],
        "output": [
          10,
          10,
          10,
          10,
          10
        ]
      },
      {
        "input": [
          98,
          6,
          92,
          41,
          90,
          45,
          43
        ],
        "output": [
          98,
          98,
          98,
          98,
          98,
          98,
          98
        ]
      },
      {
        "input": [
          41,
          97,
          22,
          95,
          46,
          47
        ],
        "output": [
          41,
          41,
          41,
          41,
          41,
          41
        ]
      }
    ]
  },
  {
    "id": "c079",
    "difficulty": 16,
    "function": "def c079(x):\n    # sum of the list\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        8,
        15,
        20,
        4
      ],
      "output": [
        47
      ]
    },
    "demos": [
      {
        "input": [
          16,
          17,
          19,
          7
        ],
        "output": [
          59
        ]
      },
      {
        "input": [
          0,
          15,
          12,
          12,
          2,
          13,
          8
        ],
        "output": [
          62
        ]
      },
      {
        "input": [
          0,
          6,
          5,
          15,
          15
        ],
        "output": [
          41
        ]
      }
    ]
  },
  {
    "id": "c043",
    "difficulty": 17,
    "function": "def c043(x):\n    return [8, 2, 7, 0, 3]\n\n",
    "data": {
      "input": [
        99,
        1,
        49,
        90,
        40,
        75
      ],
      "output": [
        8,
        2,
        7,
        0,
        3
      ]
    },
    "demos": [
      {
        "input": [
          82,
          56,
          36,
          48,
          49,
          71,
          6
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          13,
          95,
          76
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          57,
          88,
          11,
          77
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      }
    ]
  },
  {
    "id": "c038",
    "difficulty": 18,
    "function": "def c038(x):\n    # append 9\n    return x + [9]\n\n",
    "data": {
      "input": [
        86,
        14,
        74,
        71,
        4,
        0
      ],
      "output": [
        86,
        14,
        74,
        71,
        4,
        0,
        9
      ]
    },
    "demos": [
      {
        "input": [
          69,
          64,
          55,
          93,
          80,
          14
        ],
        "output": [
          69,
          64,
          55,
          93,
          80,
          14,
          9
        ]
      },
      {
        "input": [
          10,
          91,
          65,
          77,
          67
        ],
        "output": [
          10,
          91,
          65,
          77,
          67,
          9
        ]
      },
      {
        "input": [
          96,
          58,
          44,
          73,
          5,
          56,
          77
        ],
        "output": [
          96,
          58,
          44,
          73,
          5,
          56,
          77,
          9
        ]
      }
    ]
  },
  {
    "id": "c042",
    "difficulty": 19,
    "function": "def c042(x):\n    return [5, 2]\n\n",
    "data": {
      "input": [
        49,
        57,
        72,
        64
      ],
      "output": [
        5,
        2
      ]
    },
    "demos": [
      {
        "input": [
          90,
          56,
          60,
          10
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          91,
          61,
          20,
          35,
          64,
          19,
          11
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          55,
          72,
          98,
          67,
          76,
          34,
          90
        ],
        "output": [
          5,
          2
        ]
      }
    ]
  },
  {
    "id": "c223",
    "difficulty": 20,
    "function": "def c223(x):\n    # swap the digits of each element\n    return [int(str(i)[::-1]) for i in x]\n\n",
    "data": {
      "input": [
        70,
        14,
        44,
        15
      ],
      "output": [
        7,
        41,
        44,
        51
      ]
    },
    "demos": [
      {
        "input": [
          40,
          39,
          4,
          92,
          86,
          47,
          78
        ],
        "output": [
          4,
          93,
          4,
          29,
          68,
          74,
          87
        ]
      },
      {
        "input": [
          30,
          50,
          37,
          23,
          42
        ],
        "output": [
          3,
          5,
          73,
          32,
          24
        ]
      },
      {
        "input": [
          97,
          7,
          93
        ],
        "output": [
          79,
          7,
          39
        ]
      }
    ]
  },
  {
    "id": "c137",
    "difficulty": 21,
    "function": "def c137(x):\n    # remove all 3\n    return [i for i in x if i != 3]\n\n",
    "data": {
      "input": [
        3,
        38,
        21,
        66,
        54
      ],
      "output": [
        38,
        21,
        66,
        54
      ]
    },
    "demos": [
      {
        "input": [
          3,
          6,
          5,
          9,
          37,
          16
        ],
        "output": [
          6,
          5,
          9,
          37,
          16
        ]
      },
      {
        "input": [
          76,
          3,
          3,
          74
        ],
        "output": [
          76,
          74
        ]
      },
      {
        "input": [
          96,
          16,
          13,
          62,
          34,
          3,
          56,
          33
        ],
        "output": [
          96,
          16,
          13,
          62,
          34,
          56,
          33
        ]
      }
    ]
  },
  {
    "id": "c238",
    "difficulty": 22,
    "function": "def c238(x):\n    # keep only elements that appear exactly once\n    return [i for i in x if x.count(i) == 1]\n\n",
    "data": {
      "input": [
        12,
        34,
        12,
        56,
        78,
        12,
        34,
        34
      ],
      "output": [
        56,
        78
      ]
    },
    "demos": [
      {
        "input": [
          9,
          9,
          6,
          0,
          13,
          12,
          12,
          12
        ],
        "output": [
          6,
          0,
          13
        ]
      },
      {
        "input": [
          5,
          3,
          1,
          6,
          6,
          3,
          4,
          4
        ],
        "output": [
          5,
          1
        ]
      },
      {
        "input": [
          3,
          3,
          3,
          4,
          5,
          6,
          3,
          3
        ],
        "output": [
          4,
          5,
          6
        ]
      }
    ]
  },
  {
    "id": "c108",
    "difficulty": 23,
    "function": "def c108(x):\n    # sum of elements\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        0,
        6,
        10,
        5
      ],
      "output": [
        21
      ]
    },
    "demos": [
      {
        "input": [
          5,
          7,
          4,
          0
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          20,
          7,
          0
        ],
        "output": [
          27
        ]
      },
      {
        "input": [
          19,
          19,
          4,
          8,
          20,
          6,
          12
        ],
        "output": [
          88
        ]
      }
    ]
  },
  {
    "id": "c126",
    "difficulty": 24,
    "function": "def c126(x):\n    # remove first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        60,
        62,
        58,
        90,
        25,
        97
      ],
      "output": [
        62,
        58,
        90,
        25,
        97
      ]
    },
    "demos": [
      {
        "input": [
          99,
          11,
          36,
          23,
          75
        ],
        "output": [
          11,
          36,
          23,
          75
        ]
      },
      {
        "input": [
          42,
          36,
          22,
          84,
          10
        ],
        "output": [
          36,
          22,
          84,
          10
        ]
      },
      {
        "input": [
          86,
          92,
          54,
          26,
          19,
          16,
          14
        ],
        "output": [
          92,
          54,
          26,
          19,
          16,
          14
        ]
      }
    ]
  },
  {
    "id": "c187",
    "difficulty": 25,
    "function": "def c187(x):\n    # concatenate input with itself, separated by 0\n    return x + [0] + x\n\n",
    "data": {
      "input": [
        51,
        31,
        81
      ],
      "output": [
        51,
        31,
        81,
        0,
        51,
        31,
        81
      ]
    },
    "demos": [
      {
        "input": [
          72,
          54,
          35,
          44,
          0
        ],
        "output": [
          72,
          54,
          35,
          44,
          0,
          0,
          72,
          54,
          35,
          44,
          0
        ]
      },
      {
        "input": [
          30,
          52,
          46,
          11
        ],
        "output": [
          30,
          52,
          46,
          11,
          0,
          30,
          52,
          46,
          11
        ]
      },
      {
        "input": [
          6,
          34,
          82,
          84,
          66
        ],
        "output": [
          6,
          34,
          82,
          84,
          66,
          0,
          6,
          34,
          82,
          84,
          66
        ]
      }
    ]
  },
  {
    "id": "c022",
    "difficulty": 26,
    "function": "def c022(x):\n    # insert a 5 as element 1\n    return x[:1] + [5] + x[1:]\n\n",
    "data": {
      "input": [
        64,
        11,
        53,
        74,
        30,
        38
      ],
      "output": [
        64,
        5,
        11,
        53,
        74,
        30,
        38
      ]
    },
    "demos": [
      {
        "input": [
          47,
          24,
          78,
          77,
          77
        ],
        "output": [
          47,
          5,
          24,
          78,
          77,
          77
        ]
      },
      {
        "input": [
          90,
          35,
          79,
          67,
          65,
          60,
          5
        ],
        "output": [
          90,
          5,
          35,
          79,
          67,
          65,
          60,
          5
        ]
      },
      {
        "input": [
          1,
          86,
          89
        ],
        "output": [
          1,
          5,
          86,
          89
        ]
      }
    ]
  },
  {
    "id": "c212",
    "difficulty": 27,
    "function": "def c212(x):\n    # insert 3 at index 2, 3 times\n    return x[:3] + [3,3,3] + x[3:]\n\n",
    "data": {
      "input": [
        6,
        64,
        58,
        20,
        9
      ],
      "output": [
        6,
        64,
        58,
        3,
        3,
        3,
        20,
        9
      ]
    },
    "demos": [
      {
        "input": [
          18,
          95,
          5,
          59,
          20,
          56
        ],
        "output": [
          18,
          95,
          5,
          3,
          3,
          3,
          59,
          20,
          56
        ]
      },
      {
        "input": [
          48,
          99,
          86
        ],
        "output": [
          48,
          99,
          86,
          3,
          3,
          3
        ]
      },
      {
        "input": [
          51,
          63,
          54,
          38,
          41,
          88
        ],
        "output": [
          51,
          63,
          54,
          3,
          3,
          3,
          38,
          41,
          88
        ]
      }
    ]
  },
  {
    "id": "c101",
    "difficulty": 28,
    "function": "def c101(x):\n    return [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]\n\n",
    "data": {
      "input": [
        81,
        76,
        30,
        37,
        47,
        45,
        29
      ],
      "output": [
        11,
        19,
        24,
        33,
        42,
        5,
        82,
        0,
        64,
        9
      ]
    },
    "demos": [
      {
        "input": [
          86,
          91,
          85,
          68,
          93,
          52,
          79
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          0,
          35,
          7
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          99,
          59,
          51,
          10,
          16
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      }
    ]
  },
  {
    "id": "c021",
    "difficulty": 29,
    "function": "def c021(x):\n    # insert 8 as element 1\n    return x[:1] + [8] + x[1:]\n\n",
    "data": {
      "input": [
        43,
        43,
        31,
        6,
        42,
        6
      ],
      "output": [
        43,
        8,
        43,
        31,
        6,
        42,
        6
      ]
    },
    "demos": [
      {
        "input": [
          26,
          67,
          29,
          61,
          18,
          15,
          70
        ],
        "output": [
          26,
          8,
          67,
          29,
          61,
          18,
          15,
          70
        ]
      },
      {
        "input": [
          97,
          89,
          41,
          36,
          47
        ],
        "output": [
          97,
          8,
          89,
          41,
          36,
          47
        ]
      },
      {
        "input": [
          3,
          5,
          33,
          81,
          70,
          5,
          54
        ],
        "output": [
          3,
          8,
          5,
          33,
          81,
          70,
          5,
          54
        ]
      }
    ]
  },
  {
    "id": "c105",
    "difficulty": 30,
    "function": "def c105(x):\n    # concatenate all but the last element with all but the first element\n    return x[:-1] + x[1:]\n\n",
    "data": {
      "input": [
        45,
        6,
        81,
        85,
        14,
        37
      ],
      "output": [
        45,
        6,
        81,
        85,
        14,
        6,
        81,
        85,
        14,
        37
      ]
    },
    "demos": [
      {
        "input": [
          19,
          16,
          49,
          89,
          36
        ],
        "output": [
          19,
          16,
          49,
          89,
          16,
          49,
          89,
          36
        ]
      },
      {
        "input": [
          2,
          49,
          69,
          95,
          95
        ],
        "output": [
          2,
          49,
          69,
          95,
          49,
          69,
          95,
          95
        ]
      },
      {
        "input": [
          49,
          3,
          22
        ],
        "output": [
          49,
          3,
          3,
          22
        ]
      }
    ]
  },
  {
    "id": "c041",
    "difficulty": 31,
    "function": "def c041(x):\n    return [9]\n\n",
    "data": {
      "input": [
        26,
        21,
        26,
        14
      ],
      "output": [
        9
      ]
    },
    "demos": [
      {
        "input": [
          60,
          80,
          81
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          78,
          70,
          91
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          47,
          80,
          49,
          51,
          68,
          26,
          87
        ],
        "output": [
          9
        ]
      }
    ]
  },
  {
    "id": "c070",
    "difficulty": 32,
    "function": "def c070(x):\n    # concatenate the input\n    return x + x\n\n",
    "data": {
      "input": [
        74,
        73,
        75,
        17,
        35
      ],
      "output": [
        74,
        73,
        75,
        17,
        35,
        74,
        73,
        75,
        17,
        35
      ]
    },
    "demos": [
      {
        "input": [
          3,
          26,
          97,
          94,
          13
        ],
        "output": [
          3,
          26,
          97,
          94,
          13,
          3,
          26,
          97,
          94,
          13
        ]
      },
      {
        "input": [
          26,
          3,
          14,
          57,
          3
        ],
        "output": [
          26,
          3,
          14,
          57,
          3,
          26,
          3,
          14,
          57,
          3
        ]
      },
      {
        "input": [
          55,
          10,
          40,
          51
        ],
        "output": [
          55,
          10,
          40,
          51,
          55,
          10,
          40,
          51
        ]
      }
    ]
  },
  {
    "id": "c052",
    "difficulty": 33,
    "function": "def c052(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        62,
        78,
        20,
        43
      ],
      "output": [
        62,
        62,
        62,
        62,
        62,
        62,
        62
      ]
    },
    "demos": [
      {
        "input": [
          76,
          40,
          2,
          22
        ],
        "output": [
          76,
          76,
          76,
          76,
          76,
          76,
          76
        ]
      },
      {
        "input": [
          63,
          13,
          8
        ],
        "output": [
          63,
          63,
          63,
          63,
          63,
          63,
          63
        ]
      },
      {
        "input": [
          68,
          11,
          65,
          32
        ],
        "output": [
          68,
          68,
          68,
          68,
          68,
          68,
          68
        ]
      }
    ]
  },
  {
    "id": "c044",
    "difficulty": 34,
    "function": "def c044(x):\n    return [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]\n\n",
    "data": {
      "input": [
        84,
        63,
        84
      ],
      "output": [
        1,
        9,
        4,
        3,
        2,
        5,
        8,
        0,
        4,
        9
      ]
    },
    "demos": [
      {
        "input": [
          4,
          67,
          82,
          38,
          41
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          45,
          49,
          8,
          25
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          88,
          84,
          49
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      }
    ]
  },
  {
    "id": "c190",
    "difficulty": 35,
    "function": "def c190(x):\n    # count by 2 from the first element to the last element\n    if x[0] < x[-1]:\n        return list(range(x[0], x[-1]+1, 2))\n    else:\n        return list(range(x[0], x[-1]-1, -2))\n\n",
    "data": {
      "input": [
        63,
        1,
        75
      ],
      "output": [
        63,
        65,
        67,
        69,
        71,
        73,
        75
      ]
    },
    "demos": [
      {
        "input": [
          87,
          52,
          88,
          10,
          11,
          11,
          91
        ],
        "output": [
          87,
          89,
          91
        ]
      },
      {
        "input": [
          99,
          72,
          24,
          85
        ],
        "output": [
          99,
          97,
          95,
          93,
          91,
          89,
          87,
          85
        ]
      },
      {
        "input": [
          73,
          9,
          77,
          79,
          80
        ],
        "output": [
          73,
          75,
          77,
          79
        ]
      }
    ]
  },
  {
    "id": "c037",
    "difficulty": 36,
    "function": "def c037(x):\n    # append 3\n    return x + [3]\n\n",
    "data": {
      "input": [
        44,
        37,
        12,
        22,
        62,
        57,
        10
      ],
      "output": [
        44,
        37,
        12,
        22,
        62,
        57,
        10,
        3
      ]
    },
    "demos": [
      {
        "input": [
          62,
          10,
          58,
          15,
          95
        ],
        "output": [
          62,
          10,
          58,
          15,
          95,
          3
        ]
      },
      {
        "input": [
          53,
          79,
          15,
          81,
          3
        ],
        "output": [
          53,
          79,
          15,
          81,
          3,
          3
        ]
      },
      {
        "input": [
          73,
          63,
          84,
          15,
          66
        ],
        "output": [
          73,
          63,
          84,
          15,
          66,
          3
        ]
      }
    ]
  },
  {
    "id": "c222",
    "difficulty": 37,
    "function": "def c222(x):\n    # remove each element with the input length\n    return [len(x) for _ in x]\n\n",
    "data": {
      "input": [
        82,
        83,
        70,
        24,
        31,
        30
      ],
      "output": [
        6,
        6,
        6,
        6,
        6,
        6
      ]
    },
    "demos": [
      {
        "input": [
          7,
          76,
          42,
          80
        ],
        "output": [
          4,
          4,
          4,
          4
        ]
      },
      {
        "input": [
          2,
          20,
          12,
          51,
          57,
          84
        ],
        "output": [
          6,
          6,
          6,
          6,
          6,
          6
        ]
      },
      {
        "input": [
          51,
          11,
          81,
          53
        ],
        "output": [
          4,
          4,
          4,
          4
        ]
      }
    ]
  },
  {
    "id": "c107",
    "difficulty": 38,
    "function": "def c107(x):\n    # unique elements, in order of appearance\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        47,
        79,
        61,
        12,
        85,
        79
      ],
      "output": [
        47,
        79,
        61,
        12,
        85
      ]
    },
    "demos": [
      {
        "input": [
          22,
          40,
          35,
          17,
          22,
          60,
          31,
          17,
          31,
          59
        ],
        "output": [
          22,
          40,
          35,
          17,
          60,
          31,
          59
        ]
      },
      {
        "input": [
          11,
          97,
          21,
          85,
          46,
          97,
          20,
          21,
          21
        ],
        "output": [
          11,
          97,
          21,
          85,
          46,
          20
        ]
      },
      {
        "input": [
          40,
          85,
          63,
          44,
          63,
          40,
          63
        ],
        "output": [
          40,
          85,
          63,
          44
        ]
      }
    ]
  },
  {
    "id": "c011",
    "difficulty": 39,
    "function": "def c011(x):\n    # [1:4] of the input\n    return x[1:4]\n\n",
    "data": {
      "input": [
        72,
        45,
        56,
        91,
        16
      ],
      "output": [
        45,
        56,
        91
      ]
    },
    "demos": [
      {
        "input": [
          57,
          75,
          72,
          75
        ],
        "output": [
          75,
          72,
          75
        ]
      },
      {
        "input": [
          52,
          49,
          88,
          98,
          76,
          46,
          25
        ],
        "output": [
          49,
          88,
          98
        ]
      },
      {
        "input": [
          80,
          86,
          99,
          39,
          89
        ],
        "output": [
          86,
          99,
          39
        ]
      }
    ]
  },
  {
    "id": "c104",
    "difficulty": 40,
    "function": "def c104(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        99,
        40,
        74,
        22,
        76
      ],
      "output": [
        99
      ]
    },
    "demos": [
      {
        "input": [
          77,
          72,
          46,
          11
        ],
        "output": [
          77
        ]
      },
      {
        "input": [
          21,
          56,
          63,
          86,
          47,
          2,
          50
        ],
        "output": [
          86
        ]
      },
      {
        "input": [
          9,
          87,
          31,
          15,
          69
        ],
        "output": [
          87
        ]
      }
    ]
  },
  {
    "id": "c192",
    "difficulty": 41,
    "function": "def c192(x):\n    # replace each element, M, with its tens digit, if no tens digit, replace with 0\n    return [int(str(i)[-2]) if len(str(i)) > 1 else 0 for i in x]\n\n",
    "data": {
      "input": [
        17,
        79,
        78,
        89,
        26,
        10,
        14
      ],
      "output": [
        1,
        7,
        7,
        8,
        2,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          90,
          24,
          95,
          37,
          86,
          84
        ],
        "output": [
          9,
          2,
          9,
          3,
          8,
          8
        ]
      },
      {
        "input": [
          27,
          21,
          51,
          83,
          2,
          27,
          41
        ],
        "output": [
          2,
          2,
          5,
          8,
          0,
          2,
          4
        ]
      },
      {
        "input": [
          44,
          5,
          16,
          80,
          99,
          40
        ],
        "output": [
          4,
          0,
          1,
          8,
          9,
          4
        ]
      }
    ]
  },
  {
    "id": "c182",
    "difficulty": 42,
    "function": "def c182(x):\n    # keep every third element\n    return x[::3]\n\n",
    "data": {
      "input": [
        23,
        89,
        77,
        95,
        8,
        89
      ],
      "output": [
        23,
        95
      ]
    },
    "demos": [
      {
        "input": [
          64,
          42,
          67,
          55,
          77,
          21,
          10,
          36
        ],
        "output": [
          64,
          55,
          10
        ]
      },
      {
        "input": [
          19,
          31,
          8,
          38,
          6,
          70
        ],
        "output": [
          19,
          38
        ]
      },
      {
        "input": [
          45,
          22,
          48,
          6,
          9,
          93
        ],
        "output": [
          45,
          6
        ]
      }
    ]
  },
  {
    "id": "c006",
    "difficulty": 43,
    "function": "def c006(x):\n    # the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        5,
        90,
        58
      ],
      "output": [
        5,
        90
      ]
    },
    "demos": [
      {
        "input": [
          21,
          80,
          72,
          11,
          67,
          19
        ],
        "output": [
          21,
          80
        ]
      },
      {
        "input": [
          4,
          51,
          96,
          34,
          11,
          29
        ],
        "output": [
          4,
          51
        ]
      },
      {
        "input": [
          90,
          26,
          74,
          85,
          84
        ],
        "output": [
          90,
          26
        ]
      }
    ]
  },
  {
    "id": "c046",
    "difficulty": 44,
    "function": "def c046(x):\n    # prepend 7\n    return [7] + x\n\n",
    "data": {
      "input": [
        62,
        6,
        9,
        14,
        16,
        61
      ],
      "output": [
        7,
        62,
        6,
        9,
        14,
        16,
        61
      ]
    },
    "demos": [
      {
        "input": [
          72,
          5,
          69,
          88
        ],
        "output": [
          7,
          72,
          5,
          69,
          88
        ]
      },
      {
        "input": [
          83,
          6,
          59,
          62,
          28
        ],
        "output": [
          7,
          83,
          6,
          59,
          62,
          28
        ]
      },
      {
        "input": [
          39,
          84,
          93,
          31
        ],
        "output": [
          7,
          39,
          84,
          93,
          31
        ]
      }
    ]
  },
  {
    "id": "c106",
    "difficulty": 45,
    "function": "def c106(x):\n    # elements in ascending order\n    return sorted(x)\n\n",
    "data": {
      "input": [
        76,
        84,
        67,
        26
      ],
      "output": [
        26,
        67,
        76,
        84
      ]
    },
    "demos": [
      {
        "input": [
          79,
          35,
          20,
          61,
          65,
          69,
          93
        ],
        "output": [
          20,
          35,
          61,
          65,
          69,
          79,
          93
        ]
      },
      {
        "input": [
          46,
          31,
          30,
          65,
          59,
          82
        ],
        "output": [
          30,
          31,
          46,
          59,
          65,
          82
        ]
      },
      {
        "input": [
          97,
          78,
          43
        ],
        "output": [
          43,
          78,
          97
        ]
      }
    ]
  },
  {
    "id": "c114",
    "difficulty": 46,
    "function": "def c114(x):\n    # prepend the last element\n    return [x[-1]] + x\n\n",
    "data": {
      "input": [
        85,
        90,
        55,
        62
      ],
      "output": [
        62,
        85,
        90,
        55,
        62
      ]
    },
    "demos": [
      {
        "input": [
          90,
          63,
          15,
          92,
          29,
          91,
          79
        ],
        "output": [
          79,
          90,
          63,
          15,
          92,
          29,
          91,
          79
        ]
      },
      {
        "input": [
          42,
          42,
          49,
          29,
          67,
          17
        ],
        "output": [
          17,
          42,
          42,
          49,
          29,
          67,
          17
        ]
      },
      {
        "input": [
          46,
          77,
          52
        ],
        "output": [
          52,
          46,
          77,
          52
        ]
      }
    ]
  },
  {
    "id": "c093",
    "difficulty": 47,
    "function": "def c093(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        32,
        0,
        35,
        37
      ],
      "output": [
        32,
        32,
        32,
        32,
        32,
        32,
        32
      ]
    },
    "demos": [
      {
        "input": [
          25,
          85,
          82,
          16
        ],
        "output": [
          25,
          25,
          25,
          25,
          25,
          25,
          25
        ]
      },
      {
        "input": [
          41,
          68,
          45,
          8,
          74,
          66
        ],
        "output": [
          41,
          41,
          41,
          41,
          41,
          41,
          41
        ]
      },
      {
        "input": [
          29,
          87,
          74,
          52,
          87,
          73,
          77
        ],
        "output": [
          29,
          29,
          29,
          29,
          29,
          29,
          29
        ]
      }
    ]
  },
  {
    "id": "c195",
    "difficulty": 48,
    "function": "def c195(x):\n    # element 1, followed by 23, 68, 42, 99, 71, followed by last element\n    return [x[0], 23, 68, 42, 99, 71, x[-1]]\n\n",
    "data": {
      "input": [
        85,
        23,
        71
      ],
      "output": [
        85,
        23,
        68,
        42,
        99,
        71,
        71
      ]
    },
    "demos": [
      {
        "input": [
          29,
          82,
          35,
          84,
          23,
          25,
          34
        ],
        "output": [
          29,
          23,
          68,
          42,
          99,
          71,
          34
        ]
      },
      {
        "input": [
          96,
          84,
          94,
          25,
          19
        ],
        "output": [
          96,
          23,
          68,
          42,
          99,
          71,
          19
        ]
      },
      {
        "input": [
          69,
          7,
          64,
          3
        ],
        "output": [
          69,
          23,
          68,
          42,
          99,
          71,
          3
        ]
      }
    ]
  },
  {
    "id": "c196",
    "difficulty": 49,
    "function": "def c196(x):\n    # concatenate 17, 38, 82 input 1 55 27\n    return [17, 38, 82] + x + [1, 55, 27]\n\n",
    "data": {
      "input": [
        31,
        6,
        93,
        95,
        10
      ],
      "output": [
        17,
        38,
        82,
        31,
        6,
        93,
        95,
        10,
        1,
        55,
        27
      ]
    },
    "demos": [
      {
        "input": [
          78,
          75,
          80
        ],
        "output": [
          17,
          38,
          82,
          78,
          75,
          80,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          39,
          17
        ],
        "output": [
          17,
          38,
          82,
          39,
          17,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          52,
          69,
          12,
          6,
          36
        ],
        "output": [
          17,
          38,
          82,
          52,
          69,
          12,
          6,
          36,
          1,
          55,
          27
        ]
      }
    ]
  },
  {
    "id": "c095",
    "difficulty": 50,
    "function": "def c095(x):\n    # remove the first element and the last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        17,
        60,
        62,
        58,
        38,
        29,
        88
      ],
      "output": [
        60,
        62,
        58,
        38,
        29
      ]
    },
    "demos": [
      {
        "input": [
          99,
          42,
          82,
          16,
          70
        ],
        "output": [
          42,
          82,
          16
        ]
      },
      {
        "input": [
          28,
          21,
          64,
          79,
          73,
          40
        ],
        "output": [
          21,
          64,
          79,
          73
        ]
      },
      {
        "input": [
          78,
          91,
          72,
          50
        ],
        "output": [
          91,
          72
        ]
      }
    ]
  },
  {
    "id": "c016",
    "difficulty": 51,
    "function": "def c016(x):\n    # replace element 1 with 8\n    return [8] + x[1:]\n\n",
    "data": {
      "input": [
        95,
        64,
        58,
        39,
        96,
        26
      ],
      "output": [
        8,
        64,
        58,
        39,
        96,
        26
      ]
    },
    "demos": [
      {
        "input": [
          71,
          26,
          74,
          17,
          82,
          34,
          87
        ],
        "output": [
          8,
          26,
          74,
          17,
          82,
          34,
          87
        ]
      },
      {
        "input": [
          2,
          98,
          53
        ],
        "output": [
          8,
          98,
          53
        ]
      },
      {
        "input": [
          85,
          18,
          81,
          53,
          53
        ],
        "output": [
          8,
          18,
          81,
          53,
          53
        ]
      }
    ]
  },
  {
    "id": "c224",
    "difficulty": 52,
    "function": "def c224(x):\n    # reverse the list, then take every other element starting from the second element, then take every other element starting from the first element\n    return x[::-2] + x[(len(x) % 2)::2]\n\n",
    "data": {
      "input": [
        84,
        87,
        67,
        29,
        59,
        28,
        82
      ],
      "output": [
        82,
        59,
        67,
        84,
        87,
        29,
        28
      ]
    },
    "demos": [
      {
        "input": [
          61,
          68,
          85,
          50
        ],
        "output": [
          50,
          68,
          61,
          85
        ]
      },
      {
        "input": [
          85,
          10,
          38,
          59
        ],
        "output": [
          59,
          10,
          85,
          38
        ]
      },
      {
        "input": [
          76,
          86,
          73,
          65
        ],
        "output": [
          65,
          86,
          76,
          73
        ]
      }
    ]
  },
  {
    "id": "c116",
    "difficulty": 53,
    "function": "def c116(x):\n    # reflect the input on itself\n    return x[::-1] + x[1:]\n\n",
    "data": {
      "input": [
        85,
        0,
        3,
        99,
        37,
        3,
        78
      ],
      "output": [
        78,
        3,
        37,
        99,
        3,
        0,
        85,
        0,
        3,
        99,
        37,
        3,
        78
      ]
    },
    "demos": [
      {
        "input": [
          23,
          59,
          53,
          72,
          21
        ],
        "output": [
          21,
          72,
          53,
          59,
          23,
          59,
          53,
          72,
          21
        ]
      },
      {
        "input": [
          99,
          41,
          48,
          64,
          34,
          53
        ],
        "output": [
          53,
          34,
          64,
          48,
          41,
          99,
          41,
          48,
          64,
          34,
          53
        ]
      },
      {
        "input": [
          33,
          86,
          30,
          65,
          58,
          85,
          95
        ],
        "output": [
          95,
          85,
          58,
          65,
          30,
          86,
          33,
          86,
          30,
          65,
          58,
          85,
          95
        ]
      }
    ]
  },
  {
    "id": "c140",
    "difficulty": 54,
    "function": "def c140(x):\n    # replace element 1 with 9\n    return x[:1] + [9] + x[2:]\n\n",
    "data": {
      "input": [
        46,
        51,
        75,
        2,
        29
      ],
      "output": [
        46,
        9,
        75,
        2,
        29
      ]
    },
    "demos": [
      {
        "input": [
          23,
          84,
          64,
          35,
          16,
          17,
          88
        ],
        "output": [
          23,
          9,
          64,
          35,
          16,
          17,
          88
        ]
      },
      {
        "input": [
          0,
          4,
          39,
          17,
          28,
          90
        ],
        "output": [
          0,
          9,
          39,
          17,
          28,
          90
        ]
      },
      {
        "input": [
          52,
          96,
          53,
          4,
          1,
          51
        ],
        "output": [
          52,
          9,
          53,
          4,
          1,
          51
        ]
      }
    ]
  },
  {
    "id": "c049",
    "difficulty": 55,
    "function": "def c049(x):\n    # remove the first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        88,
        85,
        27,
        44,
        95
      ],
      "output": [
        85,
        27,
        44,
        95
      ]
    },
    "demos": [
      {
        "input": [
          82,
          98,
          15,
          38
        ],
        "output": [
          98,
          15,
          38
        ]
      },
      {
        "input": [
          83,
          1,
          42,
          23,
          24,
          23,
          69
        ],
        "output": [
          1,
          42,
          23,
          24,
          23,
          69
        ]
      },
      {
        "input": [
          33,
          67,
          53
        ],
        "output": [
          67,
          53
        ]
      }
    ]
  },
  {
    "id": "c071",
    "difficulty": 56,
    "function": "def c071(x):\n    # add 2 to each element\n    return [i+2 for i in x]\n\n",
    "data": {
      "input": [
        48,
        23,
        49
      ],
      "output": [
        50,
        25,
        51
      ]
    },
    "demos": [
      {
        "input": [
          98,
          65,
          28,
          34,
          32
        ],
        "output": [
          100,
          67,
          30,
          36,
          34
        ]
      },
      {
        "input": [
          82,
          84,
          92,
          18,
          62,
          84
        ],
        "output": [
          84,
          86,
          94,
          20,
          64,
          86
        ]
      },
      {
        "input": [
          46,
          57,
          36,
          65,
          49,
          7
        ],
        "output": [
          48,
          59,
          38,
          67,
          51,
          9
        ]
      }
    ]
  },
  {
    "id": "c161",
    "difficulty": 57,
    "function": "def c161(x):\n    # replace each element, M, with M + the input length - M index\n    return [i + len(x) - j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        64,
        64,
        92,
        89,
        55,
        72,
        90
      ],
      "output": [
        71,
        70,
        97,
        93,
        58,
        74,
        91
      ]
    },
    "demos": [
      {
        "input": [
          25,
          68,
          70,
          94,
          96,
          4,
          52
        ],
        "output": [
          32,
          74,
          75,
          98,
          99,
          6,
          53
        ]
      },
      {
        "input": [
          51,
          67,
          3,
          2,
          5,
          91
        ],
        "output": [
          57,
          72,
          7,
          5,
          7,
          92
        ]
      },
      {
        "input": [
          46,
          62,
          39,
          15,
          86,
          6
        ],
        "output": [
          52,
          67,
          43,
          18,
          88,
          7
        ]
      }
    ]
  },
  {
    "id": "c068",
    "difficulty": 58,
    "function": "def c068(x):\n    # concatenate the input with 7, 3, 8, 4, 3\n    return x + [7, 3, 8, 4, 3]\n\n",
    "data": {
      "input": [
        46,
        77,
        13
      ],
      "output": [
        46,
        77,
        13,
        7,
        3,
        8,
        4,
        3
      ]
    },
    "demos": [
      {
        "input": [
          18,
          37,
          50,
          17,
          4
        ],
        "output": [
          18,
          37,
          50,
          17,
          4,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          86,
          87,
          26,
          9,
          12
        ],
        "output": [
          86,
          87,
          26,
          9,
          12,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          21,
          96,
          37,
          36,
          96
        ],
        "output": [
          21,
          96,
          37,
          36,
          96,
          7,
          3,
          8,
          4,
          3
        ]
      }
    ]
  },
  {
    "id": "c103",
    "difficulty": 59,
    "function": "def c103(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        35,
        2,
        67,
        76,
        4,
        35,
        9
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          50,
          95,
          53,
          85,
          36,
          38
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          98,
          14,
          88,
          65,
          44,
          80,
          72
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          71,
          20,
          60,
          4,
          9,
          40
        ],
        "output": [
          6
        ]
      }
    ]
  },
  {
    "id": "c001",
    "difficulty": 60,
    "function": "def c001(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        14,
        56,
        0,
        69,
        34,
        19,
        37
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          81,
          45,
          13
        ],
        "output": [
          13
        ]
      },
      {
        "input": [
          25,
          81,
          62,
          89,
          14,
          80
        ],
        "output": [
          62
        ]
      },
      {
        "input": [
          99,
          67,
          17,
          30,
          7
        ],
        "output": [
          17
        ]
      }
    ]
  },
  {
    "id": "c090",
    "difficulty": 61,
    "function": "def c090(x):\n    return [18, 42, 77, 20, 36]\n\n",
    "data": {
      "input": [
        68,
        89,
        93,
        82
      ],
      "output": [
        18,
        42,
        77,
        20,
        36
      ]
    },
    "demos": [
      {
        "input": [
          93,
          45,
          69,
          72,
          10
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          63,
          84,
          1,
          26
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          47,
          56,
          79
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      }
    ]
  },
  {
    "id": "c097",
    "difficulty": 62,
    "function": "def c097(x):\n    # concatenate 11, 21, 43 input 7 89 0\n    return [11, 21, 43] + x + [7, 89, 0]\n\n",
    "data": {
      "input": [
        5,
        77,
        83,
        32,
        79
      ],
      "output": [
        11,
        21,
        43,
        5,
        77,
        83,
        32,
        79,
        7,
        89,
        0
      ]
    },
    "demos": [
      {
        "input": [
          61,
          49,
          59
        ],
        "output": [
          11,
          21,
          43,
          61,
          49,
          59,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          20,
          63,
          97,
          66,
          52
        ],
        "output": [
          11,
          21,
          43,
          20,
          63,
          97,
          66,
          52,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          52,
          16,
          62
        ],
        "output": [
          11,
          21,
          43,
          52,
          16,
          62,
          7,
          89,
          0
        ]
      }
    ]
  },
  {
    "id": "c142",
    "difficulty": 63,
    "function": "def c142(x):\n    # every digit in order of appearance\n    res = []\n    for i in x:\n        for j in str(i):\n            res.append(int(j))\n    return res\n\n",
    "data": {
      "input": [
        92,
        89,
        7
      ],
      "output": [
        9,
        2,
        8,
        9,
        7
      ]
    },
    "demos": [
      {
        "input": [
          9,
          84,
          51,
          55
        ],
        "output": [
          9,
          8,
          4,
          5,
          1,
          5,
          5
        ]
      },
      {
        "input": [
          84,
          99,
          77,
          75,
          24,
          11,
          25
        ],
        "output": [
          8,
          4,
          9,
          9,
          7,
          7,
          7,
          5,
          2,
          4,
          1,
          1,
          2,
          5
        ]
      },
      {
        "input": [
          2,
          27,
          41,
          94,
          8,
          10,
          2
        ],
        "output": [
          2,
          2,
          7,
          4,
          1,
          9,
          4,
          8,
          1,
          0,
          2
        ]
      }
    ]
  },
  {
    "id": "c091",
    "difficulty": 64,
    "function": "def c091(x):\n    return [81, 99, 41, 23, 22, 75, 68, 30]\n\n",
    "data": {
      "input": [
        55,
        24,
        8,
        15,
        21,
        19
      ],
      "output": [
        81,
        99,
        41,
        23,
        22,
        75,
        68,
        30
      ]
    },
    "demos": [
      {
        "input": [
          21,
          64,
          11
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          33,
          2,
          50
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          86,
          12,
          29
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      }
    ]
  },
  {
    "id": "c034",
    "difficulty": 65,
    "function": "def c034(x):\n    # swap element 1 and element 2\n    x[0], x[1] = x[1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        2,
        45,
        35,
        99,
        2,
        54,
        40
      ],
      "output": [
        45,
        2,
        35,
        99,
        2,
        54,
        40
      ]
    },
    "demos": [
      {
        "input": [
          81,
          27,
          86,
          8,
          66
        ],
        "output": [
          27,
          81,
          86,
          8,
          66
        ]
      },
      {
        "input": [
          1,
          85,
          30,
          2,
          47,
          14,
          37
        ],
        "output": [
          85,
          1,
          30,
          2,
          47,
          14,
          37
        ]
      },
      {
        "input": [
          40,
          5,
          50,
          92
        ],
        "output": [
          5,
          40,
          50,
          92
        ]
      }
    ]
  },
  {
    "id": "c244",
    "difficulty": 66,
    "function": "def c244(x):\n    # number of 3s\n    return [x.count(3)]\n\n",
    "data": {
      "input": [
        75,
        88,
        16,
        3,
        82,
        13
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          83,
          11,
          3,
          48,
          3,
          95
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          21,
          67,
          25,
          34,
          2
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          67,
          6,
          3,
          75,
          28,
          14,
          3
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c171",
    "difficulty": 67,
    "function": "def c171(x):\n    # cumulative sum\n    res = []\n    s = 0\n    for i in x:\n        s += i\n        res.append(s)\n    return res\n\n",
    "data": {
      "input": [
        18,
        20,
        3,
        11,
        19
      ],
      "output": [
        18,
        38,
        41,
        52,
        71
      ]
    },
    "demos": [
      {
        "input": [
          8,
          10,
          8
        ],
        "output": [
          8,
          18,
          26
        ]
      },
      {
        "input": [
          10,
          20,
          8
        ],
        "output": [
          10,
          30,
          38
        ]
      },
      {
        "input": [
          20,
          18,
          12,
          2,
          2,
          4,
          8
        ],
        "output": [
          20,
          38,
          50,
          52,
          54,
          58,
          66
        ]
      }
    ]
  },
  {
    "id": "c172",
    "difficulty": 68,
    "function": "def c172(x):\n    # cumulative product\n    res = []\n    p = 1\n    for i in x:\n        p *= i\n        res.append(p)\n    return res\n\n",
    "data": {
      "input": [
        2,
        0,
        10,
        8,
        4,
        1
      ],
      "output": [
        2,
        0,
        0,
        0,
        0,
        0
      ]
    },
    "demos": [
      {
        "input": [
          5,
          6,
          0,
          3
        ],
        "output": [
          5,
          30,
          0,
          0
        ]
      },
      {
        "input": [
          9,
          4,
          3,
          2
        ],
        "output": [
          9,
          36,
          108,
          216
        ]
      },
      {
        "input": [
          7,
          0,
          4,
          10,
          7
        ],
        "output": [
          7,
          0,
          0,
          0,
          0
        ]
      }
    ]
  },
  {
    "id": "c062",
    "difficulty": 69,
    "function": "def c062(x):\n    # remove the last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        52,
        70,
        78,
        30,
        11
      ],
      "output": [
        52,
        70,
        78,
        30
      ]
    },
    "demos": [
      {
        "input": [
          23,
          7,
          78,
          34
        ],
        "output": [
          23,
          7,
          78
        ]
      },
      {
        "input": [
          80,
          26,
          89,
          48,
          51,
          25
        ],
        "output": [
          80,
          26,
          89,
          48,
          51
        ]
      },
      {
        "input": [
          21,
          12,
          18,
          25,
          73,
          65
        ],
        "output": [
          21,
          12,
          18,
          25,
          73
        ]
      }
    ]
  },
  {
    "id": "c096",
    "difficulty": 70,
    "function": "def c096(x):\n    # prepend 98 and append 37\n    return [98] + x + [37]\n\n",
    "data": {
      "input": [
        46,
        26,
        16,
        95,
        62,
        50,
        94
      ],
      "output": [
        98,
        46,
        26,
        16,
        95,
        62,
        50,
        94,
        37
      ]
    },
    "demos": [
      {
        "input": [
          29,
          67,
          45
        ],
        "output": [
          98,
          29,
          67,
          45,
          37
        ]
      },
      {
        "input": [
          11,
          36,
          67
        ],
        "output": [
          98,
          11,
          36,
          67,
          37
        ]
      },
      {
        "input": [
          48,
          24,
          76,
          55,
          93
        ],
        "output": [
          98,
          48,
          24,
          76,
          55,
          93,
          37
        ]
      }
    ]
  },
  {
    "id": "c081",
    "difficulty": 71,
    "function": "def c081(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        29,
        46,
        38
      ],
      "output": [
        38
      ]
    },
    "demos": [
      {
        "input": [
          63,
          64,
          12,
          14,
          79
        ],
        "output": [
          12
        ]
      },
      {
        "input": [
          3,
          47,
          71,
          33,
          78,
          9
        ],
        "output": [
          71
        ]
      },
      {
        "input": [
          60,
          13,
          35,
          5,
          14
        ],
        "output": [
          35
        ]
      }
    ]
  },
  {
    "id": "c109",
    "difficulty": 72,
    "function": "def c109(x):\n    # product of elements\n    p = 1\n    for i in x:\n        p *= i\n    return [p]\n\n",
    "data": {
      "input": [
        8,
        1,
        2
      ],
      "output": [
        16
      ]
    },
    "demos": [
      {
        "input": [
          0,
          3,
          2,
          2,
          2,
          9,
          10
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          8,
          0,
          10,
          3
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          6,
          10,
          2,
          3,
          6,
          2
        ],
        "output": [
          4320
        ]
      }
    ]
  },
  {
    "id": "c002",
    "difficulty": 73,
    "function": "def c002(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        59,
        36,
        57,
        13,
        70
      ],
      "output": [
        57
      ]
    },
    "demos": [
      {
        "input": [
          54,
          25,
          35,
          78
        ],
        "output": [
          35
        ]
      },
      {
        "input": [
          80,
          80,
          11,
          85,
          71
        ],
        "output": [
          11
        ]
      },
      {
        "input": [
          97,
          59,
          44,
          53,
          12
        ],
        "output": [
          44
        ]
      }
    ]
  },
  {
    "id": "c132",
    "difficulty": 74,
    "function": "def c132(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        97,
        91,
        11,
        98
      ],
      "output": [
        97,
        91,
        98
      ]
    },
    "demos": [
      {
        "input": [
          43,
          92,
          19,
          22
        ],
        "output": [
          43,
          92,
          22
        ]
      },
      {
        "input": [
          37,
          26,
          37,
          70,
          43,
          12,
          7
        ],
        "output": [
          37,
          26,
          70,
          43,
          12,
          7
        ]
      },
      {
        "input": [
          51,
          76,
          30,
          73,
          36,
          54
        ],
        "output": [
          51,
          76,
          73,
          36,
          54
        ]
      }
    ]
  },
  {
    "id": "c153",
    "difficulty": 75,
    "function": "def c153(x):\n    # each unique element followed by its number of occurrences\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    out = []\n    for k, v in res.items():\n        out.append(k)\n        out.append(v)\n    return out\n\n",
    "data": {
      "input": [
        2,
        2,
        2,
        24,
        47,
        38
      ],
      "output": [
        2,
        3,
        24,
        1,
        47,
        1,
        38,
        1
      ]
    },
    "demos": [
      {
        "input": [
          32,
          34,
          34,
          37,
          32,
          73,
          3,
          32
        ],
        "output": [
          32,
          3,
          34,
          2,
          37,
          1,
          73,
          1,
          3,
          1
        ]
      },
      {
        "input": [
          89,
          61,
          44,
          61
        ],
        "output": [
          89,
          1,
          61,
          2,
          44,
          1
        ]
      },
      {
        "input": [
          78,
          15,
          63,
          15,
          15
        ],
        "output": [
          78,
          1,
          15,
          3,
          63,
          1
        ]
      }
    ]
  },
  {
    "id": "c051",
    "difficulty": 76,
    "function": "def c051(x):\n    # prepend first element 4 times\n    return [x[0]] * 4 + x\n\n",
    "data": {
      "input": [
        74,
        15,
        38
      ],
      "output": [
        74,
        74,
        74,
        74,
        74,
        15,
        38
      ]
    },
    "demos": [
      {
        "input": [
          3,
          45,
          78
        ],
        "output": [
          3,
          3,
          3,
          3,
          3,
          45,
          78
        ]
      },
      {
        "input": [
          11,
          19,
          66,
          52,
          2
        ],
        "output": [
          11,
          11,
          11,
          11,
          11,
          19,
          66,
          52,
          2
        ]
      },
      {
        "input": [
          84,
          32,
          8,
          23,
          43,
          14,
          3
        ],
        "output": [
          84,
          84,
          84,
          84,
          84,
          32,
          8,
          23,
          43,
          14,
          3
        ]
      }
    ]
  },
  {
    "id": "c225",
    "difficulty": 77,
    "function": "def c225(x):\n    # remove first and last two elements\n    return x[2:-2]\n\n",
    "data": {
      "input": [
        76,
        75,
        70,
        7,
        79,
        12,
        11,
        23
      ],
      "output": [
        70,
        7,
        79,
        12
      ]
    },
    "demos": [
      {
        "input": [
          65,
          86,
          82,
          57,
          48,
          18,
          5
        ],
        "output": [
          82,
          57,
          48
        ]
      },
      {
        "input": [
          25,
          21,
          9,
          69,
          30,
          71,
          55
        ],
        "output": [
          9,
          69,
          30
        ]
      },
      {
        "input": [
          4,
          4,
          68,
          80,
          49,
          46
        ],
        "output": [
          68,
          80
        ]
      }
    ]
  },
  {
    "id": "c067",
    "difficulty": 78,
    "function": "def c067(x):\n    # swap the first and last element\n    x[0], x[-1] = x[-1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        77,
        29,
        21,
        88,
        87,
        67,
        47
      ],
      "output": [
        47,
        29,
        21,
        88,
        87,
        67,
        77
      ]
    },
    "demos": [
      {
        "input": [
          80,
          40,
          43,
          59,
          48,
          54
        ],
        "output": [
          54,
          40,
          43,
          59,
          48,
          80
        ]
      },
      {
        "input": [
          94,
          85,
          43,
          21,
          43,
          37
        ],
        "output": [
          37,
          85,
          43,
          21,
          43,
          94
        ]
      },
      {
        "input": [
          33,
          78,
          87,
          34,
          83
        ],
        "output": [
          83,
          78,
          87,
          34,
          33
        ]
      }
    ]
  },
  {
    "id": "c112",
    "difficulty": 79,
    "function": "def c112(x):\n    # count from 1 to the last element\n    return list(range(1, x[-1]+1))\n\n",
    "data": {
      "input": [
        89,
        14,
        89,
        13
      ],
      "output": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ]
    },
    "demos": [
      {
        "input": [
          49,
          20,
          50,
          3
        ],
        "output": [
          1,
          2,
          3
        ]
      },
      {
        "input": [
          69,
          87,
          41,
          97,
          74,
          3
        ],
        "output": [
          1,
          2,
          3
        ]
      },
      {
        "input": [
          48,
          52,
          23,
          12,
          8
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ]
      }
    ]
  },
  {
    "id": "c030",
    "difficulty": 80,
    "function": "def c030(x):\n    # remove the last 2 elements\n    return x[:-2]\n\n",
    "data": {
      "input": [
        13,
        41,
        78,
        95,
        63,
        56
      ],
      "output": [
        13,
        41,
        78,
        95
      ]
    },
    "demos": [
      {
        "input": [
          77,
          26,
          74,
          48,
          45,
          73
        ],
        "output": [
          77,
          26,
          74,
          48
        ]
      },
      {
        "input": [
          33,
          43,
          23,
          70,
          73,
          33,
          40
        ],
        "output": [
          33,
          43,
          23,
          70,
          73
        ]
      },
      {
        "input": [
          54,
          60,
          21
        ],
        "output": [
          54
        ]
      }
    ]
  },
  {
    "id": "c149",
    "difficulty": 81,
    "function": "def c149(x):\n    # replace each element, M with M * first element; remove the first element\n    return [i*x[0] for i in x[1:]]\n\n",
    "data": {
      "input": [
        12,
        19,
        9
      ],
      "output": [
        228,
        108
      ]
    },
    "demos": [
      {
        "input": [
          14,
          15,
          7,
          12,
          18
        ],
        "output": [
          210,
          98,
          168,
          252
        ]
      },
      {
        "input": [
          1,
          6,
          15,
          17,
          15,
          16
        ],
        "output": [
          6,
          15,
          17,
          15,
          16
        ]
      },
      {
        "input": [
          12,
          11,
          16,
          11,
          17,
          11,
          11
        ],
        "output": [
          132,
          192,
          132,
          204,
          132,
          132
        ]
      }
    ]
  },
  {
    "id": "c148",
    "difficulty": 82,
    "function": "def c148(x):\n    # count from 1 to each element\n    res = []\n    for i in x:\n        res += list(range(1, i+1))\n    return res\n\n",
    "data": {
      "input": [
        5,
        4,
        4,
        5,
        2
      ],
      "output": [
        1,
        2,
        3,
        4,
        5,
        1,
        2,
        3,
        4,
        1,
        2,
        3,
        4,
        1,
        2,
        3,
        4,
        5,
        1,
        2
      ]
    },
    "demos": [
      {
        "input": [
          2,
          1,
          2
        ],
        "output": [
          1,
          2,
          1,
          1,
          2
        ]
      },
      {
        "input": [
          0,
          1,
          4,
          1,
          4
        ],
        "output": [
          1,
          1,
          2,
          3,
          4,
          1,
          1,
          2,
          3,
          4
        ]
      },
      {
        "input": [
          3,
          1,
          3,
          5
        ],
        "output": [
          1,
          2,
          3,
          1,
          1,
          2,
          3,
          1,
          2,
          3,
          4,
          5
        ]
      }
    ]
  },
  {
    "id": "c017",
    "difficulty": 83,
    "function": "def c017(x):\n    # replace x[1] with 8\n    x[1] = 8\n    return x\n\n",
    "data": {
      "input": [
        19,
        21,
        99,
        86,
        9,
        33
      ],
      "output": [
        19,
        8,
        99,
        86,
        9,
        33
      ]
    },
    "demos": [
      {
        "input": [
          56,
          37,
          39,
          42,
          39
        ],
        "output": [
          56,
          8,
          39,
          42,
          39
        ]
      },
      {
        "input": [
          32,
          55,
          96,
          37,
          87
        ],
        "output": [
          32,
          8,
          96,
          37,
          87
        ]
      },
      {
        "input": [
          24,
          68,
          66
        ],
        "output": [
          24,
          8,
          66
        ]
      }
    ]
  },
  {
    "id": "c092",
    "difficulty": 84,
    "function": "def c092(x):\n    # concatenate 92, 63, 34, 18, 55\n    return x + [92, 63, 34, 18, 55]\n\n",
    "data": {
      "input": [
        71,
        79,
        93,
        33,
        22
      ],
      "output": [
        71,
        79,
        93,
        33,
        22,
        92,
        63,
        34,
        18,
        55
      ]
    },
    "demos": [
      {
        "input": [
          6,
          96,
          6
        ],
        "output": [
          6,
          96,
          6,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          83,
          1,
          90,
          62
        ],
        "output": [
          83,
          1,
          90,
          62,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          85,
          28,
          52
        ],
        "output": [
          85,
          28,
          52,
          92,
          63,
          34,
          18,
          55
        ]
      }
    ]
  },
  {
    "id": "c077",
    "difficulty": 85,
    "function": "def c077(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        72,
        57,
        4,
        33,
        7
      ],
      "output": [
        5
      ]
    },
    "demos": [
      {
        "input": [
          59,
          14,
          3,
          21,
          73,
          78,
          65
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          56,
          84,
          52,
          95,
          34,
          49
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          33,
          5,
          29,
          81,
          14
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c248",
    "difficulty": 87,
    "function": "def c248(x):\n    # elements after the first 0\n    return x[x.index(0)+1:]\n\n",
    "data": {
      "input": [
        57,
        82,
        0,
        77,
        16,
        11
      ],
      "output": [
        77,
        16,
        11
      ]
    },
    "demos": [
      {
        "input": [
          0,
          95,
          3,
          22,
          50,
          70
        ],
        "output": [
          95,
          3,
          22,
          50,
          70
        ]
      },
      {
        "input": [
          0,
          73,
          55,
          22,
          59,
          9
        ],
        "output": [
          73,
          55,
          22,
          59,
          9
        ]
      },
      {
        "input": [
          43,
          47,
          41,
          83,
          0,
          22
        ],
        "output": [
          22
        ]
      }
    ]
  },
  {
    "id": "c199",
    "difficulty": 88,
    "function": "def c199(x):\n    # elements in ascending order, each preceded by its rank\n    res = []\n    for i, v in enumerate(sorted(x)):\n        res.append(i+1)\n        res.append(v)\n    return res\n\n",
    "data": {
      "input": [
        84,
        99,
        35,
        55,
        85,
        46
      ],
      "output": [
        1,
        35,
        2,
        46,
        3,
        55,
        4,
        84,
        5,
        85,
        6,
        99
      ]
    },
    "demos": [
      {
        "input": [
          27,
          14,
          8,
          85,
          23,
          60
        ],
        "output": [
          1,
          8,
          2,
          14,
          3,
          23,
          4,
          27,
          5,
          60,
          6,
          85
        ]
      },
      {
        "input": [
          18,
          69,
          97,
          44,
          12,
          71
        ],
        "output": [
          1,
          12,
          2,
          18,
          3,
          44,
          4,
          69,
          5,
          71,
          6,
          97
        ]
      },
      {
        "input": [
          13,
          47,
          33,
          88,
          74,
          74
        ],
        "output": [
          1,
          13,
          2,
          33,
          3,
          47,
          4,
          74,
          5,
          74,
          6,
          88
        ]
      }
    ]
  },
  {
    "id": "c007",
    "difficulty": 89,
    "function": "def c007(x):\n    # remove all but the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        64,
        44,
        27,
        15,
        74,
        2
      ],
      "output": [
        64,
        44
      ]
    },
    "demos": [
      {
        "input": [
          71,
          89,
          15
        ],
        "output": [
          71,
          89
        ]
      },
      {
        "input": [
          93,
          31,
          19,
          22,
          40
        ],
        "output": [
          93,
          31
        ]
      },
      {
        "input": [
          96,
          96,
          58
        ],
        "output": [
          96,
          96
        ]
      }
    ]
  },
  {
    "id": "c176",
    "difficulty": 90,
    "function": "def c176(x):\n    # sum of each consecutive pair of elements\n    return [x[i] + x[i+1] for i in range(0, len(x)-1)]\n\n",
    "data": {
      "input": [
        53,
        21,
        70
      ],
      "output": [
        74,
        91
      ]
    },
    "demos": [
      {
        "input": [
          68,
          90,
          69,
          99,
          11,
          36,
          72
        ],
        "output": [
          158,
          159,
          168,
          110,
          47,
          108
        ]
      },
      {
        "input": [
          13,
          95,
          73,
          10
        ],
        "output": [
          108,
          168,
          83
        ]
      },
      {
        "input": [
          33,
          22,
          25,
          33,
          69,
          16,
          53
        ],
        "output": [
          55,
          47,
          58,
          102,
          85,
          69
        ]
      }
    ]
  },
  {
    "id": "c066",
    "difficulty": 91,
    "function": "def c066(x):\n    # left rotate the list by 1\n    return x[1:] + x[:1]\n\n",
    "data": {
      "input": [
        87,
        78,
        58,
        20,
        38,
        20
      ],
      "output": [
        78,
        58,
        20,
        38,
        20,
        87
      ]
    },
    "demos": [
      {
        "input": [
          44,
          90,
          78,
          42
        ],
        "output": [
          90,
          78,
          42,
          44
        ]
      },
      {
        "input": [
          13,
          34,
          56,
          6,
          23
        ],
        "output": [
          34,
          56,
          6,
          23,
          13
        ]
      },
      {
        "input": [
          49,
          44,
          9
        ],
        "output": [
          44,
          9,
          49
        ]
      }
    ]
  },
  {
    "id": "c053",
    "difficulty": 92,
    "function": "def c053(x):\n    # replace x[1] with x[0]\n    x[1] = x[0]\n    return x\n\n",
    "data": {
      "input": [
        95,
        52,
        6
      ],
      "output": [
        95,
        95,
        6
      ]
    },
    "demos": [
      {
        "input": [
          99,
          66,
          45,
          12,
          55
        ],
        "output": [
          99,
          99,
          45,
          12,
          55
        ]
      },
      {
        "input": [
          4,
          31,
          8
        ],
        "output": [
          4,
          4,
          8
        ]
      },
      {
        "input": [
          6,
          71,
          80
        ],
        "output": [
          6,
          6,
          80
        ]
      }
    ]
  },
  {
    "id": "c047",
    "difficulty": 93,
    "function": "def c047(x):\n    # concatenate 9, 6, 3, 8, 5\n    return [9, 6, 3, 8, 5] + x\n\n",
    "data": {
      "input": [
        98,
        65,
        93,
        42,
        64,
        65
      ],
      "output": [
        9,
        6,
        3,
        8,
        5,
        98,
        65,
        93,
        42,
        64,
        65
      ]
    },
    "demos": [
      {
        "input": [
          7,
          81,
          22,
          1
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          7,
          81,
          22,
          1
        ]
      },
      {
        "input": [
          19,
          16,
          83,
          46
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          19,
          16,
          83,
          46
        ]
      },
      {
        "input": [
          81,
          49,
          59,
          20,
          60,
          24,
          89
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          81,
          49,
          59,
          20,
          60,
          24,
          89
        ]
      }
    ]
  },
  {
    "id": "c064",
    "difficulty": 94,
    "function": "def c064(x):\n    # remove the first and last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        26,
        63,
        69,
        42
      ],
      "output": [
        63,
        69
      ]
    },
    "demos": [
      {
        "input": [
          62,
          69,
          40
        ],
        "output": [
          69
        ]
      },
      {
        "input": [
          40,
          77,
          96,
          88,
          9
        ],
        "output": [
          77,
          96,
          88
        ]
      },
      {
        "input": [
          89,
          34,
          10,
          75,
          15,
          26,
          43
        ],
        "output": [
          34,
          10,
          75,
          15,
          26
        ]
      }
    ]
  },
  {
    "id": "c078",
    "difficulty": 95,
    "function": "def c078(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        69,
        90,
        86,
        70
      ],
      "output": [
        90
      ]
    },
    "demos": [
      {
        "input": [
          70,
          80,
          17,
          86,
          70,
          87,
          84
        ],
        "output": [
          87
        ]
      },
      {
        "input": [
          26,
          30,
          23,
          12
        ],
        "output": [
          30
        ]
      },
      {
        "input": [
          29,
          81,
          29,
          37,
          55,
          84
        ],
        "output": [
          84
        ]
      }
    ]
  },
  {
    "id": "c119",
    "difficulty": 96,
    "function": "def c119(x):\n    # make the list begin and ends with 8\n    if x[0] != 8:\n        x = [8] + x\n    if x[-1] != 8:\n        x = x + [8]\n    return x\n\n",
    "data": {
      "input": [
        2,
        72,
        93,
        1
      ],
      "output": [
        8,
        2,
        72,
        93,
        1,
        8
      ]
    },
    "demos": [
      {
        "input": [
          65,
          50,
          20,
          54
        ],
        "output": [
          8,
          65,
          50,
          20,
          54,
          8
        ]
      },
      {
        "input": [
          92,
          33,
          47,
          84,
          77
        ],
        "output": [
          8,
          92,
          33,
          47,
          84,
          77,
          8
        ]
      },
      {
        "input": [
          57,
          9,
          66,
          99,
          25
        ],
        "output": [
          8,
          57,
          9,
          66,
          99,
          25,
          8
        ]
      }
    ]
  },
  {
    "id": "c135",
    "difficulty": 97,
    "function": "def c135(x):\n    # remove the first 7\n    x.remove(7)\n    return x\n\n",
    "data": {
      "input": [
        1,
        7,
        9,
        7,
        2
      ],
      "output": [
        1,
        9,
        7,
        2
      ]
    },
    "demos": [
      {
        "input": [
          3,
          7,
          5,
          2,
          7,
          7
        ],
        "output": [
          3,
          5,
          2,
          7,
          7
        ]
      },
      {
        "input": [
          4,
          4,
          7,
          9,
          7,
          7,
          7,
          0
        ],
        "output": [
          4,
          4,
          9,
          7,
          7,
          7,
          0
        ]
      },
      {
        "input": [
          5,
          7,
          6,
          5,
          5,
          7
        ],
        "output": [
          5,
          6,
          5,
          5,
          7
        ]
      }
    ]
  },
  {
    "id": "c198",
    "difficulty": 98,
    "function": "def c198(x):\n    # unique elements in descending order\n    res = set(x)\n    return sorted(res, reverse=True)\n\n",
    "data": {
      "input": [
        35,
        27,
        88,
        85,
        85,
        88
      ],
      "output": [
        88,
        85,
        35,
        27
      ]
    },
    "demos": [
      {
        "input": [
          28,
          27,
          28,
          28,
          53,
          73
        ],
        "output": [
          73,
          53,
          28,
          27
        ]
      },
      {
        "input": [
          12,
          85,
          75,
          12,
          86,
          70,
          10,
          44,
          85
        ],
        "output": [
          86,
          85,
          75,
          70,
          44,
          12,
          10
        ]
      },
      {
        "input": [
          24,
          71,
          71,
          16
        ],
        "output": [
          71,
          24,
          16
        ]
      }
    ]
  },
  {
    "id": "c219",
    "difficulty": 99,
    "function": "def c219(x):\n    # keep only every other element\n    return x[::2]\n\n",
    "data": {
      "input": [
        9,
        22,
        71,
        8,
        98
      ],
      "output": [
        9,
        71,
        98
      ]
    },
    "demos": [
      {
        "input": [
          21,
          97,
          50,
          18,
          28,
          44
        ],
        "output": [
          21,
          50,
          28
        ]
      },
      {
        "input": [
          63,
          91,
          5,
          50,
          65,
          74,
          27,
          54,
          5
        ],
        "output": [
          63,
          5,
          65,
          27,
          5
        ]
      },
      {
        "input": [
          77,
          73,
          32,
          75,
          25,
          67
        ],
        "output": [
          77,
          32,
          25
        ]
      }
    ]
  },
  {
    "id": "c075",
    "difficulty": 100,
    "function": "def c075(x):\n    # remove even index\n    return x[1::2]\n\n",
    "data": {
      "input": [
        69,
        81,
        99,
        29,
        20,
        23,
        87
      ],
      "output": [
        81,
        29,
        23
      ]
    },
    "demos": [
      {
        "input": [
          31,
          83,
          54,
          81,
          71
        ],
        "output": [
          83,
          81
        ]
      },
      {
        "input": [
          79,
          97,
          77,
          52
        ],
        "output": [
          97,
          52
        ]
      },
      {
        "input": [
          74,
          25,
          6,
          89,
          81,
          81
        ],
        "output": [
          25,
          89,
          81
        ]
      }
    ]
  },
  {
    "id": "c177",
    "difficulty": 101,
    "function": "def c177(x):\n    # interleave the input and the reversed input\n    return [i for pair in zip(x, x[::-1]) for i in pair]\n\n",
    "data": {
      "input": [
        10,
        3,
        68,
        78,
        17,
        35,
        35
      ],
      "output": [
        10,
        35,
        3,
        35,
        68,
        17,
        78,
        78,
        17,
        68,
        35,
        3,
        35,
        10
      ]
    },
    "demos": [
      {
        "input": [
          86,
          74,
          2,
          75,
          74
        ],
        "output": [
          86,
          74,
          74,
          75,
          2,
          2,
          75,
          74,
          74,
          86
        ]
      },
      {
        "input": [
          58,
          23,
          6,
          43,
          93,
          7,
          1
        ],
        "output": [
          58,
          1,
          23,
          7,
          6,
          93,
          43,
          43,
          93,
          6,
          7,
          23,
          1,
          58
        ]
      },
      {
        "input": [
          52,
          23,
          42,
          65,
          99,
          15
        ],
        "output": [
          52,
          15,
          23,
          99,
          42,
          65,
          65,
          42,
          99,
          23,
          15,
          52
        ]
      }
    ]
  },
  {
    "id": "c025",
    "difficulty": 102,
    "function": "def c025(x):\n    # remove element 1\n    return x[:1] + x[2:]\n\n",
    "data": {
      "input": [
        32,
        80,
        30,
        12
      ],
      "output": [
        32,
        30,
        12
      ]
    },
    "demos": [
      {
        "input": [
          35,
          48,
          45,
          10
        ],
        "output": [
          35,
          45,
          10
        ]
      },
      {
        "input": [
          28,
          34,
          54
        ],
        "output": [
          28,
          54
        ]
      },
      {
        "input": [
          21,
          97,
          11,
          34,
          36,
          85
        ],
        "output": [
          21,
          11,
          34,
          36,
          85
        ]
      }
    ]
  },
  {
    "id": "c125",
    "difficulty": 103,
    "function": "def c125(x):\n    # keep only elements whose tens digit equals the tens digit of the first element\n    return [i for i in x if len(str(i)) > 1 and str(i)[-2] == str(x[0])[-2]]\n\n",
    "data": {
      "input": [
        94,
        20,
        61,
        94,
        83,
        101,
        98,
        102,
        71
      ],
      "output": [
        94,
        94,
        98
      ]
    },
    "demos": [
      {
        "input": [
          93,
          97,
          34,
          74,
          31,
          84,
          68
        ],
        "output": [
          93,
          97
        ]
      },
      {
        "input": [
          23,
          25,
          48,
          31,
          10,
          97,
          35,
          97
        ],
        "output": [
          23,
          25
        ]
      },
      {
        "input": [
          97,
          40,
          33,
          83,
          79,
          106,
          88,
          101,
          101
        ],
        "output": [
          97
        ]
      }
    ]
  },
  {
    "id": "c087",
    "difficulty": 105,
    "function": "def c087(x):\n    # swap second and third element\n    x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        0,
        43,
        51,
        33,
        49,
        84,
        68
      ],
      "output": [
        0,
        51,
        43,
        33,
        49,
        84,
        68
      ]
    },
    "demos": [
      {
        "input": [
          21,
          82,
          64,
          66,
          51,
          68
        ],
        "output": [
          21,
          64,
          82,
          66,
          51,
          68
        ]
      },
      {
        "input": [
          19,
          47,
          72,
          70,
          36
        ],
        "output": [
          19,
          72,
          47,
          70,
          36
        ]
      },
      {
        "input": [
          47,
          91,
          7,
          39
        ],
        "output": [
          47,
          7,
          91,
          39
        ]
      }
    ]
  },
  {
    "id": "c013",
    "difficulty": 106,
    "function": "def c013(x):\n    # element 2 through 6\n    return x[2:6]\n\n",
    "data": {
      "input": [
        89,
        57,
        65,
        0,
        84,
        77,
        0
      ],
      "output": [
        65,
        0,
        84,
        77
      ]
    },
    "demos": [
      {
        "input": [
          49,
          83,
          33,
          99,
          64,
          80,
          49,
          20,
          28
        ],
        "output": [
          33,
          99,
          64,
          80
        ]
      },
      {
        "input": [
          68,
          65,
          99,
          84,
          99,
          61
        ],
        "output": [
          99,
          84,
          99,
          61
        ]
      },
      {
        "input": [
          65,
          93,
          15,
          18,
          25,
          39,
          5,
          92
        ],
        "output": [
          15,
          18,
          25,
          39
        ]
      }
    ]
  },
  {
    "id": "c069",
    "difficulty": 107,
    "function": "def c069(x):\n    # 9,3,4,0, input, 7,2,9,1\n    return [9,3,4,0] + x + [7,2,9,1]\n\n",
    "data": {
      "input": [
        12,
        42,
        69,
        41,
        42
      ],
      "output": [
        9,
        3,
        4,
        0,
        12,
        42,
        69,
        41,
        42,
        7,
        2,
        9,
        1
      ]
    },
    "demos": [
      {
        "input": [
          99,
          79,
          71,
          74
        ],
        "output": [
          9,
          3,
          4,
          0,
          99,
          79,
          71,
          74,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          99,
          92,
          78,
          2
        ],
        "output": [
          9,
          3,
          4,
          0,
          99,
          92,
          78,
          2,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          0,
          84,
          63,
          52
        ],
        "output": [
          9,
          3,
          4,
          0,
          0,
          84,
          63,
          52,
          7,
          2,
          9,
          1
        ]
      }
    ]
  },
  {
    "id": "c117",
    "difficulty": 108,
    "function": "def c117(x):\n    # left rotate by 3\n    return x[3:] + x[:3]\n\n",
    "data": {
      "input": [
        95,
        45,
        70,
        19
      ],
      "output": [
        19,
        95,
        45,
        70
      ]
    },
    "demos": [
      {
        "input": [
          53,
          53,
          93,
          40,
          23
        ],
        "output": [
          40,
          23,
          53,
          53,
          93
        ]
      },
      {
        "input": [
          42,
          8,
          94,
          13,
          40
        ],
        "output": [
          13,
          40,
          42,
          8,
          94
        ]
      },
      {
        "input": [
          75,
          12,
          79,
          41
        ],
        "output": [
          41,
          75,
          12,
          79
        ]
      }
    ]
  },
  {
    "id": "c228",
    "difficulty": 109,
    "function": "def c228(x):\n    # replace each element with the number of occurrences of that element so far\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        60,
        45,
        38,
        9,
        6,
        38
      ],
      "output": [
        1,
        1,
        1,
        1,
        1,
        2
      ]
    },
    "demos": [
      {
        "input": [
          21,
          20,
          64,
          65,
          21,
          20
        ],
        "output": [
          1,
          1,
          1,
          1,
          2,
          2
        ]
      },
      {
        "input": [
          73,
          34,
          10,
          73,
          10,
          70
        ],
        "output": [
          1,
          1,
          1,
          2,
          2,
          1
        ]
      },
      {
        "input": [
          43,
          80,
          56,
          43,
          43,
          8
        ],
        "output": [
          1,
          1,
          1,
          2,
          3,
          1
        ]
      }
    ]
  },
  {
    "id": "c197",
    "difficulty": 110,
    "function": "def c197(x):\n    # replace each element with the number of occurrences of that element\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in x:\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        87,
        25,
        31,
        53,
        46,
        55,
        53,
        29
      ],
      "output": [
        1,
        1,
        1,
        2,
        1,
        1,
        2,
        1
      ]
    },
    "demos": [
      {
        "input": [
          49,
          24,
          44,
          56,
          49,
          69,
          65
        ],
        "output": [
          2,
          1,
          1,
          1,
          2,
          1,
          1
        ]
      },
      {
        "input": [
          79,
          43,
          79,
          37,
          79,
          54
        ],
        "output": [
          3,
          1,
          3,
          1,
          3,
          1
        ]
      },
      {
        "input": [
          63,
          14,
          3,
          14,
          40,
          3
        ],
        "output": [
          1,
          2,
          2,
          2,
          1,
          2
        ]
      }
    ]
  },
  {
    "id": "c065",
    "difficulty": 111,
    "function": "def c065(x):\n    # prepend 9 and append 7\n    return [9] + x + [7]\n\n",
    "data": {
      "input": [
        76,
        44,
        18,
        36,
        4,
        26,
        19
      ],
      "output": [
        9,
        76,
        44,
        18,
        36,
        4,
        26,
        19,
        7
      ]
    },
    "demos": [
      {
        "input": [
          80,
          93,
          5,
          54,
          83,
          89
        ],
        "output": [
          9,
          80,
          93,
          5,
          54,
          83,
          89,
          7
        ]
      },
      {
        "input": [
          6,
          38,
          79,
          36,
          31,
          58
        ],
        "output": [
          9,
          6,
          38,
          79,
          36,
          31,
          58,
          7
        ]
      },
      {
        "input": [
          54,
          2,
          85
        ],
        "output": [
          9,
          54,
          2,
          85,
          7
        ]
      }
    ]
  },
  {
    "id": "c156",
    "difficulty": 112,
    "function": "def c156(x):\n    # reverse the input and add each element to its new index\n    x = x[::-1]\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        72,
        80,
        14,
        76,
        76,
        33
      ],
      "output": [
        33,
        77,
        78,
        17,
        84,
        77
      ]
    },
    "demos": [
      {
        "input": [
          63,
          97,
          42
        ],
        "output": [
          42,
          98,
          65
        ]
      },
      {
        "input": [
          6,
          7,
          34
        ],
        "output": [
          34,
          8,
          8
        ]
      },
      {
        "input": [
          52,
          54,
          74,
          22,
          43
        ],
        "output": [
          43,
          23,
          76,
          57,
          56
        ]
      }
    ]
  },
  {
    "id": "c110",
    "difficulty": 113,
    "function": "def c110(x):\n    # three largest elements in descending order\n    return sorted(x, reverse=True)[:3]\n\n",
    "data": {
      "input": [
        95,
        17,
        59,
        7,
        89,
        33
      ],
      "output": [
        95,
        89,
        59
      ]
    },
    "demos": [
      {
        "input": [
          4,
          56,
          86,
          47,
          29,
          43,
          45
        ],
        "output": [
          86,
          56,
          47
        ]
      },
      {
        "input": [
          94,
          29,
          52
        ],
        "output": [
          94,
          52,
          29
        ]
      },
      {
        "input": [
          9,
          64,
          2,
          91
        ],
        "output": [
          91,
          64,
          9
        ]
      }
    ]
  },
  {
    "id": "c233",
    "difficulty": 114,
    "function": "def c233(x):\n    # number of occurrences of each unique element, in order of appearance\n    numbers = []\n    res = []\n    for i in x:\n        if i not in numbers:\n            numbers.append(i)\n            res.append(x.count(i))\n    return res\n\n",
    "data": {
      "input": [
        8,
        4,
        4,
        3,
        1,
        0,
        8,
        8,
        3
      ],
      "output": [
        3,
        2,
        2,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          4,
          6,
          4,
          7,
          2
        ],
        "output": [
          2,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          7,
          9,
          3,
          8,
          3,
          3,
          0,
          9,
          6
        ],
        "output": [
          1,
          2,
          3,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          10,
          4,
          10,
          4,
          8,
          4,
          2
        ],
        "output": [
          2,
          3,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c003",
    "difficulty": 115,
    "function": "def c003(x):\n    # remove all but seventh element\n    return [x[6]]\n\n",
    "data": {
      "input": [
        80,
        12,
        31,
        77,
        11,
        24,
        1,
        7,
        6
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          75,
          96,
          3,
          99,
          13,
          93,
          18,
          30,
          93
        ],
        "output": [
          18
        ]
      },
      {
        "input": [
          35,
          65,
          26,
          21,
          94,
          38,
          57,
          41,
          84,
          67
        ],
        "output": [
          57
        ]
      },
      {
        "input": [
          85,
          62,
          68,
          9,
          98,
          25,
          21,
          91,
          0,
          23
        ],
        "output": [
          21
        ]
      }
    ]
  },
  {
    "id": "c230",
    "difficulty": 116,
    "function": "def c230(x):\n    # count by 2 from the smallest element to the largest element\n    return list(range(min(x), max(x)+1, 2))\n\n",
    "data": {
      "input": [
        11,
        15,
        4
      ],
      "output": [
        4,
        6,
        8,
        10,
        12,
        14
      ]
    },
    "demos": [
      {
        "input": [
          49,
          45,
          37,
          52
        ],
        "output": [
          37,
          39,
          41,
          43,
          45,
          47,
          49,
          51
        ]
      },
      {
        "input": [
          79,
          84,
          73
        ],
        "output": [
          73,
          75,
          77,
          79,
          81,
          83
        ]
      },
      {
        "input": [
          69,
          88,
          71
        ],
        "output": [
          69,
          71,
          73,
          75,
          77,
          79,
          81,
          83,
          85,
          87
        ]
      }
    ]
  },
  {
    "id": "c122",
    "difficulty": 117,
    "function": "def c122(x):\n    # remove all but penultimate element\n    return [x[-2]]\n\n",
    "data": {
      "input": [
        37,
        15,
        60,
        70,
        41,
        56,
        2
      ],
      "output": [
        56
      ]
    },
    "demos": [
      {
        "input": [
          91,
          25,
          31,
          61,
          61,
          94,
          89
        ],
        "output": [
          94
        ]
      },
      {
        "input": [
          93,
          49,
          86
        ],
        "output": [
          49
        ]
      },
      {
        "input": [
          47,
          97,
          4,
          55,
          13,
          6
        ],
        "output": [
          13
        ]
      }
    ]
  },
  {
    "id": "c020",
    "difficulty": 118,
    "function": "def c020(x):\n    # replace the first element with the last element\n    x[0] = x[-1]\n    return x\n\n",
    "data": {
      "input": [
        64,
        81,
        1,
        11
      ],
      "output": [
        11,
        81,
        1,
        11
      ]
    },
    "demos": [
      {
        "input": [
          5,
          64,
          38,
          7,
          96,
          70
        ],
        "output": [
          70,
          64,
          38,
          7,
          96,
          70
        ]
      },
      {
        "input": [
          6,
          68,
          76
        ],
        "output": [
          76,
          68,
          76
        ]
      },
      {
        "input": [
          81,
          43,
          72,
          58,
          32,
          13,
          56
        ],
        "output": [
          56,
          43,
          72,
          58,
          32,
          13,
          56
        ]
      }
    ]
  },
  {
    "id": "c235",
    "difficulty": 119,
    "function": "def c235(x):\n    # count up and down between elements\n    res = []\n    for i in range(len(x)-1):\n        if x[i] < x[i+1]:\n            res += list(range(x[i], x[i+1]+1))\n        else:\n            res += list(range(x[i], x[i+1]-1, -1))\n    return res\n\n",
    "data": {
      "input": [
        57,
        56,
        60
      ],
      "output": [
        57,
        56,
        56,
        57,
        58,
        59,
        60
      ]
    },
    "demos": [
      {
        "input": [
          66,
          65,
          66
        ],
        "output": [
          66,
          65,
          65,
          66
        ]
      },
      {
        "input": [
          32,
          35,
          34
        ],
        "output": [
          32,
          33,
          34,
          35,
          35,
          34
        ]
      },
      {
        "input": [
          66,
          66,
          64
        ],
        "output": [
          66,
          66,
          65,
          64
        ]
      }
    ]
  },
  {
    "id": "c157",
    "difficulty": 120,
    "function": "def c157(x):\n    # each element followed by 0 if even, 1 if odd\n    res = []\n    for i in x:\n        res.append(i)\n        res.append(i % 2)\n    return res\n\n",
    "data": {
      "input": [
        78,
        4,
        43,
        45,
        36,
        7
      ],
      "output": [
        78,
        0,
        4,
        0,
        43,
        1,
        45,
        1,
        36,
        0,
        7,
        1
      ]
    },
    "demos": [
      {
        "input": [
          53,
          29,
          72,
          84,
          67
        ],
        "output": [
          53,
          1,
          29,
          1,
          72,
          0,
          84,
          0,
          67,
          1
        ]
      },
      {
        "input": [
          45,
          17,
          86,
          73
        ],
        "output": [
          45,
          1,
          17,
          1,
          86,
          0,
          73,
          1
        ]
      },
      {
        "input": [
          60,
          9,
          51,
          96,
          59,
          29,
          45
        ],
        "output": [
          60,
          0,
          9,
          1,
          51,
          1,
          96,
          0,
          59,
          1,
          29,
          1,
          45,
          1
        ]
      }
    ]
  },
  {
    "id": "c185",
    "difficulty": 121,
    "function": "def c185(x):\n    # replace the sublist between the first and last with its sum\n    return x[:1] + [sum(x[1:-1])] + x[-1:]\n\n",
    "data": {
      "input": [
        3,
        0,
        3,
        12
      ],
      "output": [
        3,
        3,
        12
      ]
    },
    "demos": [
      {
        "input": [
          13,
          8,
          11,
          16
        ],
        "output": [
          13,
          19,
          16
        ]
      },
      {
        "input": [
          2,
          16,
          5
        ],
        "output": [
          2,
          16,
          5
        ]
      },
      {
        "input": [
          10,
          0,
          17,
          17,
          16,
          13
        ],
        "output": [
          10,
          50,
          13
        ]
      }
    ]
  },
  {
    "id": "c213",
    "difficulty": 122,
    "function": "def c213(x):\n    # three smallest elements in ascending order\n    return sorted(x)[:3]\n\n",
    "data": {
      "input": [
        64,
        89,
        25,
        66,
        95,
        52
      ],
      "output": [
        25,
        52,
        64
      ]
    },
    "demos": [
      {
        "input": [
          8,
          55,
          39
        ],
        "output": [
          8,
          39,
          55
        ]
      },
      {
        "input": [
          22,
          48,
          28,
          80,
          93,
          70
        ],
        "output": [
          22,
          28,
          48
        ]
      },
      {
        "input": [
          59,
          42,
          44,
          74
        ],
        "output": [
          42,
          44,
          59
        ]
      }
    ]
  },
  {
    "id": "c184",
    "difficulty": 123,
    "function": "def c184(x):\n    # keep only odd elements with an even index\n    return [i for i in x if i % 2 == 1 and x.index(i) % 2 == 0]\n\n",
    "data": {
      "input": [
        3,
        55,
        61,
        83,
        80,
        27,
        18
      ],
      "output": [
        3,
        61
      ]
    },
    "demos": [
      {
        "input": [
          7,
          49,
          28,
          53,
          80,
          57,
          40,
          4
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          99,
          40,
          5,
          66,
          72,
          57,
          53,
          71
        ],
        "output": [
          99,
          5,
          53
        ]
      },
      {
        "input": [
          55,
          15,
          17,
          79,
          47,
          75,
          40
        ],
        "output": [
          55,
          17,
          47
        ]
      }
    ]
  },
  {
    "id": "c155",
    "difficulty": 124,
    "function": "def c155(x):\n    # multiply each element by its index\n    return [i*j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        99,
        49,
        26,
        10
      ],
      "output": [
        0,
        49,
        52,
        30
      ]
    },
    "demos": [
      {
        "input": [
          19,
          28,
          84,
          6
        ],
        "output": [
          0,
          28,
          168,
          18
        ]
      },
      {
        "input": [
          78,
          69,
          68
        ],
        "output": [
          0,
          69,
          136
        ]
      },
      {
        "input": [
          11,
          70,
          19,
          18
        ],
        "output": [
          0,
          70,
          38,
          54
        ]
      }
    ]
  },
  {
    "id": "c082",
    "difficulty": 125,
    "function": "def c082(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        98,
        62,
        96,
        24,
        49
      ],
      "output": [
        96
      ]
    },
    "demos": [
      {
        "input": [
          66,
          12,
          90,
          11,
          39
        ],
        "output": [
          90
        ]
      },
      {
        "input": [
          12,
          96,
          54,
          92,
          3,
          47,
          16
        ],
        "output": [
          54
        ]
      },
      {
        "input": [
          22,
          59,
          15
        ],
        "output": [
          15
        ]
      }
    ]
  },
  {
    "id": "c231",
    "difficulty": 126,
    "function": "def c231(x):\n    # the number of occurrences of each unique element in ascending order\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    return sorted(res.values())\n\n",
    "data": {
      "input": [
        4,
        7,
        3,
        9,
        9,
        9,
        5,
        4,
        5,
        9,
        4
      ],
      "output": [
        1,
        1,
        2,
        3,
        4
      ]
    },
    "demos": [
      {
        "input": [
          6,
          6,
          10,
          5,
          5,
          5,
          6,
          5,
          10
        ],
        "output": [
          2,
          3,
          4
        ]
      },
      {
        "input": [
          6,
          5,
          7,
          9,
          8,
          5,
          6,
          7,
          3,
          5
        ],
        "output": [
          1,
          1,
          1,
          2,
          2,
          3
        ]
      },
      {
        "input": [
          8,
          6,
          7,
          10,
          10,
          2,
          8,
          7,
          7
        ],
        "output": [
          1,
          1,
          2,
          2,
          3
        ]
      }
    ]
  },
  {
    "id": "c099",
    "difficulty": 127,
    "function": "def c099(x):\n    # remove the lower half of the list\n    median = sorted(x)[len(x)//2]\n    return [i for i in x if i >= median]\n\n",
    "data": {
      "input": [
        22,
        91,
        39,
        76,
        25,
        54
      ],
      "output": [
        91,
        76,
        54
      ]
    },
    "demos": [
      {
        "input": [
          72,
          14,
          15,
          81,
          29,
          1,
          86
        ],
        "output": [
          72,
          81,
          29,
          86
        ]
      },
      {
        "input": [
          93,
          36,
          68,
          88,
          54,
          21
        ],
        "output": [
          93,
          68,
          88
        ]
      },
      {
        "input": [
          97,
          22,
          73,
          90,
          7,
          72,
          4,
          44,
          48
        ],
        "output": [
          97,
          73,
          90,
          72,
          48
        ]
      }
    ]
  },
  {
    "id": "c247",
    "difficulty": 128,
    "function": "def c247(x):\n    # elements before the first 0\n    return x[:x.index(0)]\n\n",
    "data": {
      "input": [
        59,
        0,
        41,
        0,
        66,
        81,
        66
      ],
      "output": [
        59
      ]
    },
    "demos": [
      {
        "input": [
          70,
          0,
          0,
          0,
          36,
          74,
          69
        ],
        "output": [
          70
        ]
      },
      {
        "input": [
          68,
          90,
          94,
          0,
          6,
          0,
          93
        ],
        "output": [
          68,
          90,
          94
        ]
      },
      {
        "input": [
          5,
          0,
          11,
          0,
          85,
          0,
          0,
          66
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c008",
    "difficulty": 129,
    "function": "def c008(x):\n    # the first 5 elements\n    return x[:5]\n\n",
    "data": {
      "input": [
        79,
        55,
        76,
        90,
        63,
        89,
        72,
        59
      ],
      "output": [
        79,
        55,
        76,
        90,
        63
      ]
    },
    "demos": [
      {
        "input": [
          10,
          34,
          16,
          4,
          78
        ],
        "output": [
          10,
          34,
          16,
          4,
          78
        ]
      },
      {
        "input": [
          39,
          41,
          52,
          44,
          62,
          7,
          10,
          85
        ],
        "output": [
          39,
          41,
          52,
          44,
          62
        ]
      },
      {
        "input": [
          85,
          38,
          44,
          56,
          99,
          21
        ],
        "output": [
          85,
          38,
          44,
          56,
          99
        ]
      }
    ]
  },
  {
    "id": "c055",
    "difficulty": 130,
    "function": "def c055(x):\n    # swap x[0], x[2] and x[1], x[3]\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        36,
        79,
        16,
        64,
        46,
        35
      ],
      "output": [
        16,
        64,
        36,
        79,
        46,
        35
      ]
    },
    "demos": [
      {
        "input": [
          77,
          84,
          60,
          37,
          0
        ],
        "output": [
          60,
          37,
          77,
          84,
          0
        ]
      },
      {
        "input": [
          8,
          1,
          77,
          32
        ],
        "output": [
          77,
          32,
          8,
          1
        ]
      },
      {
        "input": [
          94,
          3,
          94,
          55
        ],
        "output": [
          94,
          55,
          94,
          3
        ]
      }
    ]
  },
  {
    "id": "c029",
    "difficulty": 131,
    "function": "def c029(x):\n    # remove the first 2 elements\n    return x[2:]\n\n",
    "data": {
      "input": [
        17,
        9,
        23,
        42
      ],
      "output": [
        23,
        42
      ]
    },
    "demos": [
      {
        "input": [
          57,
          35,
          32,
          31,
          50
        ],
        "output": [
          32,
          31,
          50
        ]
      },
      {
        "input": [
          49,
          79,
          45,
          30,
          4,
          14
        ],
        "output": [
          45,
          30,
          4,
          14
        ]
      },
      {
        "input": [
          88,
          10,
          62,
          25
        ],
        "output": [
          62,
          25
        ]
      }
    ]
  },
  {
    "id": "c168",
    "difficulty": 132,
    "function": "def c168(x):\n    # count from 1 to 10, skipping the length of the input\n    return [i for i in range(1, 11) if i != len(x)]\n\n",
    "data": {
      "input": [
        79,
        44,
        78
      ],
      "output": [
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ]
    },
    "demos": [
      {
        "input": [
          40,
          76,
          24,
          64
        ],
        "output": [
          1,
          2,
          3,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          36,
          93,
          5,
          6,
          19
        ],
        "output": [
          1,
          2,
          3,
          4,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          2,
          62,
          33
        ],
        "output": [
          1,
          2,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      }
    ]
  },
  {
    "id": "c009",
    "difficulty": 133,
    "function": "def c009(x):\n    # remove all but the first 3 elements\n    return x[:3]\n\n",
    "data": {
      "input": [
        95,
        33,
        71,
        90,
        60,
        58,
        82
      ],
      "output": [
        95,
        33,
        71
      ]
    },
    "demos": [
      {
        "input": [
          18,
          33,
          42,
          80,
          40,
          84,
          63
        ],
        "output": [
          18,
          33,
          42
        ]
      },
      {
        "input": [
          18,
          44,
          53,
          17
        ],
        "output": [
          18,
          44,
          53
        ]
      },
      {
        "input": [
          64,
          68,
          16,
          6,
          16
        ],
        "output": [
          64,
          68,
          16
        ]
      }
    ]
  },
  {
    "id": "c133",
    "difficulty": 134,
    "function": "def c133(x):\n    # remove elements 1 through 4\n    return x[:1] + x[5:]\n\n",
    "data": {
      "input": [
        40,
        2,
        9,
        20,
        49,
        65,
        83,
        67
      ],
      "output": [
        40,
        65,
        83,
        67
      ]
    },
    "demos": [
      {
        "input": [
          2,
          71,
          94,
          62,
          16,
          52,
          16
        ],
        "output": [
          2,
          52,
          16
        ]
      },
      {
        "input": [
          90,
          60,
          50,
          79,
          87,
          15,
          91,
          37
        ],
        "output": [
          90,
          15,
          91,
          37
        ]
      },
      {
        "input": [
          68,
          27,
          60,
          70,
          31,
          97
        ],
        "output": [
          68,
          97
        ]
      }
    ]
  },
  {
    "id": "c146",
    "difficulty": 135,
    "function": "def c146(x):\n    # absolute difference between each consecutive pair of elements\n    return [abs(x[i] - x[i+1]) for i in range(len(x)-1)]\n\n",
    "data": {
      "input": [
        8,
        59,
        9,
        22,
        68,
        95,
        42,
        0
      ],
      "output": [
        51,
        50,
        13,
        46,
        27,
        53,
        42
      ]
    },
    "demos": [
      {
        "input": [
          73,
          81,
          44,
          31,
          67,
          71,
          4,
          33
        ],
        "output": [
          8,
          37,
          13,
          36,
          4,
          67,
          29
        ]
      },
      {
        "input": [
          73,
          88,
          26,
          23,
          11
        ],
        "output": [
          15,
          62,
          3,
          12
        ]
      },
      {
        "input": [
          99,
          57,
          9,
          75,
          26,
          25,
          69,
          34,
          63
        ],
        "output": [
          42,
          48,
          66,
          49,
          1,
          44,
          35,
          29
        ]
      }
    ]
  },
  {
    "id": "c004",
    "difficulty": 136,
    "function": "def c004(x):\n    # remove all but element 3\n    return [x[2]]\n\n",
    "data": {
      "input": [
        3,
        56,
        82,
        27,
        52,
        90
      ],
      "output": [
        82
      ]
    },
    "demos": [
      {
        "input": [
          45,
          19,
          3
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          95,
          90,
          97,
          10,
          40,
          35,
          2
        ],
        "output": [
          97
        ]
      },
      {
        "input": [
          65,
          68,
          17,
          36,
          52
        ],
        "output": [
          17
        ]
      }
    ]
  },
  {
    "id": "c240",
    "difficulty": 137,
    "function": "def c240(x):\n    # number of elements equal to the input length\n    return [x.count(len(x))]\n\n",
    "data": {
      "input": [
        53,
        42,
        83,
        86,
        33,
        5,
        13,
        8
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          71,
          3,
          8,
          96,
          8,
          8,
          92,
          77
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          6,
          3,
          67,
          60,
          9,
          9
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          88,
          21,
          34,
          46,
          48,
          9,
          9,
          9,
          68
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c239",
    "difficulty": 138,
    "function": "def c239(x):\n    # number of repetitions in the input\n    res = {}\n    out = 0\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out += 1\n    return [out]\n\n",
    "data": {
      "input": [
        5,
        5,
        4,
        5,
        5,
        5
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          7,
          5,
          7,
          8,
          7,
          8,
          6
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          3,
          1,
          3,
          0,
          5,
          10,
          10,
          3,
          5
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          10,
          0,
          7,
          1,
          9,
          1,
          8,
          10,
          10
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c246",
    "difficulty": 139,
    "function": "def c246(x):\n    # number of unique elements\n    return [len(set(x))]\n\n",
    "data": {
      "input": [
        70,
        55,
        92,
        96,
        96,
        99,
        70,
        96,
        70,
        7
      ],
      "output": [
        6
      ]
    },
    "demos": [
      {
        "input": [
          52,
          69,
          69,
          42,
          52,
          69,
          69,
          5
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          2,
          55,
          32,
          27,
          46,
          32,
          11,
          32
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          24,
          46,
          68,
          24,
          24,
          68,
          89,
          24,
          29,
          24
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c138",
    "difficulty": 140,
    "function": "def c138(x):\n    # remove all occurrences of the first element\n    return [i for i in x if i != x[0]]\n\n",
    "data": {
      "input": [
        76,
        27,
        64,
        15,
        15,
        15,
        34
      ],
      "output": [
        27,
        64,
        15,
        15,
        15,
        34
      ]
    },
    "demos": [
      {
        "input": [
          92,
          10,
          1,
          63,
          92,
          56,
          39,
          40,
          92
        ],
        "output": [
          10,
          1,
          63,
          56,
          39,
          40
        ]
      },
      {
        "input": [
          44,
          83,
          84,
          68
        ],
        "output": [
          83,
          84,
          68
        ]
      },
      {
        "input": [
          55,
          90,
          81,
          59
        ],
        "output": [
          90,
          81,
          59
        ]
      }
    ]
  },
  {
    "id": "c018",
    "difficulty": 141,
    "function": "def c018(x):\n    # replace element 1 with 9\n    x[1] = 9\n    return x\n\n",
    "data": {
      "input": [
        44,
        5,
        4
      ],
      "output": [
        44,
        9,
        4
      ]
    },
    "demos": [
      {
        "input": [
          0,
          34,
          54,
          62,
          93,
          90,
          77
        ],
        "output": [
          0,
          9,
          54,
          62,
          93,
          90,
          77
        ]
      },
      {
        "input": [
          52,
          10,
          28,
          85,
          28,
          2,
          74
        ],
        "output": [
          52,
          9,
          28,
          85,
          28,
          2,
          74
        ]
      },
      {
        "input": [
          25,
          38,
          22,
          60,
          85,
          78,
          27
        ],
        "output": [
          25,
          9,
          22,
          60,
          85,
          78,
          27
        ]
      }
    ]
  },
  {
    "id": "c012",
    "difficulty": 142,
    "function": "def c012(x):\n    # remove all but elements 1 through 3\n    return x[1:4]\n\n",
    "data": {
      "input": [
        23,
        7,
        3,
        36,
        9,
        66,
        90
      ],
      "output": [
        7,
        3,
        36
      ]
    },
    "demos": [
      {
        "input": [
          89,
          49,
          28,
          56,
          90
        ],
        "output": [
          49,
          28,
          56
        ]
      },
      {
        "input": [
          80,
          59,
          74,
          80,
          84,
          40
        ],
        "output": [
          59,
          74,
          80
        ]
      },
      {
        "input": [
          10,
          18,
          12,
          79,
          13
        ],
        "output": [
          18,
          12,
          79
        ]
      }
    ]
  },
  {
    "id": "c232",
    "difficulty": 143,
    "function": "def c232(x):\n    # mean of the list, rounded to the nearest integer\n    return [round(sum(x)/len(x))]\n\n",
    "data": {
      "input": [
        46,
        47,
        48,
        61,
        23,
        22
      ],
      "output": [
        41
      ]
    },
    "demos": [
      {
        "input": [
          54,
          13,
          68,
          42
        ],
        "output": [
          44
        ]
      },
      {
        "input": [
          89,
          43,
          58,
          43,
          81,
          48
        ],
        "output": [
          60
        ]
      },
      {
        "input": [
          49,
          35,
          61,
          83
        ],
        "output": [
          57
        ]
      }
    ]
  },
  {
    "id": "c094",
    "difficulty": 144,
    "function": "def c094(x):\n    # swap 0,2 and 1,3\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        87,
        62,
        36,
        84,
        49,
        86,
        19
      ],
      "output": [
        36,
        84,
        87,
        62,
        49,
        86,
        19
      ]
    },
    "demos": [
      {
        "input": [
          47,
          61,
          29,
          26,
          1,
          68
        ],
        "output": [
          29,
          26,
          47,
          61,
          1,
          68
        ]
      },
      {
        "input": [
          10,
          46,
          34,
          46,
          0
        ],
        "output": [
          34,
          46,
          10,
          46,
          0
        ]
      },
      {
        "input": [
          49,
          41,
          35,
          82,
          61
        ],
        "output": [
          35,
          82,
          49,
          41,
          61
        ]
      }
    ]
  },
  {
    "id": "c086",
    "difficulty": 145,
    "function": "def c086(x):\n    # swap elements 0 and 3\n    x[0], x[3] = x[3], x[0]\n    return x\n\n",
    "data": {
      "input": [
        29,
        36,
        72,
        59,
        94,
        87,
        83
      ],
      "output": [
        59,
        36,
        72,
        29,
        94,
        87,
        83
      ]
    },
    "demos": [
      {
        "input": [
          49,
          44,
          79,
          18,
          69,
          64
        ],
        "output": [
          18,
          44,
          79,
          49,
          69,
          64
        ]
      },
      {
        "input": [
          77,
          70,
          49,
          91,
          18,
          16,
          1
        ],
        "output": [
          91,
          70,
          49,
          77,
          18,
          16,
          1
        ]
      },
      {
        "input": [
          23,
          25,
          87,
          64,
          98
        ],
        "output": [
          64,
          25,
          87,
          23,
          98
        ]
      }
    ]
  },
  {
    "id": "c193",
    "difficulty": 146,
    "function": "def c193(x):\n    # remove the smallest element and the largest element, output in ascending order\n    return sorted(x[1:-1])\n\n",
    "data": {
      "input": [
        45,
        39,
        63,
        75,
        63,
        4
      ],
      "output": [
        39,
        63,
        63,
        75
      ]
    },
    "demos": [
      {
        "input": [
          13,
          97,
          48,
          59,
          97
        ],
        "output": [
          48,
          59,
          97
        ]
      },
      {
        "input": [
          4,
          94,
          98,
          15
        ],
        "output": [
          94,
          98
        ]
      },
      {
        "input": [
          12,
          9,
          26,
          80,
          52,
          54,
          41
        ],
        "output": [
          9,
          26,
          52,
          54,
          80
        ]
      }
    ]
  },
  {
    "id": "c056",
    "difficulty": 147,
    "function": "def c056(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        13,
        27,
        94,
        83,
        10
      ],
      "output": [
        13,
        27,
        83,
        10
      ]
    },
    "demos": [
      {
        "input": [
          71,
          50,
          3,
          66,
          26,
          8
        ],
        "output": [
          71,
          50,
          66,
          26,
          8
        ]
      },
      {
        "input": [
          0,
          74,
          89,
          90,
          17,
          76,
          25
        ],
        "output": [
          0,
          74,
          90,
          17,
          76,
          25
        ]
      },
      {
        "input": [
          97,
          47,
          11,
          85,
          99,
          20
        ],
        "output": [
          97,
          47,
          85,
          99,
          20
        ]
      }
    ]
  },
  {
    "id": "c028",
    "difficulty": 148,
    "function": "def c028(x):\n    # remove element 1 if element 0 > element 1, else remove element 2\n    if x[0] > x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        81,
        73,
        78,
        74
      ],
      "output": [
        81,
        78,
        74
      ]
    },
    "demos": [
      {
        "input": [
          92,
          79,
          37,
          29,
          42
        ],
        "output": [
          92,
          37,
          29,
          42
        ]
      },
      {
        "input": [
          5,
          77,
          74,
          57,
          92,
          39,
          25
        ],
        "output": [
          5,
          77,
          57,
          92,
          39,
          25
        ]
      },
      {
        "input": [
          5,
          36,
          30,
          27,
          80
        ],
        "output": [
          5,
          36,
          27,
          80
        ]
      }
    ]
  },
  {
    "id": "c220",
    "difficulty": 149,
    "function": "def c220(x):\n    # if input length is even, double each element, else triple each element\n    if len(x) % 2 == 0:\n        return [i*2 for i in x]\n    else:\n        return [i*3 for i in x]\n\n",
    "data": {
      "input": [
        80,
        65,
        61,
        37
      ],
      "output": [
        160,
        130,
        122,
        74
      ]
    },
    "demos": [
      {
        "input": [
          14,
          1,
          56,
          80,
          76,
          59
        ],
        "output": [
          28,
          2,
          112,
          160,
          152,
          118
        ]
      },
      {
        "input": [
          87,
          23,
          88,
          88,
          11
        ],
        "output": [
          261,
          69,
          264,
          264,
          33
        ]
      },
      {
        "input": [
          97,
          40,
          87,
          24,
          35
        ],
        "output": [
          291,
          120,
          261,
          72,
          105
        ]
      }
    ]
  },
  {
    "id": "c241",
    "difficulty": 150,
    "function": "def c241(x):\n    # number of even elements\n    return [len([i for i in x if i % 2 == 0])]\n\n",
    "data": {
      "input": [
        92,
        44,
        74,
        26,
        8
      ],
      "output": [
        5
      ]
    },
    "demos": [
      {
        "input": [
          65,
          56,
          50,
          56,
          53
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          2,
          50,
          3,
          9,
          25
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          50,
          26,
          12,
          7,
          1
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c060",
    "difficulty": 151,
    "function": "def c060(x):\n    # element 2,1,0,3,4,6 remove the rest\n    return [x[2], x[1], x[0], x[3], x[4], x[6]]\n\n",
    "data": {
      "input": [
        88,
        12,
        81,
        16,
        28,
        41,
        74,
        62,
        36
      ],
      "output": [
        81,
        12,
        88,
        16,
        28,
        74
      ]
    },
    "demos": [
      {
        "input": [
          91,
          14,
          82,
          30,
          13,
          14,
          27,
          86,
          28
        ],
        "output": [
          82,
          14,
          91,
          30,
          13,
          27
        ]
      },
      {
        "input": [
          72,
          69,
          85,
          22,
          1,
          85,
          5,
          65
        ],
        "output": [
          85,
          69,
          72,
          22,
          1,
          5
        ]
      },
      {
        "input": [
          47,
          11,
          94,
          9,
          69,
          44,
          15,
          94
        ],
        "output": [
          94,
          11,
          47,
          9,
          69,
          15
        ]
      }
    ]
  },
  {
    "id": "c169",
    "difficulty": 152,
    "function": "def c169(x):\n    # second largest element\n    return [sorted(x)[-2]]\n\n",
    "data": {
      "input": [
        88,
        56,
        93,
        96,
        8,
        79
      ],
      "output": [
        93
      ]
    },
    "demos": [
      {
        "input": [
          77,
          82,
          85,
          36,
          63,
          27
        ],
        "output": [
          82
        ]
      },
      {
        "input": [
          30,
          16,
          41,
          88,
          84
        ],
        "output": [
          84
        ]
      },
      {
        "input": [
          93,
          44,
          74,
          38
        ],
        "output": [
          74
        ]
      }
    ]
  },
  {
    "id": "c057",
    "difficulty": 153,
    "function": "def c057(x):\n    # insert a 4 as element 2\n    return x[:2] + [4] + x[2:]\n\n",
    "data": {
      "input": [
        24,
        22,
        33,
        51
      ],
      "output": [
        24,
        22,
        4,
        33,
        51
      ]
    },
    "demos": [
      {
        "input": [
          63,
          19,
          8,
          37,
          4
        ],
        "output": [
          63,
          19,
          4,
          8,
          37,
          4
        ]
      },
      {
        "input": [
          3,
          60,
          75,
          87,
          97,
          75
        ],
        "output": [
          3,
          60,
          4,
          75,
          87,
          97,
          75
        ]
      },
      {
        "input": [
          26,
          32,
          18,
          24,
          18,
          21
        ],
        "output": [
          26,
          32,
          4,
          18,
          24,
          18,
          21
        ]
      }
    ]
  },
  {
    "id": "c150",
    "difficulty": 154,
    "function": "def c150(x):\n    # count from first element to each element if the element is greater than the first element\n    res = []\n    for i in x:\n        if i > x[0]:\n            res += list(range(x[0], i+1))\n        else:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        1,
        2,
        3,
        4,
        5
      ],
      "output": [
        1,
        1,
        2,
        1,
        2,
        3,
        1,
        2,
        3,
        4,
        1,
        2,
        3,
        4,
        5
      ]
    },
    "demos": [
      {
        "input": [
          13,
          1,
          18
        ],
        "output": [
          13,
          1,
          13,
          14,
          15,
          16,
          17,
          18
        ]
      },
      {
        "input": [
          83,
          19,
          7,
          32,
          9,
          86
        ],
        "output": [
          83,
          19,
          7,
          32,
          9,
          83,
          84,
          85,
          86
        ]
      },
      {
        "input": [
          33,
          32,
          20,
          36,
          38
        ],
        "output": [
          33,
          32,
          20,
          33,
          34,
          35,
          36,
          33,
          34,
          35,
          36,
          37,
          38
        ]
      }
    ]
  },
  {
    "id": "c033",
    "difficulty": 155,
    "function": "def c033(x):\n    # swap element 0 and 2\n    x[0], x[2] = x[2], x[0]\n    return x\n\n",
    "data": {
      "input": [
        42,
        97,
        46,
        24
      ],
      "output": [
        46,
        97,
        42,
        24
      ]
    },
    "demos": [
      {
        "input": [
          23,
          16,
          22,
          11,
          83,
          16,
          81
        ],
        "output": [
          22,
          16,
          23,
          11,
          83,
          16,
          81
        ]
      },
      {
        "input": [
          89,
          18,
          76,
          80,
          75,
          32,
          68
        ],
        "output": [
          76,
          18,
          89,
          80,
          75,
          32,
          68
        ]
      },
      {
        "input": [
          28,
          66,
          56,
          68,
          88,
          90,
          0
        ],
        "output": [
          56,
          66,
          28,
          68,
          88,
          90,
          0
        ]
      }
    ]
  },
  {
    "id": "c218",
    "difficulty": 156,
    "function": "def c218(x):\n    # keep only second element and following equal to the first element\n    return [x[1]] + [i for i in x[2:] if i == x[0]]\n\n",
    "data": {
      "input": [
        67,
        14,
        71,
        67,
        67,
        62,
        24,
        86,
        45
      ],
      "output": [
        14,
        67,
        67
      ]
    },
    "demos": [
      {
        "input": [
          5,
          91,
          53,
          74,
          25,
          13,
          5,
          2
        ],
        "output": [
          91,
          5
        ]
      },
      {
        "input": [
          36,
          36,
          61,
          79,
          13,
          39,
          92,
          37
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          52,
          58,
          40,
          84,
          85,
          5,
          52,
          44,
          48,
          52
        ],
        "output": [
          58,
          52,
          52
        ]
      }
    ]
  },
  {
    "id": "c136",
    "difficulty": 158,
    "function": "def c136(x):\n    # remove the first occurrence of the largest element, keep the rest\n    x.remove(max(x))\n    return x\n\n",
    "data": {
      "input": [
        83,
        83,
        21,
        33,
        43,
        12
      ],
      "output": [
        83,
        21,
        33,
        43,
        12
      ]
    },
    "demos": [
      {
        "input": [
          22,
          55,
          32,
          18,
          77,
          75
        ],
        "output": [
          22,
          55,
          32,
          18,
          75
        ]
      },
      {
        "input": [
          9,
          23,
          35,
          49
        ],
        "output": [
          9,
          23,
          35
        ]
      },
      {
        "input": [
          57,
          41,
          78,
          19
        ],
        "output": [
          57,
          41,
          19
        ]
      }
    ]
  },
  {
    "id": "c083",
    "difficulty": 159,
    "function": "def c083(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        96,
        56,
        12,
        93,
        37,
        32,
        61,
        18
      ],
      "output": [
        61
      ]
    },
    "demos": [
      {
        "input": [
          60,
          71,
          27,
          24,
          49,
          59,
          78
        ],
        "output": [
          78
        ]
      },
      {
        "input": [
          70,
          79,
          47,
          79,
          40,
          31,
          68,
          90,
          52
        ],
        "output": [
          68
        ]
      },
      {
        "input": [
          59,
          53,
          7,
          79,
          52,
          1,
          78
        ],
        "output": [
          78
        ]
      }
    ]
  },
  {
    "id": "c019",
    "difficulty": 160,
    "function": "def c019(x):\n    # replace element 5 with a 3 if there is an element 5\n    if len(x) > 5:\n        x[4] = 3\n    return x\n\n",
    "data": {
      "input": [
        95,
        87,
        8,
        21,
        52,
        82,
        90
      ],
      "output": [
        95,
        87,
        8,
        21,
        3,
        82,
        90
      ]
    },
    "demos": [
      {
        "input": [
          41,
          0,
          49,
          17,
          50
        ],
        "output": [
          41,
          0,
          49,
          17,
          50
        ]
      },
      {
        "input": [
          19,
          39,
          44,
          75,
          11,
          50
        ],
        "output": [
          19,
          39,
          44,
          75,
          3,
          50
        ]
      },
      {
        "input": [
          45,
          3,
          18,
          5,
          65,
          38
        ],
        "output": [
          45,
          3,
          18,
          5,
          3,
          38
        ]
      }
    ]
  },
  {
    "id": "c203",
    "difficulty": 161,
    "function": "def c203(x):\n    # the first M positive multiples of the smallest element, M is the length of the input\n    return [min(x)*i for i in range(1, len(x)+1)]\n\n",
    "data": {
      "input": [
        6,
        23,
        13,
        25,
        17,
        3
      ],
      "output": [
        3,
        6,
        9,
        12,
        15,
        18
      ]
    },
    "demos": [
      {
        "input": [
          6,
          11,
          12,
          20,
          3
        ],
        "output": [
          3,
          6,
          9,
          12,
          15
        ]
      },
      {
        "input": [
          16,
          13,
          13,
          19,
          12,
          14
        ],
        "output": [
          12,
          24,
          36,
          48,
          60,
          72
        ]
      },
      {
        "input": [
          6,
          22,
          21,
          10,
          15,
          19,
          9
        ],
        "output": [
          6,
          12,
          18,
          24,
          30,
          36,
          42
        ]
      }
    ]
  },
  {
    "id": "c115",
    "difficulty": 162,
    "function": "def c115(x):\n    # the unique elements, prepended and appended by their sum\n    res = list(set(x))\n    return [sum(res)] + res + [sum(res)]\n\n",
    "data": {
      "input": [
        3,
        3,
        20,
        13,
        11,
        18,
        3
      ],
      "output": [
        65,
        3,
        11,
        13,
        18,
        20,
        65
      ]
    },
    "demos": [
      {
        "input": [
          10,
          1,
          28,
          10,
          12,
          12
        ],
        "output": [
          51,
          1,
          10,
          28,
          12,
          51
        ]
      },
      {
        "input": [
          25,
          22,
          15,
          30
        ],
        "output": [
          92,
          25,
          30,
          22,
          15,
          92
        ]
      },
      {
        "input": [
          6,
          6,
          2,
          23,
          6,
          20,
          8,
          17,
          4
        ],
        "output": [
          80,
          2,
          4,
          6,
          8,
          17,
          20,
          23,
          80
        ]
      }
    ]
  },
  {
    "id": "c207",
    "difficulty": 163,
    "function": "def c207(x):\n    # element-wise sum of the input and the reverse of the input\n    return [i+j for i, j in zip(x, x[::-1])]\n\n",
    "data": {
      "input": [
        10,
        13,
        2,
        24,
        22,
        39,
        29
      ],
      "output": [
        39,
        52,
        24,
        48,
        24,
        52,
        39
      ]
    },
    "demos": [
      {
        "input": [
          45,
          31,
          15,
          32,
          7,
          18
        ],
        "output": [
          63,
          38,
          47,
          47,
          38,
          63
        ]
      },
      {
        "input": [
          48,
          10,
          47,
          44
        ],
        "output": [
          92,
          57,
          57,
          92
        ]
      },
      {
        "input": [
          3,
          1,
          44,
          15,
          47
        ],
        "output": [
          50,
          16,
          88,
          16,
          50
        ]
      }
    ]
  },
  {
    "id": "c088",
    "difficulty": 164,
    "function": "def c088(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        63,
        41,
        87,
        80,
        29,
        73,
        57
      ],
      "output": [
        63,
        87,
        41,
        80,
        29,
        73,
        57
      ]
    },
    "demos": [
      {
        "input": [
          56,
          30,
          30,
          57,
          28,
          7,
          67
        ],
        "output": [
          57,
          30,
          30,
          56,
          28,
          7,
          67
        ]
      },
      {
        "input": [
          89,
          67,
          67,
          65,
          64
        ],
        "output": [
          65,
          67,
          67,
          89,
          64
        ]
      },
      {
        "input": [
          36,
          32,
          28,
          47,
          17,
          43,
          27
        ],
        "output": [
          36,
          28,
          32,
          47,
          17,
          43,
          27
        ]
      }
    ]
  },
  {
    "id": "c040",
    "difficulty": 165,
    "function": "def c040(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        20,
        6,
        9,
        9,
        17,
        10,
        28
      ],
      "output": [
        20,
        6,
        9,
        9,
        17,
        10,
        28,
        9
      ]
    },
    "demos": [
      {
        "input": [
          25,
          8,
          3,
          20,
          20
        ],
        "output": [
          25,
          8,
          3,
          20,
          20,
          3
        ]
      },
      {
        "input": [
          12,
          3,
          29,
          28,
          23,
          12
        ],
        "output": [
          12,
          3,
          29,
          28,
          23,
          12,
          3
        ]
      },
      {
        "input": [
          8,
          20,
          21,
          29,
          11
        ],
        "output": [
          8,
          20,
          21,
          29,
          11
        ]
      }
    ]
  },
  {
    "id": "c085",
    "difficulty": 166,
    "function": "def c085(x):\n    # remove all but element N, N=first element\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        2,
        41,
        33,
        34
      ],
      "output": [
        33
      ]
    },
    "demos": [
      {
        "input": [
          4,
          43,
          0,
          21,
          3
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          6,
          46,
          14,
          39,
          25,
          21,
          14
        ],
        "output": [
          14
        ]
      },
      {
        "input": [
          2,
          28,
          4,
          7
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c111",
    "difficulty": 167,
    "function": "def c111(x):\n    # repeat the largest element N times, where N is the smallest element\n    return [max(x)] * min(x)\n\n",
    "data": {
      "input": [
        3,
        13,
        28,
        26,
        8
      ],
      "output": [
        28,
        28,
        28
      ]
    },
    "demos": [
      {
        "input": [
          12,
          13,
          6,
          3,
          15,
          26
        ],
        "output": [
          26,
          26,
          26
        ]
      },
      {
        "input": [
          16,
          14,
          3,
          27,
          26,
          9,
          14
        ],
        "output": [
          27,
          27,
          27
        ]
      },
      {
        "input": [
          11,
          14,
          25,
          27,
          8
        ],
        "output": [
          27,
          27,
          27,
          27,
          27,
          27,
          27,
          27
        ]
      }
    ]
  },
  {
    "id": "c073",
    "difficulty": 168,
    "function": "def c073(x):\n    # add the index to every element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        5,
        34,
        0,
        11,
        3,
        50
      ],
      "output": [
        5,
        35,
        2,
        14,
        7,
        55
      ]
    },
    "demos": [
      {
        "input": [
          23,
          37,
          41,
          14
        ],
        "output": [
          23,
          38,
          43,
          17
        ]
      },
      {
        "input": [
          28,
          26,
          31,
          0,
          34,
          9,
          43
        ],
        "output": [
          28,
          27,
          33,
          3,
          38,
          14,
          49
        ]
      },
      {
        "input": [
          5,
          29,
          42,
          0,
          26
        ],
        "output": [
          5,
          30,
          44,
          3,
          30
        ]
      }
    ]
  },
  {
    "id": "c027",
    "difficulty": 169,
    "function": "def c027(x):\n    # remove element 1 if element 0 = element 1, else remove element 2\n    if x[0] == x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        5,
        37,
        49,
        11,
        31,
        97,
        94
      ],
      "output": [
        5,
        37,
        11,
        31,
        97,
        94
      ]
    },
    "demos": [
      {
        "input": [
          22,
          22,
          59,
          60,
          42,
          44
        ],
        "output": [
          22,
          59,
          60,
          42,
          44
        ]
      },
      {
        "input": [
          97,
          47,
          54,
          4,
          61
        ],
        "output": [
          97,
          47,
          4,
          61
        ]
      },
      {
        "input": [
          52,
          76,
          73,
          48,
          42,
          79,
          1
        ],
        "output": [
          52,
          76,
          48,
          42,
          79,
          1
        ]
      }
    ]
  },
  {
    "id": "c234",
    "difficulty": 170,
    "function": "def c234(x):\n    # repetitions in order of first appearance\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out.append(i)\n    return out\n\n",
    "data": {
      "input": [
        87,
        27,
        87,
        33,
        0,
        59,
        0
      ],
      "output": [
        87,
        0
      ]
    },
    "demos": [
      {
        "input": [
          97,
          32,
          32,
          3,
          25,
          2,
          25,
          92,
          3
        ],
        "output": [
          32,
          3,
          25
        ]
      },
      {
        "input": [
          90,
          52,
          37,
          52,
          68,
          52,
          99,
          52,
          0
        ],
        "output": [
          52
        ]
      },
      {
        "input": [
          35,
          35,
          12,
          53,
          7,
          53,
          97,
          12,
          28
        ],
        "output": [
          35,
          12,
          53
        ]
      }
    ]
  },
  {
    "id": "c165",
    "difficulty": 171,
    "function": "def c165(x):\n    # reverse the input and keep only even elements\n    return [i for i in x[::-1] if i % 2 == 0]\n\n",
    "data": {
      "input": [
        41,
        27,
        40,
        18,
        41,
        2,
        2,
        95
      ],
      "output": [
        2,
        2,
        18,
        40
      ]
    },
    "demos": [
      {
        "input": [
          33,
          0,
          50,
          53,
          85,
          0
        ],
        "output": [
          0,
          50,
          0
        ]
      },
      {
        "input": [
          25,
          44,
          92,
          65,
          21,
          25,
          51
        ],
        "output": [
          92,
          44
        ]
      },
      {
        "input": [
          98,
          29,
          53,
          73,
          37,
          40
        ],
        "output": [
          40,
          98
        ]
      }
    ]
  },
  {
    "id": "c191",
    "difficulty": 172,
    "function": "def c191(x):\n    # repeat each element N times, where N is its tens digit\n    out = []\n    for i in x:\n        if len(str(i)) > 1:\n            out += [i] * int(str(i)[-2])\n    return out\n\n",
    "data": {
      "input": [
        18,
        18,
        35,
        37,
        26
      ],
      "output": [
        18,
        18,
        35,
        35,
        35,
        37,
        37,
        37,
        26,
        26
      ]
    },
    "demos": [
      {
        "input": [
          29,
          29,
          24,
          0,
          4
        ],
        "output": [
          29,
          29,
          29,
          29,
          24,
          24
        ]
      },
      {
        "input": [
          23,
          40,
          3,
          4,
          33,
          1
        ],
        "output": [
          23,
          23,
          40,
          40,
          40,
          40,
          33,
          33,
          33
        ]
      },
      {
        "input": [
          30,
          3,
          11,
          11
        ],
        "output": [
          30,
          30,
          30,
          11,
          11
        ]
      }
    ]
  },
  {
    "id": "c026",
    "difficulty": 173,
    "function": "def c026(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        79,
        64,
        43,
        53,
        60,
        87
      ],
      "output": [
        79,
        64,
        53,
        60,
        87
      ]
    },
    "demos": [
      {
        "input": [
          33,
          42,
          92,
          14,
          18,
          40,
          40
        ],
        "output": [
          33,
          42,
          14,
          18,
          40,
          40
        ]
      },
      {
        "input": [
          48,
          98,
          27,
          2,
          97,
          39
        ],
        "output": [
          48,
          98,
          2,
          97,
          39
        ]
      },
      {
        "input": [
          62,
          38,
          91,
          25,
          17,
          62,
          53
        ],
        "output": [
          62,
          38,
          25,
          17,
          62,
          53
        ]
      }
    ]
  },
  {
    "id": "c059",
    "difficulty": 174,
    "function": "def c059(x):\n    # swap element 2 and element 5\n    x[2], x[5] = x[5], x[2]\n    return x\n\n",
    "data": {
      "input": [
        55,
        0,
        41,
        50,
        42,
        46,
        24,
        9
      ],
      "output": [
        55,
        0,
        46,
        50,
        42,
        41,
        24,
        9
      ]
    },
    "demos": [
      {
        "input": [
          50,
          27,
          30,
          76,
          70,
          9,
          98,
          52
        ],
        "output": [
          50,
          27,
          9,
          76,
          70,
          30,
          98,
          52
        ]
      },
      {
        "input": [
          8,
          95,
          97,
          56,
          23,
          1,
          76,
          91
        ],
        "output": [
          8,
          95,
          1,
          56,
          23,
          97,
          76,
          91
        ]
      },
      {
        "input": [
          10,
          6,
          57,
          4,
          18,
          22,
          27,
          64
        ],
        "output": [
          10,
          6,
          22,
          4,
          18,
          57,
          27,
          64
        ]
      }
    ]
  },
  {
    "id": "c074",
    "difficulty": 175,
    "function": "def c074(x):\n    # remove every element whose value < 8\n    return [i for i in x if i >= 8]\n\n",
    "data": {
      "input": [
        22,
        7,
        25,
        5,
        26,
        25,
        30,
        11
      ],
      "output": [
        22,
        25,
        26,
        25,
        30,
        11
      ]
    },
    "demos": [
      {
        "input": [
          16,
          0,
          13,
          12,
          8,
          24,
          7
        ],
        "output": [
          16,
          13,
          12,
          8,
          24
        ]
      },
      {
        "input": [
          21,
          28,
          7,
          23,
          20,
          30
        ],
        "output": [
          21,
          28,
          23,
          20,
          30
        ]
      },
      {
        "input": [
          11,
          7,
          14,
          15,
          23
        ],
        "output": [
          11,
          14,
          15,
          23
        ]
      }
    ]
  },
  {
    "id": "c173",
    "difficulty": 176,
    "function": "def c173(x):\n    # replace element N with the largest element in element 0 through N\n    for i in range(len(x)):\n        x[i] = max(x[:i+1])\n    return x\n\n",
    "data": {
      "input": [
        54,
        75,
        77,
        0,
        54,
        23
      ],
      "output": [
        54,
        75,
        77,
        77,
        77,
        77
      ]
    },
    "demos": [
      {
        "input": [
          0,
          90,
          57,
          97,
          18,
          46
        ],
        "output": [
          0,
          90,
          90,
          97,
          97,
          97
        ]
      },
      {
        "input": [
          2,
          56,
          27,
          91,
          0,
          41,
          13,
          16
        ],
        "output": [
          2,
          56,
          56,
          91,
          91,
          91,
          91,
          91
        ]
      },
      {
        "input": [
          33,
          2,
          25,
          24,
          81,
          58
        ],
        "output": [
          33,
          33,
          33,
          33,
          81,
          81
        ]
      }
    ]
  },
  {
    "id": "c175",
    "difficulty": 177,
    "function": "def c175(x):\n    # keep only elements larger than any preceding element\n    res = [x[0]]\n    for i in x[1:]:\n        if i > res[-1]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        61,
        48,
        66,
        99,
        7
      ],
      "output": [
        61,
        66,
        99
      ]
    },
    "demos": [
      {
        "input": [
          25,
          44,
          0,
          36,
          31
        ],
        "output": [
          25,
          44
        ]
      },
      {
        "input": [
          49,
          45,
          82,
          60,
          73,
          54,
          82
        ],
        "output": [
          49,
          82
        ]
      },
      {
        "input": [
          18,
          12,
          36,
          44,
          88
        ],
        "output": [
          18,
          36,
          44,
          88
        ]
      }
    ]
  },
  {
    "id": "c204",
    "difficulty": 178,
    "function": "def c204(x):\n    # keep only elements followed by 0\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] == 0:\n            res.append(x[i])\n    return res\n\n",
    "data": {
      "input": [
        12,
        0,
        0,
        4,
        0,
        16,
        15,
        30,
        0,
        6
      ],
      "output": [
        12,
        0,
        4,
        30
      ]
    },
    "demos": [
      {
        "input": [
          0,
          19,
          2,
          23,
          0,
          13,
          27,
          0,
          0,
          0
        ],
        "output": [
          23,
          27,
          0,
          0
        ]
      },
      {
        "input": [
          29,
          0,
          19,
          26,
          0,
          18,
          0,
          0,
          4,
          0
        ],
        "output": [
          29,
          26,
          18,
          0,
          4
        ]
      },
      {
        "input": [
          0,
          28,
          3,
          7,
          30,
          0,
          20
        ],
        "output": [
          30
        ]
      }
    ]
  },
  {
    "id": "c031",
    "difficulty": 179,
    "function": "def c031(x):\n    # remove whichever are equal, the first 2 elements or the last 2 elements\n    if x[0] == x[1]:\n        return x[2:]\n    elif x[-1] == x[-2]:\n        return x[:-2]\n    return x\n\n",
    "data": {
      "input": [
        25,
        82,
        48,
        51,
        2,
        38,
        48,
        52
      ],
      "output": [
        25,
        82,
        48,
        51,
        2,
        38,
        48,
        52
      ]
    },
    "demos": [
      {
        "input": [
          26,
          26,
          61,
          74,
          74
        ],
        "output": [
          61,
          74,
          74
        ]
      },
      {
        "input": [
          25,
          25,
          25,
          20,
          55,
          76,
          37
        ],
        "output": [
          25,
          20,
          55,
          76,
          37
        ]
      },
      {
        "input": [
          20,
          23,
          96,
          99,
          62,
          28,
          57
        ],
        "output": [
          20,
          23,
          96,
          99,
          62,
          28,
          57
        ]
      }
    ]
  },
  {
    "id": "c236",
    "difficulty": 180,
    "function": "def c236(x):\n    # even elements divided by 2\n    return [i//2 for i in x if i % 2 == 0]\n\n",
    "data": {
      "input": [
        20,
        2,
        51,
        25,
        21,
        68,
        51,
        93,
        63
      ],
      "output": [
        10,
        1,
        34
      ]
    },
    "demos": [
      {
        "input": [
          89,
          59,
          96,
          6,
          26,
          26,
          96
        ],
        "output": [
          48,
          3,
          13,
          13,
          48
        ]
      },
      {
        "input": [
          72,
          61,
          95,
          59,
          97,
          47,
          74
        ],
        "output": [
          36,
          37
        ]
      },
      {
        "input": [
          13,
          93,
          35,
          44,
          29,
          84,
          67,
          66,
          55
        ],
        "output": [
          22,
          42,
          33
        ]
      }
    ]
  },
  {
    "id": "c054",
    "difficulty": 181,
    "function": "def c054(x):\n    # replace element 0 and 1 with element 2\n    x[0] = x[2]\n    x[1] = x[2]\n    return x\n\n",
    "data": {
      "input": [
        66,
        54,
        39,
        87,
        29,
        28
      ],
      "output": [
        39,
        39,
        39,
        87,
        29,
        28
      ]
    },
    "demos": [
      {
        "input": [
          2,
          92,
          35,
          17,
          69
        ],
        "output": [
          35,
          35,
          35,
          17,
          69
        ]
      },
      {
        "input": [
          27,
          23,
          65,
          52
        ],
        "output": [
          65,
          65,
          65,
          52
        ]
      },
      {
        "input": [
          19,
          52,
          13,
          23,
          76
        ],
        "output": [
          13,
          13,
          13,
          23,
          76
        ]
      }
    ]
  },
  {
    "id": "c227",
    "difficulty": 182,
    "function": "def c227(x):\n    # interleave the input and reversed input, keep only unique elements in order of appearance\n    res = []\n    mid = len(x) // 2\n    for i in range(mid):\n        if x[i] not in res:\n            res.append(x[i])\n        if x[-i-1] not in res:\n            res.append(x[-i-1])\n    if len(x) % 2 == 1 and x[mid] not in res:\n        res.append(x[mid])\n    return res\n\n",
    "data": {
      "input": [
        37,
        45,
        36,
        24,
        55,
        36,
        27,
        55
      ],
      "output": [
        37,
        55,
        45,
        27,
        36,
        24
      ]
    },
    "demos": [
      {
        "input": [
          21,
          68,
          16,
          28,
          85,
          73
        ],
        "output": [
          21,
          73,
          68,
          85,
          16,
          28
        ]
      },
      {
        "input": [
          25,
          8,
          25,
          25,
          25,
          99,
          4
        ],
        "output": [
          25,
          4,
          8,
          99
        ]
      },
      {
        "input": [
          69,
          76,
          45,
          85,
          80,
          74,
          0,
          22
        ],
        "output": [
          69,
          22,
          76,
          0,
          45,
          74,
          85,
          80
        ]
      }
    ]
  },
  {
    "id": "c024",
    "difficulty": 183,
    "function": "def c024(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        3,
        3,
        7,
        14,
        3,
        3,
        17
      ],
      "output": [
        3,
        5,
        3,
        7,
        14,
        3,
        3,
        17
      ]
    },
    "demos": [
      {
        "input": [
          16,
          12,
          0,
          15
        ],
        "output": [
          16,
          8,
          12,
          0,
          15
        ]
      },
      {
        "input": [
          9,
          1,
          15,
          5
        ],
        "output": [
          9,
          8,
          1,
          15,
          5
        ]
      },
      {
        "input": [
          0,
          12,
          16,
          0,
          1,
          11,
          19
        ],
        "output": [
          0,
          5,
          12,
          16,
          0,
          1,
          11,
          19
        ]
      }
    ]
  },
  {
    "id": "c200",
    "difficulty": 184,
    "function": "def c200(x):\n    # tens digits of the elements in ascending order\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append(int(str(i)[-2]))\n        else:\n            res.append(0)\n    return sorted(res)\n\n",
    "data": {
      "input": [
        20,
        24,
        0,
        2,
        47,
        76
      ],
      "output": [
        0,
        0,
        2,
        2,
        4,
        7
      ]
    },
    "demos": [
      {
        "input": [
          9,
          90,
          37,
          23,
          74,
          94
        ],
        "output": [
          0,
          2,
          3,
          7,
          9,
          9
        ]
      },
      {
        "input": [
          6,
          87,
          76,
          88,
          23,
          21
        ],
        "output": [
          0,
          2,
          2,
          7,
          8,
          8
        ]
      },
      {
        "input": [
          48,
          93,
          42,
          97,
          89
        ],
        "output": [
          4,
          4,
          8,
          9,
          9
        ]
      }
    ]
  },
  {
    "id": "c010",
    "difficulty": 185,
    "function": "def c010(x):\n    # elements 1 through N + 1, N is the first element\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        6,
        14,
        8,
        13,
        17,
        11,
        18
      ],
      "output": [
        14,
        8,
        13,
        17,
        11,
        18
      ]
    },
    "demos": [
      {
        "input": [
          2,
          4,
          10,
          19,
          11
        ],
        "output": [
          4,
          10
        ]
      },
      {
        "input": [
          3,
          7,
          17,
          18,
          8
        ],
        "output": [
          7,
          17,
          18
        ]
      },
      {
        "input": [
          1,
          10,
          17,
          14,
          8
        ],
        "output": [
          10
        ]
      }
    ]
  },
  {
    "id": "c123",
    "difficulty": 186,
    "function": "def c123(x):\n    # remove all but element N, N is the last element\n    return [x[x[-1]]]\n\n",
    "data": {
      "input": [
        13,
        10,
        8,
        8,
        1,
        13,
        2
      ],
      "output": [
        8
      ]
    },
    "demos": [
      {
        "input": [
          0,
          7,
          19,
          20,
          1,
          0
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          9,
          8,
          20,
          13,
          3
        ],
        "output": [
          13
        ]
      },
      {
        "input": [
          17,
          10,
          0,
          15,
          8,
          1
        ],
        "output": [
          10
        ]
      }
    ]
  },
  {
    "id": "c023",
    "difficulty": 187,
    "function": "def c023(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        5,
        7,
        16,
        11,
        13,
        9,
        16,
        2
      ],
      "output": [
        5,
        5,
        7,
        16,
        11,
        13,
        9,
        16,
        2
      ]
    },
    "demos": [
      {
        "input": [
          10,
          19,
          13,
          1,
          18,
          9,
          8
        ],
        "output": [
          10,
          8,
          19,
          13,
          1,
          18,
          9,
          8
        ]
      },
      {
        "input": [
          18,
          10,
          8,
          9,
          20,
          4
        ],
        "output": [
          18,
          8,
          10,
          8,
          9,
          20,
          4
        ]
      },
      {
        "input": [
          5,
          2,
          7,
          19
        ],
        "output": [
          5,
          5,
          2,
          7,
          19
        ]
      }
    ]
  },
  {
    "id": "c194",
    "difficulty": 188,
    "function": "def c194(x):\n    # reverse the input; prepend and append the length of the input\n    return [len(x)] + x[::-1] + [len(x)]\n\n",
    "data": {
      "input": [
        20,
        6,
        11,
        12,
        5,
        14,
        11
      ],
      "output": [
        7,
        11,
        14,
        5,
        12,
        11,
        6,
        20,
        7
      ]
    },
    "demos": [
      {
        "input": [
          17,
          13,
          6,
          19,
          10,
          15,
          6,
          4
        ],
        "output": [
          8,
          4,
          6,
          15,
          10,
          19,
          6,
          13,
          17,
          8
        ]
      },
      {
        "input": [
          16,
          8,
          3,
          4,
          18
        ],
        "output": [
          5,
          18,
          4,
          3,
          8,
          16,
          5
        ]
      },
      {
        "input": [
          19,
          19,
          13,
          3,
          13,
          15,
          1
        ],
        "output": [
          7,
          1,
          15,
          13,
          3,
          13,
          19,
          19,
          7
        ]
      }
    ]
  },
  {
    "id": "c245",
    "difficulty": 189,
    "function": "def c245(x):\n    # number of times element 0 appears in the following elements\n    return [x[1:].count(x[0])]\n\n",
    "data": {
      "input": [
        0,
        3,
        15,
        19,
        5,
        19,
        8
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          0,
          0,
          6,
          20,
          7,
          8
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          2,
          14,
          2,
          6,
          8,
          1,
          16
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          2,
          7,
          2,
          8,
          2,
          14,
          7
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c032",
    "difficulty": 190,
    "function": "def c032(x):\n    # remove first 2 elements if element 0 > last element, else remove last 2 elements\n    if x[0] > x[-1]:\n        return x[2:]\n    else:\n        return x[:-2]\n    \n",
    "data": {
      "input": [
        44,
        15,
        83,
        59,
        20
      ],
      "output": [
        83,
        59,
        20
      ]
    },
    "demos": [
      {
        "input": [
          17,
          51,
          59,
          67,
          1
        ],
        "output": [
          59,
          67,
          1
        ]
      },
      {
        "input": [
          82,
          19,
          26,
          90,
          1
        ],
        "output": [
          26,
          90,
          1
        ]
      },
      {
        "input": [
          5,
          74,
          66,
          31,
          71,
          1
        ],
        "output": [
          66,
          31,
          71,
          1
        ]
      }
    ]
  },
  {
    "id": "c058",
    "difficulty": 191,
    "function": "def c058(x):\n    # remove the first 5 elements\n    return x[5:]\n\n",
    "data": {
      "input": [
        74,
        58,
        81,
        38
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          84,
          68,
          35,
          50,
          30,
          34,
          96,
          53
        ],
        "output": [
          34,
          96,
          53
        ]
      },
      {
        "input": [
          90,
          33,
          9,
          34,
          19
        ],
        "output": []
      },
      {
        "input": [
          6,
          12,
          97,
          1,
          10,
          96,
          55,
          77
        ],
        "output": [
          96,
          55,
          77
        ]
      }
    ]
  },
  {
    "id": "c174",
    "difficulty": 192,
    "function": "def c174(x):\n    # keep the first M elements, where M is the number of unique elements\n    return x[:len(set(x))]\n\n",
    "data": {
      "input": [
        48,
        44,
        44,
        9,
        0,
        24,
        63,
        44
      ],
      "output": [
        48,
        44,
        44,
        9,
        0,
        24
      ]
    },
    "demos": [
      {
        "input": [
          35,
          57,
          4,
          55,
          20
        ],
        "output": [
          35,
          57,
          4,
          55,
          20
        ]
      },
      {
        "input": [
          46,
          78,
          65,
          62,
          78,
          27,
          22,
          16,
          65,
          78
        ],
        "output": [
          46,
          78,
          65,
          62,
          78,
          27,
          22
        ]
      },
      {
        "input": [
          33,
          94,
          71,
          50,
          54,
          33,
          71,
          33,
          42,
          71
        ],
        "output": [
          33,
          94,
          71,
          50,
          54,
          33
        ]
      }
    ]
  },
  {
    "id": "c229",
    "difficulty": 193,
    "function": "def c229(x):\n    # keep only first N elements of the reversed input, N is the first element\n    length = x[0]\n    return x[::-1][:length]\n\n",
    "data": {
      "input": [
        2,
        50,
        69,
        41,
        78
      ],
      "output": [
        78,
        41
      ]
    },
    "demos": [
      {
        "input": [
          5,
          3,
          2,
          76,
          91
        ],
        "output": [
          91,
          76,
          2,
          3,
          5
        ]
      },
      {
        "input": [
          5,
          62,
          58,
          29,
          43,
          99,
          48,
          33
        ],
        "output": [
          33,
          48,
          99,
          43,
          29
        ]
      },
      {
        "input": [
          6,
          22,
          97,
          11,
          29,
          41
        ],
        "output": [
          41,
          29,
          11,
          97,
          22,
          6
        ]
      }
    ]
  },
  {
    "id": "c162",
    "difficulty": 194,
    "function": "def c162(x):\n    # replace each element M with 3 * M + 7\n    return [3*i+7 for i in x]\n\n",
    "data": {
      "input": [
        23,
        18,
        2,
        21,
        29,
        21
      ],
      "output": [
        76,
        61,
        13,
        70,
        94,
        70
      ]
    },
    "demos": [
      {
        "input": [
          1,
          26,
          24,
          19,
          6,
          8,
          24
        ],
        "output": [
          10,
          85,
          79,
          64,
          25,
          31,
          79
        ]
      },
      {
        "input": [
          2,
          22,
          7,
          3,
          12,
          0
        ],
        "output": [
          13,
          73,
          28,
          16,
          43,
          7
        ]
      },
      {
        "input": [
          7,
          18,
          22,
          21,
          15
        ],
        "output": [
          28,
          61,
          73,
          70,
          52
        ]
      }
    ]
  },
  {
    "id": "c039",
    "difficulty": 195,
    "function": "def c039(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        9,
        24,
        0,
        2,
        11,
        21,
        42
      ],
      "output": [
        9,
        24,
        0,
        2,
        11,
        21,
        42,
        9
      ]
    },
    "demos": [
      {
        "input": [
          22,
          19,
          11,
          43,
          15,
          38,
          42,
          14
        ],
        "output": [
          22,
          19,
          11,
          43,
          15,
          38,
          42,
          14
        ]
      },
      {
        "input": [
          3,
          40,
          20,
          43,
          23,
          10
        ],
        "output": [
          3,
          40,
          20,
          43,
          23,
          10,
          3
        ]
      },
      {
        "input": [
          24,
          40,
          16,
          41,
          9,
          11,
          44
        ],
        "output": [
          24,
          40,
          16,
          41,
          9,
          11,
          44,
          9
        ]
      }
    ]
  },
  {
    "id": "c181",
    "difficulty": 196,
    "function": "def c181(x):\n    # reverse the order of elements with even index\n    return [x[i] if i % 2 == 1 else x[-i-1] for i in range(len(x))]\n\n",
    "data": {
      "input": [
        84,
        85,
        92,
        73,
        76,
        19,
        52
      ],
      "output": [
        52,
        85,
        76,
        73,
        92,
        19,
        84
      ]
    },
    "demos": [
      {
        "input": [
          50,
          89,
          20,
          77,
          28,
          94
        ],
        "output": [
          94,
          89,
          77,
          77,
          89,
          94
        ]
      },
      {
        "input": [
          6,
          47,
          86,
          47,
          80,
          42,
          36
        ],
        "output": [
          36,
          47,
          80,
          47,
          86,
          42,
          6
        ]
      },
      {
        "input": [
          25,
          17,
          3,
          76,
          23,
          43,
          71,
          10
        ],
        "output": [
          10,
          17,
          43,
          76,
          76,
          43,
          17,
          10
        ]
      }
    ]
  },
  {
    "id": "c163",
    "difficulty": 197,
    "function": "def c163(x):\n    # replace each element M with 2 * M - 10\n    return [2*i-10 for i in x]\n\n",
    "data": {
      "input": [
        96,
        84,
        66,
        10,
        23,
        14
      ],
      "output": [
        182,
        158,
        122,
        10,
        36,
        18
      ]
    },
    "demos": [
      {
        "input": [
          26,
          90,
          30,
          77,
          43,
          32,
          98,
          12
        ],
        "output": [
          42,
          170,
          50,
          144,
          76,
          54,
          186,
          14
        ]
      },
      {
        "input": [
          35,
          64,
          35,
          55,
          91,
          26,
          95,
          94
        ],
        "output": [
          60,
          118,
          60,
          100,
          172,
          42,
          180,
          178
        ]
      },
      {
        "input": [
          87,
          32,
          74,
          74,
          69,
          35,
          81,
          45
        ],
        "output": [
          164,
          54,
          138,
          138,
          128,
          60,
          152,
          80
        ]
      }
    ]
  },
  {
    "id": "c154",
    "difficulty": 198,
    "function": "def c154(x):\n    # triple each even element\n    return [i*3 if i % 2 == 0 else i for i in x]\n\n",
    "data": {
      "input": [
        23,
        15,
        9,
        8,
        11,
        26,
        31,
        3
      ],
      "output": [
        23,
        15,
        9,
        24,
        11,
        78,
        31,
        3
      ]
    },
    "demos": [
      {
        "input": [
          19,
          23,
          18,
          18,
          19,
          8,
          17
        ],
        "output": [
          19,
          23,
          54,
          54,
          19,
          24,
          17
        ]
      },
      {
        "input": [
          10,
          26,
          3,
          33,
          0,
          31,
          12
        ],
        "output": [
          30,
          78,
          3,
          33,
          0,
          31,
          36
        ]
      },
      {
        "input": [
          1,
          15,
          28,
          1,
          18,
          14,
          1,
          32
        ],
        "output": [
          1,
          15,
          84,
          1,
          54,
          42,
          1,
          96
        ]
      }
    ]
  },
  {
    "id": "c166",
    "difficulty": 199,
    "function": "def c166(x):\n    # unique elements in ascending order by the sum of their digits\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = sum(map(int, str(i)))\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        4,
        97,
        28,
        4,
        22,
        22,
        2
      ],
      "output": [
        2,
        4,
        22,
        28,
        97
      ]
    },
    "demos": [
      {
        "input": [
          52,
          87,
          26,
          87,
          37
        ],
        "output": [
          52,
          26,
          37,
          87
        ]
      },
      {
        "input": [
          65,
          43,
          11,
          92,
          92,
          0,
          43
        ],
        "output": [
          0,
          11,
          43,
          65,
          92
        ]
      },
      {
        "input": [
          3,
          39,
          97,
          48,
          39
        ],
        "output": [
          3,
          39,
          48,
          97
        ]
      }
    ]
  },
  {
    "id": "c084",
    "difficulty": 200,
    "function": "def c084(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        53,
        56,
        61,
        50,
        79,
        30,
        19
      ],
      "output": [
        19
      ]
    },
    "demos": [
      {
        "input": [
          31,
          37,
          67,
          17,
          3,
          34,
          80,
          95,
          65
        ],
        "output": [
          80
        ]
      },
      {
        "input": [
          40,
          67,
          23,
          93,
          53,
          66,
          26,
          90
        ],
        "output": [
          26
        ]
      },
      {
        "input": [
          89,
          62,
          49,
          54,
          18,
          49,
          26,
          24,
          78,
          50
        ],
        "output": [
          26
        ]
      }
    ]
  },
  {
    "id": "c249",
    "difficulty": 201,
    "function": "def c249(x):\n    # use 0s to delimit sublists, give the first element of each sublist\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            if sublist:\n                res.append(sublist[0])\n                sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res.append(sublist[0])\n    return res\n\n",
    "data": {
      "input": [
        13,
        54,
        0,
        64,
        79,
        55,
        58,
        35,
        22
      ],
      "output": [
        13,
        64
      ]
    },
    "demos": [
      {
        "input": [
          73,
          71,
          72,
          54,
          29,
          59,
          86,
          17
        ],
        "output": [
          73
        ]
      },
      {
        "input": [
          93,
          11,
          30,
          0,
          0,
          96,
          1,
          27,
          51
        ],
        "output": [
          93,
          96
        ]
      },
      {
        "input": [
          0,
          58,
          5,
          12,
          75,
          11,
          0,
          73,
          98,
          0
        ],
        "output": [
          58,
          73
        ]
      }
    ]
  },
  {
    "id": "c118",
    "difficulty": 202,
    "function": "def c118(x):\n    # left rotate by N elements, N is the last element\n    return x[x[-1]:] + x[:x[-1]]\n\n",
    "data": {
      "input": [
        24,
        3,
        45,
        72,
        3,
        2
      ],
      "output": [
        45,
        72,
        3,
        2,
        24,
        3
      ]
    },
    "demos": [
      {
        "input": [
          34,
          36,
          12,
          72,
          79,
          1
        ],
        "output": [
          36,
          12,
          72,
          79,
          1,
          34
        ]
      },
      {
        "input": [
          44,
          36,
          95,
          15,
          1,
          37,
          1
        ],
        "output": [
          36,
          95,
          15,
          1,
          37,
          1,
          44
        ]
      },
      {
        "input": [
          3,
          41,
          55,
          32,
          45,
          6,
          4
        ],
        "output": [
          45,
          6,
          4,
          3,
          41,
          55,
          32
        ]
      }
    ]
  },
  {
    "id": "c152",
    "difficulty": 203,
    "function": "def c152(x):\n    # replace each element with the product of its digits\n    res = []\n    for i in x:\n        if i < 10:\n            res.append(0)\n        else:\n            res.append(int(str(i)[0]) * int(str(i)[1]))\n    return res\n\n",
    "data": {
      "input": [
        32,
        72,
        86,
        56,
        11,
        39,
        64,
        22
      ],
      "output": [
        6,
        14,
        48,
        30,
        1,
        27,
        24,
        4
      ]
    },
    "demos": [
      {
        "input": [
          32,
          93,
          9,
          7,
          84,
          83,
          95
        ],
        "output": [
          6,
          27,
          0,
          0,
          32,
          24,
          45
        ]
      },
      {
        "input": [
          9,
          61,
          52,
          22,
          7,
          85,
          95
        ],
        "output": [
          0,
          6,
          10,
          4,
          0,
          40,
          45
        ]
      },
      {
        "input": [
          18,
          96,
          30,
          91,
          58,
          52
        ],
        "output": [
          8,
          54,
          0,
          9,
          40,
          10
        ]
      }
    ]
  },
  {
    "id": "c237",
    "difficulty": 204,
    "function": "def c237(x):\n    # cumulative sum of unique elements\n    res = []\n    s = 0\n    for i in x:\n        if i not in res:\n            res.append(i)\n    for i in range(len(res)):\n        s += res[i]\n        res[i] = s\n    return res\n\n",
    "data": {
      "input": [
        28,
        16,
        7,
        7,
        19,
        3,
        15,
        24
      ],
      "output": [
        28,
        44,
        51,
        70,
        73,
        88,
        112
      ]
    },
    "demos": [
      {
        "input": [
          19,
          15,
          2,
          26,
          23,
          17,
          2
        ],
        "output": [
          19,
          34,
          36,
          62,
          85,
          102
        ]
      },
      {
        "input": [
          14,
          8,
          8,
          28,
          21,
          14,
          8,
          28
        ],
        "output": [
          14,
          22,
          50,
          71
        ]
      },
      {
        "input": [
          6,
          25,
          7,
          25,
          25,
          15,
          18
        ],
        "output": [
          6,
          31,
          38,
          53,
          71
        ]
      }
    ]
  },
  {
    "id": "c243",
    "difficulty": 205,
    "function": "def c243(x):\n    # number of odd elements\n    return [len([i for i in x if i % 2 == 1])]\n\n",
    "data": {
      "input": [
        55,
        38,
        46,
        71,
        15,
        1,
        72
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          96,
          24,
          28,
          8,
          32,
          15
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          51,
          88,
          12,
          70,
          64,
          83
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          62,
          54,
          83,
          25,
          55,
          28
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c188",
    "difficulty": 206,
    "function": "def c188(x):\n    # replace each element with 1 if it is divisible by 3, else replace with 0\n    return [1 if i % 3 == 0 else 0 for i in x]\n\n",
    "data": {
      "input": [
        64,
        66,
        30,
        29,
        4,
        92,
        43,
        20
      ],
      "output": [
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        0
      ]
    },
    "demos": [
      {
        "input": [
          50,
          92,
          91,
          16,
          31,
          13,
          59
        ],
        "output": [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          91,
          77,
          34,
          75,
          59,
          8
        ],
        "output": [
          0,
          0,
          0,
          1,
          0,
          0
        ]
      },
      {
        "input": [
          50,
          69,
          52,
          62,
          20,
          54
        ],
        "output": [
          0,
          1,
          0,
          0,
          0,
          1
        ]
      }
    ]
  },
  {
    "id": "c139",
    "difficulty": 207,
    "function": "def c139(x):\n    # remove all occurrences of the smallest element and the largest element\n    min_val = min(x)\n    max_val = max(x)\n    return [i for i in x if i != min_val and i != max_val]\n\n",
    "data": {
      "input": [
        3,
        1,
        0,
        4,
        0,
        10,
        6,
        1
      ],
      "output": [
        3,
        1,
        4,
        6,
        1
      ]
    },
    "demos": [
      {
        "input": [
          8,
          4,
          4,
          1,
          2,
          7,
          2
        ],
        "output": [
          4,
          4,
          2,
          7,
          2
        ]
      },
      {
        "input": [
          1,
          4,
          8,
          6,
          9
        ],
        "output": [
          4,
          8,
          6
        ]
      },
      {
        "input": [
          1,
          2,
          6,
          10,
          9,
          10
        ],
        "output": [
          2,
          6,
          9
        ]
      }
    ]
  },
  {
    "id": "c036",
    "difficulty": 208,
    "function": "def c036(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        8,
        2,
        10,
        2,
        3,
        1
      ],
      "output": [
        8,
        2,
        2,
        10,
        3,
        1
      ]
    },
    "demos": [
      {
        "input": [
          0,
          4,
          9,
          6,
          3
        ],
        "output": [
          0,
          4,
          6,
          9,
          3
        ]
      },
      {
        "input": [
          6,
          3,
          8,
          10,
          0
        ],
        "output": [
          6,
          0,
          8,
          10,
          3
        ]
      },
      {
        "input": [
          9,
          10,
          4,
          10,
          0,
          0,
          9
        ],
        "output": [
          9,
          0,
          4,
          10,
          10,
          0,
          9
        ]
      }
    ]
  },
  {
    "id": "c201",
    "difficulty": 209,
    "function": "def c201(x):\n    # elements > first element, followed by elements < first element\n    return [i for i in x if i > x[0]] + [i for i in x if i < x[0]]\n\n",
    "data": {
      "input": [
        5,
        4,
        88,
        22,
        87
      ],
      "output": [
        88,
        22,
        87,
        4
      ]
    },
    "demos": [
      {
        "input": [
          95,
          16,
          26,
          87,
          2,
          8,
          45,
          21
        ],
        "output": [
          16,
          26,
          87,
          2,
          8,
          45,
          21
        ]
      },
      {
        "input": [
          46,
          9,
          56,
          72,
          59,
          95,
          49
        ],
        "output": [
          56,
          72,
          59,
          95,
          49,
          9
        ]
      },
      {
        "input": [
          8,
          54,
          77,
          80,
          80,
          82,
          87,
          84
        ],
        "output": [
          54,
          77,
          80,
          80,
          82,
          87,
          84
        ]
      }
    ]
  },
  {
    "id": "c217",
    "difficulty": 210,
    "function": "def c217(x):\n    # elements in ascending order by ones digit\n    return sorted(x, key=lambda i: i % 10)\n\n",
    "data": {
      "input": [
        95,
        51,
        67,
        75,
        30
      ],
      "output": [
        30,
        51,
        95,
        75,
        67
      ]
    },
    "demos": [
      {
        "input": [
          67,
          54,
          53,
          82,
          23
        ],
        "output": [
          82,
          53,
          23,
          54,
          67
        ]
      },
      {
        "input": [
          28,
          98,
          32,
          31,
          82,
          2,
          74,
          54
        ],
        "output": [
          31,
          32,
          82,
          2,
          74,
          54,
          28,
          98
        ]
      },
      {
        "input": [
          54,
          11,
          8,
          81,
          49,
          23,
          34,
          12
        ],
        "output": [
          11,
          81,
          12,
          23,
          54,
          34,
          8,
          49
        ]
      }
    ]
  },
  {
    "id": "c005",
    "difficulty": 211,
    "function": "def c005(x):\n    # remove all but element N + 1, N is the first element\n    return [x[x[0]+1]]\n\n",
    "data": {
      "input": [
        1,
        32,
        73,
        77,
        64
      ],
      "output": [
        73
      ]
    },
    "demos": [
      {
        "input": [
          1,
          56,
          39,
          26,
          93,
          71,
          15,
          62
        ],
        "output": [
          39
        ]
      },
      {
        "input": [
          0,
          59,
          89,
          10,
          17,
          42,
          64,
          57
        ],
        "output": [
          59
        ]
      },
      {
        "input": [
          0,
          16,
          46,
          77,
          34,
          93
        ],
        "output": [
          16
        ]
      }
    ]
  },
  {
    "id": "c063",
    "difficulty": 213,
    "function": "def c063(x):\n    # remove the first N + 1 elements, N is the first element\n    return x[x[0]+1:]\n\n",
    "data": {
      "input": [
        3,
        1,
        10,
        0,
        8,
        3
      ],
      "output": [
        8,
        3
      ]
    },
    "demos": [
      {
        "input": [
          0,
          3,
          3,
          6,
          0
        ],
        "output": [
          3,
          3,
          6,
          0
        ]
      },
      {
        "input": [
          0,
          10,
          8,
          5,
          10,
          2,
          4
        ],
        "output": [
          10,
          8,
          5,
          10,
          2,
          4
        ]
      },
      {
        "input": [
          0,
          10,
          10,
          5,
          3
        ],
        "output": [
          10,
          10,
          5,
          3
        ]
      }
    ]
  },
  {
    "id": "c141",
    "difficulty": 214,
    "function": "def c141(x):\n    # replace element M + 2 with N, M = element 0, N = element 1; remove elements 0 and 1\n    x[x[0]+2] = x[1]\n    return x[2:]\n\n",
    "data": {
      "input": [
        0,
        0,
        9,
        3,
        3,
        10
      ],
      "output": [
        0,
        3,
        3,
        10
      ]
    },
    "demos": [
      {
        "input": [
          0,
          6,
          0,
          0,
          4,
          8
        ],
        "output": [
          6,
          0,
          4,
          8
        ]
      },
      {
        "input": [
          0,
          2,
          3,
          0,
          9,
          3,
          2
        ],
        "output": [
          2,
          0,
          9,
          3,
          2
        ]
      },
      {
        "input": [
          2,
          4,
          0,
          10,
          2,
          3,
          6,
          9
        ],
        "output": [
          0,
          10,
          4,
          3,
          6,
          9
        ]
      }
    ]
  },
  {
    "id": "c089",
    "difficulty": 215,
    "function": "def c089(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        55,
        69,
        60,
        1,
        33,
        98,
        74
      ],
      "output": [
        55,
        69,
        1,
        60,
        33,
        98,
        74
      ]
    },
    "demos": [
      {
        "input": [
          33,
          60,
          38,
          10,
          23,
          68,
          87,
          18
        ],
        "output": [
          33,
          60,
          10,
          38,
          23,
          68,
          87,
          18
        ]
      },
      {
        "input": [
          49,
          90,
          15,
          36,
          47,
          9,
          30
        ],
        "output": [
          49,
          47,
          15,
          36,
          90,
          9,
          30
        ]
      },
      {
        "input": [
          52,
          19,
          70,
          77,
          38,
          41,
          17
        ],
        "output": [
          52,
          38,
          70,
          77,
          19,
          41,
          17
        ]
      }
    ]
  },
  {
    "id": "c124",
    "difficulty": 216,
    "function": "def c124(x):\n    # element M, M = element N, N = element 0\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        5,
        3,
        1,
        2,
        5,
        1,
        6,
        8,
        2,
        5
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          6,
          0,
          6,
          6,
          6,
          0,
          2,
          6,
          4
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          7,
          5,
          5,
          3,
          9,
          0,
          3,
          7,
          1,
          9
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          3,
          9,
          8,
          3,
          7,
          7,
          5,
          3,
          4,
          4
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c216",
    "difficulty": 217,
    "function": "def c216(x):\n    # elements in ascending order by tens digit\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append([i, int(str(i)[-2])])\n        else:\n            res.append([i, 0])\n    return [i[0] for i in sorted(res, key=lambda i: i[1])]\n\n",
    "data": {
      "input": [
        61,
        19,
        22,
        58,
        19,
        26
      ],
      "output": [
        19,
        19,
        22,
        26,
        58,
        61
      ]
    },
    "demos": [
      {
        "input": [
          42,
          95,
          82,
          99,
          96
        ],
        "output": [
          42,
          82,
          95,
          99,
          96
        ]
      },
      {
        "input": [
          77,
          49,
          20,
          41,
          39,
          93,
          46,
          47
        ],
        "output": [
          20,
          39,
          49,
          41,
          46,
          47,
          77,
          93
        ]
      },
      {
        "input": [
          61,
          8,
          27,
          30,
          57,
          97
        ],
        "output": [
          8,
          27,
          30,
          57,
          61,
          97
        ]
      }
    ]
  },
  {
    "id": "c143",
    "difficulty": 218,
    "function": "def c143(x):\n    # replace every occurrence of the largest element with the smallest element\n    max_val = max(x)\n    min_val = min(x)\n    return [min_val if i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        6,
        2,
        3,
        5,
        6,
        6,
        2,
        1
      ],
      "output": [
        1,
        2,
        3,
        5,
        1,
        1,
        2,
        1
      ]
    },
    "demos": [
      {
        "input": [
          1,
          7,
          1,
          6,
          0,
          4
        ],
        "output": [
          1,
          0,
          1,
          6,
          0,
          4
        ]
      },
      {
        "input": [
          3,
          2,
          0,
          9,
          2
        ],
        "output": [
          3,
          2,
          0,
          0,
          2
        ]
      },
      {
        "input": [
          7,
          9,
          1,
          0,
          9,
          6,
          7
        ],
        "output": [
          7,
          0,
          1,
          0,
          0,
          6,
          7
        ]
      }
    ]
  },
  {
    "id": "c215",
    "difficulty": 219,
    "function": "def c215(x):\n    # elements in ascending order by hundreds digit\n    res = {}\n    for i in x:\n        if len(str(i)) > 2:\n            res[i] = int(str(i)[-3])\n        else:\n            res[i] = 0\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        843,
        467,
        16,
        432,
        944,
        424,
        439,
        656
      ],
      "output": [
        16,
        467,
        432,
        424,
        439,
        656,
        843,
        944
      ]
    },
    "demos": [
      {
        "input": [
          417,
          724,
          173,
          205,
          404,
          838
        ],
        "output": [
          173,
          205,
          417,
          404,
          724,
          838
        ]
      },
      {
        "input": [
          801,
          510,
          52,
          886,
          866,
          721,
          738
        ],
        "output": [
          52,
          510,
          721,
          738,
          801,
          886,
          866
        ]
      },
      {
        "input": [
          173,
          726,
          14,
          89,
          789
        ],
        "output": [
          14,
          89,
          173,
          726,
          789
        ]
      }
    ]
  },
  {
    "id": "c144",
    "difficulty": 220,
    "function": "def c144(x):\n    # replace every occurrence of the largest or smallest element with their absolute difference\n    max_val = max(x)\n    min_val = min(x)\n    return [abs(min_val - max_val) if i == min_val or i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        21,
        41,
        69,
        4
      ],
      "output": [
        21,
        41,
        65,
        65
      ]
    },
    "demos": [
      {
        "input": [
          15,
          91,
          87,
          2,
          66
        ],
        "output": [
          15,
          89,
          87,
          89,
          66
        ]
      },
      {
        "input": [
          39
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          7,
          71,
          44
        ],
        "output": [
          64,
          64,
          44
        ]
      }
    ]
  },
  {
    "id": "c128",
    "difficulty": 221,
    "function": "def c128(x):\n    # elements in ascending order after removing elements 0,1,and 4\n    x = x[2:4] + x[5:]\n    return sorted(x)\n\n",
    "data": {
      "input": [
        19,
        65,
        61,
        12,
        86,
        98,
        5,
        43
      ],
      "output": [
        5,
        12,
        43,
        61,
        98
      ]
    },
    "demos": [
      {
        "input": [
          53,
          65,
          30,
          30,
          90,
          26
        ],
        "output": [
          26,
          30,
          30
        ]
      },
      {
        "input": [
          42,
          79,
          61,
          48,
          65
        ],
        "output": [
          48,
          61
        ]
      },
      {
        "input": [
          37,
          24,
          33,
          34,
          64,
          39
        ],
        "output": [
          33,
          34,
          39
        ]
      }
    ]
  },
  {
    "id": "c208",
    "difficulty": 222,
    "function": "def c208(x):\n    # keep only last N elements, N is the last element\n    return x[-x[-1]:]\n\n",
    "data": {
      "input": [
        9,
        7,
        1,
        6,
        4,
        3,
        3,
        5
      ],
      "output": [
        6,
        4,
        3,
        3,
        5
      ]
    },
    "demos": [
      {
        "input": [
          4,
          9,
          6,
          7,
          0,
          10,
          2,
          6
        ],
        "output": [
          6,
          7,
          0,
          10,
          2,
          6
        ]
      },
      {
        "input": [
          9,
          8,
          7,
          3,
          7,
          3
        ],
        "output": [
          3,
          7,
          3
        ]
      },
      {
        "input": [
          8,
          7,
          5,
          10,
          9,
          4,
          4
        ],
        "output": [
          10,
          9,
          4,
          4
        ]
      }
    ]
  },
  {
    "id": "c035",
    "difficulty": 223,
    "function": "def c035(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        5,
        5,
        5,
        9,
        7,
        6,
        7
      ],
      "output": [
        9,
        5,
        5,
        5,
        7,
        6,
        7
      ]
    },
    "demos": [
      {
        "input": [
          0,
          8,
          8,
          7,
          7
        ],
        "output": [
          7,
          8,
          8,
          0,
          7
        ]
      },
      {
        "input": [
          4,
          1,
          3,
          4,
          3,
          9
        ],
        "output": [
          4,
          3,
          1,
          4,
          3,
          9
        ]
      },
      {
        "input": [
          0,
          3,
          3,
          6,
          8,
          7
        ],
        "output": [
          6,
          3,
          3,
          0,
          8,
          7
        ]
      }
    ]
  },
  {
    "id": "c214",
    "difficulty": 224,
    "function": "def c214(x):\n    # remove elements 0 and N + 1, N is the first element\n    x = x[1:x[0]+1] + x[x[0]+2:]\n    return x\n\n",
    "data": {
      "input": [
        0,
        74,
        52,
        12,
        0,
        28,
        74,
        31
      ],
      "output": [
        52,
        12,
        0,
        28,
        74,
        31
      ]
    },
    "demos": [
      {
        "input": [
          4,
          95,
          26,
          71,
          86,
          3
        ],
        "output": [
          95,
          26,
          71,
          86
        ]
      },
      {
        "input": [
          0,
          78,
          43,
          14,
          61,
          28,
          69,
          63
        ],
        "output": [
          43,
          14,
          61,
          28,
          69,
          63
        ]
      },
      {
        "input": [
          1,
          51,
          44,
          58,
          59,
          34
        ],
        "output": [
          51,
          58,
          59,
          34
        ]
      }
    ]
  },
  {
    "id": "c130",
    "difficulty": 225,
    "function": "def c130(x):\n    # elements 1 through N + 1, N = element 0\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        2,
        14,
        55,
        95,
        35,
        54
      ],
      "output": [
        14,
        55
      ]
    },
    "demos": [
      {
        "input": [
          7,
          9,
          84,
          7,
          36,
          16,
          35,
          15
        ],
        "output": [
          9,
          84,
          7,
          36,
          16,
          35,
          15
        ]
      },
      {
        "input": [
          4,
          15,
          88,
          28,
          47,
          7,
          36,
          17
        ],
        "output": [
          15,
          88,
          28,
          47
        ]
      },
      {
        "input": [
          6,
          63,
          12,
          18,
          71,
          80,
          9,
          59
        ],
        "output": [
          63,
          12,
          18,
          71,
          80,
          9
        ]
      }
    ]
  },
  {
    "id": "c159",
    "difficulty": 226,
    "function": "def c159(x):\n    # element N counts the number of occurrences of N, up to the largest element\n    out = []\n    for i, j in enumerate(range(max(x)+1)):\n        out.append(x.count(j))\n    return out\n\n",
    "data": {
      "input": [
        7,
        0,
        5,
        9,
        0,
        7,
        2
      ],
      "output": [
        2,
        0,
        1,
        0,
        0,
        1,
        0,
        2,
        0,
        1
      ]
    },
    "demos": [
      {
        "input": [
          9,
          1,
          1,
          9,
          0,
          5,
          7,
          8
        ],
        "output": [
          1,
          2,
          0,
          0,
          0,
          1,
          0,
          1,
          1,
          2
        ]
      },
      {
        "input": [
          7,
          5,
          6,
          7,
          8,
          5,
          3,
          8
        ],
        "output": [
          0,
          0,
          0,
          1,
          0,
          2,
          1,
          2,
          2
        ]
      },
      {
        "input": [
          3,
          7,
          7,
          1,
          9,
          2
        ],
        "output": [
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          2,
          0,
          1
        ]
      }
    ]
  },
  {
    "id": "c205",
    "difficulty": 227,
    "function": "def c205(x):\n    # product of elements divisible by 4\n    res = 1\n    for i in x:\n        if i % 4 == 0:\n            res *= i\n    return [res]\n\n",
    "data": {
      "input": [
        8,
        0,
        5,
        20,
        0,
        11,
        10,
        1
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          6,
          20,
          9,
          3,
          13,
          10,
          5
        ],
        "output": [
          20
        ]
      },
      {
        "input": [
          12,
          15,
          6,
          19,
          4,
          15
        ],
        "output": [
          48
        ]
      },
      {
        "input": [
          1,
          12,
          19,
          15,
          20,
          15
        ],
        "output": [
          240
        ]
      }
    ]
  },
  {
    "id": "c076",
    "difficulty": 228,
    "function": "def c076(x):\n    # the max, last, length, first, and min elements\n    return [max(x), x[-1], len(x), x[0], min(x)]\n\n",
    "data": {
      "input": [
        85,
        59,
        59,
        30,
        57,
        13
      ],
      "output": [
        85,
        13,
        6,
        85,
        13
      ]
    },
    "demos": [
      {
        "input": [
          74,
          28,
          50,
          89,
          67,
          11
        ],
        "output": [
          89,
          11,
          6,
          74,
          11
        ]
      },
      {
        "input": [
          96,
          52,
          52,
          17,
          50,
          86,
          59,
          89
        ],
        "output": [
          96,
          89,
          8,
          96,
          17
        ]
      },
      {
        "input": [
          63,
          61,
          89,
          50,
          74,
          20,
          87
        ],
        "output": [
          89,
          87,
          7,
          63,
          20
        ]
      }
    ]
  },
  {
    "id": "c250",
    "difficulty": 229,
    "function": "def c250(x):\n    # use 0s to delimit sublists, concatenate reversed sublists\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            res += sublist[::-1]\n            sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res += sublist[::-1]\n    return res\n\n",
    "data": {
      "input": [
        31,
        17,
        32,
        62,
        0,
        44,
        80,
        93
      ],
      "output": [
        62,
        32,
        17,
        31,
        93,
        80,
        44
      ]
    },
    "demos": [
      {
        "input": [
          0,
          73,
          22,
          34,
          19,
          24,
          95
        ],
        "output": [
          95,
          24,
          19,
          34,
          22,
          73
        ]
      },
      {
        "input": [
          2,
          51,
          68,
          2,
          0,
          16,
          0,
          81
        ],
        "output": [
          2,
          68,
          51,
          2,
          16,
          81
        ]
      },
      {
        "input": [
          0,
          75,
          0,
          22,
          13,
          0,
          75,
          25,
          36
        ],
        "output": [
          75,
          13,
          22,
          36,
          25,
          75
        ]
      }
    ]
  },
  {
    "id": "c186",
    "difficulty": 230,
    "function": "def c186(x):\n    # keep only elements greater than element 0\n    return [i for i in x if i > x[0]]\n\n",
    "data": {
      "input": [
        30,
        35,
        30,
        4,
        66,
        67
      ],
      "output": [
        35,
        66,
        67
      ]
    },
    "demos": [
      {
        "input": [
          68,
          36,
          1,
          91,
          32,
          11
        ],
        "output": [
          91
        ]
      },
      {
        "input": [
          76,
          48,
          63,
          61,
          29,
          19,
          97
        ],
        "output": [
          97
        ]
      },
      {
        "input": [
          32,
          8,
          93,
          15,
          46,
          49
        ],
        "output": [
          93,
          46,
          49
        ]
      }
    ]
  },
  {
    "id": "c242",
    "difficulty": 231,
    "function": "def c242(x):\n    # take the largest unique element, append the second largest unique element, prepend the third largest unique element, append the fourth largest unique element, and so on\n    unique = sorted(set(x), reverse=True)\n    res = [max(unique)]\n    unique.remove(max(unique))\n    for i in range(len(unique)):\n        if i % 2 == 0:\n            res.append(unique[i])\n        else:\n            res.insert(0, unique[i])\n    return res\n\n",
    "data": {
      "input": [
        7,
        6,
        3,
        7,
        0,
        7,
        7,
        2
      ],
      "output": [
        0,
        3,
        7,
        6,
        2
      ]
    },
    "demos": [
      {
        "input": [
          6,
          7,
          5,
          8,
          9,
          4,
          7
        ],
        "output": [
          5,
          7,
          9,
          8,
          6,
          4
        ]
      },
      {
        "input": [
          5,
          1,
          6,
          7,
          0,
          8,
          9
        ],
        "output": [
          0,
          5,
          7,
          9,
          8,
          6,
          1
        ]
      },
      {
        "input": [
          6,
          7,
          6,
          9,
          4,
          2
        ],
        "output": [
          2,
          6,
          9,
          7,
          4
        ]
      }
    ]
  },
  {
    "id": "c160",
    "difficulty": 232,
    "function": "def c160(x):\n    # replace each element with 99 - element\n    return [99-i for i in x]\n\n",
    "data": {
      "input": [
        49,
        16,
        91,
        4,
        38,
        23,
        87,
        75
      ],
      "output": [
        50,
        83,
        8,
        95,
        61,
        76,
        12,
        24
      ]
    },
    "demos": [
      {
        "input": [
          92,
          83,
          57,
          44,
          79,
          15,
          61,
          3
        ],
        "output": [
          7,
          16,
          42,
          55,
          20,
          84,
          38,
          96
        ]
      },
      {
        "input": [
          97,
          94,
          36,
          36,
          50,
          59,
          16,
          36
        ],
        "output": [
          2,
          5,
          63,
          63,
          49,
          40,
          83,
          63
        ]
      },
      {
        "input": [
          66,
          16,
          30,
          15,
          42,
          72
        ],
        "output": [
          33,
          83,
          69,
          84,
          57,
          27
        ]
      }
    ]
  },
  {
    "id": "c167",
    "difficulty": 233,
    "function": "def c167(x):\n    # keep only elements divisible by 3\n    return [i for i in x if i % 3 == 0]\n\n",
    "data": {
      "input": [
        11,
        85,
        41,
        5,
        15,
        12,
        0,
        23
      ],
      "output": [
        15,
        12,
        0
      ]
    },
    "demos": [
      {
        "input": [
          35,
          84,
          38,
          26,
          87,
          55,
          39
        ],
        "output": [
          84,
          87,
          39
        ]
      },
      {
        "input": [
          81,
          48,
          56,
          20,
          80,
          82,
          48
        ],
        "output": [
          81,
          48,
          48
        ]
      },
      {
        "input": [
          25,
          35,
          54,
          37,
          75,
          7
        ],
        "output": [
          54,
          75
        ]
      }
    ]
  },
  {
    "id": "c202",
    "difficulty": 234,
    "function": "def c202(x):\n    # the indices of every even number\n    return [i for i, j in enumerate(x) if j % 2 == 0]\n\n\n",
    "data": {
      "input": [
        16,
        72,
        43,
        60,
        59,
        48,
        31,
        27
      ],
      "output": [
        0,
        1,
        3,
        5
      ]
    },
    "demos": [
      {
        "input": [
          75,
          72,
          36,
          97,
          9,
          82
        ],
        "output": [
          1,
          2,
          5
        ]
      },
      {
        "input": [
          13,
          84,
          12,
          82,
          80,
          46,
          4
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      {
        "input": [
          1,
          14,
          76,
          24,
          41,
          44,
          70
        ],
        "output": [
          1,
          2,
          3,
          5,
          6
        ]
      }
    ]
  },
  {
    "id": "c129",
    "difficulty": 235,
    "function": "def c129(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        2,
        4,
        4,
        26,
        67,
        66,
        74,
        51
      ],
      "output": [
        67,
        66
      ]
    },
    "demos": [
      {
        "input": [
          4,
          4,
          67,
          98,
          84,
          76,
          7,
          97,
          23,
          71
        ],
        "output": []
      },
      {
        "input": [
          2,
          3,
          95,
          22,
          86,
          20,
          68,
          55,
          12
        ],
        "output": [
          86
        ]
      },
      {
        "input": [
          4,
          5,
          77,
          75,
          83,
          4,
          14,
          71,
          72,
          23
        ],
        "output": [
          14
        ]
      }
    ]
  },
  {
    "id": "c221",
    "difficulty": 236,
    "function": "def c221(x):\n    # sum of even elements\n    return [sum(i for i in x if i % 2 == 0)]\n\n",
    "data": {
      "input": [
        31,
        37,
        5,
        5,
        38,
        42,
        49
      ],
      "output": [
        80
      ]
    },
    "demos": [
      {
        "input": [
          6,
          14,
          43,
          6,
          24,
          31,
          5
        ],
        "output": [
          50
        ]
      },
      {
        "input": [
          21,
          36,
          11,
          30,
          0,
          43,
          27,
          4
        ],
        "output": [
          70
        ]
      },
      {
        "input": [
          3,
          43,
          10,
          5,
          35,
          9,
          25
        ],
        "output": [
          10
        ]
      }
    ]
  },
  {
    "id": "c131",
    "difficulty": 237,
    "function": "def c131(x):\n    # keep only elements whose tens digit is even\n    res = []\n    for i in x:\n        if len(str(i)) < 2:\n            res.append(i)\n        elif int(str(i)[-2]) % 2 == 0:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        63,
        10,
        68,
        90,
        36,
        65,
        85,
        87
      ],
      "output": [
        63,
        68,
        65,
        85,
        87
      ]
    },
    "demos": [
      {
        "input": [
          10,
          57,
          2,
          79,
          59,
          36,
          49,
          70
        ],
        "output": [
          2,
          49
        ]
      },
      {
        "input": [
          11,
          3,
          31,
          46,
          20,
          67
        ],
        "output": [
          3,
          46,
          20,
          67
        ]
      },
      {
        "input": [
          83,
          79,
          29,
          64,
          43,
          2,
          82,
          39
        ],
        "output": [
          83,
          29,
          64,
          43,
          2,
          82
        ]
      }
    ]
  },
  {
    "id": "c180",
    "difficulty": 238,
    "function": "def c180(x):\n    # take the smallest element, append the second smallest element, prepend the third smallest element, append the fourth smallest element, and so on\n    sorted_x = sorted(x)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        29,
        21,
        70,
        48,
        90,
        5
      ],
      "output": [
        70,
        29,
        5,
        21,
        48,
        90
      ]
    },
    "demos": [
      {
        "input": [
          28,
          2,
          8,
          12,
          73,
          71,
          94,
          97
        ],
        "output": [
          94,
          71,
          12,
          2,
          8,
          28,
          73,
          97
        ]
      },
      {
        "input": [
          74,
          80,
          97,
          7,
          46,
          56,
          63,
          11
        ],
        "output": [
          80,
          63,
          46,
          7,
          11,
          56,
          74,
          97
        ]
      },
      {
        "input": [
          8,
          52,
          42,
          15,
          94,
          95,
          41
        ],
        "output": [
          95,
          52,
          41,
          8,
          15,
          42,
          94
        ]
      }
    ]
  },
  {
    "id": "c015",
    "difficulty": 239,
    "function": "def c015(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        1,
        6,
        1,
        0,
        12,
        6
      ],
      "output": [
        0,
        12,
        6
      ]
    },
    "demos": [
      {
        "input": [
          3,
          5,
          13,
          3,
          9,
          8,
          15,
          6
        ],
        "output": [
          8,
          15
        ]
      },
      {
        "input": [
          1,
          5,
          6,
          4,
          15,
          6,
          10,
          3,
          2
        ],
        "output": [
          4,
          15,
          6,
          10
        ]
      },
      {
        "input": [
          4,
          4,
          5,
          15,
          11,
          13,
          8,
          11
        ],
        "output": []
      }
    ]
  },
  {
    "id": "c179",
    "difficulty": 240,
    "function": "def c179(x):\n    # take the largest element, append the second largest element, prepend the third largest element, append the fourth largest element, and so on\n    sorted_x = sorted(x, reverse=True)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        35,
        73,
        38,
        59,
        86,
        75,
        91
      ],
      "output": [
        35,
        59,
        75,
        91,
        86,
        73,
        38
      ]
    },
    "demos": [
      {
        "input": [
          60,
          67,
          85,
          36,
          52,
          15
        ],
        "output": [
          36,
          60,
          85,
          67,
          52,
          15
        ]
      },
      {
        "input": [
          74,
          28,
          70,
          45,
          37,
          95,
          22
        ],
        "output": [
          22,
          37,
          70,
          95,
          74,
          45,
          28
        ]
      },
      {
        "input": [
          9,
          86,
          49,
          10,
          22,
          17,
          66,
          19
        ],
        "output": [
          10,
          19,
          49,
          86,
          66,
          22,
          17,
          9
        ]
      }
    ]
  },
  {
    "id": "c226",
    "difficulty": 241,
    "function": "def c226(x):\n    # remove first M and last N elements, M is the first element, N is the last element\n    if x[-1] == 0:\n        return x[x[0]:]\n    return x[x[0]:-x[-1]]\n\n",
    "data": {
      "input": [
        6,
        5,
        7,
        11,
        15,
        8,
        5,
        3,
        9,
        6
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          5,
          12,
          7,
          0,
          15,
          9,
          15,
          1,
          10,
          1
        ],
        "output": [
          9,
          15,
          1,
          10
        ]
      },
      {
        "input": [
          2,
          6,
          5,
          12,
          9,
          3
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          4,
          9,
          13,
          11,
          0,
          7,
          10,
          11,
          8,
          1
        ],
        "output": [
          0,
          7,
          10,
          11,
          8
        ]
      }
    ]
  },
  {
    "id": "c134",
    "difficulty": 242,
    "function": "def c134(x):\n    # remove elements M through N, M is the first element, N is the second element\n    return x[:x[0]] + x[x[1]+1:]\n\n",
    "data": {
      "input": [
        3,
        9,
        11,
        11,
        9,
        6,
        4,
        3,
        9,
        1
      ],
      "output": [
        3,
        9,
        11
      ]
    },
    "demos": [
      {
        "input": [
          3,
          4,
          12,
          4,
          4,
          1,
          4,
          3,
          7,
          7
        ],
        "output": [
          3,
          4,
          12,
          1,
          4,
          3,
          7,
          7
        ]
      },
      {
        "input": [
          3,
          3,
          7,
          11,
          3,
          3
        ],
        "output": [
          3,
          3,
          7,
          3,
          3
        ]
      },
      {
        "input": [
          0,
          6,
          15,
          2,
          14,
          6,
          15,
          12
        ],
        "output": [
          12
        ]
      }
    ]
  },
  {
    "id": "c164",
    "difficulty": 243,
    "function": "def c164(x):\n    # replace each element M with M // 4 + 5\n    return [i//4+5 for i in x]\n\n",
    "data": {
      "input": [
        3,
        14,
        79,
        13,
        29,
        71
      ],
      "output": [
        5,
        8,
        24,
        8,
        12,
        22
      ]
    },
    "demos": [
      {
        "input": [
          51,
          27,
          33,
          11,
          59,
          21,
          0,
          22
        ],
        "output": [
          17,
          11,
          13,
          7,
          19,
          10,
          5,
          10
        ]
      },
      {
        "input": [
          62,
          84,
          85,
          97,
          75,
          23
        ],
        "output": [
          20,
          26,
          26,
          29,
          23,
          10
        ]
      },
      {
        "input": [
          62,
          8,
          66,
          56,
          1,
          30
        ],
        "output": [
          20,
          7,
          21,
          19,
          5,
          12
        ]
      }
    ]
  },
  {
    "id": "c178",
    "difficulty": 244,
    "function": "def c178(x):\n    # keep only elements followed by an even number\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] % 2 == 0:\n            res.append(x[i])\n    return res \n\n",
    "data": {
      "input": [
        59,
        99,
        76,
        99,
        7,
        94,
        41,
        67
      ],
      "output": [
        99,
        7
      ]
    },
    "demos": [
      {
        "input": [
          91,
          25,
          18,
          23,
          48,
          61,
          26
        ],
        "output": [
          25,
          23,
          61
        ]
      },
      {
        "input": [
          86,
          19,
          64,
          67,
          94,
          77,
          93,
          23
        ],
        "output": [
          19,
          67
        ]
      },
      {
        "input": [
          27,
          37,
          58,
          13,
          33,
          71
        ],
        "output": [
          37
        ]
      }
    ]
  },
  {
    "id": "c113",
    "difficulty": 245,
    "function": "def c113(x):\n    # keep only elements whose ones digit is greater than the first element\n    res = []\n    for i in x:\n        if i % 10 > x[0]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        8,
        27,
        39,
        9,
        10,
        39,
        13,
        18
      ],
      "output": [
        39,
        9,
        39
      ]
    },
    "demos": [
      {
        "input": [
          7,
          32,
          6,
          19,
          44,
          45,
          31,
          12,
          26,
          33
        ],
        "output": [
          19
        ]
      },
      {
        "input": [
          0,
          38,
          42,
          43,
          13,
          27,
          25
        ],
        "output": [
          38,
          42,
          43,
          13,
          27,
          25
        ]
      },
      {
        "input": [
          7,
          45,
          20,
          38,
          21,
          5,
          7,
          41
        ],
        "output": [
          38
        ]
      }
    ]
  },
  {
    "id": "c206",
    "difficulty": 246,
    "function": "def c206(x):\n    # keep only elements whose value is between the first and second element\n    return [i for i in x if x[0] < i < x[1]]\n\n",
    "data": {
      "input": [
        3,
        35,
        26,
        18,
        32,
        37,
        3,
        42
      ],
      "output": [
        26,
        18,
        32
      ]
    },
    "demos": [
      {
        "input": [
          6,
          12,
          20,
          46,
          46,
          7,
          1
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          14,
          49,
          35,
          16,
          41,
          25,
          34,
          12
        ],
        "output": [
          35,
          16,
          41,
          25,
          34
        ]
      },
      {
        "input": [
          5,
          52,
          49,
          19,
          5,
          22,
          16,
          25,
          0
        ],
        "output": [
          49,
          19,
          22,
          16,
          25
        ]
      }
    ]
  },
  {
    "id": "c210",
    "difficulty": 247,
    "function": "def c210(x):\n    # unique elements with last element inserted at index M, where M is the first element\n    unique = []\n    for i in x:\n        if i not in unique:\n            unique.append(i)\n    unique.insert(x[0], x[-1])\n    return unique\n\n",
    "data": {
      "input": [
        0,
        8,
        7,
        4,
        5,
        5,
        5
      ],
      "output": [
        5,
        0,
        8,
        7,
        4,
        5
      ]
    },
    "demos": [
      {
        "input": [
          0,
          7,
          5,
          3,
          4,
          7,
          0,
          2
        ],
        "output": [
          2,
          0,
          7,
          5,
          3,
          4,
          2
        ]
      },
      {
        "input": [
          1,
          0,
          7,
          0,
          1,
          3,
          0
        ],
        "output": [
          1,
          0,
          0,
          7,
          3
        ]
      },
      {
        "input": [
          4,
          3,
          8,
          3,
          9,
          8,
          6
        ],
        "output": [
          4,
          3,
          8,
          9,
          6,
          6
        ]
      }
    ]
  },
  {
    "id": "c158",
    "difficulty": 248,
    "function": "def c158(x):\n    # replace each element with 1 if element N equals N, else 0\n    res = []\n    for i, j in enumerate(x):\n        if i == j:\n            res.append(1)\n        else:\n            res.append(0)\n    return res\n\n",
    "data": {
      "input": [
        6,
        7,
        8,
        3,
        4,
        3,
        6,
        4,
        8,
        9
      ],
      "output": [
        0,
        0,
        0,
        1,
        1,
        0,
        1,
        0,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          8,
          1,
          1,
          3,
          4,
          2,
          6,
          7
        ],
        "output": [
          0,
          1,
          0,
          1,
          1,
          0,
          1,
          1
        ]
      },
      {
        "input": [
          0,
          7,
          2,
          3,
          4,
          5,
          8,
          7,
          8
        ],
        "output": [
          1,
          0,
          1,
          1,
          1,
          1,
          0,
          1,
          1
        ]
      },
      {
        "input": [
          8,
          1,
          2,
          3,
          8,
          2,
          6
        ],
        "output": [
          0,
          1,
          1,
          1,
          0,
          0,
          1
        ]
      }
    ]
  },
  {
    "id": "c183",
    "difficulty": 249,
    "function": "def c183(x):\n    # list the index of second elements and following equal to first element\n    res = []\n    for i in range(1, len(x)):\n        if x[i] == x[0]:\n            res.append(i)\n    return res",
    "data": {
      "input": [
        6,
        5,
        8,
        6,
        12,
        6,
        6
      ],
      "output": [
        3,
        5,
        6
      ]
    },
    "demos": [
      {
        "input": [
          13,
          3,
          10,
          13,
          15,
          3,
          11,
          13,
          0
        ],
        "output": [
          3,
          7
        ]
      },
      {
        "input": [
          12,
          9,
          12,
          9,
          2,
          12,
          12,
          12,
          13,
          14
        ],
        "output": [
          2,
          5,
          6,
          7
        ]
      },
      {
        "input": [
          13,
          12,
          5,
          13,
          11,
          3,
          13
        ],
        "output": [
          3,
          6
        ]
      }
    ]
  },
  {
    "id": "c014",
    "difficulty": 157,
    "function": "def c014(x):\n    # remove all but elements 2 through 5\n    return x[2:5]\n\n",
    "data": {
      "input": [
        82,
        10,
        65,
        94,
        90,
        78
      ],
      "output": [
        65,
        94,
        90
      ]
    },
    "demos": [
      {
        "input": [
          88,
          11,
          12,
          78,
          84,
          91,
          67
        ],
        "output": [
          12,
          78,
          84
        ]
      },
      {
        "input": [
          88,
          25,
          5,
          86,
          74,
          93,
          20,
          10
        ],
        "output": [
          5,
          86,
          74
        ]
      },
      {
        "input": [
          60,
          60,
          94,
          10,
          35,
          14
        ],
        "output": [
          94,
          10,
          35
        ]
      }
    ]
  },
  {
    "id": "c098",
    "difficulty": 86,
    "function": "def c098(x):\n    # add the index to each element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        7,
        5,
        8,
        2,
        3,
        1,
        0
      ],
      "output": [
        7,
        6,
        10,
        5,
        7,
        6,
        6
      ]
    },
    "demos": [
      {
        "input": [
          1,
          1,
          9,
          1,
          8,
          7
        ],
        "output": [
          1,
          2,
          11,
          4,
          12,
          12
        ]
      },
      {
        "input": [
          7,
          4,
          4,
          8,
          1,
          6,
          4,
          5
        ],
        "output": [
          7,
          5,
          6,
          11,
          5,
          11,
          10,
          12
        ]
      },
      {
        "input": [
          0,
          9,
          3,
          4,
          6,
          8,
          5
        ],
        "output": [
          0,
          10,
          5,
          7,
          10,
          13,
          11
        ]
      }
    ]
  },
  {
    "id": "c209",
    "difficulty": 212,
    "function": "def c209(x):\n    # elements in ascending order, insert sum of smallest and largest element at index 3\n    x = sorted(x)\n    x.insert(3, x[0] + x[-1])\n    return x\n\n",
    "data": {
      "input": [
        6,
        4,
        18,
        17,
        7,
        30,
        6,
        28
      ],
      "output": [
        4,
        6,
        6,
        34,
        7,
        17,
        18,
        28,
        30
      ]
    },
    "demos": [
      {
        "input": [
          28,
          0,
          22,
          11,
          19
        ],
        "output": [
          0,
          11,
          19,
          28,
          22,
          28
        ]
      },
      {
        "input": [
          11,
          11,
          12,
          21,
          14,
          19,
          25
        ],
        "output": [
          11,
          11,
          12,
          36,
          14,
          19,
          21,
          25
        ]
      },
      {
        "input": [
          13,
          3,
          16,
          14,
          20,
          25
        ],
        "output": [
          3,
          13,
          14,
          28,
          16,
          20,
          25
        ]
      }
    ]
  },
  {
    "id": "c211",
    "difficulty": 104,
    "function": "def c211(x):\n    # reverse input, insert fouth element and fifth element so they are fourth and third from the end respectively\n    x = x[::-1]\n    x.insert(-3, x[3])\n    x.insert(-4, x[4])\n    return x\n\n",
    "data": {
      "input": [
        3,
        10,
        63,
        61,
        18,
        63,
        85,
        77
      ],
      "output": [
        77,
        85,
        63,
        18,
        61,
        61,
        18,
        63,
        10,
        3
      ]
    },
    "demos": [
      {
        "input": [
          66,
          19,
          84,
          13,
          55,
          44,
          67
        ],
        "output": [
          67,
          44,
          55,
          13,
          13,
          13,
          84,
          19,
          66
        ]
      },
      {
        "input": [
          39,
          5,
          5,
          60,
          85,
          70,
          86
        ],
        "output": [
          86,
          70,
          85,
          60,
          60,
          60,
          5,
          5,
          39
        ]
      },
      {
        "input": [
          9,
          64,
          95,
          86,
          40,
          36
        ],
        "output": [
          36,
          40,
          86,
          95,
          95,
          95,
          64,
          9
        ]
      }
    ]
  },
  {
    "id": "c102",
    "difficulty": 0,
    "function": "def c102(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        74,
        71,
        64,
        97,
        41,
        34,
        78,
        94
      ],
      "output": [
        74,
        71,
        64,
        97,
        41,
        34,
        78,
        94
      ]
    },
    "demos": [
      {
        "input": [
          31,
          17,
          96,
          96,
          28,
          75,
          9,
          70
        ],
        "output": [
          31,
          17,
          96,
          96,
          28,
          75,
          9,
          70
        ]
      },
      {
        "input": [
          64,
          47,
          44,
          37,
          37,
          91
        ],
        "output": [
          64,
          47,
          44,
          37,
          37,
          91
        ]
      },
      {
        "input": [
          76,
          90,
          30,
          49,
          28,
          39,
          27,
          42
        ],
        "output": [
          76,
          90,
          30,
          49,
          28,
          39,
          27,
          42
        ]
      }
    ]
  },
  {
    "id": "c170",
    "difficulty": 1,
    "function": "def c170(x):\n    # remove all but the first and last element\n    return [x[0], x[-1]]\n    \n",
    "data": {
      "input": [
        68,
        26,
        100,
        46,
        16,
        40,
        45
      ],
      "output": [
        68,
        45
      ]
    },
    "demos": [
      {
        "input": [
          37,
          69,
          35,
          68,
          97,
          23,
          5
        ],
        "output": [
          37,
          5
        ]
      },
      {
        "input": [
          62,
          36,
          14,
          42,
          30
        ],
        "output": [
          62,
          30
        ]
      },
      {
        "input": [
          61,
          83,
          22
        ],
        "output": [
          61,
          22
        ]
      }
    ]
  },
  {
    "id": "c121",
    "difficulty": 2,
    "function": "def c121(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        5,
        63,
        22
      ],
      "output": [
        22
      ]
    },
    "demos": [
      {
        "input": [
          53,
          15,
          27,
          39,
          61,
          69
        ],
        "output": [
          69
        ]
      },
      {
        "input": [
          90,
          41,
          79,
          66
        ],
        "output": [
          66
        ]
      },
      {
        "input": [
          50,
          64,
          91,
          69
        ],
        "output": [
          69
        ]
      }
    ]
  },
  {
    "id": "c045",
    "difficulty": 3,
    "function": "def c045(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        47,
        51,
        74,
        95
      ],
      "output": [
        47,
        51,
        74,
        95
      ]
    },
    "demos": [
      {
        "input": [
          27,
          11,
          37,
          4
        ],
        "output": [
          27,
          11,
          37,
          4
        ]
      },
      {
        "input": [
          17,
          28,
          71,
          19,
          33,
          50
        ],
        "output": [
          17,
          28,
          71,
          19,
          33,
          50
        ]
      },
      {
        "input": [
          21,
          87,
          87,
          10,
          71
        ],
        "output": [
          21,
          87,
          87,
          10,
          71
        ]
      }
    ]
  },
  {
    "id": "c072",
    "difficulty": 4,
    "function": "def c072(x):\n    # repeat every element twice\n    return [i for i in x for _ in (0, 1)]\n\n",
    "data": {
      "input": [
        36,
        66,
        86,
        83,
        11
      ],
      "output": [
        36,
        36,
        66,
        66,
        86,
        86,
        83,
        83,
        11,
        11
      ]
    },
    "demos": [
      {
        "input": [
          21,
          61,
          62,
          89,
          69
        ],
        "output": [
          21,
          21,
          61,
          61,
          62,
          62,
          89,
          89,
          69,
          69
        ]
      },
      {
        "input": [
          59,
          12,
          67
        ],
        "output": [
          59,
          59,
          12,
          12,
          67,
          67
        ]
      },
      {
        "input": [
          55,
          6,
          85,
          93,
          86,
          26,
          86
        ],
        "output": [
          55,
          55,
          6,
          6,
          85,
          85,
          93,
          93,
          86,
          86,
          26,
          26,
          86,
          86
        ]
      }
    ]
  },
  {
    "id": "c151",
    "difficulty": 5,
    "function": "def c151(x):\n    # repeat each element, M, M times, in order of appearance\n    return [i for i in x for _ in range(i)]\n\n",
    "data": {
      "input": [
        1,
        3,
        1,
        3,
        3,
        5
      ],
      "output": [
        1,
        3,
        3,
        3,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        5,
        5,
        5,
        5,
        5
      ]
    },
    "demos": [
      {
        "input": [
          4,
          5,
          2,
          2,
          4,
          4
        ],
        "output": [
          4,
          4,
          4,
          4,
          5,
          5,
          5,
          5,
          5,
          2,
          2,
          2,
          2,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4
        ]
      },
      {
        "input": [
          3,
          5,
          1,
          0
        ],
        "output": [
          3,
          3,
          3,
          5,
          5,
          5,
          5,
          5,
          1
        ]
      },
      {
        "input": [
          2,
          4,
          1,
          0
        ],
        "output": [
          2,
          2,
          4,
          4,
          4,
          4,
          1
        ]
      }
    ]
  },
  {
    "id": "c080",
    "difficulty": 6,
    "function": "def c080(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        25,
        4,
        25,
        9,
        32,
        69,
        12
      ],
      "output": [
        12,
        69,
        32,
        9,
        25,
        4,
        25
      ]
    },
    "demos": [
      {
        "input": [
          2,
          78,
          80,
          35
        ],
        "output": [
          35,
          80,
          78,
          2
        ]
      },
      {
        "input": [
          62,
          25,
          64,
          89,
          81
        ],
        "output": [
          81,
          89,
          64,
          25,
          62
        ]
      },
      {
        "input": [
          25,
          89,
          33,
          98
        ],
        "output": [
          98,
          33,
          89,
          25
        ]
      }
    ]
  },
  {
    "id": "c061",
    "difficulty": 7,
    "function": "def c061(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        72,
        33,
        81,
        95,
        83,
        53
      ],
      "output": [
        53
      ]
    },
    "demos": [
      {
        "input": [
          87,
          69,
          68,
          75,
          79,
          71,
          4
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          75,
          75,
          49
        ],
        "output": [
          49
        ]
      },
      {
        "input": [
          58,
          60,
          44,
          15,
          14,
          53
        ],
        "output": [
          53
        ]
      }
    ]
  },
  {
    "id": "c189",
    "difficulty": 8,
    "function": "def c189(x):\n    # count from the smallest element to the largest element\n    return list(range(min(x), max(x)+1))\n\n",
    "data": {
      "input": [
        49,
        47,
        52,
        54
      ],
      "output": [
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54
      ]
    },
    "demos": [
      {
        "input": [
          26,
          19,
          23
        ],
        "output": [
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26
        ]
      },
      {
        "input": [
          78,
          76,
          73
        ],
        "output": [
          73,
          74,
          75,
          76,
          77,
          78
        ]
      },
      {
        "input": [
          33,
          27,
          31
        ],
        "output": [
          27,
          28,
          29,
          30,
          31,
          32,
          33
        ]
      }
    ]
  },
  {
    "id": "c050",
    "difficulty": 9,
    "function": "def c050(x):\n    # prepend first element to the list\n    return [x[0]] + x\n\n",
    "data": {
      "input": [
        32,
        97,
        10,
        29,
        65,
        89
      ],
      "output": [
        32,
        32,
        97,
        10,
        29,
        65,
        89
      ]
    },
    "demos": [
      {
        "input": [
          8,
          75,
          63,
          61,
          15,
          38,
          45
        ],
        "output": [
          8,
          8,
          75,
          63,
          61,
          15,
          38,
          45
        ]
      },
      {
        "input": [
          32,
          18,
          99,
          25
        ],
        "output": [
          32,
          32,
          18,
          99,
          25
        ]
      },
      {
        "input": [
          70,
          28,
          70,
          15,
          72,
          69,
          3
        ],
        "output": [
          70,
          70,
          28,
          70,
          15,
          72,
          69,
          3
        ]
      }
    ]
  },
  {
    "id": "c048",
    "difficulty": 10,
    "function": "def c048(x):\n    # remove all but the first element\n    return [x[0]]\n    \n",
    "data": {
      "input": [
        42,
        42,
        27,
        94
      ],
      "output": [
        42
      ]
    },
    "demos": [
      {
        "input": [
          7,
          76,
          37,
          96,
          44,
          7
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          46,
          90,
          75,
          70,
          49,
          59
        ],
        "output": [
          46
        ]
      },
      {
        "input": [
          22,
          47,
          56,
          5,
          31
        ],
        "output": [
          22
        ]
      }
    ]
  },
  {
    "id": "c147",
    "difficulty": 11,
    "function": "def c147(x):\n    # each element, followed by its index\n    res = []\n    for i, v in enumerate(x):\n        res.append(v)\n        res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        54,
        0,
        20,
        92,
        69,
        20,
        40
      ],
      "output": [
        54,
        0,
        0,
        1,
        20,
        2,
        92,
        3,
        69,
        4,
        20,
        5,
        40,
        6
      ]
    },
    "demos": [
      {
        "input": [
          18,
          35,
          91,
          70,
          85,
          70,
          27
        ],
        "output": [
          18,
          0,
          35,
          1,
          91,
          2,
          70,
          3,
          85,
          4,
          70,
          5,
          27,
          6
        ]
      },
      {
        "input": [
          65,
          12,
          27,
          67,
          17,
          39
        ],
        "output": [
          65,
          0,
          12,
          1,
          27,
          2,
          67,
          3,
          17,
          4,
          39,
          5
        ]
      },
      {
        "input": [
          34,
          54,
          50,
          95,
          98,
          74,
          62
        ],
        "output": [
          34,
          0,
          54,
          1,
          50,
          2,
          95,
          3,
          98,
          4,
          74,
          5,
          62,
          6
        ]
      }
    ]
  },
  {
    "id": "c120",
    "difficulty": 12,
    "function": "def c120(x):\n    # remove all but the first element\n    return [x[0]]\n\n",
    "data": {
      "input": [
        77,
        0,
        22,
        31,
        92,
        70
      ],
      "output": [
        77
      ]
    },
    "demos": [
      {
        "input": [
          27,
          89,
          97,
          83,
          83
        ],
        "output": [
          27
        ]
      },
      {
        "input": [
          30,
          63,
          52,
          46,
          20
        ],
        "output": [
          30
        ]
      },
      {
        "input": [
          12,
          92,
          76,
          3,
          98
        ],
        "output": [
          12
        ]
      }
    ]
  },
  {
    "id": "c127",
    "difficulty": 13,
    "function": "def c127(x):\n    # remove last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        69,
        2,
        47,
        73,
        43
      ],
      "output": [
        69,
        2,
        47,
        73
      ]
    },
    "demos": [
      {
        "input": [
          42,
          31,
          23,
          36,
          70
        ],
        "output": [
          42,
          31,
          23,
          36
        ]
      },
      {
        "input": [
          8,
          73,
          9,
          81
        ],
        "output": [
          8,
          73,
          9
        ]
      },
      {
        "input": [
          72,
          45,
          11,
          0
        ],
        "output": [
          72,
          45,
          11
        ]
      }
    ]
  },
  {
    "id": "c100",
    "difficulty": 14,
    "function": "def c100(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        14,
        7,
        74
      ],
      "output": [
        74,
        7,
        14
      ]
    },
    "demos": [
      {
        "input": [
          96,
          33,
          78,
          33
        ],
        "output": [
          33,
          78,
          33,
          96
        ]
      },
      {
        "input": [
          70,
          81,
          44,
          88,
          87,
          38,
          2
        ],
        "output": [
          2,
          38,
          87,
          88,
          44,
          81,
          70
        ]
      },
      {
        "input": [
          75,
          40,
          51
        ],
        "output": [
          51,
          40,
          75
        ]
      }
    ]
  },
  {
    "id": "c145",
    "difficulty": 15,
    "function": "def c145(x):\n    # replace every element with the first element\n    return [x[0]] * len(x)\n\n",
    "data": {
      "input": [
        10,
        99,
        85,
        7,
        59
      ],
      "output": [
        10,
        10,
        10,
        10,
        10
      ]
    },
    "demos": [
      {
        "input": [
          49,
          30,
          72
        ],
        "output": [
          49,
          49,
          49
        ]
      },
      {
        "input": [
          54,
          40,
          23,
          78,
          30
        ],
        "output": [
          54,
          54,
          54,
          54,
          54
        ]
      },
      {
        "input": [
          85,
          14,
          85,
          67,
          82
        ],
        "output": [
          85,
          85,
          85,
          85,
          85
        ]
      }
    ]
  },
  {
    "id": "c079",
    "difficulty": 16,
    "function": "def c079(x):\n    # sum of the list\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        0,
        6,
        5,
        15,
        15
      ],
      "output": [
        41
      ]
    },
    "demos": [
      {
        "input": [
          5,
          6,
          13
        ],
        "output": [
          24
        ]
      },
      {
        "input": [
          7,
          17,
          12
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          5,
          12,
          2,
          9,
          16,
          11
        ],
        "output": [
          55
        ]
      }
    ]
  },
  {
    "id": "c043",
    "difficulty": 17,
    "function": "def c043(x):\n    return [8, 2, 7, 0, 3]\n\n",
    "data": {
      "input": [
        57,
        88,
        11,
        77
      ],
      "output": [
        8,
        2,
        7,
        0,
        3
      ]
    },
    "demos": [
      {
        "input": [
          4,
          64,
          17,
          4,
          12,
          77
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          68,
          24,
          54
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          56,
          90,
          30,
          74,
          36,
          72,
          94
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      }
    ]
  },
  {
    "id": "c038",
    "difficulty": 18,
    "function": "def c038(x):\n    # append 9\n    return x + [9]\n\n",
    "data": {
      "input": [
        10,
        91,
        65,
        77,
        67
      ],
      "output": [
        10,
        91,
        65,
        77,
        67,
        9
      ]
    },
    "demos": [
      {
        "input": [
          86,
          14,
          74,
          71,
          4,
          0
        ],
        "output": [
          86,
          14,
          74,
          71,
          4,
          0,
          9
        ]
      },
      {
        "input": [
          71,
          88,
          89,
          21
        ],
        "output": [
          71,
          88,
          89,
          21,
          9
        ]
      },
      {
        "input": [
          3,
          38,
          35,
          85
        ],
        "output": [
          3,
          38,
          35,
          85,
          9
        ]
      }
    ]
  },
  {
    "id": "c042",
    "difficulty": 19,
    "function": "def c042(x):\n    return [5, 2]\n\n",
    "data": {
      "input": [
        91,
        61,
        20,
        35,
        64,
        19,
        11
      ],
      "output": [
        5,
        2
      ]
    },
    "demos": [
      {
        "input": [
          80,
          86,
          89,
          95
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          49,
          57,
          72,
          64
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          32,
          47,
          64,
          38
        ],
        "output": [
          5,
          2
        ]
      }
    ]
  },
  {
    "id": "c223",
    "difficulty": 20,
    "function": "def c223(x):\n    # swap the digits of each element\n    return [int(str(i)[::-1]) for i in x]\n\n",
    "data": {
      "input": [
        15,
        56,
        76,
        42
      ],
      "output": [
        51,
        65,
        67,
        24
      ]
    },
    "demos": [
      {
        "input": [
          47,
          40,
          66,
          77,
          20,
          3
        ],
        "output": [
          74,
          4,
          66,
          77,
          2,
          3
        ]
      },
      {
        "input": [
          4,
          46,
          99,
          70,
          89,
          11
        ],
        "output": [
          4,
          64,
          99,
          7,
          98,
          11
        ]
      },
      {
        "input": [
          97,
          7,
          93
        ],
        "output": [
          79,
          7,
          39
        ]
      }
    ]
  },
  {
    "id": "c137",
    "difficulty": 21,
    "function": "def c137(x):\n    # remove all 3\n    return [i for i in x if i != 3]\n\n",
    "data": {
      "input": [
        86,
        93,
        48,
        3,
        23,
        64,
        44
      ],
      "output": [
        86,
        93,
        48,
        23,
        64,
        44
      ]
    },
    "demos": [
      {
        "input": [
          3,
          38,
          8,
          16,
          50,
          62,
          3
        ],
        "output": [
          38,
          8,
          16,
          50,
          62
        ]
      },
      {
        "input": [
          96,
          16,
          13,
          62,
          34,
          3,
          56,
          33
        ],
        "output": [
          96,
          16,
          13,
          62,
          34,
          56,
          33
        ]
      },
      {
        "input": [
          3,
          6,
          5,
          9,
          37,
          16
        ],
        "output": [
          6,
          5,
          9,
          37,
          16
        ]
      }
    ]
  },
  {
    "id": "c238",
    "difficulty": 22,
    "function": "def c238(x):\n    # keep only elements that appear exactly once\n    return [i for i in x if x.count(i) == 1]\n\n",
    "data": {
      "input": [
        22,
        22,
        22,
        45,
        67,
        22,
        89,
        90,
        90
      ],
      "output": [
        45,
        67,
        89
      ]
    },
    "demos": [
      {
        "input": [
          0,
          1,
          18,
          9,
          9,
          0,
          15,
          6,
          1
        ],
        "output": [
          18,
          15,
          6
        ]
      },
      {
        "input": [
          5,
          3,
          1,
          6,
          6,
          3,
          4,
          4
        ],
        "output": [
          5,
          1
        ]
      },
      {
        "input": [
          0,
          17,
          4,
          8,
          4,
          10,
          1
        ],
        "output": [
          0,
          17,
          8,
          10,
          1
        ]
      }
    ]
  },
  {
    "id": "c108",
    "difficulty": 23,
    "function": "def c108(x):\n    # sum of elements\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        13,
        6,
        19,
        12,
        2,
        8,
        14
      ],
      "output": [
        74
      ]
    },
    "demos": [
      {
        "input": [
          0,
          6,
          10,
          5
        ],
        "output": [
          21
        ]
      },
      {
        "input": [
          17,
          2,
          13
        ],
        "output": [
          32
        ]
      },
      {
        "input": [
          5,
          7,
          4,
          0
        ],
        "output": [
          16
        ]
      }
    ]
  },
  {
    "id": "c126",
    "difficulty": 24,
    "function": "def c126(x):\n    # remove first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        84,
        19,
        27
      ],
      "output": [
        19,
        27
      ]
    },
    "demos": [
      {
        "input": [
          42,
          36,
          22,
          84,
          10
        ],
        "output": [
          36,
          22,
          84,
          10
        ]
      },
      {
        "input": [
          60,
          62,
          58,
          90,
          25,
          97
        ],
        "output": [
          62,
          58,
          90,
          25,
          97
        ]
      },
      {
        "input": [
          25,
          50,
          99,
          85
        ],
        "output": [
          50,
          99,
          85
        ]
      }
    ]
  },
  {
    "id": "c187",
    "difficulty": 25,
    "function": "def c187(x):\n    # concatenate input with itself, separated by 0\n    return x + [0] + x\n\n",
    "data": {
      "input": [
        30,
        52,
        46,
        11
      ],
      "output": [
        30,
        52,
        46,
        11,
        0,
        30,
        52,
        46,
        11
      ]
    },
    "demos": [
      {
        "input": [
          51,
          31,
          81
        ],
        "output": [
          51,
          31,
          81,
          0,
          51,
          31,
          81
        ]
      },
      {
        "input": [
          82,
          37,
          44,
          71,
          66
        ],
        "output": [
          82,
          37,
          44,
          71,
          66,
          0,
          82,
          37,
          44,
          71,
          66
        ]
      },
      {
        "input": [
          88,
          99,
          62,
          73
        ],
        "output": [
          88,
          99,
          62,
          73,
          0,
          88,
          99,
          62,
          73
        ]
      }
    ]
  },
  {
    "id": "c022",
    "difficulty": 26,
    "function": "def c022(x):\n    # insert a 5 as element 1\n    return x[:1] + [5] + x[1:]\n\n",
    "data": {
      "input": [
        1,
        86,
        89
      ],
      "output": [
        1,
        5,
        86,
        89
      ]
    },
    "demos": [
      {
        "input": [
          64,
          11,
          53,
          74,
          30,
          38
        ],
        "output": [
          64,
          5,
          11,
          53,
          74,
          30,
          38
        ]
      },
      {
        "input": [
          93,
          76,
          74,
          49,
          13,
          43
        ],
        "output": [
          93,
          5,
          76,
          74,
          49,
          13,
          43
        ]
      },
      {
        "input": [
          38,
          91,
          77,
          61,
          3,
          46,
          95
        ],
        "output": [
          38,
          5,
          91,
          77,
          61,
          3,
          46,
          95
        ]
      }
    ]
  },
  {
    "id": "c212",
    "difficulty": 27,
    "function": "def c212(x):\n    # insert 3 at index 2, 3 times\n    return x[:3] + [3,3,3] + x[3:]\n\n",
    "data": {
      "input": [
        93,
        96,
        8,
        35
      ],
      "output": [
        93,
        96,
        8,
        3,
        3,
        3,
        35
      ]
    },
    "demos": [
      {
        "input": [
          6,
          64,
          58,
          20,
          9
        ],
        "output": [
          6,
          64,
          58,
          3,
          3,
          3,
          20,
          9
        ]
      },
      {
        "input": [
          15,
          72,
          3,
          80,
          56,
          8
        ],
        "output": [
          15,
          72,
          3,
          3,
          3,
          3,
          80,
          56,
          8
        ]
      },
      {
        "input": [
          48,
          99,
          86
        ],
        "output": [
          48,
          99,
          86,
          3,
          3,
          3
        ]
      }
    ]
  },
  {
    "id": "c101",
    "difficulty": 28,
    "function": "def c101(x):\n    return [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]\n\n",
    "data": {
      "input": [
        53,
        90,
        18,
        93,
        6
      ],
      "output": [
        11,
        19,
        24,
        33,
        42,
        5,
        82,
        0,
        64,
        9
      ]
    },
    "demos": [
      {
        "input": [
          75,
          73,
          69
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          64,
          74,
          9,
          23,
          50
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          0,
          35,
          7
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      }
    ]
  },
  {
    "id": "c021",
    "difficulty": 29,
    "function": "def c021(x):\n    # insert 8 as element 1\n    return x[:1] + [8] + x[1:]\n\n",
    "data": {
      "input": [
        27,
        68,
        64
      ],
      "output": [
        27,
        8,
        68,
        64
      ]
    },
    "demos": [
      {
        "input": [
          78,
          25,
          44,
          90,
          68,
          50,
          83
        ],
        "output": [
          78,
          8,
          25,
          44,
          90,
          68,
          50,
          83
        ]
      },
      {
        "input": [
          97,
          89,
          41,
          36,
          47
        ],
        "output": [
          97,
          8,
          89,
          41,
          36,
          47
        ]
      },
      {
        "input": [
          3,
          5,
          33,
          81,
          70,
          5,
          54
        ],
        "output": [
          3,
          8,
          5,
          33,
          81,
          70,
          5,
          54
        ]
      }
    ]
  },
  {
    "id": "c105",
    "difficulty": 30,
    "function": "def c105(x):\n    # concatenate all but the last element with all but the first element\n    return x[:-1] + x[1:]\n\n",
    "data": {
      "input": [
        22,
        28,
        89
      ],
      "output": [
        22,
        28,
        28,
        89
      ]
    },
    "demos": [
      {
        "input": [
          45,
          6,
          81,
          85,
          14,
          37
        ],
        "output": [
          45,
          6,
          81,
          85,
          14,
          6,
          81,
          85,
          14,
          37
        ]
      },
      {
        "input": [
          2,
          49,
          69,
          95,
          95
        ],
        "output": [
          2,
          49,
          69,
          95,
          49,
          69,
          95,
          95
        ]
      },
      {
        "input": [
          97,
          94,
          6,
          55,
          82,
          11
        ],
        "output": [
          97,
          94,
          6,
          55,
          82,
          94,
          6,
          55,
          82,
          11
        ]
      }
    ]
  },
  {
    "id": "c041",
    "difficulty": 31,
    "function": "def c041(x):\n    return [9]\n\n",
    "data": {
      "input": [
        94,
        31,
        54,
        63,
        46,
        18,
        87
      ],
      "output": [
        9
      ]
    },
    "demos": [
      {
        "input": [
          93,
          19,
          31,
          4,
          16,
          32
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          60,
          80,
          81
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          47,
          80,
          49,
          51,
          68,
          26,
          87
        ],
        "output": [
          9
        ]
      }
    ]
  },
  {
    "id": "c070",
    "difficulty": 32,
    "function": "def c070(x):\n    # concatenate the input\n    return x + x\n\n",
    "data": {
      "input": [
        27,
        24,
        55,
        74,
        4
      ],
      "output": [
        27,
        24,
        55,
        74,
        4,
        27,
        24,
        55,
        74,
        4
      ]
    },
    "demos": [
      {
        "input": [
          3,
          26,
          97,
          94,
          13
        ],
        "output": [
          3,
          26,
          97,
          94,
          13,
          3,
          26,
          97,
          94,
          13
        ]
      },
      {
        "input": [
          55,
          10,
          40,
          51
        ],
        "output": [
          55,
          10,
          40,
          51,
          55,
          10,
          40,
          51
        ]
      },
      {
        "input": [
          94,
          22,
          12,
          72
        ],
        "output": [
          94,
          22,
          12,
          72,
          94,
          22,
          12,
          72
        ]
      }
    ]
  },
  {
    "id": "c052",
    "difficulty": 33,
    "function": "def c052(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        40,
        87,
        26,
        46
      ],
      "output": [
        40,
        40,
        40,
        40,
        40,
        40,
        40
      ]
    },
    "demos": [
      {
        "input": [
          62,
          78,
          20,
          43
        ],
        "output": [
          62,
          62,
          62,
          62,
          62,
          62,
          62
        ]
      },
      {
        "input": [
          58,
          70,
          1,
          23,
          79,
          69,
          41
        ],
        "output": [
          58,
          58,
          58,
          58,
          58,
          58,
          58
        ]
      },
      {
        "input": [
          76,
          40,
          2,
          22
        ],
        "output": [
          76,
          76,
          76,
          76,
          76,
          76,
          76
        ]
      }
    ]
  },
  {
    "id": "c044",
    "difficulty": 34,
    "function": "def c044(x):\n    return [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]\n\n",
    "data": {
      "input": [
        45,
        49,
        8,
        25
      ],
      "output": [
        1,
        9,
        4,
        3,
        2,
        5,
        8,
        0,
        4,
        9
      ]
    },
    "demos": [
      {
        "input": [
          74,
          53,
          27,
          63,
          54,
          68
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          88,
          84,
          49
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          65,
          55,
          84,
          95,
          24,
          38
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      }
    ]
  },
  {
    "id": "c190",
    "difficulty": 35,
    "function": "def c190(x):\n    # count by 2 from the first element to the last element\n    if x[0] < x[-1]:\n        return list(range(x[0], x[-1]+1, 2))\n    else:\n        return list(range(x[0], x[-1]-1, -2))\n\n",
    "data": {
      "input": [
        73,
        9,
        77,
        79,
        80
      ],
      "output": [
        73,
        75,
        77,
        79
      ]
    },
    "demos": [
      {
        "input": [
          38,
          53,
          21
        ],
        "output": [
          38,
          36,
          34,
          32,
          30,
          28,
          26,
          24,
          22
        ]
      },
      {
        "input": [
          78,
          82,
          84
        ],
        "output": [
          78,
          80,
          82,
          84
        ]
      },
      {
        "input": [
          87,
          52,
          88,
          10,
          11,
          11,
          91
        ],
        "output": [
          87,
          89,
          91
        ]
      }
    ]
  },
  {
    "id": "c037",
    "difficulty": 36,
    "function": "def c037(x):\n    # append 3\n    return x + [3]\n\n",
    "data": {
      "input": [
        16,
        0,
        96,
        96,
        96,
        21
      ],
      "output": [
        16,
        0,
        96,
        96,
        96,
        21,
        3
      ]
    },
    "demos": [
      {
        "input": [
          23,
          65,
          77
        ],
        "output": [
          23,
          65,
          77,
          3
        ]
      },
      {
        "input": [
          50,
          32,
          99,
          32,
          83,
          54,
          90
        ],
        "output": [
          50,
          32,
          99,
          32,
          83,
          54,
          90,
          3
        ]
      },
      {
        "input": [
          30,
          53,
          54,
          41,
          94,
          39
        ],
        "output": [
          30,
          53,
          54,
          41,
          94,
          39,
          3
        ]
      }
    ]
  },
  {
    "id": "c222",
    "difficulty": 37,
    "function": "def c222(x):\n    # remove each element with the input length\n    return [len(x) for _ in x]\n\n",
    "data": {
      "input": [
        95,
        4,
        1,
        23
      ],
      "output": [
        4,
        4,
        4,
        4
      ]
    },
    "demos": [
      {
        "input": [
          82,
          83,
          70,
          24,
          31,
          30
        ],
        "output": [
          6,
          6,
          6,
          6,
          6,
          6
        ]
      },
      {
        "input": [
          81,
          85,
          5,
          29,
          37,
          27
        ],
        "output": [
          6,
          6,
          6,
          6,
          6,
          6
        ]
      },
      {
        "input": [
          38,
          49,
          32,
          25,
          74
        ],
        "output": [
          5,
          5,
          5,
          5,
          5
        ]
      }
    ]
  },
  {
    "id": "c107",
    "difficulty": 38,
    "function": "def c107(x):\n    # unique elements, in order of appearance\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        6,
        85,
        21,
        85,
        79,
        62
      ],
      "output": [
        6,
        85,
        21,
        79,
        62
      ]
    },
    "demos": [
      {
        "input": [
          22,
          40,
          35,
          17,
          22,
          60,
          31,
          17,
          31,
          59
        ],
        "output": [
          22,
          40,
          35,
          17,
          60,
          31,
          59
        ]
      },
      {
        "input": [
          79,
          63,
          63,
          37
        ],
        "output": [
          79,
          63,
          37
        ]
      },
      {
        "input": [
          19,
          19,
          15,
          29,
          15,
          45
        ],
        "output": [
          19,
          15,
          29,
          45
        ]
      }
    ]
  },
  {
    "id": "c011",
    "difficulty": 39,
    "function": "def c011(x):\n    # [1:4] of the input\n    return x[1:4]\n\n",
    "data": {
      "input": [
        22,
        30,
        40,
        18,
        46,
        90,
        62
      ],
      "output": [
        30,
        40,
        18
      ]
    },
    "demos": [
      {
        "input": [
          25,
          19,
          77,
          37
        ],
        "output": [
          19,
          77,
          37
        ]
      },
      {
        "input": [
          80,
          86,
          99,
          39,
          89
        ],
        "output": [
          86,
          99,
          39
        ]
      },
      {
        "input": [
          64,
          53,
          59,
          97,
          39
        ],
        "output": [
          53,
          59,
          97
        ]
      }
    ]
  },
  {
    "id": "c104",
    "difficulty": 40,
    "function": "def c104(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        11,
        34,
        10,
        80,
        69
      ],
      "output": [
        80
      ]
    },
    "demos": [
      {
        "input": [
          21,
          56,
          63,
          86,
          47,
          2,
          50
        ],
        "output": [
          86
        ]
      },
      {
        "input": [
          77,
          72,
          46,
          11
        ],
        "output": [
          77
        ]
      },
      {
        "input": [
          99,
          40,
          74,
          22,
          76
        ],
        "output": [
          99
        ]
      }
    ]
  },
  {
    "id": "c192",
    "difficulty": 41,
    "function": "def c192(x):\n    # replace each element, M, with its tens digit, if no tens digit, replace with 0\n    return [int(str(i)[-2]) if len(str(i)) > 1 else 0 for i in x]\n\n",
    "data": {
      "input": [
        78,
        98,
        35,
        25
      ],
      "output": [
        7,
        9,
        3,
        2
      ]
    },
    "demos": [
      {
        "input": [
          47,
          54,
          91,
          82
        ],
        "output": [
          4,
          5,
          9,
          8
        ]
      },
      {
        "input": [
          30,
          40,
          94,
          57,
          7,
          73
        ],
        "output": [
          3,
          4,
          9,
          5,
          0,
          7
        ]
      },
      {
        "input": [
          27,
          21,
          51,
          83,
          2,
          27,
          41
        ],
        "output": [
          2,
          2,
          5,
          8,
          0,
          2,
          4
        ]
      }
    ]
  },
  {
    "id": "c182",
    "difficulty": 42,
    "function": "def c182(x):\n    # keep every third element\n    return x[::3]\n\n",
    "data": {
      "input": [
        15,
        30,
        30,
        54,
        41,
        15,
        74,
        48
      ],
      "output": [
        15,
        54,
        74
      ]
    },
    "demos": [
      {
        "input": [
          19,
          31,
          8,
          38,
          6,
          70
        ],
        "output": [
          19,
          38
        ]
      },
      {
        "input": [
          50,
          51,
          59,
          50,
          77,
          35,
          57,
          6
        ],
        "output": [
          50,
          50,
          57
        ]
      },
      {
        "input": [
          25,
          27,
          53,
          56,
          80,
          2
        ],
        "output": [
          25,
          56
        ]
      }
    ]
  },
  {
    "id": "c006",
    "difficulty": 43,
    "function": "def c006(x):\n    # the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        31,
        95,
        67,
        66,
        93,
        69
      ],
      "output": [
        31,
        95
      ]
    },
    "demos": [
      {
        "input": [
          21,
          80,
          72,
          11,
          67,
          19
        ],
        "output": [
          21,
          80
        ]
      },
      {
        "input": [
          91,
          93,
          52,
          1,
          75,
          83,
          80
        ],
        "output": [
          91,
          93
        ]
      },
      {
        "input": [
          90,
          26,
          74,
          85,
          84
        ],
        "output": [
          90,
          26
        ]
      }
    ]
  },
  {
    "id": "c046",
    "difficulty": 44,
    "function": "def c046(x):\n    # prepend 7\n    return [7] + x\n\n",
    "data": {
      "input": [
        72,
        5,
        69,
        88
      ],
      "output": [
        7,
        72,
        5,
        69,
        88
      ]
    },
    "demos": [
      {
        "input": [
          36,
          27,
          40
        ],
        "output": [
          7,
          36,
          27,
          40
        ]
      },
      {
        "input": [
          99,
          67,
          84,
          29,
          69
        ],
        "output": [
          7,
          99,
          67,
          84,
          29,
          69
        ]
      },
      {
        "input": [
          39,
          84,
          93,
          31
        ],
        "output": [
          7,
          39,
          84,
          93,
          31
        ]
      }
    ]
  },
  {
    "id": "c106",
    "difficulty": 45,
    "function": "def c106(x):\n    # elements in ascending order\n    return sorted(x)\n\n",
    "data": {
      "input": [
        43,
        57,
        42,
        90
      ],
      "output": [
        42,
        43,
        57,
        90
      ]
    },
    "demos": [
      {
        "input": [
          56,
          83,
          16,
          16,
          83,
          55
        ],
        "output": [
          16,
          16,
          55,
          56,
          83,
          83
        ]
      },
      {
        "input": [
          79,
          35,
          20,
          61,
          65,
          69,
          93
        ],
        "output": [
          20,
          35,
          61,
          65,
          69,
          79,
          93
        ]
      },
      {
        "input": [
          62,
          95,
          41
        ],
        "output": [
          41,
          62,
          95
        ]
      }
    ]
  },
  {
    "id": "c114",
    "difficulty": 46,
    "function": "def c114(x):\n    # prepend the last element\n    return [x[-1]] + x\n\n",
    "data": {
      "input": [
        42,
        42,
        49,
        29,
        67,
        17
      ],
      "output": [
        17,
        42,
        42,
        49,
        29,
        67,
        17
      ]
    },
    "demos": [
      {
        "input": [
          47,
          29,
          73,
          1
        ],
        "output": [
          1,
          47,
          29,
          73,
          1
        ]
      },
      {
        "input": [
          69,
          68,
          53,
          83,
          72,
          32
        ],
        "output": [
          32,
          69,
          68,
          53,
          83,
          72,
          32
        ]
      },
      {
        "input": [
          49,
          20,
          18
        ],
        "output": [
          18,
          49,
          20,
          18
        ]
      }
    ]
  },
  {
    "id": "c093",
    "difficulty": 47,
    "function": "def c093(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        25,
        85,
        82,
        16
      ],
      "output": [
        25,
        25,
        25,
        25,
        25,
        25,
        25
      ]
    },
    "demos": [
      {
        "input": [
          89,
          26,
          75,
          91
        ],
        "output": [
          89,
          89,
          89,
          89,
          89,
          89,
          89
        ]
      },
      {
        "input": [
          89,
          53,
          75,
          64
        ],
        "output": [
          89,
          89,
          89,
          89,
          89,
          89,
          89
        ]
      },
      {
        "input": [
          19,
          53,
          62,
          49,
          56
        ],
        "output": [
          19,
          19,
          19,
          19,
          19,
          19,
          19
        ]
      }
    ]
  },
  {
    "id": "c195",
    "difficulty": 48,
    "function": "def c195(x):\n    # element 1, followed by 23, 68, 42, 99, 71, followed by last element\n    return [x[0], 23, 68, 42, 99, 71, x[-1]]\n\n",
    "data": {
      "input": [
        6,
        71,
        76,
        16,
        7
      ],
      "output": [
        6,
        23,
        68,
        42,
        99,
        71,
        7
      ]
    },
    "demos": [
      {
        "input": [
          69,
          7,
          64,
          3
        ],
        "output": [
          69,
          23,
          68,
          42,
          99,
          71,
          3
        ]
      },
      {
        "input": [
          29,
          82,
          35,
          84,
          23,
          25,
          34
        ],
        "output": [
          29,
          23,
          68,
          42,
          99,
          71,
          34
        ]
      },
      {
        "input": [
          85,
          23,
          71
        ],
        "output": [
          85,
          23,
          68,
          42,
          99,
          71,
          71
        ]
      }
    ]
  },
  {
    "id": "c196",
    "difficulty": 49,
    "function": "def c196(x):\n    # concatenate 17, 38, 82 input 1 55 27\n    return [17, 38, 82] + x + [1, 55, 27]\n\n",
    "data": {
      "input": [
        13,
        86,
        41,
        18
      ],
      "output": [
        17,
        38,
        82,
        13,
        86,
        41,
        18,
        1,
        55,
        27
      ]
    },
    "demos": [
      {
        "input": [
          52,
          69,
          12,
          6,
          36
        ],
        "output": [
          17,
          38,
          82,
          52,
          69,
          12,
          6,
          36,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          91,
          36
        ],
        "output": [
          17,
          38,
          82,
          91,
          36,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          66,
          34,
          86,
          2,
          91,
          41
        ],
        "output": [
          17,
          38,
          82,
          66,
          34,
          86,
          2,
          91,
          41,
          1,
          55,
          27
        ]
      }
    ]
  },
  {
    "id": "c095",
    "difficulty": 50,
    "function": "def c095(x):\n    # remove the first element and the last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        17,
        32,
        91,
        22,
        44
      ],
      "output": [
        32,
        91,
        22
      ]
    },
    "demos": [
      {
        "input": [
          0,
          29,
          86,
          62,
          55,
          74
        ],
        "output": [
          29,
          86,
          62,
          55
        ]
      },
      {
        "input": [
          28,
          21,
          64,
          79,
          73,
          40
        ],
        "output": [
          21,
          64,
          79,
          73
        ]
      },
      {
        "input": [
          87,
          62,
          96,
          95,
          2
        ],
        "output": [
          62,
          96,
          95
        ]
      }
    ]
  },
  {
    "id": "c016",
    "difficulty": 51,
    "function": "def c016(x):\n    # replace element 1 with 8\n    return [8] + x[1:]\n\n",
    "data": {
      "input": [
        43,
        6,
        63,
        72,
        10
      ],
      "output": [
        8,
        6,
        63,
        72,
        10
      ]
    },
    "demos": [
      {
        "input": [
          73,
          11,
          7,
          79,
          95
        ],
        "output": [
          8,
          11,
          7,
          79,
          95
        ]
      },
      {
        "input": [
          54,
          10,
          24,
          51,
          4,
          27
        ],
        "output": [
          8,
          10,
          24,
          51,
          4,
          27
        ]
      },
      {
        "input": [
          85,
          18,
          81,
          53,
          53
        ],
        "output": [
          8,
          18,
          81,
          53,
          53
        ]
      }
    ]
  },
  {
    "id": "c224",
    "difficulty": 52,
    "function": "def c224(x):\n    # reverse the list, then take every other element starting from the second element, then take every other element starting from the first element\n    return x[::-2] + x[(len(x) % 2)::2]\n\n",
    "data": {
      "input": [
        61,
        68,
        85,
        50
      ],
      "output": [
        50,
        68,
        61,
        85
      ]
    },
    "demos": [
      {
        "input": [
          91,
          54,
          29
        ],
        "output": [
          29,
          91,
          54
        ]
      },
      {
        "input": [
          76,
          86,
          73,
          65
        ],
        "output": [
          65,
          86,
          76,
          73
        ]
      },
      {
        "input": [
          85,
          10,
          38,
          59
        ],
        "output": [
          59,
          10,
          85,
          38
        ]
      }
    ]
  },
  {
    "id": "c116",
    "difficulty": 53,
    "function": "def c116(x):\n    # reflect the input on itself\n    return x[::-1] + x[1:]\n\n",
    "data": {
      "input": [
        13,
        57,
        58,
        54,
        56,
        4
      ],
      "output": [
        4,
        56,
        54,
        58,
        57,
        13,
        57,
        58,
        54,
        56,
        4
      ]
    },
    "demos": [
      {
        "input": [
          75,
          70,
          36,
          28,
          59,
          0
        ],
        "output": [
          0,
          59,
          28,
          36,
          70,
          75,
          70,
          36,
          28,
          59,
          0
        ]
      },
      {
        "input": [
          23,
          59,
          53,
          72,
          21
        ],
        "output": [
          21,
          72,
          53,
          59,
          23,
          59,
          53,
          72,
          21
        ]
      },
      {
        "input": [
          85,
          0,
          3,
          99,
          37,
          3,
          78
        ],
        "output": [
          78,
          3,
          37,
          99,
          3,
          0,
          85,
          0,
          3,
          99,
          37,
          3,
          78
        ]
      }
    ]
  },
  {
    "id": "c140",
    "difficulty": 54,
    "function": "def c140(x):\n    # replace element 1 with 9\n    return x[:1] + [9] + x[2:]\n\n",
    "data": {
      "input": [
        0,
        4,
        39,
        17,
        28,
        90
      ],
      "output": [
        0,
        9,
        39,
        17,
        28,
        90
      ]
    },
    "demos": [
      {
        "input": [
          81,
          12,
          65,
          65
        ],
        "output": [
          81,
          9,
          65,
          65
        ]
      },
      {
        "input": [
          32,
          87,
          56,
          58,
          35,
          88,
          98
        ],
        "output": [
          32,
          9,
          56,
          58,
          35,
          88,
          98
        ]
      },
      {
        "input": [
          87,
          96,
          8,
          87,
          18,
          66,
          8
        ],
        "output": [
          87,
          9,
          8,
          87,
          18,
          66,
          8
        ]
      }
    ]
  },
  {
    "id": "c049",
    "difficulty": 55,
    "function": "def c049(x):\n    # remove the first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        82,
        98,
        15,
        38
      ],
      "output": [
        98,
        15,
        38
      ]
    },
    "demos": [
      {
        "input": [
          12,
          39,
          23,
          26
        ],
        "output": [
          39,
          23,
          26
        ]
      },
      {
        "input": [
          90,
          21,
          43
        ],
        "output": [
          21,
          43
        ]
      },
      {
        "input": [
          83,
          1,
          42,
          23,
          24,
          23,
          69
        ],
        "output": [
          1,
          42,
          23,
          24,
          23,
          69
        ]
      }
    ]
  },
  {
    "id": "c071",
    "difficulty": 56,
    "function": "def c071(x):\n    # add 2 to each element\n    return [i+2 for i in x]\n\n",
    "data": {
      "input": [
        5,
        52,
        42,
        31
      ],
      "output": [
        7,
        54,
        44,
        33
      ]
    },
    "demos": [
      {
        "input": [
          54,
          28,
          59,
          6
        ],
        "output": [
          56,
          30,
          61,
          8
        ]
      },
      {
        "input": [
          26,
          60,
          72,
          23,
          4,
          73,
          14
        ],
        "output": [
          28,
          62,
          74,
          25,
          6,
          75,
          16
        ]
      },
      {
        "input": [
          94,
          49,
          25,
          6,
          47
        ],
        "output": [
          96,
          51,
          27,
          8,
          49
        ]
      }
    ]
  },
  {
    "id": "c161",
    "difficulty": 57,
    "function": "def c161(x):\n    # replace each element, M, with M + the input length - M index\n    return [i + len(x) - j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        99,
        2,
        16,
        76,
        2,
        6
      ],
      "output": [
        105,
        7,
        20,
        79,
        4,
        7
      ]
    },
    "demos": [
      {
        "input": [
          2,
          55,
          89
        ],
        "output": [
          5,
          57,
          90
        ]
      },
      {
        "input": [
          64,
          64,
          92,
          89,
          55,
          72,
          90
        ],
        "output": [
          71,
          70,
          97,
          93,
          58,
          74,
          91
        ]
      },
      {
        "input": [
          52,
          80,
          48,
          8,
          12,
          55,
          94
        ],
        "output": [
          59,
          86,
          53,
          12,
          15,
          57,
          95
        ]
      }
    ]
  },
  {
    "id": "c068",
    "difficulty": 58,
    "function": "def c068(x):\n    # concatenate the input with 7, 3, 8, 4, 3\n    return x + [7, 3, 8, 4, 3]\n\n",
    "data": {
      "input": [
        3,
        19,
        88,
        66
      ],
      "output": [
        3,
        19,
        88,
        66,
        7,
        3,
        8,
        4,
        3
      ]
    },
    "demos": [
      {
        "input": [
          21,
          96,
          37,
          36,
          96
        ],
        "output": [
          21,
          96,
          37,
          36,
          96,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          46,
          77,
          13
        ],
        "output": [
          46,
          77,
          13,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          18,
          37,
          50,
          17,
          4
        ],
        "output": [
          18,
          37,
          50,
          17,
          4,
          7,
          3,
          8,
          4,
          3
        ]
      }
    ]
  },
  {
    "id": "c103",
    "difficulty": 59,
    "function": "def c103(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        50,
        95,
        53,
        85,
        36,
        38
      ],
      "output": [
        6
      ]
    },
    "demos": [
      {
        "input": [
          37,
          36,
          44,
          69,
          83
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          23,
          98,
          12
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          63,
          51,
          75,
          15
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c001",
    "difficulty": 60,
    "function": "def c001(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        81,
        45,
        13
      ],
      "output": [
        13
      ]
    },
    "demos": [
      {
        "input": [
          14,
          56,
          0,
          69,
          34,
          19,
          37
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          75,
          71,
          89,
          96,
          55,
          90,
          47
        ],
        "output": [
          89
        ]
      },
      {
        "input": [
          43,
          84,
          82
        ],
        "output": [
          82
        ]
      }
    ]
  },
  {
    "id": "c090",
    "difficulty": 61,
    "function": "def c090(x):\n    return [18, 42, 77, 20, 36]\n\n",
    "data": {
      "input": [
        37,
        95,
        46,
        7,
        57,
        94
      ],
      "output": [
        18,
        42,
        77,
        20,
        36
      ]
    },
    "demos": [
      {
        "input": [
          47,
          56,
          79
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          44,
          6,
          14,
          93
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          93,
          45,
          69,
          72,
          10
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      }
    ]
  },
  {
    "id": "c097",
    "difficulty": 62,
    "function": "def c097(x):\n    # concatenate 11, 21, 43 input 7 89 0\n    return [11, 21, 43] + x + [7, 89, 0]\n\n",
    "data": {
      "input": [
        65,
        30,
        93
      ],
      "output": [
        11,
        21,
        43,
        65,
        30,
        93,
        7,
        89,
        0
      ]
    },
    "demos": [
      {
        "input": [
          52,
          16,
          62
        ],
        "output": [
          11,
          21,
          43,
          52,
          16,
          62,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          65,
          67,
          77
        ],
        "output": [
          11,
          21,
          43,
          65,
          67,
          77,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          20,
          63,
          97,
          66,
          52
        ],
        "output": [
          11,
          21,
          43,
          20,
          63,
          97,
          66,
          52,
          7,
          89,
          0
        ]
      }
    ]
  },
  {
    "id": "c142",
    "difficulty": 63,
    "function": "def c142(x):\n    # every digit in order of appearance\n    res = []\n    for i in x:\n        for j in str(i):\n            res.append(int(j))\n    return res\n\n",
    "data": {
      "input": [
        40,
        0,
        81,
        35,
        79,
        70
      ],
      "output": [
        4,
        0,
        0,
        8,
        1,
        3,
        5,
        7,
        9,
        7,
        0
      ]
    },
    "demos": [
      {
        "input": [
          38,
          9,
          43,
          38,
          56,
          49
        ],
        "output": [
          3,
          8,
          9,
          4,
          3,
          3,
          8,
          5,
          6,
          4,
          9
        ]
      },
      {
        "input": [
          52,
          90,
          3,
          40,
          52,
          2,
          16
        ],
        "output": [
          5,
          2,
          9,
          0,
          3,
          4,
          0,
          5,
          2,
          2,
          1,
          6
        ]
      },
      {
        "input": [
          84,
          99,
          77,
          75,
          24,
          11,
          25
        ],
        "output": [
          8,
          4,
          9,
          9,
          7,
          7,
          7,
          5,
          2,
          4,
          1,
          1,
          2,
          5
        ]
      }
    ]
  },
  {
    "id": "c091",
    "difficulty": 64,
    "function": "def c091(x):\n    return [81, 99, 41, 23, 22, 75, 68, 30]\n\n",
    "data": {
      "input": [
        12,
        11,
        56,
        40
      ],
      "output": [
        81,
        99,
        41,
        23,
        22,
        75,
        68,
        30
      ]
    },
    "demos": [
      {
        "input": [
          21,
          64,
          11
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          89,
          39,
          6,
          99
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          98,
          67,
          41
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      }
    ]
  },
  {
    "id": "c034",
    "difficulty": 65,
    "function": "def c034(x):\n    # swap element 1 and element 2\n    x[0], x[1] = x[1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        70,
        89,
        20
      ],
      "output": [
        89,
        70,
        20
      ]
    },
    "demos": [
      {
        "input": [
          2,
          45,
          35,
          99,
          2,
          54,
          40
        ],
        "output": [
          45,
          2,
          35,
          99,
          2,
          54,
          40
        ]
      },
      {
        "input": [
          1,
          85,
          30,
          2,
          47,
          14,
          37
        ],
        "output": [
          85,
          1,
          30,
          2,
          47,
          14,
          37
        ]
      },
      {
        "input": [
          89,
          90,
          79,
          21
        ],
        "output": [
          90,
          89,
          79,
          21
        ]
      }
    ]
  },
  {
    "id": "c244",
    "difficulty": 66,
    "function": "def c244(x):\n    # number of 3s\n    return [x.count(3)]\n\n",
    "data": {
      "input": [
        67,
        6,
        3,
        75,
        28,
        14,
        3
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          3,
          43,
          3,
          2,
          20,
          3,
          62
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          21,
          67,
          25,
          34,
          2
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          3,
          15,
          56,
          30,
          75,
          3
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c171",
    "difficulty": 67,
    "function": "def c171(x):\n    # cumulative sum\n    res = []\n    s = 0\n    for i in x:\n        s += i\n        res.append(s)\n    return res\n\n",
    "data": {
      "input": [
        13,
        2,
        5
      ],
      "output": [
        13,
        15,
        20
      ]
    },
    "demos": [
      {
        "input": [
          13,
          5,
          2,
          15,
          11
        ],
        "output": [
          13,
          18,
          20,
          35,
          46
        ]
      },
      {
        "input": [
          20,
          18,
          12,
          2,
          2,
          4,
          8
        ],
        "output": [
          20,
          38,
          50,
          52,
          54,
          58,
          66
        ]
      },
      {
        "input": [
          3,
          10,
          7,
          20,
          1
        ],
        "output": [
          3,
          13,
          20,
          40,
          41
        ]
      }
    ]
  },
  {
    "id": "c172",
    "difficulty": 68,
    "function": "def c172(x):\n    # cumulative product\n    res = []\n    p = 1\n    for i in x:\n        p *= i\n        res.append(p)\n    return res\n\n",
    "data": {
      "input": [
        9,
        4,
        3,
        2
      ],
      "output": [
        9,
        36,
        108,
        216
      ]
    },
    "demos": [
      {
        "input": [
          5,
          7,
          2,
          9,
          8
        ],
        "output": [
          5,
          35,
          70,
          630,
          5040
        ]
      },
      {
        "input": [
          5,
          6,
          0,
          3
        ],
        "output": [
          5,
          30,
          0,
          0
        ]
      },
      {
        "input": [
          6,
          9,
          0
        ],
        "output": [
          6,
          54,
          0
        ]
      }
    ]
  },
  {
    "id": "c062",
    "difficulty": 69,
    "function": "def c062(x):\n    # remove the last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        21,
        12,
        18,
        25,
        73,
        65
      ],
      "output": [
        21,
        12,
        18,
        25,
        73
      ]
    },
    "demos": [
      {
        "input": [
          67,
          99,
          69,
          68,
          8,
          41,
          35
        ],
        "output": [
          67,
          99,
          69,
          68,
          8,
          41
        ]
      },
      {
        "input": [
          41,
          49,
          89,
          42,
          8,
          9,
          41
        ],
        "output": [
          41,
          49,
          89,
          42,
          8,
          9
        ]
      },
      {
        "input": [
          73,
          78,
          17,
          64,
          92,
          71
        ],
        "output": [
          73,
          78,
          17,
          64,
          92
        ]
      }
    ]
  },
  {
    "id": "c096",
    "difficulty": 70,
    "function": "def c096(x):\n    # prepend 98 and append 37\n    return [98] + x + [37]\n\n",
    "data": {
      "input": [
        11,
        36,
        67
      ],
      "output": [
        98,
        11,
        36,
        67,
        37
      ]
    },
    "demos": [
      {
        "input": [
          48,
          24,
          76,
          55,
          93
        ],
        "output": [
          98,
          48,
          24,
          76,
          55,
          93,
          37
        ]
      },
      {
        "input": [
          5,
          76,
          97
        ],
        "output": [
          98,
          5,
          76,
          97,
          37
        ]
      },
      {
        "input": [
          41,
          89,
          98
        ],
        "output": [
          98,
          41,
          89,
          98,
          37
        ]
      }
    ]
  },
  {
    "id": "c081",
    "difficulty": 71,
    "function": "def c081(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        60,
        13,
        35,
        5,
        14
      ],
      "output": [
        35
      ]
    },
    "demos": [
      {
        "input": [
          48,
          45,
          81,
          34,
          87
        ],
        "output": [
          81
        ]
      },
      {
        "input": [
          63,
          64,
          12,
          14,
          79
        ],
        "output": [
          12
        ]
      },
      {
        "input": [
          59,
          81,
          91
        ],
        "output": [
          91
        ]
      }
    ]
  },
  {
    "id": "c109",
    "difficulty": 72,
    "function": "def c109(x):\n    # product of elements\n    p = 1\n    for i in x:\n        p *= i\n    return [p]\n\n",
    "data": {
      "input": [
        8,
        0,
        10,
        3
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          6,
          0,
          8,
          4,
          4,
          8,
          0
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          6,
          10,
          2,
          3,
          6,
          2
        ],
        "output": [
          4320
        ]
      },
      {
        "input": [
          5,
          7,
          2,
          4,
          0
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c002",
    "difficulty": 73,
    "function": "def c002(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        82,
        5,
        63,
        11,
        16
      ],
      "output": [
        63
      ]
    },
    "demos": [
      {
        "input": [
          37,
          37,
          14,
          93,
          46
        ],
        "output": [
          14
        ]
      },
      {
        "input": [
          59,
          36,
          57,
          13,
          70
        ],
        "output": [
          57
        ]
      },
      {
        "input": [
          90,
          47,
          60,
          12
        ],
        "output": [
          60
        ]
      }
    ]
  },
  {
    "id": "c132",
    "difficulty": 74,
    "function": "def c132(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        20,
        28,
        58,
        6,
        94
      ],
      "output": [
        20,
        28,
        6,
        94
      ]
    },
    "demos": [
      {
        "input": [
          29,
          64,
          23,
          30,
          25,
          62
        ],
        "output": [
          29,
          64,
          30,
          25,
          62
        ]
      },
      {
        "input": [
          62,
          60,
          66,
          40
        ],
        "output": [
          62,
          60,
          40
        ]
      },
      {
        "input": [
          97,
          91,
          11,
          98
        ],
        "output": [
          97,
          91,
          98
        ]
      }
    ]
  },
  {
    "id": "c153",
    "difficulty": 75,
    "function": "def c153(x):\n    # each unique element followed by its number of occurrences\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    out = []\n    for k, v in res.items():\n        out.append(k)\n        out.append(v)\n    return out\n\n",
    "data": {
      "input": [
        18,
        37,
        18,
        96,
        28,
        18,
        18,
        18
      ],
      "output": [
        18,
        5,
        37,
        1,
        96,
        1,
        28,
        1
      ]
    },
    "demos": [
      {
        "input": [
          89,
          61,
          44,
          61
        ],
        "output": [
          89,
          1,
          61,
          2,
          44,
          1
        ]
      },
      {
        "input": [
          48,
          68,
          24,
          49,
          49,
          61
        ],
        "output": [
          48,
          1,
          68,
          1,
          24,
          1,
          49,
          2,
          61,
          1
        ]
      },
      {
        "input": [
          78,
          15,
          63,
          15,
          15
        ],
        "output": [
          78,
          1,
          15,
          3,
          63,
          1
        ]
      }
    ]
  },
  {
    "id": "c051",
    "difficulty": 76,
    "function": "def c051(x):\n    # prepend first element 4 times\n    return [x[0]] * 4 + x\n\n",
    "data": {
      "input": [
        24,
        28,
        69,
        46,
        24,
        60
      ],
      "output": [
        24,
        24,
        24,
        24,
        24,
        28,
        69,
        46,
        24,
        60
      ]
    },
    "demos": [
      {
        "input": [
          15,
          27,
          40,
          81,
          70
        ],
        "output": [
          15,
          15,
          15,
          15,
          15,
          27,
          40,
          81,
          70
        ]
      },
      {
        "input": [
          60,
          81,
          63,
          98,
          43
        ],
        "output": [
          60,
          60,
          60,
          60,
          60,
          81,
          63,
          98,
          43
        ]
      },
      {
        "input": [
          3,
          45,
          78
        ],
        "output": [
          3,
          3,
          3,
          3,
          3,
          45,
          78
        ]
      }
    ]
  },
  {
    "id": "c225",
    "difficulty": 77,
    "function": "def c225(x):\n    # remove first and last two elements\n    return x[2:-2]\n\n",
    "data": {
      "input": [
        89,
        57,
        42,
        29,
        36,
        4,
        50,
        33
      ],
      "output": [
        42,
        29,
        36,
        4
      ]
    },
    "demos": [
      {
        "input": [
          56,
          56,
          68,
          80,
          65,
          86,
          41,
          44
        ],
        "output": [
          68,
          80,
          65,
          86
        ]
      },
      {
        "input": [
          4,
          4,
          68,
          80,
          49,
          46
        ],
        "output": [
          68,
          80
        ]
      },
      {
        "input": [
          65,
          22,
          25,
          11,
          86,
          33,
          96,
          5
        ],
        "output": [
          25,
          11,
          86,
          33
        ]
      }
    ]
  },
  {
    "id": "c067",
    "difficulty": 78,
    "function": "def c067(x):\n    # swap the first and last element\n    x[0], x[-1] = x[-1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        79,
        25,
        92
      ],
      "output": [
        92,
        25,
        79
      ]
    },
    "demos": [
      {
        "input": [
          85,
          53,
          45,
          0
        ],
        "output": [
          0,
          53,
          45,
          85
        ]
      },
      {
        "input": [
          80,
          40,
          43,
          59,
          48,
          54
        ],
        "output": [
          54,
          40,
          43,
          59,
          48,
          80
        ]
      },
      {
        "input": [
          77,
          29,
          21,
          88,
          87,
          67,
          47
        ],
        "output": [
          47,
          29,
          21,
          88,
          87,
          67,
          77
        ]
      }
    ]
  },
  {
    "id": "c112",
    "difficulty": 79,
    "function": "def c112(x):\n    # count from 1 to the last element\n    return list(range(1, x[-1]+1))\n\n",
    "data": {
      "input": [
        16,
        57,
        26,
        14,
        33,
        13
      ],
      "output": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ]
    },
    "demos": [
      {
        "input": [
          12,
          59,
          96,
          45,
          58,
          85,
          10
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          92,
          33,
          34,
          64,
          34,
          99,
          3
        ],
        "output": [
          1,
          2,
          3
        ]
      },
      {
        "input": [
          58,
          25,
          12,
          85,
          9
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      }
    ]
  },
  {
    "id": "c030",
    "difficulty": 80,
    "function": "def c030(x):\n    # remove the last 2 elements\n    return x[:-2]\n\n",
    "data": {
      "input": [
        41,
        17,
        37,
        77,
        21,
        99
      ],
      "output": [
        41,
        17,
        37,
        77
      ]
    },
    "demos": [
      {
        "input": [
          32,
          54,
          31,
          50
        ],
        "output": [
          32,
          54
        ]
      },
      {
        "input": [
          77,
          26,
          74,
          48,
          45,
          73
        ],
        "output": [
          77,
          26,
          74,
          48
        ]
      },
      {
        "input": [
          62,
          91,
          74,
          28,
          66
        ],
        "output": [
          62,
          91,
          74
        ]
      }
    ]
  },
  {
    "id": "c149",
    "difficulty": 81,
    "function": "def c149(x):\n    # replace each element, M with M * first element; remove the first element\n    return [i*x[0] for i in x[1:]]\n\n",
    "data": {
      "input": [
        18,
        8,
        8
      ],
      "output": [
        144,
        144
      ]
    },
    "demos": [
      {
        "input": [
          20,
          12,
          6,
          5,
          0,
          20,
          3
        ],
        "output": [
          240,
          120,
          100,
          0,
          400,
          60
        ]
      },
      {
        "input": [
          4,
          18,
          13,
          11,
          16
        ],
        "output": [
          72,
          52,
          44,
          64
        ]
      },
      {
        "input": [
          14,
          15,
          7,
          12,
          18
        ],
        "output": [
          210,
          98,
          168,
          252
        ]
      }
    ]
  },
  {
    "id": "c148",
    "difficulty": 82,
    "function": "def c148(x):\n    # count from 1 to each element\n    res = []\n    for i in x:\n        res += list(range(1, i+1))\n    return res\n\n",
    "data": {
      "input": [
        0,
        1,
        4,
        1,
        4
      ],
      "output": [
        1,
        1,
        2,
        3,
        4,
        1,
        1,
        2,
        3,
        4
      ]
    },
    "demos": [
      {
        "input": [
          5,
          4,
          4,
          5,
          2
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          4,
          5,
          1,
          2
        ]
      },
      {
        "input": [
          1,
          4,
          1
        ],
        "output": [
          1,
          1,
          2,
          3,
          4,
          1
        ]
      },
      {
        "input": [
          3,
          1,
          3,
          5
        ],
        "output": [
          1,
          2,
          3,
          1,
          1,
          2,
          3,
          1,
          2,
          3,
          4,
          5
        ]
      }
    ]
  },
  {
    "id": "c017",
    "difficulty": 83,
    "function": "def c017(x):\n    # replace x[1] with 8\n    x[1] = 8\n    return x\n\n",
    "data": {
      "input": [
        53,
        63,
        0,
        93,
        27,
        14
      ],
      "output": [
        53,
        8,
        0,
        93,
        27,
        14
      ]
    },
    "demos": [
      {
        "input": [
          37,
          91,
          17,
          95,
          83,
          42
        ],
        "output": [
          37,
          8,
          17,
          95,
          83,
          42
        ]
      },
      {
        "input": [
          87,
          1,
          21,
          27,
          96
        ],
        "output": [
          87,
          8,
          21,
          27,
          96
        ]
      },
      {
        "input": [
          32,
          55,
          96,
          37,
          87
        ],
        "output": [
          32,
          8,
          96,
          37,
          87
        ]
      }
    ]
  },
  {
    "id": "c092",
    "difficulty": 84,
    "function": "def c092(x):\n    # concatenate 92, 63, 34, 18, 55\n    return x + [92, 63, 34, 18, 55]\n\n",
    "data": {
      "input": [
        90,
        56,
        37,
        40,
        12,
        95
      ],
      "output": [
        90,
        56,
        37,
        40,
        12,
        95,
        92,
        63,
        34,
        18,
        55
      ]
    },
    "demos": [
      {
        "input": [
          21,
          97,
          54,
          9
        ],
        "output": [
          21,
          97,
          54,
          9,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          80,
          85,
          89,
          97,
          5,
          90
        ],
        "output": [
          80,
          85,
          89,
          97,
          5,
          90,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          64,
          80,
          42,
          37,
          90
        ],
        "output": [
          64,
          80,
          42,
          37,
          90,
          92,
          63,
          34,
          18,
          55
        ]
      }
    ]
  },
  {
    "id": "c077",
    "difficulty": 85,
    "function": "def c077(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        98,
        82,
        21,
        95,
        64,
        16,
        76
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          59,
          14,
          3,
          21,
          73,
          78,
          65
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          4,
          12,
          92,
          33,
          18,
          26
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          92,
          19,
          41,
          76,
          70,
          35
        ],
        "output": [
          6
        ]
      }
    ]
  },
  {
    "id": "c248",
    "difficulty": 87,
    "function": "def c248(x):\n    # elements after the first 0\n    return x[x.index(0)+1:]\n\n",
    "data": {
      "input": [
        63,
        0,
        53,
        49,
        37
      ],
      "output": [
        53,
        49,
        37
      ]
    },
    "demos": [
      {
        "input": [
          76,
          0,
          7,
          46,
          60,
          98,
          23
        ],
        "output": [
          7,
          46,
          60,
          98,
          23
        ]
      },
      {
        "input": [
          57,
          82,
          0,
          77,
          16,
          11
        ],
        "output": [
          77,
          16,
          11
        ]
      },
      {
        "input": [
          90,
          39,
          51,
          0,
          93,
          84,
          82
        ],
        "output": [
          93,
          84,
          82
        ]
      }
    ]
  },
  {
    "id": "c199",
    "difficulty": 88,
    "function": "def c199(x):\n    # elements in ascending order, each preceded by its rank\n    res = []\n    for i, v in enumerate(sorted(x)):\n        res.append(i+1)\n        res.append(v)\n    return res\n\n",
    "data": {
      "input": [
        27,
        14,
        8,
        85,
        23,
        60
      ],
      "output": [
        1,
        8,
        2,
        14,
        3,
        23,
        4,
        27,
        5,
        60,
        6,
        85
      ]
    },
    "demos": [
      {
        "input": [
          97,
          92,
          1
        ],
        "output": [
          1,
          1,
          2,
          92,
          3,
          97
        ]
      },
      {
        "input": [
          84,
          99,
          35,
          55,
          85,
          46
        ],
        "output": [
          1,
          35,
          2,
          46,
          3,
          55,
          4,
          84,
          5,
          85,
          6,
          99
        ]
      },
      {
        "input": [
          52,
          20,
          77,
          62,
          7
        ],
        "output": [
          1,
          7,
          2,
          20,
          3,
          52,
          4,
          62,
          5,
          77
        ]
      }
    ]
  },
  {
    "id": "c007",
    "difficulty": 89,
    "function": "def c007(x):\n    # remove all but the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        67,
        42,
        45,
        63,
        53,
        89
      ],
      "output": [
        67,
        42
      ]
    },
    "demos": [
      {
        "input": [
          71,
          89,
          15
        ],
        "output": [
          71,
          89
        ]
      },
      {
        "input": [
          8,
          53,
          21,
          37,
          52
        ],
        "output": [
          8,
          53
        ]
      },
      {
        "input": [
          64,
          44,
          27,
          15,
          74,
          2
        ],
        "output": [
          64,
          44
        ]
      }
    ]
  },
  {
    "id": "c176",
    "difficulty": 90,
    "function": "def c176(x):\n    # sum of each consecutive pair of elements\n    return [x[i] + x[i+1] for i in range(0, len(x)-1)]\n\n",
    "data": {
      "input": [
        33,
        22,
        25,
        33,
        69,
        16,
        53
      ],
      "output": [
        55,
        47,
        58,
        102,
        85,
        69
      ]
    },
    "demos": [
      {
        "input": [
          57,
          60,
          55,
          14,
          39,
          16
        ],
        "output": [
          117,
          115,
          69,
          53,
          55
        ]
      },
      {
        "input": [
          68,
          90,
          69,
          99,
          11,
          36,
          72
        ],
        "output": [
          158,
          159,
          168,
          110,
          47,
          108
        ]
      },
      {
        "input": [
          82,
          18,
          83,
          65,
          66,
          34,
          49
        ],
        "output": [
          100,
          101,
          148,
          131,
          100,
          83
        ]
      }
    ]
  },
  {
    "id": "c066",
    "difficulty": 91,
    "function": "def c066(x):\n    # left rotate the list by 1\n    return x[1:] + x[:1]\n\n",
    "data": {
      "input": [
        61,
        68,
        82,
        96
      ],
      "output": [
        68,
        82,
        96,
        61
      ]
    },
    "demos": [
      {
        "input": [
          49,
          44,
          9
        ],
        "output": [
          44,
          9,
          49
        ]
      },
      {
        "input": [
          44,
          90,
          78,
          42
        ],
        "output": [
          90,
          78,
          42,
          44
        ]
      },
      {
        "input": [
          87,
          78,
          58,
          20,
          38,
          20
        ],
        "output": [
          78,
          58,
          20,
          38,
          20,
          87
        ]
      }
    ]
  },
  {
    "id": "c053",
    "difficulty": 92,
    "function": "def c053(x):\n    # replace x[1] with x[0]\n    x[1] = x[0]\n    return x\n\n",
    "data": {
      "input": [
        4,
        31,
        8
      ],
      "output": [
        4,
        4,
        8
      ]
    },
    "demos": [
      {
        "input": [
          65,
          96,
          6,
          56,
          96,
          54,
          53
        ],
        "output": [
          65,
          65,
          6,
          56,
          96,
          54,
          53
        ]
      },
      {
        "input": [
          99,
          66,
          45,
          12,
          55
        ],
        "output": [
          99,
          99,
          45,
          12,
          55
        ]
      },
      {
        "input": [
          25,
          59,
          63,
          38,
          42,
          31
        ],
        "output": [
          25,
          25,
          63,
          38,
          42,
          31
        ]
      }
    ]
  },
  {
    "id": "c047",
    "difficulty": 93,
    "function": "def c047(x):\n    # concatenate 9, 6, 3, 8, 5\n    return [9, 6, 3, 8, 5] + x\n\n",
    "data": {
      "input": [
        34,
        62,
        72,
        69
      ],
      "output": [
        9,
        6,
        3,
        8,
        5,
        34,
        62,
        72,
        69
      ]
    },
    "demos": [
      {
        "input": [
          98,
          65,
          93,
          42,
          64,
          65
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          98,
          65,
          93,
          42,
          64,
          65
        ]
      },
      {
        "input": [
          19,
          16,
          83,
          46
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          19,
          16,
          83,
          46
        ]
      },
      {
        "input": [
          7,
          81,
          22,
          1
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          7,
          81,
          22,
          1
        ]
      }
    ]
  },
  {
    "id": "c064",
    "difficulty": 94,
    "function": "def c064(x):\n    # remove the first and last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        89,
        34,
        10,
        75,
        15,
        26,
        43
      ],
      "output": [
        34,
        10,
        75,
        15,
        26
      ]
    },
    "demos": [
      {
        "input": [
          26,
          63,
          69,
          42
        ],
        "output": [
          63,
          69
        ]
      },
      {
        "input": [
          57,
          96,
          34,
          4,
          39
        ],
        "output": [
          96,
          34,
          4
        ]
      },
      {
        "input": [
          80,
          86,
          38
        ],
        "output": [
          86
        ]
      }
    ]
  },
  {
    "id": "c078",
    "difficulty": 95,
    "function": "def c078(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        60,
        24,
        57,
        34,
        61,
        26
      ],
      "output": [
        61
      ]
    },
    "demos": [
      {
        "input": [
          16,
          21,
          44,
          14,
          8,
          20
        ],
        "output": [
          44
        ]
      },
      {
        "input": [
          29,
          81,
          29,
          37,
          55,
          84
        ],
        "output": [
          84
        ]
      },
      {
        "input": [
          71,
          43,
          47
        ],
        "output": [
          71
        ]
      }
    ]
  },
  {
    "id": "c119",
    "difficulty": 96,
    "function": "def c119(x):\n    # make the list begin and ends with 8\n    if x[0] != 8:\n        x = [8] + x\n    if x[-1] != 8:\n        x = x + [8]\n    return x\n\n",
    "data": {
      "input": [
        18,
        68,
        89
      ],
      "output": [
        8,
        18,
        68,
        89,
        8
      ]
    },
    "demos": [
      {
        "input": [
          17,
          95,
          22
        ],
        "output": [
          8,
          17,
          95,
          22,
          8
        ]
      },
      {
        "input": [
          86,
          30,
          59,
          26,
          42,
          63
        ],
        "output": [
          8,
          86,
          30,
          59,
          26,
          42,
          63,
          8
        ]
      },
      {
        "input": [
          62,
          0,
          11,
          71,
          18,
          99
        ],
        "output": [
          8,
          62,
          0,
          11,
          71,
          18,
          99,
          8
        ]
      }
    ]
  },
  {
    "id": "c135",
    "difficulty": 97,
    "function": "def c135(x):\n    # remove the first 7\n    x.remove(7)\n    return x\n\n",
    "data": {
      "input": [
        8,
        1,
        5,
        5,
        7
      ],
      "output": [
        8,
        1,
        5,
        5
      ]
    },
    "demos": [
      {
        "input": [
          3,
          9,
          3,
          5,
          7,
          3
        ],
        "output": [
          3,
          9,
          3,
          5,
          3
        ]
      },
      {
        "input": [
          4,
          7,
          7,
          8,
          1,
          7,
          5,
          2
        ],
        "output": [
          4,
          7,
          8,
          1,
          7,
          5,
          2
        ]
      },
      {
        "input": [
          4,
          4,
          7,
          9,
          7,
          7,
          7,
          0
        ],
        "output": [
          4,
          4,
          9,
          7,
          7,
          7,
          0
        ]
      }
    ]
  },
  {
    "id": "c198",
    "difficulty": 98,
    "function": "def c198(x):\n    # unique elements in descending order\n    res = set(x)\n    return sorted(res, reverse=True)\n\n",
    "data": {
      "input": [
        83,
        10,
        44,
        10
      ],
      "output": [
        83,
        44,
        10
      ]
    },
    "demos": [
      {
        "input": [
          67,
          91,
          92,
          84,
          92,
          48,
          23,
          60
        ],
        "output": [
          92,
          91,
          84,
          67,
          60,
          48,
          23
        ]
      },
      {
        "input": [
          24,
          71,
          71,
          16
        ],
        "output": [
          71,
          24,
          16
        ]
      },
      {
        "input": [
          56,
          10,
          70,
          78,
          56
        ],
        "output": [
          78,
          70,
          56,
          10
        ]
      }
    ]
  },
  {
    "id": "c219",
    "difficulty": 99,
    "function": "def c219(x):\n    # keep only every other element\n    return x[::2]\n\n",
    "data": {
      "input": [
        77,
        73,
        32,
        75,
        25,
        67
      ],
      "output": [
        77,
        32,
        25
      ]
    },
    "demos": [
      {
        "input": [
          2,
          69,
          67,
          26,
          12,
          98,
          37
        ],
        "output": [
          2,
          67,
          12,
          37
        ]
      },
      {
        "input": [
          38,
          45,
          43,
          15
        ],
        "output": [
          38,
          43
        ]
      },
      {
        "input": [
          84,
          94,
          88,
          6,
          35,
          62,
          64,
          25,
          28
        ],
        "output": [
          84,
          88,
          35,
          64,
          28
        ]
      }
    ]
  },
  {
    "id": "c075",
    "difficulty": 100,
    "function": "def c075(x):\n    # remove even index\n    return x[1::2]\n\n",
    "data": {
      "input": [
        14,
        96,
        71,
        86,
        56,
        11,
        7
      ],
      "output": [
        96,
        86,
        11
      ]
    },
    "demos": [
      {
        "input": [
          34,
          57,
          38,
          47
        ],
        "output": [
          57,
          47
        ]
      },
      {
        "input": [
          79,
          97,
          77,
          52
        ],
        "output": [
          97,
          52
        ]
      },
      {
        "input": [
          0,
          84,
          80,
          46,
          87,
          94,
          77,
          82
        ],
        "output": [
          84,
          46,
          94,
          82
        ]
      }
    ]
  },
  {
    "id": "c177",
    "difficulty": 101,
    "function": "def c177(x):\n    # interleave the input and the reversed input\n    return [i for pair in zip(x, x[::-1]) for i in pair]\n\n",
    "data": {
      "input": [
        41,
        21,
        13,
        22,
        81,
        81
      ],
      "output": [
        41,
        81,
        21,
        81,
        13,
        22,
        22,
        13,
        81,
        21,
        81,
        41
      ]
    },
    "demos": [
      {
        "input": [
          89,
          50,
          38,
          76,
          36,
          62,
          2
        ],
        "output": [
          89,
          2,
          50,
          62,
          38,
          36,
          76,
          76,
          36,
          38,
          62,
          50,
          2,
          89
        ]
      },
      {
        "input": [
          34,
          54,
          56
        ],
        "output": [
          34,
          56,
          54,
          54,
          56,
          34
        ]
      },
      {
        "input": [
          92,
          4,
          96,
          42,
          61
        ],
        "output": [
          92,
          61,
          4,
          42,
          96,
          96,
          42,
          4,
          61,
          92
        ]
      }
    ]
  },
  {
    "id": "c025",
    "difficulty": 102,
    "function": "def c025(x):\n    # remove element 1\n    return x[:1] + x[2:]\n\n",
    "data": {
      "input": [
        1,
        95,
        38
      ],
      "output": [
        1,
        38
      ]
    },
    "demos": [
      {
        "input": [
          32,
          80,
          30,
          12
        ],
        "output": [
          32,
          30,
          12
        ]
      },
      {
        "input": [
          35,
          48,
          45,
          10
        ],
        "output": [
          35,
          45,
          10
        ]
      },
      {
        "input": [
          1,
          38,
          42,
          3,
          56,
          46,
          42
        ],
        "output": [
          1,
          42,
          3,
          56,
          46,
          42
        ]
      }
    ]
  },
  {
    "id": "c125",
    "difficulty": 103,
    "function": "def c125(x):\n    # keep only elements whose tens digit equals the tens digit of the first element\n    return [i for i in x if len(str(i)) > 1 and str(i)[-2] == str(x[0])[-2]]\n\n",
    "data": {
      "input": [
        97,
        40,
        33,
        83,
        79,
        106,
        88,
        101,
        101
      ],
      "output": [
        97
      ]
    },
    "demos": [
      {
        "input": [
          87,
          61,
          95,
          4,
          45
        ],
        "output": [
          87
        ]
      },
      {
        "input": [
          80,
          4,
          19,
          85,
          11,
          85,
          92,
          67,
          88
        ],
        "output": [
          80,
          85,
          85,
          88
        ]
      },
      {
        "input": [
          31,
          31,
          12,
          17,
          78,
          63,
          37
        ],
        "output": [
          31,
          31,
          37
        ]
      }
    ]
  },
  {
    "id": "c087",
    "difficulty": 105,
    "function": "def c087(x):\n    # swap second and third element\n    x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        65,
        79,
        23
      ],
      "output": [
        65,
        23,
        79
      ]
    },
    "demos": [
      {
        "input": [
          47,
          91,
          7,
          39
        ],
        "output": [
          47,
          7,
          91,
          39
        ]
      },
      {
        "input": [
          37,
          44,
          19,
          71
        ],
        "output": [
          37,
          19,
          44,
          71
        ]
      },
      {
        "input": [
          21,
          82,
          64,
          66,
          51,
          68
        ],
        "output": [
          21,
          64,
          82,
          66,
          51,
          68
        ]
      }
    ]
  },
  {
    "id": "c013",
    "difficulty": 106,
    "function": "def c013(x):\n    # element 2 through 6\n    return x[2:6]\n\n",
    "data": {
      "input": [
        65,
        93,
        15,
        18,
        25,
        39,
        5,
        92
      ],
      "output": [
        15,
        18,
        25,
        39
      ]
    },
    "demos": [
      {
        "input": [
          49,
          83,
          33,
          99,
          64,
          80,
          49,
          20,
          28
        ],
        "output": [
          33,
          99,
          64,
          80
        ]
      },
      {
        "input": [
          68,
          65,
          99,
          84,
          99,
          61
        ],
        "output": [
          99,
          84,
          99,
          61
        ]
      },
      {
        "input": [
          92,
          72,
          15,
          34,
          14,
          31,
          27,
          51,
          80
        ],
        "output": [
          15,
          34,
          14,
          31
        ]
      }
    ]
  },
  {
    "id": "c069",
    "difficulty": 107,
    "function": "def c069(x):\n    # 9,3,4,0, input, 7,2,9,1\n    return [9,3,4,0] + x + [7,2,9,1]\n\n",
    "data": {
      "input": [
        99,
        92,
        78,
        2
      ],
      "output": [
        9,
        3,
        4,
        0,
        99,
        92,
        78,
        2,
        7,
        2,
        9,
        1
      ]
    },
    "demos": [
      {
        "input": [
          16,
          98,
          84,
          58
        ],
        "output": [
          9,
          3,
          4,
          0,
          16,
          98,
          84,
          58,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          12,
          42,
          69,
          41,
          42
        ],
        "output": [
          9,
          3,
          4,
          0,
          12,
          42,
          69,
          41,
          42,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          64,
          12,
          98
        ],
        "output": [
          9,
          3,
          4,
          0,
          64,
          12,
          98,
          7,
          2,
          9,
          1
        ]
      }
    ]
  },
  {
    "id": "c117",
    "difficulty": 108,
    "function": "def c117(x):\n    # left rotate by 3\n    return x[3:] + x[:3]\n\n",
    "data": {
      "input": [
        71,
        89,
        92,
        10,
        70
      ],
      "output": [
        10,
        70,
        71,
        89,
        92
      ]
    },
    "demos": [
      {
        "input": [
          75,
          12,
          79,
          41
        ],
        "output": [
          41,
          75,
          12,
          79
        ]
      },
      {
        "input": [
          53,
          53,
          93,
          40,
          23
        ],
        "output": [
          40,
          23,
          53,
          53,
          93
        ]
      },
      {
        "input": [
          42,
          25,
          69,
          36,
          65,
          49
        ],
        "output": [
          36,
          65,
          49,
          42,
          25,
          69
        ]
      }
    ]
  },
  {
    "id": "c228",
    "difficulty": 109,
    "function": "def c228(x):\n    # replace each element with the number of occurrences of that element so far\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        74,
        27,
        27,
        8,
        91,
        6
      ],
      "output": [
        1,
        1,
        2,
        1,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          8,
          66,
          16,
          90,
          96,
          50,
          68,
          8,
          67
        ],
        "output": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          1
        ]
      },
      {
        "input": [
          73,
          34,
          10,
          73,
          10,
          70
        ],
        "output": [
          1,
          1,
          1,
          2,
          2,
          1
        ]
      },
      {
        "input": [
          92,
          92,
          69,
          54,
          98,
          92
        ],
        "output": [
          1,
          2,
          1,
          1,
          1,
          3
        ]
      }
    ]
  },
  {
    "id": "c197",
    "difficulty": 110,
    "function": "def c197(x):\n    # replace each element with the number of occurrences of that element\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in x:\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        9,
        71,
        28,
        71,
        85
      ],
      "output": [
        1,
        2,
        1,
        2,
        1
      ]
    },
    "demos": [
      {
        "input": [
          60,
          25,
          3,
          62,
          39,
          60,
          39
        ],
        "output": [
          2,
          1,
          1,
          1,
          2,
          2,
          2
        ]
      },
      {
        "input": [
          40,
          60,
          60,
          84,
          67,
          40
        ],
        "output": [
          2,
          2,
          2,
          1,
          1,
          2
        ]
      },
      {
        "input": [
          87,
          26,
          76,
          50,
          87,
          15,
          67,
          15
        ],
        "output": [
          2,
          1,
          1,
          1,
          2,
          2,
          1,
          2
        ]
      }
    ]
  },
  {
    "id": "c065",
    "difficulty": 111,
    "function": "def c065(x):\n    # prepend 9 and append 7\n    return [9] + x + [7]\n\n",
    "data": {
      "input": [
        10,
        53,
        34,
        77
      ],
      "output": [
        9,
        10,
        53,
        34,
        77,
        7
      ]
    },
    "demos": [
      {
        "input": [
          33,
          44,
          10,
          50,
          79
        ],
        "output": [
          9,
          33,
          44,
          10,
          50,
          79,
          7
        ]
      },
      {
        "input": [
          54,
          2,
          85
        ],
        "output": [
          9,
          54,
          2,
          85,
          7
        ]
      },
      {
        "input": [
          43,
          66,
          68
        ],
        "output": [
          9,
          43,
          66,
          68,
          7
        ]
      }
    ]
  },
  {
    "id": "c156",
    "difficulty": 112,
    "function": "def c156(x):\n    # reverse the input and add each element to its new index\n    x = x[::-1]\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        6,
        7,
        34
      ],
      "output": [
        34,
        8,
        8
      ]
    },
    "demos": [
      {
        "input": [
          66,
          10,
          94,
          92,
          73,
          10
        ],
        "output": [
          10,
          74,
          94,
          97,
          14,
          71
        ]
      },
      {
        "input": [
          2,
          14,
          17,
          64
        ],
        "output": [
          64,
          18,
          16,
          5
        ]
      },
      {
        "input": [
          14,
          1,
          21,
          30,
          46
        ],
        "output": [
          46,
          31,
          23,
          4,
          18
        ]
      }
    ]
  },
  {
    "id": "c110",
    "difficulty": 113,
    "function": "def c110(x):\n    # three largest elements in descending order\n    return sorted(x, reverse=True)[:3]\n\n",
    "data": {
      "input": [
        94,
        29,
        52
      ],
      "output": [
        94,
        52,
        29
      ]
    },
    "demos": [
      {
        "input": [
          99,
          12,
          23,
          69,
          85,
          47,
          99
        ],
        "output": [
          99,
          99,
          85
        ]
      },
      {
        "input": [
          32,
          40,
          39,
          57,
          48,
          96
        ],
        "output": [
          96,
          57,
          48
        ]
      },
      {
        "input": [
          79,
          65,
          55,
          34,
          3,
          78,
          8
        ],
        "output": [
          79,
          78,
          65
        ]
      }
    ]
  },
  {
    "id": "c233",
    "difficulty": 114,
    "function": "def c233(x):\n    # number of occurrences of each unique element, in order of appearance\n    numbers = []\n    res = []\n    for i in x:\n        if i not in numbers:\n            numbers.append(i)\n            res.append(x.count(i))\n    return res\n\n",
    "data": {
      "input": [
        0,
        3,
        1,
        3,
        0,
        2,
        1,
        10
      ],
      "output": [
        2,
        2,
        2,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          9,
          9,
          8,
          5,
          4,
          4,
          2
        ],
        "output": [
          2,
          1,
          1,
          2,
          1
        ]
      },
      {
        "input": [
          7,
          6,
          8,
          2,
          8
        ],
        "output": [
          1,
          1,
          2,
          1
        ]
      },
      {
        "input": [
          4,
          6,
          4,
          7,
          2
        ],
        "output": [
          2,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c003",
    "difficulty": 115,
    "function": "def c003(x):\n    # remove all but seventh element\n    return [x[6]]\n\n",
    "data": {
      "input": [
        35,
        65,
        26,
        21,
        94,
        38,
        57,
        41,
        84,
        67
      ],
      "output": [
        57
      ]
    },
    "demos": [
      {
        "input": [
          80,
          12,
          31,
          77,
          11,
          24,
          1,
          7,
          6
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          45,
          36,
          76,
          21,
          96,
          91,
          53,
          27
        ],
        "output": [
          53
        ]
      },
      {
        "input": [
          58,
          52,
          38,
          19,
          11,
          26,
          12,
          61
        ],
        "output": [
          12
        ]
      }
    ]
  },
  {
    "id": "c230",
    "difficulty": 116,
    "function": "def c230(x):\n    # count by 2 from the smallest element to the largest element\n    return list(range(min(x), max(x)+1, 2))\n\n",
    "data": {
      "input": [
        79,
        84,
        73
      ],
      "output": [
        73,
        75,
        77,
        79,
        81,
        83
      ]
    },
    "demos": [
      {
        "input": [
          43,
          42,
          30
        ],
        "output": [
          30,
          32,
          34,
          36,
          38,
          40,
          42
        ]
      },
      {
        "input": [
          39,
          40,
          22
        ],
        "output": [
          22,
          24,
          26,
          28,
          30,
          32,
          34,
          36,
          38,
          40
        ]
      },
      {
        "input": [
          60,
          52,
          59
        ],
        "output": [
          52,
          54,
          56,
          58,
          60
        ]
      }
    ]
  },
  {
    "id": "c122",
    "difficulty": 117,
    "function": "def c122(x):\n    # remove all but penultimate element\n    return [x[-2]]\n\n",
    "data": {
      "input": [
        49,
        88,
        41
      ],
      "output": [
        88
      ]
    },
    "demos": [
      {
        "input": [
          61,
          61,
          37,
          71,
          17,
          16,
          61
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          91,
          25,
          31,
          61,
          61,
          94,
          89
        ],
        "output": [
          94
        ]
      },
      {
        "input": [
          92,
          53,
          6,
          68,
          18,
          79,
          88
        ],
        "output": [
          79
        ]
      }
    ]
  },
  {
    "id": "c020",
    "difficulty": 118,
    "function": "def c020(x):\n    # replace the first element with the last element\n    x[0] = x[-1]\n    return x\n\n",
    "data": {
      "input": [
        73,
        0,
        22,
        78,
        93,
        35
      ],
      "output": [
        35,
        0,
        22,
        78,
        93,
        35
      ]
    },
    "demos": [
      {
        "input": [
          64,
          81,
          1,
          11
        ],
        "output": [
          11,
          81,
          1,
          11
        ]
      },
      {
        "input": [
          90,
          2,
          90,
          79,
          18,
          13,
          93
        ],
        "output": [
          93,
          2,
          90,
          79,
          18,
          13,
          93
        ]
      },
      {
        "input": [
          5,
          64,
          38,
          7,
          96,
          70
        ],
        "output": [
          70,
          64,
          38,
          7,
          96,
          70
        ]
      }
    ]
  },
  {
    "id": "c235",
    "difficulty": 119,
    "function": "def c235(x):\n    # count up and down between elements\n    res = []\n    for i in range(len(x)-1):\n        if x[i] < x[i+1]:\n            res += list(range(x[i], x[i+1]+1))\n        else:\n            res += list(range(x[i], x[i+1]-1, -1))\n    return res\n\n",
    "data": {
      "input": [
        65,
        67,
        70
      ],
      "output": [
        65,
        66,
        67,
        67,
        68,
        69,
        70
      ]
    },
    "demos": [
      {
        "input": [
          9,
          13,
          14
        ],
        "output": [
          9,
          10,
          11,
          12,
          13,
          13,
          14
        ]
      },
      {
        "input": [
          32,
          35,
          34
        ],
        "output": [
          32,
          33,
          34,
          35,
          35,
          34
        ]
      },
      {
        "input": [
          66,
          65,
          66
        ],
        "output": [
          66,
          65,
          65,
          66
        ]
      }
    ]
  },
  {
    "id": "c157",
    "difficulty": 120,
    "function": "def c157(x):\n    # each element followed by 0 if even, 1 if odd\n    res = []\n    for i in x:\n        res.append(i)\n        res.append(i % 2)\n    return res\n\n",
    "data": {
      "input": [
        53,
        29,
        72,
        84,
        67
      ],
      "output": [
        53,
        1,
        29,
        1,
        72,
        0,
        84,
        0,
        67,
        1
      ]
    },
    "demos": [
      {
        "input": [
          19,
          71,
          33,
          32,
          7,
          62
        ],
        "output": [
          19,
          1,
          71,
          1,
          33,
          1,
          32,
          0,
          7,
          1,
          62,
          0
        ]
      },
      {
        "input": [
          47,
          17,
          13,
          21,
          19,
          22
        ],
        "output": [
          47,
          1,
          17,
          1,
          13,
          1,
          21,
          1,
          19,
          1,
          22,
          0
        ]
      },
      {
        "input": [
          27,
          80,
          22,
          81
        ],
        "output": [
          27,
          1,
          80,
          0,
          22,
          0,
          81,
          1
        ]
      }
    ]
  },
  {
    "id": "c185",
    "difficulty": 121,
    "function": "def c185(x):\n    # replace the sublist between the first and last with its sum\n    return x[:1] + [sum(x[1:-1])] + x[-1:]\n\n",
    "data": {
      "input": [
        13,
        8,
        11,
        16
      ],
      "output": [
        13,
        19,
        16
      ]
    },
    "demos": [
      {
        "input": [
          6,
          18,
          2,
          15
        ],
        "output": [
          6,
          20,
          15
        ]
      },
      {
        "input": [
          15,
          13,
          3,
          17,
          4,
          20,
          9
        ],
        "output": [
          15,
          57,
          9
        ]
      },
      {
        "input": [
          5,
          17,
          12,
          7,
          20,
          11
        ],
        "output": [
          5,
          56,
          11
        ]
      }
    ]
  },
  {
    "id": "c213",
    "difficulty": 122,
    "function": "def c213(x):\n    # three smallest elements in ascending order\n    return sorted(x)[:3]\n\n",
    "data": {
      "input": [
        99,
        11,
        86,
        51,
        85
      ],
      "output": [
        11,
        51,
        85
      ]
    },
    "demos": [
      {
        "input": [
          59,
          42,
          44,
          74
        ],
        "output": [
          42,
          44,
          59
        ]
      },
      {
        "input": [
          8,
          55,
          39
        ],
        "output": [
          8,
          39,
          55
        ]
      },
      {
        "input": [
          4,
          13,
          14,
          39,
          47
        ],
        "output": [
          4,
          13,
          14
        ]
      }
    ]
  },
  {
    "id": "c184",
    "difficulty": 123,
    "function": "def c184(x):\n    # keep only odd elements with an even index\n    return [i for i in x if i % 2 == 1 and x.index(i) % 2 == 0]\n\n",
    "data": {
      "input": [
        22,
        39,
        92,
        54,
        81,
        40,
        78,
        74,
        37,
        86
      ],
      "output": [
        81,
        37
      ]
    },
    "demos": [
      {
        "input": [
          3,
          55,
          61,
          83,
          80,
          27,
          18
        ],
        "output": [
          3,
          61
        ]
      },
      {
        "input": [
          11,
          2,
          63,
          32,
          13,
          98,
          13,
          37,
          31,
          36
        ],
        "output": [
          11,
          63,
          13,
          13,
          31
        ]
      },
      {
        "input": [
          99,
          40,
          5,
          66,
          72,
          57,
          53,
          71
        ],
        "output": [
          99,
          5,
          53
        ]
      }
    ]
  },
  {
    "id": "c155",
    "difficulty": 124,
    "function": "def c155(x):\n    # multiply each element by its index\n    return [i*j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        89,
        49,
        82
      ],
      "output": [
        0,
        49,
        164
      ]
    },
    "demos": [
      {
        "input": [
          99,
          49,
          26,
          10
        ],
        "output": [
          0,
          49,
          52,
          30
        ]
      },
      {
        "input": [
          83,
          5,
          40
        ],
        "output": [
          0,
          5,
          80
        ]
      },
      {
        "input": [
          19,
          28,
          84,
          6
        ],
        "output": [
          0,
          28,
          168,
          18
        ]
      }
    ]
  },
  {
    "id": "c082",
    "difficulty": 125,
    "function": "def c082(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        58,
        2,
        18,
        4,
        15,
        55,
        3
      ],
      "output": [
        18
      ]
    },
    "demos": [
      {
        "input": [
          12,
          96,
          54,
          92,
          3,
          47,
          16
        ],
        "output": [
          54
        ]
      },
      {
        "input": [
          27,
          78,
          8
        ],
        "output": [
          8
        ]
      },
      {
        "input": [
          66,
          12,
          90,
          11,
          39
        ],
        "output": [
          90
        ]
      }
    ]
  },
  {
    "id": "c231",
    "difficulty": 126,
    "function": "def c231(x):\n    # the number of occurrences of each unique element in ascending order\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    return sorted(res.values())\n\n",
    "data": {
      "input": [
        9,
        1,
        10,
        9,
        10,
        10,
        10,
        8,
        10
      ],
      "output": [
        1,
        1,
        2,
        5
      ]
    },
    "demos": [
      {
        "input": [
          3,
          1,
          3,
          7,
          1,
          3,
          8,
          3,
          5
        ],
        "output": [
          1,
          1,
          1,
          2,
          4
        ]
      },
      {
        "input": [
          8,
          8,
          5,
          5,
          8,
          5,
          8
        ],
        "output": [
          3,
          4
        ]
      },
      {
        "input": [
          4,
          7,
          3,
          9,
          9,
          9,
          5,
          4,
          5,
          9,
          4
        ],
        "output": [
          1,
          1,
          2,
          3,
          4
        ]
      }
    ]
  },
  {
    "id": "c099",
    "difficulty": 127,
    "function": "def c099(x):\n    # remove the lower half of the list\n    median = sorted(x)[len(x)//2]\n    return [i for i in x if i >= median]\n\n",
    "data": {
      "input": [
        1,
        73,
        64,
        98,
        23
      ],
      "output": [
        73,
        64,
        98
      ]
    },
    "demos": [
      {
        "input": [
          72,
          14,
          15,
          81,
          29,
          1,
          86
        ],
        "output": [
          72,
          81,
          29,
          86
        ]
      },
      {
        "input": [
          22,
          91,
          39,
          76,
          25,
          54
        ],
        "output": [
          91,
          76,
          54
        ]
      },
      {
        "input": [
          32,
          12,
          29,
          17,
          48
        ],
        "output": [
          32,
          29,
          48
        ]
      }
    ]
  },
  {
    "id": "c247",
    "difficulty": 128,
    "function": "def c247(x):\n    # elements before the first 0\n    return x[:x.index(0)]\n\n",
    "data": {
      "input": [
        53,
        0,
        44,
        0,
        2,
        35
      ],
      "output": [
        53
      ]
    },
    "demos": [
      {
        "input": [
          17,
          29,
          0,
          0,
          22,
          95,
          31
        ],
        "output": [
          17,
          29
        ]
      },
      {
        "input": [
          59,
          0,
          41,
          0,
          66,
          81,
          66
        ],
        "output": [
          59
        ]
      },
      {
        "input": [
          27,
          19,
          74,
          17,
          0,
          0,
          42
        ],
        "output": [
          27,
          19,
          74,
          17
        ]
      }
    ]
  },
  {
    "id": "c008",
    "difficulty": 129,
    "function": "def c008(x):\n    # the first 5 elements\n    return x[:5]\n\n",
    "data": {
      "input": [
        18,
        86,
        64,
        33,
        88,
        80,
        13,
        57
      ],
      "output": [
        18,
        86,
        64,
        33,
        88
      ]
    },
    "demos": [
      {
        "input": [
          39,
          41,
          52,
          44,
          62,
          7,
          10,
          85
        ],
        "output": [
          39,
          41,
          52,
          44,
          62
        ]
      },
      {
        "input": [
          93,
          2,
          69,
          68,
          19,
          54,
          89
        ],
        "output": [
          93,
          2,
          69,
          68,
          19
        ]
      },
      {
        "input": [
          10,
          34,
          16,
          4,
          78
        ],
        "output": [
          10,
          34,
          16,
          4,
          78
        ]
      }
    ]
  },
  {
    "id": "c055",
    "difficulty": 130,
    "function": "def c055(x):\n    # swap x[0], x[2] and x[1], x[3]\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        57,
        36,
        59,
        85
      ],
      "output": [
        59,
        85,
        57,
        36
      ]
    },
    "demos": [
      {
        "input": [
          94,
          3,
          94,
          55
        ],
        "output": [
          94,
          55,
          94,
          3
        ]
      },
      {
        "input": [
          36,
          79,
          16,
          64,
          46,
          35
        ],
        "output": [
          16,
          64,
          36,
          79,
          46,
          35
        ]
      },
      {
        "input": [
          8,
          1,
          77,
          32
        ],
        "output": [
          77,
          32,
          8,
          1
        ]
      }
    ]
  },
  {
    "id": "c029",
    "difficulty": 131,
    "function": "def c029(x):\n    # remove the first 2 elements\n    return x[2:]\n\n",
    "data": {
      "input": [
        1,
        97,
        29,
        25,
        29,
        62
      ],
      "output": [
        29,
        25,
        29,
        62
      ]
    },
    "demos": [
      {
        "input": [
          29,
          69,
          93,
          52,
          65,
          74
        ],
        "output": [
          93,
          52,
          65,
          74
        ]
      },
      {
        "input": [
          16,
          22,
          30,
          57,
          77,
          42
        ],
        "output": [
          30,
          57,
          77,
          42
        ]
      },
      {
        "input": [
          17,
          9,
          23,
          42
        ],
        "output": [
          23,
          42
        ]
      }
    ]
  },
  {
    "id": "c168",
    "difficulty": 132,
    "function": "def c168(x):\n    # count from 1 to 10, skipping the length of the input\n    return [i for i in range(1, 11) if i != len(x)]\n\n",
    "data": {
      "input": [
        46,
        92,
        52,
        48,
        0,
        34
      ],
      "output": [
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        9,
        10
      ]
    },
    "demos": [
      {
        "input": [
          79,
          44,
          78
        ],
        "output": [
          1,
          2,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          2,
          62,
          33
        ],
        "output": [
          1,
          2,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          64,
          30,
          15,
          8,
          79
        ],
        "output": [
          1,
          2,
          3,
          4,
          6,
          7,
          8,
          9,
          10
        ]
      }
    ]
  },
  {
    "id": "c009",
    "difficulty": 133,
    "function": "def c009(x):\n    # remove all but the first 3 elements\n    return x[:3]\n\n",
    "data": {
      "input": [
        23,
        37,
        21,
        57,
        19
      ],
      "output": [
        23,
        37,
        21
      ]
    },
    "demos": [
      {
        "input": [
          95,
          33,
          71,
          90,
          60,
          58,
          82
        ],
        "output": [
          95,
          33,
          71
        ]
      },
      {
        "input": [
          26,
          88,
          79,
          5
        ],
        "output": [
          26,
          88,
          79
        ]
      },
      {
        "input": [
          18,
          33,
          42,
          80,
          40,
          84,
          63
        ],
        "output": [
          18,
          33,
          42
        ]
      }
    ]
  },
  {
    "id": "c133",
    "difficulty": 134,
    "function": "def c133(x):\n    # remove elements 1 through 4\n    return x[:1] + x[5:]\n\n",
    "data": {
      "input": [
        38,
        30,
        64,
        51,
        6,
        4
      ],
      "output": [
        38,
        4
      ]
    },
    "demos": [
      {
        "input": [
          36,
          64,
          70,
          89,
          58
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          8,
          3,
          20,
          91,
          97,
          58,
          15,
          38
        ],
        "output": [
          8,
          58,
          15,
          38
        ]
      },
      {
        "input": [
          2,
          71,
          94,
          62,
          16,
          52,
          16
        ],
        "output": [
          2,
          52,
          16
        ]
      }
    ]
  },
  {
    "id": "c146",
    "difficulty": 135,
    "function": "def c146(x):\n    # absolute difference between each consecutive pair of elements\n    return [abs(x[i] - x[i+1]) for i in range(len(x)-1)]\n\n",
    "data": {
      "input": [
        1,
        43,
        40,
        53,
        87,
        74,
        63
      ],
      "output": [
        42,
        3,
        13,
        34,
        13,
        11
      ]
    },
    "demos": [
      {
        "input": [
          24,
          82,
          87,
          6,
          80
        ],
        "output": [
          58,
          5,
          81,
          74
        ]
      },
      {
        "input": [
          12,
          50,
          92,
          94,
          72,
          10,
          63,
          12,
          48
        ],
        "output": [
          38,
          42,
          2,
          22,
          62,
          53,
          51,
          36
        ]
      },
      {
        "input": [
          99,
          57,
          9,
          75,
          26,
          25,
          69,
          34,
          63
        ],
        "output": [
          42,
          48,
          66,
          49,
          1,
          44,
          35,
          29
        ]
      }
    ]
  },
  {
    "id": "c004",
    "difficulty": 136,
    "function": "def c004(x):\n    # remove all but element 3\n    return [x[2]]\n\n",
    "data": {
      "input": [
        37,
        7,
        82,
        90
      ],
      "output": [
        82
      ]
    },
    "demos": [
      {
        "input": [
          39,
          68,
          99,
          7,
          21,
          54,
          5
        ],
        "output": [
          99
        ]
      },
      {
        "input": [
          29,
          0,
          29
        ],
        "output": [
          29
        ]
      },
      {
        "input": [
          45,
          19,
          3
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c240",
    "difficulty": 137,
    "function": "def c240(x):\n    # number of elements equal to the input length\n    return [x.count(len(x))]\n\n",
    "data": {
      "input": [
        30,
        7,
        10,
        10,
        91,
        10,
        85,
        61,
        10,
        37
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          56,
          4,
          39,
          5,
          89
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          13,
          6,
          6,
          90,
          35,
          94
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          71,
          3,
          8,
          96,
          8,
          8,
          92,
          77
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c239",
    "difficulty": 138,
    "function": "def c239(x):\n    # number of repetitions in the input\n    res = {}\n    out = 0\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out += 1\n    return [out]\n\n",
    "data": {
      "input": [
        3,
        1,
        3,
        0,
        5,
        10,
        10,
        3,
        5
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          4,
          0,
          0,
          0,
          8,
          10,
          10,
          0,
          0
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          7,
          10,
          5,
          10,
          9,
          10,
          9,
          2,
          9,
          10
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          5,
          5,
          4,
          5,
          5,
          5
        ],
        "output": [
          1
        ]
      }
    ]
  },
  {
    "id": "c246",
    "difficulty": 139,
    "function": "def c246(x):\n    # number of unique elements\n    return [len(set(x))]\n\n",
    "data": {
      "input": [
        54,
        1,
        54,
        13,
        1,
        60
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          47,
          26,
          94,
          55,
          59,
          94,
          81,
          55,
          59,
          8
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          36,
          14,
          84,
          76,
          84,
          53,
          36,
          85,
          93,
          53
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          52,
          69,
          69,
          42,
          52,
          69,
          69,
          5
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c138",
    "difficulty": 140,
    "function": "def c138(x):\n    # remove all occurrences of the first element\n    return [i for i in x if i != x[0]]\n\n",
    "data": {
      "input": [
        18,
        39,
        20,
        68,
        18,
        4,
        20,
        3,
        43,
        20
      ],
      "output": [
        39,
        20,
        68,
        4,
        20,
        3,
        43,
        20
      ]
    },
    "demos": [
      {
        "input": [
          44,
          83,
          84,
          68
        ],
        "output": [
          83,
          84,
          68
        ]
      },
      {
        "input": [
          3,
          69,
          99,
          69,
          26,
          27,
          64,
          64
        ],
        "output": [
          69,
          99,
          69,
          26,
          27,
          64,
          64
        ]
      },
      {
        "input": [
          92,
          10,
          1,
          63,
          92,
          56,
          39,
          40,
          92
        ],
        "output": [
          10,
          1,
          63,
          56,
          39,
          40
        ]
      }
    ]
  },
  {
    "id": "c018",
    "difficulty": 141,
    "function": "def c018(x):\n    # replace element 1 with 9\n    x[1] = 9\n    return x\n\n",
    "data": {
      "input": [
        0,
        34,
        54,
        62,
        93,
        90,
        77
      ],
      "output": [
        0,
        9,
        54,
        62,
        93,
        90,
        77
      ]
    },
    "demos": [
      {
        "input": [
          1,
          22,
          55,
          73,
          24,
          82,
          93
        ],
        "output": [
          1,
          9,
          55,
          73,
          24,
          82,
          93
        ]
      },
      {
        "input": [
          44,
          5,
          4
        ],
        "output": [
          44,
          9,
          4
        ]
      },
      {
        "input": [
          58,
          86,
          50,
          65,
          8
        ],
        "output": [
          58,
          9,
          50,
          65,
          8
        ]
      }
    ]
  },
  {
    "id": "c012",
    "difficulty": 142,
    "function": "def c012(x):\n    # remove all but elements 1 through 3\n    return x[1:4]\n\n",
    "data": {
      "input": [
        77,
        53,
        14,
        94,
        95,
        73,
        37
      ],
      "output": [
        53,
        14,
        94
      ]
    },
    "demos": [
      {
        "input": [
          26,
          6,
          64,
          33,
          96,
          38
        ],
        "output": [
          6,
          64,
          33
        ]
      },
      {
        "input": [
          10,
          18,
          12,
          79,
          13
        ],
        "output": [
          18,
          12,
          79
        ]
      },
      {
        "input": [
          10,
          28,
          18,
          82,
          54
        ],
        "output": [
          28,
          18,
          82
        ]
      }
    ]
  },
  {
    "id": "c232",
    "difficulty": 143,
    "function": "def c232(x):\n    # mean of the list, rounded to the nearest integer\n    return [round(sum(x)/len(x))]\n\n",
    "data": {
      "input": [
        49,
        35,
        61,
        83
      ],
      "output": [
        57
      ]
    },
    "demos": [
      {
        "input": [
          57,
          76,
          78
        ],
        "output": [
          70
        ]
      },
      {
        "input": [
          87,
          80,
          0,
          37,
          55,
          26,
          14
        ],
        "output": [
          43
        ]
      },
      {
        "input": [
          54,
          13,
          68,
          42
        ],
        "output": [
          44
        ]
      }
    ]
  },
  {
    "id": "c094",
    "difficulty": 144,
    "function": "def c094(x):\n    # swap 0,2 and 1,3\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        70,
        43,
        6,
        2,
        72,
        6
      ],
      "output": [
        6,
        2,
        70,
        43,
        72,
        6
      ]
    },
    "demos": [
      {
        "input": [
          37,
          61,
          10,
          69,
          27,
          76,
          99
        ],
        "output": [
          10,
          69,
          37,
          61,
          27,
          76,
          99
        ]
      },
      {
        "input": [
          14,
          25,
          4,
          6,
          48,
          36,
          61
        ],
        "output": [
          4,
          6,
          14,
          25,
          48,
          36,
          61
        ]
      },
      {
        "input": [
          10,
          46,
          34,
          46,
          0
        ],
        "output": [
          34,
          46,
          10,
          46,
          0
        ]
      }
    ]
  },
  {
    "id": "c086",
    "difficulty": 145,
    "function": "def c086(x):\n    # swap elements 0 and 3\n    x[0], x[3] = x[3], x[0]\n    return x\n\n",
    "data": {
      "input": [
        77,
        70,
        49,
        91,
        18,
        16,
        1
      ],
      "output": [
        91,
        70,
        49,
        77,
        18,
        16,
        1
      ]
    },
    "demos": [
      {
        "input": [
          77,
          70,
          92,
          47,
          39,
          25,
          99
        ],
        "output": [
          47,
          70,
          92,
          77,
          39,
          25,
          99
        ]
      },
      {
        "input": [
          23,
          25,
          87,
          64,
          98
        ],
        "output": [
          64,
          25,
          87,
          23,
          98
        ]
      },
      {
        "input": [
          29,
          36,
          72,
          59,
          94,
          87,
          83
        ],
        "output": [
          59,
          36,
          72,
          29,
          94,
          87,
          83
        ]
      }
    ]
  },
  {
    "id": "c193",
    "difficulty": 146,
    "function": "def c193(x):\n    # remove the smallest element and the largest element, output in ascending order\n    return sorted(x[1:-1])\n\n",
    "data": {
      "input": [
        7,
        99,
        86,
        11,
        95,
        87
      ],
      "output": [
        11,
        86,
        95,
        99
      ]
    },
    "demos": [
      {
        "input": [
          87,
          65,
          99,
          45,
          60,
          59,
          27
        ],
        "output": [
          45,
          59,
          60,
          65,
          99
        ]
      },
      {
        "input": [
          12,
          9,
          26,
          80,
          52,
          54,
          41
        ],
        "output": [
          9,
          26,
          52,
          54,
          80
        ]
      },
      {
        "input": [
          25,
          55,
          49,
          34,
          23,
          25,
          99
        ],
        "output": [
          23,
          25,
          34,
          49,
          55
        ]
      }
    ]
  },
  {
    "id": "c056",
    "difficulty": 147,
    "function": "def c056(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        12,
        1,
        46,
        22,
        86,
        56
      ],
      "output": [
        12,
        1,
        22,
        86,
        56
      ]
    },
    "demos": [
      {
        "input": [
          0,
          74,
          89,
          90,
          17,
          76,
          25
        ],
        "output": [
          0,
          74,
          90,
          17,
          76,
          25
        ]
      },
      {
        "input": [
          35,
          2,
          58,
          9
        ],
        "output": [
          35,
          2,
          9
        ]
      },
      {
        "input": [
          13,
          27,
          94,
          83,
          10
        ],
        "output": [
          13,
          27,
          83,
          10
        ]
      }
    ]
  },
  {
    "id": "c028",
    "difficulty": 148,
    "function": "def c028(x):\n    # remove element 1 if element 0 > element 1, else remove element 2\n    if x[0] > x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        5,
        77,
        74,
        57,
        92,
        39,
        25
      ],
      "output": [
        5,
        77,
        57,
        92,
        39,
        25
      ]
    },
    "demos": [
      {
        "input": [
          38,
          78,
          96,
          46
        ],
        "output": [
          38,
          78,
          46
        ]
      },
      {
        "input": [
          92,
          79,
          37,
          29,
          42
        ],
        "output": [
          92,
          37,
          29,
          42
        ]
      },
      {
        "input": [
          4,
          63,
          33,
          77,
          29
        ],
        "output": [
          4,
          63,
          77,
          29
        ]
      }
    ]
  },
  {
    "id": "c220",
    "difficulty": 149,
    "function": "def c220(x):\n    # if input length is even, double each element, else triple each element\n    if len(x) % 2 == 0:\n        return [i*2 for i in x]\n    else:\n        return [i*3 for i in x]\n\n",
    "data": {
      "input": [
        29,
        44,
        43,
        81,
        11,
        88,
        98
      ],
      "output": [
        87,
        132,
        129,
        243,
        33,
        264,
        294
      ]
    },
    "demos": [
      {
        "input": [
          80,
          65,
          61,
          37
        ],
        "output": [
          160,
          130,
          122,
          74
        ]
      },
      {
        "input": [
          13,
          30,
          62,
          75,
          56
        ],
        "output": [
          39,
          90,
          186,
          225,
          168
        ]
      },
      {
        "input": [
          50,
          77,
          31,
          41,
          99,
          49
        ],
        "output": [
          100,
          154,
          62,
          82,
          198,
          98
        ]
      }
    ]
  },
  {
    "id": "c241",
    "difficulty": 150,
    "function": "def c241(x):\n    # number of even elements\n    return [len([i for i in x if i % 2 == 0])]\n\n",
    "data": {
      "input": [
        3,
        93,
        1,
        84
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          3,
          88,
          78,
          60,
          7
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          65,
          56,
          50,
          56,
          53
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          50,
          26,
          12,
          7,
          1
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c060",
    "difficulty": 151,
    "function": "def c060(x):\n    # element 2,1,0,3,4,6 remove the rest\n    return [x[2], x[1], x[0], x[3], x[4], x[6]]\n\n",
    "data": {
      "input": [
        91,
        14,
        82,
        30,
        13,
        14,
        27,
        86,
        28
      ],
      "output": [
        82,
        14,
        91,
        30,
        13,
        27
      ]
    },
    "demos": [
      {
        "input": [
          88,
          70,
          43,
          23,
          41,
          64,
          0,
          21,
          38
        ],
        "output": [
          43,
          70,
          88,
          23,
          41,
          0
        ]
      },
      {
        "input": [
          94,
          17,
          32,
          48,
          97,
          18,
          24,
          95,
          27
        ],
        "output": [
          32,
          17,
          94,
          48,
          97,
          24
        ]
      },
      {
        "input": [
          83,
          29,
          27,
          93,
          47,
          38,
          80,
          24,
          81
        ],
        "output": [
          27,
          29,
          83,
          93,
          47,
          80
        ]
      }
    ]
  },
  {
    "id": "c169",
    "difficulty": 152,
    "function": "def c169(x):\n    # second largest element\n    return [sorted(x)[-2]]\n\n",
    "data": {
      "input": [
        11,
        33,
        64,
        13,
        50,
        4
      ],
      "output": [
        50
      ]
    },
    "demos": [
      {
        "input": [
          25,
          50,
          57,
          68,
          68
        ],
        "output": [
          68
        ]
      },
      {
        "input": [
          77,
          82,
          85,
          36,
          63,
          27
        ],
        "output": [
          82
        ]
      },
      {
        "input": [
          88,
          56,
          93,
          96,
          8,
          79
        ],
        "output": [
          93
        ]
      }
    ]
  },
  {
    "id": "c057",
    "difficulty": 153,
    "function": "def c057(x):\n    # insert a 4 as element 2\n    return x[:2] + [4] + x[2:]\n\n",
    "data": {
      "input": [
        5,
        64,
        37,
        22,
        6,
        49
      ],
      "output": [
        5,
        64,
        4,
        37,
        22,
        6,
        49
      ]
    },
    "demos": [
      {
        "input": [
          78,
          22,
          78,
          4,
          24
        ],
        "output": [
          78,
          22,
          4,
          78,
          4,
          24
        ]
      },
      {
        "input": [
          99,
          36,
          12,
          90,
          29
        ],
        "output": [
          99,
          36,
          4,
          12,
          90,
          29
        ]
      },
      {
        "input": [
          63,
          19,
          8,
          37,
          4
        ],
        "output": [
          63,
          19,
          4,
          8,
          37,
          4
        ]
      }
    ]
  },
  {
    "id": "c150",
    "difficulty": 154,
    "function": "def c150(x):\n    # count from first element to each element if the element is greater than the first element\n    res = []\n    for i in x:\n        if i > x[0]:\n            res += list(range(x[0], i+1))\n        else:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        25,
        30,
        20,
        23
      ],
      "output": [
        25,
        25,
        26,
        27,
        28,
        29,
        30,
        20,
        23
      ]
    },
    "demos": [
      {
        "input": [
          89,
          50,
          91,
          75
        ],
        "output": [
          89,
          50,
          89,
          90,
          91,
          75
        ]
      },
      {
        "input": [
          37,
          20,
          47,
          8,
          5
        ],
        "output": [
          37,
          20,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          8,
          5
        ]
      },
      {
        "input": [
          1,
          2,
          3,
          4,
          5
        ],
        "output": [
          1,
          1,
          2,
          1,
          2,
          3,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          4,
          5
        ]
      }
    ]
  },
  {
    "id": "c033",
    "difficulty": 155,
    "function": "def c033(x):\n    # swap element 0 and 2\n    x[0], x[2] = x[2], x[0]\n    return x\n\n",
    "data": {
      "input": [
        44,
        61,
        69,
        1,
        11,
        83
      ],
      "output": [
        69,
        61,
        44,
        1,
        11,
        83
      ]
    },
    "demos": [
      {
        "input": [
          60,
          16,
          36,
          11,
          35,
          70
        ],
        "output": [
          36,
          16,
          60,
          11,
          35,
          70
        ]
      },
      {
        "input": [
          42,
          97,
          46,
          24
        ],
        "output": [
          46,
          97,
          42,
          24
        ]
      },
      {
        "input": [
          28,
          66,
          56,
          68,
          88,
          90,
          0
        ],
        "output": [
          56,
          66,
          28,
          68,
          88,
          90,
          0
        ]
      }
    ]
  },
  {
    "id": "c218",
    "difficulty": 156,
    "function": "def c218(x):\n    # keep only second element and following equal to the first element\n    return [x[1]] + [i for i in x[2:] if i == x[0]]\n\n",
    "data": {
      "input": [
        20,
        84,
        13,
        20,
        69
      ],
      "output": [
        84,
        20
      ]
    },
    "demos": [
      {
        "input": [
          67,
          14,
          71,
          67,
          67,
          62,
          24,
          86,
          45
        ],
        "output": [
          14,
          67,
          67
        ]
      },
      {
        "input": [
          52,
          58,
          40,
          84,
          85,
          5,
          52,
          44,
          48,
          52
        ],
        "output": [
          58,
          52,
          52
        ]
      },
      {
        "input": [
          72,
          62,
          23,
          72,
          32
        ],
        "output": [
          62,
          72
        ]
      }
    ]
  },
  {
    "id": "c136",
    "difficulty": 158,
    "function": "def c136(x):\n    # remove the first occurrence of the largest element, keep the rest\n    x.remove(max(x))\n    return x\n\n",
    "data": {
      "input": [
        22,
        55,
        32,
        18,
        77,
        75
      ],
      "output": [
        22,
        55,
        32,
        18,
        75
      ]
    },
    "demos": [
      {
        "input": [
          68,
          32,
          82,
          29,
          21
        ],
        "output": [
          68,
          32,
          29,
          21
        ]
      },
      {
        "input": [
          81,
          66,
          77,
          41,
          67,
          14
        ],
        "output": [
          66,
          77,
          41,
          67,
          14
        ]
      },
      {
        "input": [
          9,
          23,
          35,
          49
        ],
        "output": [
          9,
          23,
          35
        ]
      }
    ]
  },
  {
    "id": "c083",
    "difficulty": 159,
    "function": "def c083(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        70,
        79,
        47,
        79,
        40,
        31,
        68,
        90,
        52
      ],
      "output": [
        68
      ]
    },
    "demos": [
      {
        "input": [
          59,
          53,
          7,
          79,
          52,
          1,
          78
        ],
        "output": [
          78
        ]
      },
      {
        "input": [
          8,
          62,
          99,
          1,
          35,
          30,
          19,
          85,
          90
        ],
        "output": [
          19
        ]
      },
      {
        "input": [
          60,
          71,
          27,
          24,
          49,
          59,
          78
        ],
        "output": [
          78
        ]
      }
    ]
  },
  {
    "id": "c019",
    "difficulty": 160,
    "function": "def c019(x):\n    # replace element 5 with a 3 if there is an element 5\n    if len(x) > 5:\n        x[4] = 3\n    return x\n\n",
    "data": {
      "input": [
        12,
        96,
        9,
        82,
        3,
        86,
        84
      ],
      "output": [
        12,
        96,
        9,
        82,
        3,
        86,
        84
      ]
    },
    "demos": [
      {
        "input": [
          95,
          87,
          8,
          21,
          52,
          82,
          90
        ],
        "output": [
          95,
          87,
          8,
          21,
          3,
          82,
          90
        ]
      },
      {
        "input": [
          99,
          72,
          78
        ],
        "output": [
          99,
          72,
          78
        ]
      },
      {
        "input": [
          62,
          74,
          3,
          54,
          47
        ],
        "output": [
          62,
          74,
          3,
          54,
          47
        ]
      }
    ]
  },
  {
    "id": "c203",
    "difficulty": 161,
    "function": "def c203(x):\n    # the first M positive multiples of the smallest element, M is the length of the input\n    return [min(x)*i for i in range(1, len(x)+1)]\n\n",
    "data": {
      "input": [
        3,
        20,
        1,
        23
      ],
      "output": [
        1,
        2,
        3,
        4
      ]
    },
    "demos": [
      {
        "input": [
          20,
          15,
          2,
          23,
          5,
          19,
          17
        ],
        "output": [
          2,
          4,
          6,
          8,
          10,
          12,
          14
        ]
      },
      {
        "input": [
          6,
          11,
          12,
          20,
          3
        ],
        "output": [
          3,
          6,
          9,
          12,
          15
        ]
      },
      {
        "input": [
          6,
          2,
          20,
          2,
          25
        ],
        "output": [
          2,
          4,
          6,
          8,
          10
        ]
      }
    ]
  },
  {
    "id": "c115",
    "difficulty": 162,
    "function": "def c115(x):\n    # the unique elements, prepended and appended by their sum\n    res = list(set(x))\n    return [sum(res)] + res + [sum(res)]\n\n",
    "data": {
      "input": [
        10,
        1,
        28,
        10,
        12,
        12
      ],
      "output": [
        51,
        1,
        10,
        28,
        12,
        51
      ]
    },
    "demos": [
      {
        "input": [
          0,
          10,
          22,
          10,
          17,
          10,
          5
        ],
        "output": [
          54,
          0,
          5,
          10,
          17,
          22,
          54
        ]
      },
      {
        "input": [
          12,
          20,
          0,
          7
        ],
        "output": [
          39,
          0,
          12,
          20,
          7,
          39
        ]
      },
      {
        "input": [
          12,
          6,
          14,
          12,
          5,
          26,
          14
        ],
        "output": [
          63,
          5,
          6,
          12,
          14,
          26,
          63
        ]
      }
    ]
  },
  {
    "id": "c207",
    "difficulty": 163,
    "function": "def c207(x):\n    # element-wise sum of the input and the reverse of the input\n    return [i+j for i, j in zip(x, x[::-1])]\n\n",
    "data": {
      "input": [
        31,
        30,
        25,
        12,
        33,
        47,
        26
      ],
      "output": [
        57,
        77,
        58,
        24,
        58,
        77,
        57
      ]
    },
    "demos": [
      {
        "input": [
          3,
          1,
          44,
          15,
          47
        ],
        "output": [
          50,
          16,
          88,
          16,
          50
        ]
      },
      {
        "input": [
          10,
          13,
          2,
          24,
          22,
          39,
          29
        ],
        "output": [
          39,
          52,
          24,
          48,
          24,
          52,
          39
        ]
      },
      {
        "input": [
          45,
          31,
          15,
          32,
          7,
          18
        ],
        "output": [
          63,
          38,
          47,
          47,
          38,
          63
        ]
      }
    ]
  },
  {
    "id": "c088",
    "difficulty": 164,
    "function": "def c088(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        30,
        5,
        48,
        12,
        16
      ],
      "output": [
        30,
        48,
        5,
        12,
        16
      ]
    },
    "demos": [
      {
        "input": [
          89,
          67,
          67,
          65,
          64
        ],
        "output": [
          65,
          67,
          67,
          89,
          64
        ]
      },
      {
        "input": [
          76,
          45,
          56,
          69,
          11,
          95,
          99
        ],
        "output": [
          76,
          56,
          45,
          69,
          11,
          95,
          99
        ]
      },
      {
        "input": [
          10,
          7,
          7,
          36,
          64,
          53
        ],
        "output": [
          36,
          7,
          7,
          10,
          64,
          53
        ]
      }
    ]
  },
  {
    "id": "c040",
    "difficulty": 165,
    "function": "def c040(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        9,
        13,
        27,
        18,
        8,
        24,
        9
      ],
      "output": [
        9,
        13,
        27,
        18,
        8,
        24,
        9,
        9
      ]
    },
    "demos": [
      {
        "input": [
          23,
          12,
          1,
          7,
          3,
          24,
          3
        ],
        "output": [
          23,
          12,
          1,
          7,
          3,
          24,
          3,
          3
        ]
      },
      {
        "input": [
          6,
          25,
          14,
          30,
          13
        ],
        "output": [
          6,
          25,
          14,
          30,
          13
        ]
      },
      {
        "input": [
          8,
          20,
          21,
          29,
          11
        ],
        "output": [
          8,
          20,
          21,
          29,
          11
        ]
      }
    ]
  },
  {
    "id": "c085",
    "difficulty": 166,
    "function": "def c085(x):\n    # remove all but element N, N=first element\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        3,
        32,
        24,
        8
      ],
      "output": [
        8
      ]
    },
    "demos": [
      {
        "input": [
          1,
          19,
          28,
          9,
          16,
          1,
          5
        ],
        "output": [
          19
        ]
      },
      {
        "input": [
          2,
          41,
          33,
          34
        ],
        "output": [
          33
        ]
      },
      {
        "input": [
          5,
          34,
          14,
          49,
          4,
          2
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c111",
    "difficulty": 167,
    "function": "def c111(x):\n    # repeat the largest element N times, where N is the smallest element\n    return [max(x)] * min(x)\n\n",
    "data": {
      "input": [
        5,
        5,
        14,
        18,
        9
      ],
      "output": [
        18,
        18,
        18,
        18,
        18
      ]
    },
    "demos": [
      {
        "input": [
          11,
          14,
          25,
          27,
          8
        ],
        "output": [
          27,
          27,
          27,
          27,
          27,
          27,
          27,
          27
        ]
      },
      {
        "input": [
          3,
          13,
          28,
          26,
          8
        ],
        "output": [
          28,
          28,
          28
        ]
      },
      {
        "input": [
          14,
          24,
          6,
          9,
          23
        ],
        "output": [
          24,
          24,
          24,
          24,
          24,
          24
        ]
      }
    ]
  },
  {
    "id": "c073",
    "difficulty": 168,
    "function": "def c073(x):\n    # add the index to every element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        28,
        26,
        31,
        0,
        34,
        9,
        43
      ],
      "output": [
        28,
        27,
        33,
        3,
        38,
        14,
        49
      ]
    },
    "demos": [
      {
        "input": [
          5,
          29,
          42,
          0,
          26
        ],
        "output": [
          5,
          30,
          44,
          3,
          30
        ]
      },
      {
        "input": [
          23,
          50,
          26,
          40,
          28,
          7
        ],
        "output": [
          23,
          51,
          28,
          43,
          32,
          12
        ]
      },
      {
        "input": [
          6,
          35,
          36,
          31,
          14,
          49
        ],
        "output": [
          6,
          36,
          38,
          34,
          18,
          54
        ]
      }
    ]
  },
  {
    "id": "c027",
    "difficulty": 169,
    "function": "def c027(x):\n    # remove element 1 if element 0 = element 1, else remove element 2\n    if x[0] == x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        12,
        75,
        67,
        82,
        40
      ],
      "output": [
        12,
        75,
        82,
        40
      ]
    },
    "demos": [
      {
        "input": [
          12,
          12,
          94,
          71,
          82
        ],
        "output": [
          12,
          94,
          71,
          82
        ]
      },
      {
        "input": [
          91,
          91,
          80,
          90,
          85,
          77
        ],
        "output": [
          91,
          80,
          90,
          85,
          77
        ]
      },
      {
        "input": [
          5,
          37,
          49,
          11,
          31,
          97,
          94
        ],
        "output": [
          5,
          37,
          11,
          31,
          97,
          94
        ]
      }
    ]
  },
  {
    "id": "c234",
    "difficulty": 170,
    "function": "def c234(x):\n    # repetitions in order of first appearance\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out.append(i)\n    return out\n\n",
    "data": {
      "input": [
        99,
        40,
        7,
        88,
        90,
        7,
        88
      ],
      "output": [
        7,
        88
      ]
    },
    "demos": [
      {
        "input": [
          61,
          32,
          87,
          32,
          65,
          3,
          74,
          74,
          45
        ],
        "output": [
          32,
          74
        ]
      },
      {
        "input": [
          27,
          95,
          27,
          95,
          64,
          44,
          38,
          27
        ],
        "output": [
          27,
          95
        ]
      },
      {
        "input": [
          9,
          59,
          87,
          80,
          9,
          12,
          12
        ],
        "output": [
          9,
          12
        ]
      }
    ]
  },
  {
    "id": "c165",
    "difficulty": 171,
    "function": "def c165(x):\n    # reverse the input and keep only even elements\n    return [i for i in x[::-1] if i % 2 == 0]\n\n",
    "data": {
      "input": [
        25,
        44,
        92,
        65,
        21,
        25,
        51
      ],
      "output": [
        92,
        44
      ]
    },
    "demos": [
      {
        "input": [
          33,
          0,
          50,
          53,
          85,
          0
        ],
        "output": [
          0,
          50,
          0
        ]
      },
      {
        "input": [
          36,
          53,
          6,
          53,
          91,
          28,
          75,
          88
        ],
        "output": [
          88,
          28,
          6,
          36
        ]
      },
      {
        "input": [
          20,
          47,
          32,
          96,
          69,
          78,
          80
        ],
        "output": [
          80,
          78,
          96,
          32,
          20
        ]
      }
    ]
  },
  {
    "id": "c191",
    "difficulty": 172,
    "function": "def c191(x):\n    # repeat each element N times, where N is its tens digit\n    out = []\n    for i in x:\n        if len(str(i)) > 1:\n            out += [i] * int(str(i)[-2])\n    return out\n\n",
    "data": {
      "input": [
        39,
        29,
        40,
        18
      ],
      "output": [
        39,
        39,
        39,
        29,
        29,
        40,
        40,
        40,
        40,
        18
      ]
    },
    "demos": [
      {
        "input": [
          18,
          18,
          35,
          37,
          26
        ],
        "output": [
          18,
          18,
          35,
          35,
          35,
          37,
          37,
          37,
          26,
          26
        ]
      },
      {
        "input": [
          23,
          40,
          3,
          4,
          33,
          1
        ],
        "output": [
          23,
          23,
          40,
          40,
          40,
          40,
          33,
          33,
          33
        ]
      },
      {
        "input": [
          6,
          22,
          39,
          20,
          15,
          23
        ],
        "output": [
          22,
          22,
          39,
          39,
          39,
          20,
          20,
          15,
          23,
          23
        ]
      }
    ]
  },
  {
    "id": "c026",
    "difficulty": 173,
    "function": "def c026(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        43,
        5,
        30,
        62,
        40,
        12,
        31
      ],
      "output": [
        43,
        5,
        62,
        40,
        12,
        31
      ]
    },
    "demos": [
      {
        "input": [
          62,
          38,
          91,
          25,
          17,
          62,
          53
        ],
        "output": [
          62,
          38,
          25,
          17,
          62,
          53
        ]
      },
      {
        "input": [
          79,
          64,
          43,
          53,
          60,
          87
        ],
        "output": [
          79,
          64,
          53,
          60,
          87
        ]
      },
      {
        "input": [
          11,
          7,
          16,
          89,
          31
        ],
        "output": [
          11,
          7,
          89,
          31
        ]
      }
    ]
  },
  {
    "id": "c059",
    "difficulty": 174,
    "function": "def c059(x):\n    # swap element 2 and element 5\n    x[2], x[5] = x[5], x[2]\n    return x\n\n",
    "data": {
      "input": [
        53,
        21,
        23,
        26,
        14,
        75,
        79
      ],
      "output": [
        53,
        21,
        75,
        26,
        14,
        23,
        79
      ]
    },
    "demos": [
      {
        "input": [
          55,
          0,
          41,
          50,
          42,
          46,
          24,
          9
        ],
        "output": [
          55,
          0,
          46,
          50,
          42,
          41,
          24,
          9
        ]
      },
      {
        "input": [
          10,
          6,
          57,
          4,
          18,
          22,
          27,
          64
        ],
        "output": [
          10,
          6,
          22,
          4,
          18,
          57,
          27,
          64
        ]
      },
      {
        "input": [
          83,
          45,
          20,
          8,
          41,
          42,
          44
        ],
        "output": [
          83,
          45,
          42,
          8,
          41,
          20,
          44
        ]
      }
    ]
  },
  {
    "id": "c074",
    "difficulty": 175,
    "function": "def c074(x):\n    # remove every element whose value < 8\n    return [i for i in x if i >= 8]\n\n",
    "data": {
      "input": [
        6,
        11,
        26,
        5,
        15,
        4,
        26
      ],
      "output": [
        11,
        26,
        15,
        26
      ]
    },
    "demos": [
      {
        "input": [
          16,
          0,
          13,
          12,
          8,
          24,
          7
        ],
        "output": [
          16,
          13,
          12,
          8,
          24
        ]
      },
      {
        "input": [
          10,
          36,
          16,
          27,
          16,
          8,
          14,
          26
        ],
        "output": [
          10,
          36,
          16,
          27,
          16,
          8,
          14,
          26
        ]
      },
      {
        "input": [
          8,
          13,
          1,
          13,
          18,
          0
        ],
        "output": [
          8,
          13,
          13,
          18
        ]
      }
    ]
  },
  {
    "id": "c173",
    "difficulty": 176,
    "function": "def c173(x):\n    # replace element N with the largest element in element 0 through N\n    for i in range(len(x)):\n        x[i] = max(x[:i+1])\n    return x\n\n",
    "data": {
      "input": [
        2,
        56,
        27,
        91,
        0,
        41,
        13,
        16
      ],
      "output": [
        2,
        56,
        56,
        91,
        91,
        91,
        91,
        91
      ]
    },
    "demos": [
      {
        "input": [
          80,
          28,
          68,
          99,
          73
        ],
        "output": [
          80,
          80,
          80,
          99,
          99
        ]
      },
      {
        "input": [
          0,
          90,
          57,
          97,
          18,
          46
        ],
        "output": [
          0,
          90,
          90,
          97,
          97,
          97
        ]
      },
      {
        "input": [
          9,
          33,
          33,
          59,
          68,
          36,
          20,
          63
        ],
        "output": [
          9,
          33,
          33,
          59,
          68,
          68,
          68,
          68
        ]
      }
    ]
  },
  {
    "id": "c175",
    "difficulty": 177,
    "function": "def c175(x):\n    # keep only elements larger than any preceding element\n    res = [x[0]]\n    for i in x[1:]:\n        if i > res[-1]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        57,
        16,
        0,
        4,
        76,
        78,
        7
      ],
      "output": [
        57,
        76,
        78
      ]
    },
    "demos": [
      {
        "input": [
          90,
          50,
          34,
          31,
          10,
          55,
          80,
          69
        ],
        "output": [
          90
        ]
      },
      {
        "input": [
          46,
          79,
          72,
          83,
          41,
          49,
          47
        ],
        "output": [
          46,
          79,
          83
        ]
      },
      {
        "input": [
          18,
          12,
          36,
          44,
          88
        ],
        "output": [
          18,
          36,
          44,
          88
        ]
      }
    ]
  },
  {
    "id": "c204",
    "difficulty": 178,
    "function": "def c204(x):\n    # keep only elements followed by 0\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] == 0:\n            res.append(x[i])\n    return res\n\n",
    "data": {
      "input": [
        0,
        19,
        2,
        23,
        0,
        13,
        27,
        0,
        0,
        0
      ],
      "output": [
        23,
        27,
        0,
        0
      ]
    },
    "demos": [
      {
        "input": [
          29,
          26,
          29,
          3,
          28,
          18,
          24,
          0
        ],
        "output": [
          24
        ]
      },
      {
        "input": [
          26,
          22,
          4,
          29,
          22,
          27,
          0
        ],
        "output": [
          27
        ]
      },
      {
        "input": [
          26,
          21,
          0,
          0,
          5,
          0,
          24,
          30,
          24,
          15
        ],
        "output": [
          21,
          0,
          5
        ]
      }
    ]
  },
  {
    "id": "c031",
    "difficulty": 179,
    "function": "def c031(x):\n    # remove whichever are equal, the first 2 elements or the last 2 elements\n    if x[0] == x[1]:\n        return x[2:]\n    elif x[-1] == x[-2]:\n        return x[:-2]\n    return x\n\n",
    "data": {
      "input": [
        25,
        25,
        25,
        20,
        55,
        76,
        37
      ],
      "output": [
        25,
        20,
        55,
        76,
        37
      ]
    },
    "demos": [
      {
        "input": [
          77,
          8,
          81,
          22,
          86,
          9
        ],
        "output": [
          77,
          8,
          81,
          22,
          86,
          9
        ]
      },
      {
        "input": [
          14,
          14,
          90,
          1,
          82,
          62
        ],
        "output": [
          90,
          1,
          82,
          62
        ]
      },
      {
        "input": [
          64,
          15,
          97,
          42,
          18,
          47,
          68,
          68
        ],
        "output": [
          64,
          15,
          97,
          42,
          18,
          47
        ]
      }
    ]
  },
  {
    "id": "c236",
    "difficulty": 180,
    "function": "def c236(x):\n    # even elements divided by 2\n    return [i//2 for i in x if i % 2 == 0]\n\n",
    "data": {
      "input": [
        32,
        35,
        24,
        22,
        54,
        84,
        58,
        81,
        33,
        25
      ],
      "output": [
        16,
        12,
        11,
        27,
        42,
        29
      ]
    },
    "demos": [
      {
        "input": [
          20,
          2,
          51,
          25,
          21,
          68,
          51,
          93,
          63
        ],
        "output": [
          10,
          1,
          34
        ]
      },
      {
        "input": [
          13,
          93,
          35,
          44,
          29,
          84,
          67,
          66,
          55
        ],
        "output": [
          22,
          42,
          33
        ]
      },
      {
        "input": [
          17,
          6,
          50,
          60,
          89,
          38
        ],
        "output": [
          3,
          25,
          30,
          19
        ]
      }
    ]
  },
  {
    "id": "c054",
    "difficulty": 181,
    "function": "def c054(x):\n    # replace element 0 and 1 with element 2\n    x[0] = x[2]\n    x[1] = x[2]\n    return x\n\n",
    "data": {
      "input": [
        36,
        57,
        67,
        31,
        49
      ],
      "output": [
        67,
        67,
        67,
        31,
        49
      ]
    },
    "demos": [
      {
        "input": [
          78,
          37,
          28,
          43,
          22,
          4,
          21
        ],
        "output": [
          28,
          28,
          28,
          43,
          22,
          4,
          21
        ]
      },
      {
        "input": [
          20,
          12,
          38,
          12,
          50
        ],
        "output": [
          38,
          38,
          38,
          12,
          50
        ]
      },
      {
        "input": [
          2,
          92,
          35,
          17,
          69
        ],
        "output": [
          35,
          35,
          35,
          17,
          69
        ]
      }
    ]
  },
  {
    "id": "c227",
    "difficulty": 182,
    "function": "def c227(x):\n    # interleave the input and reversed input, keep only unique elements in order of appearance\n    res = []\n    mid = len(x) // 2\n    for i in range(mid):\n        if x[i] not in res:\n            res.append(x[i])\n        if x[-i-1] not in res:\n            res.append(x[-i-1])\n    if len(x) % 2 == 1 and x[mid] not in res:\n        res.append(x[mid])\n    return res\n\n",
    "data": {
      "input": [
        32,
        39,
        15,
        56,
        64
      ],
      "output": [
        32,
        64,
        39,
        56,
        15
      ]
    },
    "demos": [
      {
        "input": [
          37,
          45,
          36,
          24,
          55,
          36,
          27,
          55
        ],
        "output": [
          37,
          55,
          45,
          27,
          36,
          24
        ]
      },
      {
        "input": [
          21,
          68,
          16,
          28,
          85,
          73
        ],
        "output": [
          21,
          73,
          68,
          85,
          16,
          28
        ]
      },
      {
        "input": [
          62,
          22,
          3,
          32,
          28
        ],
        "output": [
          62,
          28,
          22,
          32,
          3
        ]
      }
    ]
  },
  {
    "id": "c024",
    "difficulty": 183,
    "function": "def c024(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        3,
        1,
        9,
        15,
        10
      ],
      "output": [
        3,
        5,
        1,
        9,
        15,
        10
      ]
    },
    "demos": [
      {
        "input": [
          12,
          16,
          16,
          15,
          16,
          9,
          12,
          20
        ],
        "output": [
          12,
          8,
          16,
          16,
          15,
          16,
          9,
          12,
          20
        ]
      },
      {
        "input": [
          11,
          4,
          14,
          2,
          2,
          4
        ],
        "output": [
          11,
          8,
          4,
          14,
          2,
          2,
          4
        ]
      },
      {
        "input": [
          16,
          12,
          0,
          15
        ],
        "output": [
          16,
          8,
          12,
          0,
          15
        ]
      }
    ]
  },
  {
    "id": "c200",
    "difficulty": 184,
    "function": "def c200(x):\n    # tens digits of the elements in ascending order\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append(int(str(i)[-2]))\n        else:\n            res.append(0)\n    return sorted(res)\n\n",
    "data": {
      "input": [
        9,
        90,
        37,
        23,
        74,
        94
      ],
      "output": [
        0,
        2,
        3,
        7,
        9,
        9
      ]
    },
    "demos": [
      {
        "input": [
          48,
          93,
          42,
          97,
          89
        ],
        "output": [
          4,
          4,
          8,
          9,
          9
        ]
      },
      {
        "input": [
          20,
          24,
          0,
          2,
          47,
          76
        ],
        "output": [
          0,
          0,
          2,
          2,
          4,
          7
        ]
      },
      {
        "input": [
          0,
          49,
          62,
          97,
          45
        ],
        "output": [
          0,
          4,
          4,
          6,
          9
        ]
      }
    ]
  },
  {
    "id": "c010",
    "difficulty": 185,
    "function": "def c010(x):\n    # elements 1 through N + 1, N is the first element\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        0,
        16,
        17,
        15,
        8,
        17,
        3
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          5,
          11,
          20,
          13,
          5,
          4,
          13,
          12
        ],
        "output": [
          11,
          20,
          13,
          5,
          4
        ]
      },
      {
        "input": [
          6,
          1,
          10,
          6,
          17,
          1
        ],
        "output": [
          1,
          10,
          6,
          17,
          1
        ]
      },
      {
        "input": [
          2,
          4,
          10,
          19,
          11
        ],
        "output": [
          4,
          10
        ]
      }
    ]
  },
  {
    "id": "c123",
    "difficulty": 186,
    "function": "def c123(x):\n    # remove all but element N, N is the last element\n    return [x[x[-1]]]\n\n",
    "data": {
      "input": [
        3,
        9,
        3,
        19,
        4
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          8,
          8,
          16,
          6,
          3,
          1,
          20,
          5
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          18,
          11,
          19,
          7,
          1
        ],
        "output": [
          11
        ]
      },
      {
        "input": [
          0,
          7,
          19,
          20,
          1,
          0
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c023",
    "difficulty": 187,
    "function": "def c023(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        0,
        0,
        2,
        1,
        2,
        8
      ],
      "output": [
        0,
        5,
        0,
        2,
        1,
        2,
        8
      ]
    },
    "demos": [
      {
        "input": [
          5,
          2,
          7,
          19
        ],
        "output": [
          5,
          5,
          2,
          7,
          19
        ]
      },
      {
        "input": [
          18,
          10,
          8,
          9,
          20,
          4
        ],
        "output": [
          18,
          8,
          10,
          8,
          9,
          20,
          4
        ]
      },
      {
        "input": [
          20,
          3,
          18,
          14
        ],
        "output": [
          20,
          8,
          3,
          18,
          14
        ]
      }
    ]
  },
  {
    "id": "c194",
    "difficulty": 188,
    "function": "def c194(x):\n    # reverse the input; prepend and append the length of the input\n    return [len(x)] + x[::-1] + [len(x)]\n\n",
    "data": {
      "input": [
        4,
        11,
        12,
        9,
        14
      ],
      "output": [
        5,
        14,
        9,
        12,
        11,
        4,
        5
      ]
    },
    "demos": [
      {
        "input": [
          3,
          15,
          15,
          7,
          18,
          5,
          14,
          16
        ],
        "output": [
          8,
          16,
          14,
          5,
          18,
          7,
          15,
          15,
          3,
          8
        ]
      },
      {
        "input": [
          18,
          12,
          14,
          10,
          0
        ],
        "output": [
          5,
          0,
          10,
          14,
          12,
          18,
          5
        ]
      },
      {
        "input": [
          17,
          13,
          6,
          19,
          10,
          15,
          6,
          4
        ],
        "output": [
          8,
          4,
          6,
          15,
          10,
          19,
          6,
          13,
          17,
          8
        ]
      }
    ]
  },
  {
    "id": "c245",
    "difficulty": 189,
    "function": "def c245(x):\n    # number of times element 0 appears in the following elements\n    return [x[1:].count(x[0])]\n\n",
    "data": {
      "input": [
        10,
        10,
        13,
        14,
        18,
        10,
        10
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          9,
          7,
          7,
          13,
          15,
          11,
          10
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          15,
          19,
          19,
          11,
          15,
          15
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          0,
          0,
          6,
          20,
          7,
          8
        ],
        "output": [
          1
        ]
      }
    ]
  },
  {
    "id": "c032",
    "difficulty": 190,
    "function": "def c032(x):\n    # remove first 2 elements if element 0 > last element, else remove last 2 elements\n    if x[0] > x[-1]:\n        return x[2:]\n    else:\n        return x[:-2]\n    \n",
    "data": {
      "input": [
        82,
        19,
        26,
        90,
        1
      ],
      "output": [
        26,
        90,
        1
      ]
    },
    "demos": [
      {
        "input": [
          14,
          89,
          45,
          43,
          26,
          3
        ],
        "output": [
          45,
          43,
          26,
          3
        ]
      },
      {
        "input": [
          24,
          5,
          17,
          8,
          52,
          0,
          14
        ],
        "output": [
          17,
          8,
          52,
          0,
          14
        ]
      },
      {
        "input": [
          5,
          74,
          66,
          31,
          71,
          1
        ],
        "output": [
          66,
          31,
          71,
          1
        ]
      }
    ]
  },
  {
    "id": "c058",
    "difficulty": 191,
    "function": "def c058(x):\n    # remove the first 5 elements\n    return x[5:]\n\n",
    "data": {
      "input": [
        85,
        61,
        53,
        29
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          51,
          52,
          78,
          26,
          78,
          25,
          77
        ],
        "output": [
          25,
          77
        ]
      },
      {
        "input": [
          90,
          33,
          9,
          34,
          19
        ],
        "output": []
      },
      {
        "input": [
          74,
          58,
          81,
          38
        ],
        "output": []
      }
    ]
  },
  {
    "id": "c174",
    "difficulty": 192,
    "function": "def c174(x):\n    # keep the first M elements, where M is the number of unique elements\n    return x[:len(set(x))]\n\n",
    "data": {
      "input": [
        44,
        73,
        61,
        73,
        95,
        34,
        95,
        95,
        81
      ],
      "output": [
        44,
        73,
        61,
        73,
        95,
        34
      ]
    },
    "demos": [
      {
        "input": [
          46,
          78,
          65,
          62,
          78,
          27,
          22,
          16,
          65,
          78
        ],
        "output": [
          46,
          78,
          65,
          62,
          78,
          27,
          22
        ]
      },
      {
        "input": [
          35,
          57,
          4,
          55,
          20
        ],
        "output": [
          35,
          57,
          4,
          55,
          20
        ]
      },
      {
        "input": [
          40,
          92,
          32,
          47,
          0
        ],
        "output": [
          40,
          92,
          32,
          47,
          0
        ]
      }
    ]
  },
  {
    "id": "c229",
    "difficulty": 193,
    "function": "def c229(x):\n    # keep only first N elements of the reversed input, N is the first element\n    length = x[0]\n    return x[::-1][:length]\n\n",
    "data": {
      "input": [
        0,
        90,
        23,
        37,
        52
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          5,
          62,
          58,
          29,
          43,
          99,
          48,
          33
        ],
        "output": [
          33,
          48,
          99,
          43,
          29
        ]
      },
      {
        "input": [
          1,
          24,
          73,
          74,
          85,
          18,
          40
        ],
        "output": [
          40
        ]
      },
      {
        "input": [
          3,
          98,
          81,
          45,
          90,
          77,
          78
        ],
        "output": [
          78,
          77,
          90
        ]
      }
    ]
  },
  {
    "id": "c162",
    "difficulty": 194,
    "function": "def c162(x):\n    # replace each element M with 3 * M + 7\n    return [3*i+7 for i in x]\n\n",
    "data": {
      "input": [
        2,
        22,
        7,
        3,
        12,
        0
      ],
      "output": [
        13,
        73,
        28,
        16,
        43,
        7
      ]
    },
    "demos": [
      {
        "input": [
          9,
          6,
          15,
          17,
          17,
          23,
          22
        ],
        "output": [
          34,
          25,
          52,
          58,
          58,
          76,
          73
        ]
      },
      {
        "input": [
          23,
          18,
          2,
          21,
          29,
          21
        ],
        "output": [
          76,
          61,
          13,
          70,
          94,
          70
        ]
      },
      {
        "input": [
          1,
          26,
          24,
          19,
          6,
          8,
          24
        ],
        "output": [
          10,
          85,
          79,
          64,
          25,
          31,
          79
        ]
      }
    ]
  },
  {
    "id": "c039",
    "difficulty": 195,
    "function": "def c039(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        18,
        35,
        50,
        45,
        33,
        14,
        24
      ],
      "output": [
        18,
        35,
        50,
        45,
        33,
        14,
        24
      ]
    },
    "demos": [
      {
        "input": [
          18,
          1,
          4,
          43,
          37,
          46
        ],
        "output": [
          18,
          1,
          4,
          43,
          37,
          46
        ]
      },
      {
        "input": [
          24,
          40,
          16,
          41,
          9,
          11,
          44
        ],
        "output": [
          24,
          40,
          16,
          41,
          9,
          11,
          44,
          9
        ]
      },
      {
        "input": [
          12,
          50,
          17,
          18,
          18,
          23,
          31,
          3
        ],
        "output": [
          12,
          50,
          17,
          18,
          18,
          23,
          31,
          3,
          3
        ]
      }
    ]
  },
  {
    "id": "c181",
    "difficulty": 196,
    "function": "def c181(x):\n    # reverse the order of elements with even index\n    return [x[i] if i % 2 == 1 else x[-i-1] for i in range(len(x))]\n\n",
    "data": {
      "input": [
        72,
        89,
        31,
        64,
        73,
        81,
        49
      ],
      "output": [
        49,
        89,
        73,
        64,
        31,
        81,
        72
      ]
    },
    "demos": [
      {
        "input": [
          98,
          3,
          14,
          72,
          42
        ],
        "output": [
          42,
          3,
          14,
          72,
          98
        ]
      },
      {
        "input": [
          50,
          89,
          20,
          77,
          28,
          94
        ],
        "output": [
          94,
          89,
          77,
          77,
          89,
          94
        ]
      },
      {
        "input": [
          96,
          58,
          42,
          85,
          16
        ],
        "output": [
          16,
          58,
          42,
          85,
          96
        ]
      }
    ]
  },
  {
    "id": "c163",
    "difficulty": 197,
    "function": "def c163(x):\n    # replace each element M with 2 * M - 10\n    return [2*i-10 for i in x]\n\n",
    "data": {
      "input": [
        35,
        64,
        35,
        55,
        91,
        26,
        95,
        94
      ],
      "output": [
        60,
        118,
        60,
        100,
        172,
        42,
        180,
        178
      ]
    },
    "demos": [
      {
        "input": [
          28,
          27,
          80,
          58,
          12,
          75
        ],
        "output": [
          46,
          44,
          150,
          106,
          14,
          140
        ]
      },
      {
        "input": [
          87,
          32,
          74,
          74,
          69,
          35,
          81,
          45
        ],
        "output": [
          164,
          54,
          138,
          138,
          128,
          60,
          152,
          80
        ]
      },
      {
        "input": [
          87,
          55,
          54,
          24,
          77,
          55,
          46,
          87
        ],
        "output": [
          164,
          100,
          98,
          38,
          144,
          100,
          82,
          164
        ]
      }
    ]
  },
  {
    "id": "c154",
    "difficulty": 198,
    "function": "def c154(x):\n    # triple each even element\n    return [i*3 if i % 2 == 0 else i for i in x]\n\n",
    "data": {
      "input": [
        31,
        9,
        1,
        4,
        1,
        0
      ],
      "output": [
        31,
        9,
        1,
        12,
        1,
        0
      ]
    },
    "demos": [
      {
        "input": [
          5,
          0,
          30,
          24,
          29
        ],
        "output": [
          5,
          0,
          90,
          72,
          29
        ]
      },
      {
        "input": [
          5,
          23,
          20,
          0,
          2,
          14,
          29,
          18
        ],
        "output": [
          5,
          23,
          60,
          0,
          6,
          42,
          29,
          54
        ]
      },
      {
        "input": [
          22,
          30,
          19,
          33,
          33,
          11
        ],
        "output": [
          66,
          90,
          19,
          33,
          33,
          11
        ]
      }
    ]
  },
  {
    "id": "c166",
    "difficulty": 199,
    "function": "def c166(x):\n    # unique elements in ascending order by the sum of their digits\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = sum(map(int, str(i)))\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        92,
        26,
        12,
        45,
        12,
        80,
        10,
        91
      ],
      "output": [
        10,
        12,
        26,
        80,
        45,
        91,
        92
      ]
    },
    "demos": [
      {
        "input": [
          83,
          65,
          31,
          68,
          13,
          7
        ],
        "output": [
          31,
          13,
          7,
          83,
          65,
          68
        ]
      },
      {
        "input": [
          96,
          71,
          64,
          64,
          64,
          28,
          36
        ],
        "output": [
          71,
          36,
          64,
          28,
          96
        ]
      },
      {
        "input": [
          6,
          7,
          23,
          23,
          72,
          54
        ],
        "output": [
          23,
          6,
          7,
          72,
          54
        ]
      }
    ]
  },
  {
    "id": "c084",
    "difficulty": 200,
    "function": "def c084(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        89,
        62,
        49,
        54,
        18,
        49,
        26,
        24,
        78,
        50
      ],
      "output": [
        26
      ]
    },
    "demos": [
      {
        "input": [
          38,
          98,
          84,
          16,
          20,
          26,
          16,
          90
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          40,
          67,
          23,
          93,
          53,
          66,
          26,
          90
        ],
        "output": [
          26
        ]
      },
      {
        "input": [
          53,
          56,
          61,
          50,
          79,
          30,
          19
        ],
        "output": [
          19
        ]
      }
    ]
  },
  {
    "id": "c249",
    "difficulty": 201,
    "function": "def c249(x):\n    # use 0s to delimit sublists, give the first element of each sublist\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            if sublist:\n                res.append(sublist[0])\n                sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res.append(sublist[0])\n    return res\n\n",
    "data": {
      "input": [
        83,
        0,
        16,
        35,
        39,
        63,
        50,
        98
      ],
      "output": [
        83,
        16
      ]
    },
    "demos": [
      {
        "input": [
          0,
          0,
          87,
          0,
          36,
          63,
          79,
          76,
          55,
          72,
          52
        ],
        "output": [
          87,
          36
        ]
      },
      {
        "input": [
          23,
          38,
          0,
          0,
          64,
          73,
          39,
          86
        ],
        "output": [
          23,
          64
        ]
      },
      {
        "input": [
          0,
          58,
          5,
          12,
          75,
          11,
          0,
          73,
          98,
          0
        ],
        "output": [
          58,
          73
        ]
      }
    ]
  },
  {
    "id": "c118",
    "difficulty": 202,
    "function": "def c118(x):\n    # left rotate by N elements, N is the last element\n    return x[x[-1]:] + x[:x[-1]]\n\n",
    "data": {
      "input": [
        14,
        43,
        28,
        55,
        34,
        29,
        73,
        44,
        8
      ],
      "output": [
        8,
        14,
        43,
        28,
        55,
        34,
        29,
        73,
        44
      ]
    },
    "demos": [
      {
        "input": [
          3,
          41,
          55,
          32,
          45,
          6,
          4
        ],
        "output": [
          45,
          6,
          4,
          3,
          41,
          55,
          32
        ]
      },
      {
        "input": [
          44,
          44,
          8,
          44,
          59,
          4
        ],
        "output": [
          59,
          4,
          44,
          44,
          8,
          44
        ]
      },
      {
        "input": [
          24,
          3,
          45,
          72,
          3,
          2
        ],
        "output": [
          45,
          72,
          3,
          2,
          24,
          3
        ]
      }
    ]
  },
  {
    "id": "c152",
    "difficulty": 203,
    "function": "def c152(x):\n    # replace each element with the product of its digits\n    res = []\n    for i in x:\n        if i < 10:\n            res.append(0)\n        else:\n            res.append(int(str(i)[0]) * int(str(i)[1]))\n    return res\n\n",
    "data": {
      "input": [
        9,
        61,
        52,
        22,
        7,
        85,
        95
      ],
      "output": [
        0,
        6,
        10,
        4,
        0,
        40,
        45
      ]
    },
    "demos": [
      {
        "input": [
          72,
          99,
          82,
          63,
          71
        ],
        "output": [
          14,
          81,
          16,
          18,
          7
        ]
      },
      {
        "input": [
          32,
          93,
          9,
          7,
          84,
          83,
          95
        ],
        "output": [
          6,
          27,
          0,
          0,
          32,
          24,
          45
        ]
      },
      {
        "input": [
          70,
          35,
          1,
          63,
          53,
          36,
          64
        ],
        "output": [
          0,
          15,
          0,
          18,
          15,
          18,
          24
        ]
      }
    ]
  },
  {
    "id": "c237",
    "difficulty": 204,
    "function": "def c237(x):\n    # cumulative sum of unique elements\n    res = []\n    s = 0\n    for i in x:\n        if i not in res:\n            res.append(i)\n    for i in range(len(res)):\n        s += res[i]\n        res[i] = s\n    return res\n\n",
    "data": {
      "input": [
        21,
        10,
        5,
        20,
        20,
        21
      ],
      "output": [
        21,
        31,
        36,
        56
      ]
    },
    "demos": [
      {
        "input": [
          20,
          30,
          30,
          30,
          16
        ],
        "output": [
          20,
          50,
          66
        ]
      },
      {
        "input": [
          6,
          25,
          7,
          25,
          25,
          15,
          18
        ],
        "output": [
          6,
          31,
          38,
          53,
          71
        ]
      },
      {
        "input": [
          19,
          15,
          2,
          26,
          23,
          17,
          2
        ],
        "output": [
          19,
          34,
          36,
          62,
          85,
          102
        ]
      }
    ]
  },
  {
    "id": "c243",
    "difficulty": 205,
    "function": "def c243(x):\n    # number of odd elements\n    return [len([i for i in x if i % 2 == 1])]\n\n",
    "data": {
      "input": [
        62,
        54,
        83,
        25,
        55,
        28
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          51,
          88,
          12,
          70,
          64,
          83
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          46,
          82,
          51,
          74,
          55,
          55
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          11,
          7,
          11,
          41,
          62,
          98,
          84
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c188",
    "difficulty": 206,
    "function": "def c188(x):\n    # replace each element with 1 if it is divisible by 3, else replace with 0\n    return [1 if i % 3 == 0 else 0 for i in x]\n\n",
    "data": {
      "input": [
        80,
        31,
        72,
        8,
        89,
        76,
        12,
        4
      ],
      "output": [
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0
      ]
    },
    "demos": [
      {
        "input": [
          64,
          66,
          30,
          29,
          4,
          92,
          43,
          20
        ],
        "output": [
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          91,
          77,
          34,
          75,
          59,
          8
        ],
        "output": [
          0,
          0,
          0,
          1,
          0,
          0
        ]
      },
      {
        "input": [
          91,
          91,
          26,
          69,
          83,
          82,
          19,
          55
        ],
        "output": [
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      }
    ]
  },
  {
    "id": "c139",
    "difficulty": 207,
    "function": "def c139(x):\n    # remove all occurrences of the smallest element and the largest element\n    min_val = min(x)\n    max_val = max(x)\n    return [i for i in x if i != min_val and i != max_val]\n\n",
    "data": {
      "input": [
        2,
        5,
        3,
        3,
        9,
        1
      ],
      "output": [
        2,
        5,
        3,
        3
      ]
    },
    "demos": [
      {
        "input": [
          1,
          2,
          6,
          10,
          9,
          10
        ],
        "output": [
          2,
          6,
          9
        ]
      },
      {
        "input": [
          5,
          10,
          5,
          4,
          4,
          3
        ],
        "output": [
          5,
          5,
          4,
          4
        ]
      },
      {
        "input": [
          4,
          8,
          2,
          0,
          2
        ],
        "output": [
          4,
          2,
          2
        ]
      }
    ]
  },
  {
    "id": "c036",
    "difficulty": 208,
    "function": "def c036(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        3,
        8,
        9,
        9,
        1,
        1,
        9,
        3
      ],
      "output": [
        3,
        1,
        9,
        9,
        8,
        1,
        9,
        3
      ]
    },
    "demos": [
      {
        "input": [
          5,
          9,
          0,
          10,
          6,
          3
        ],
        "output": [
          5,
          6,
          0,
          10,
          9,
          3
        ]
      },
      {
        "input": [
          10,
          2,
          9,
          0,
          10,
          8
        ],
        "output": [
          10,
          2,
          0,
          9,
          10,
          8
        ]
      },
      {
        "input": [
          10,
          8,
          7,
          10,
          9
        ],
        "output": [
          10,
          9,
          7,
          10,
          8
        ]
      }
    ]
  },
  {
    "id": "c201",
    "difficulty": 209,
    "function": "def c201(x):\n    # elements > first element, followed by elements < first element\n    return [i for i in x if i > x[0]] + [i for i in x if i < x[0]]\n\n",
    "data": {
      "input": [
        41,
        18,
        7,
        98,
        63,
        70,
        15,
        82
      ],
      "output": [
        98,
        63,
        70,
        82,
        18,
        7,
        15
      ]
    },
    "demos": [
      {
        "input": [
          46,
          9,
          56,
          72,
          59,
          95,
          49
        ],
        "output": [
          56,
          72,
          59,
          95,
          49,
          9
        ]
      },
      {
        "input": [
          35,
          36,
          7,
          40,
          23,
          32,
          78
        ],
        "output": [
          36,
          40,
          78,
          7,
          23,
          32
        ]
      },
      {
        "input": [
          5,
          4,
          88,
          22,
          87
        ],
        "output": [
          88,
          22,
          87,
          4
        ]
      }
    ]
  },
  {
    "id": "c217",
    "difficulty": 210,
    "function": "def c217(x):\n    # elements in ascending order by ones digit\n    return sorted(x, key=lambda i: i % 10)\n\n",
    "data": {
      "input": [
        67,
        54,
        53,
        82,
        23
      ],
      "output": [
        82,
        53,
        23,
        54,
        67
      ]
    },
    "demos": [
      {
        "input": [
          65,
          18,
          99,
          18,
          76,
          44,
          21,
          28
        ],
        "output": [
          21,
          44,
          65,
          76,
          18,
          18,
          28,
          99
        ]
      },
      {
        "input": [
          28,
          98,
          32,
          31,
          82,
          2,
          74,
          54
        ],
        "output": [
          31,
          32,
          82,
          2,
          74,
          54,
          28,
          98
        ]
      },
      {
        "input": [
          17,
          59,
          17,
          0,
          70,
          72,
          1
        ],
        "output": [
          0,
          70,
          1,
          72,
          17,
          17,
          59
        ]
      }
    ]
  },
  {
    "id": "c005",
    "difficulty": 211,
    "function": "def c005(x):\n    # remove all but element N + 1, N is the first element\n    return [x[x[0]+1]]\n\n",
    "data": {
      "input": [
        0,
        16,
        46,
        77,
        34,
        93
      ],
      "output": [
        16
      ]
    },
    "demos": [
      {
        "input": [
          0,
          34,
          61,
          35,
          37,
          67,
          4,
          73
        ],
        "output": [
          34
        ]
      },
      {
        "input": [
          2,
          96,
          32,
          44,
          82
        ],
        "output": [
          44
        ]
      },
      {
        "input": [
          1,
          32,
          73,
          77,
          64
        ],
        "output": [
          73
        ]
      }
    ]
  },
  {
    "id": "c063",
    "difficulty": 213,
    "function": "def c063(x):\n    # remove the first N + 1 elements, N is the first element\n    return x[x[0]+1:]\n\n",
    "data": {
      "input": [
        0,
        3,
        3,
        6,
        0
      ],
      "output": [
        3,
        3,
        6,
        0
      ]
    },
    "demos": [
      {
        "input": [
          3,
          6,
          4,
          6,
          2,
          2,
          6
        ],
        "output": [
          2,
          2,
          6
        ]
      },
      {
        "input": [
          2,
          6,
          8,
          4,
          3
        ],
        "output": [
          4,
          3
        ]
      },
      {
        "input": [
          0,
          10,
          8,
          5,
          10,
          2,
          4
        ],
        "output": [
          10,
          8,
          5,
          10,
          2,
          4
        ]
      }
    ]
  },
  {
    "id": "c141",
    "difficulty": 214,
    "function": "def c141(x):\n    # replace element M + 2 with N, M = element 0, N = element 1; remove elements 0 and 1\n    x[x[0]+2] = x[1]\n    return x[2:]\n\n",
    "data": {
      "input": [
        0,
        2,
        3,
        0,
        9,
        3,
        2
      ],
      "output": [
        2,
        0,
        9,
        3,
        2
      ]
    },
    "demos": [
      {
        "input": [
          0,
          6,
          0,
          0,
          4,
          8
        ],
        "output": [
          6,
          0,
          4,
          8
        ]
      },
      {
        "input": [
          1,
          6,
          8,
          7,
          8
        ],
        "output": [
          8,
          6,
          8
        ]
      },
      {
        "input": [
          2,
          8,
          1,
          5,
          4,
          1,
          3
        ],
        "output": [
          1,
          5,
          8,
          1,
          3
        ]
      }
    ]
  },
  {
    "id": "c089",
    "difficulty": 215,
    "function": "def c089(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        96,
        35,
        28,
        10,
        1,
        57,
        64
      ],
      "output": [
        96,
        35,
        10,
        28,
        1,
        57,
        64
      ]
    },
    "demos": [
      {
        "input": [
          55,
          69,
          60,
          1,
          33,
          98,
          74
        ],
        "output": [
          55,
          69,
          1,
          60,
          33,
          98,
          74
        ]
      },
      {
        "input": [
          33,
          60,
          38,
          10,
          23,
          68,
          87,
          18
        ],
        "output": [
          33,
          60,
          10,
          38,
          23,
          68,
          87,
          18
        ]
      },
      {
        "input": [
          49,
          90,
          15,
          36,
          47,
          9,
          30
        ],
        "output": [
          49,
          47,
          15,
          36,
          90,
          9,
          30
        ]
      }
    ]
  },
  {
    "id": "c124",
    "difficulty": 216,
    "function": "def c124(x):\n    # element M, M = element N, N = element 0\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        3,
        9,
        8,
        3,
        7,
        7,
        5,
        3,
        4,
        4
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          5,
          8,
          7,
          7,
          5,
          6,
          9,
          3,
          1,
          5
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          2,
          6,
          5,
          8,
          4,
          3,
          8,
          8,
          5,
          3
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          5,
          4,
          2,
          0,
          2,
          4,
          4,
          1,
          3
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c216",
    "difficulty": 217,
    "function": "def c216(x):\n    # elements in ascending order by tens digit\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append([i, int(str(i)[-2])])\n        else:\n            res.append([i, 0])\n    return [i[0] for i in sorted(res, key=lambda i: i[1])]\n\n",
    "data": {
      "input": [
        16,
        24,
        22,
        82,
        58,
        55
      ],
      "output": [
        16,
        24,
        22,
        58,
        55,
        82
      ]
    },
    "demos": [
      {
        "input": [
          61,
          19,
          22,
          58,
          19,
          26
        ],
        "output": [
          19,
          19,
          22,
          26,
          58,
          61
        ]
      },
      {
        "input": [
          93,
          94,
          41,
          11,
          39,
          33,
          75,
          0
        ],
        "output": [
          0,
          11,
          39,
          33,
          41,
          75,
          93,
          94
        ]
      },
      {
        "input": [
          42,
          95,
          82,
          99,
          96
        ],
        "output": [
          42,
          82,
          95,
          99,
          96
        ]
      }
    ]
  },
  {
    "id": "c143",
    "difficulty": 218,
    "function": "def c143(x):\n    # replace every occurrence of the largest element with the smallest element\n    max_val = max(x)\n    min_val = min(x)\n    return [min_val if i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        2,
        4,
        7,
        4,
        9,
        1
      ],
      "output": [
        2,
        4,
        7,
        4,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          6,
          10,
          7,
          5,
          8,
          7
        ],
        "output": [
          6,
          5,
          7,
          5,
          8,
          7
        ]
      },
      {
        "input": [
          2,
          4,
          10,
          5,
          0,
          2,
          7
        ],
        "output": [
          2,
          4,
          0,
          5,
          0,
          2,
          7
        ]
      },
      {
        "input": [
          1,
          5,
          6,
          3,
          10,
          4,
          0,
          7
        ],
        "output": [
          1,
          5,
          6,
          3,
          0,
          4,
          0,
          7
        ]
      }
    ]
  },
  {
    "id": "c215",
    "difficulty": 219,
    "function": "def c215(x):\n    # elements in ascending order by hundreds digit\n    res = {}\n    for i in x:\n        if len(str(i)) > 2:\n            res[i] = int(str(i)[-3])\n        else:\n            res[i] = 0\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        801,
        510,
        52,
        886,
        866,
        721,
        738
      ],
      "output": [
        52,
        510,
        721,
        738,
        801,
        886,
        866
      ]
    },
    "demos": [
      {
        "input": [
          408,
          51,
          815,
          332,
          458
        ],
        "output": [
          51,
          332,
          408,
          458,
          815
        ]
      },
      {
        "input": [
          843,
          467,
          16,
          432,
          944,
          424,
          439,
          656
        ],
        "output": [
          16,
          467,
          432,
          424,
          439,
          656,
          843,
          944
        ]
      },
      {
        "input": [
          422,
          556,
          471,
          180,
          399,
          825,
          662,
          263
        ],
        "output": [
          180,
          263,
          399,
          422,
          471,
          556,
          662,
          825
        ]
      }
    ]
  },
  {
    "id": "c144",
    "difficulty": 220,
    "function": "def c144(x):\n    # replace every occurrence of the largest or smallest element with their absolute difference\n    max_val = max(x)\n    min_val = min(x)\n    return [abs(min_val - max_val) if i == min_val or i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        15,
        91,
        87,
        2,
        66
      ],
      "output": [
        15,
        89,
        87,
        89,
        66
      ]
    },
    "demos": [
      {
        "input": [
          39
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          2,
          12,
          75,
          45,
          63
        ],
        "output": [
          73,
          12,
          73,
          45,
          63
        ]
      },
      {
        "input": [
          30,
          85,
          94,
          58
        ],
        "output": [
          64,
          85,
          64,
          58
        ]
      }
    ]
  },
  {
    "id": "c128",
    "difficulty": 221,
    "function": "def c128(x):\n    # elements in ascending order after removing elements 0,1,and 4\n    x = x[2:4] + x[5:]\n    return sorted(x)\n\n",
    "data": {
      "input": [
        13,
        62,
        51,
        7,
        18,
        35
      ],
      "output": [
        7,
        35,
        51
      ]
    },
    "demos": [
      {
        "input": [
          19,
          65,
          61,
          12,
          86,
          98,
          5,
          43
        ],
        "output": [
          5,
          12,
          43,
          61,
          98
        ]
      },
      {
        "input": [
          87,
          71,
          93,
          57,
          46
        ],
        "output": [
          57,
          93
        ]
      },
      {
        "input": [
          31,
          15,
          3,
          7,
          95,
          19
        ],
        "output": [
          3,
          7,
          19
        ]
      }
    ]
  },
  {
    "id": "c208",
    "difficulty": 222,
    "function": "def c208(x):\n    # keep only last N elements, N is the last element\n    return x[-x[-1]:]\n\n",
    "data": {
      "input": [
        3,
        6,
        0,
        9,
        4,
        5,
        1
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          6,
          7,
          7,
          2,
          2,
          2,
          6,
          4
        ],
        "output": [
          2,
          2,
          6,
          4
        ]
      },
      {
        "input": [
          8,
          7,
          5,
          10,
          9,
          4,
          4
        ],
        "output": [
          10,
          9,
          4,
          4
        ]
      },
      {
        "input": [
          9,
          7,
          1,
          6,
          4,
          3,
          3,
          5
        ],
        "output": [
          6,
          4,
          3,
          3,
          5
        ]
      }
    ]
  },
  {
    "id": "c035",
    "difficulty": 223,
    "function": "def c035(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        10,
        1,
        7,
        7,
        3,
        2,
        0,
        10
      ],
      "output": [
        10,
        7,
        1,
        7,
        3,
        2,
        0,
        10
      ]
    },
    "demos": [
      {
        "input": [
          8,
          1,
          9,
          2,
          9,
          6,
          3
        ],
        "output": [
          8,
          9,
          1,
          2,
          9,
          6,
          3
        ]
      },
      {
        "input": [
          0,
          3,
          3,
          6,
          8,
          7
        ],
        "output": [
          6,
          3,
          3,
          0,
          8,
          7
        ]
      },
      {
        "input": [
          0,
          8,
          8,
          7,
          7
        ],
        "output": [
          7,
          8,
          8,
          0,
          7
        ]
      }
    ]
  },
  {
    "id": "c214",
    "difficulty": 224,
    "function": "def c214(x):\n    # remove elements 0 and N + 1, N is the first element\n    x = x[1:x[0]+1] + x[x[0]+2:]\n    return x\n\n",
    "data": {
      "input": [
        1,
        51,
        44,
        58,
        59,
        34
      ],
      "output": [
        51,
        58,
        59,
        34
      ]
    },
    "demos": [
      {
        "input": [
          1,
          46,
          66,
          37,
          29,
          3,
          24,
          62
        ],
        "output": [
          46,
          37,
          29,
          3,
          24,
          62
        ]
      },
      {
        "input": [
          4,
          5,
          74,
          89,
          27,
          1
        ],
        "output": [
          5,
          74,
          89,
          27
        ]
      },
      {
        "input": [
          2,
          25,
          67,
          96,
          70,
          37,
          89
        ],
        "output": [
          25,
          67,
          70,
          37,
          89
        ]
      }
    ]
  },
  {
    "id": "c130",
    "difficulty": 225,
    "function": "def c130(x):\n    # elements 1 through N + 1, N = element 0\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        6,
        63,
        12,
        18,
        71,
        80,
        9,
        59
      ],
      "output": [
        63,
        12,
        18,
        71,
        80,
        9
      ]
    },
    "demos": [
      {
        "input": [
          0,
          23,
          53,
          27,
          40
        ],
        "output": []
      },
      {
        "input": [
          2,
          33,
          20,
          98,
          8
        ],
        "output": [
          33,
          20
        ]
      },
      {
        "input": [
          7,
          9,
          84,
          7,
          36,
          16,
          35,
          15
        ],
        "output": [
          9,
          84,
          7,
          36,
          16,
          35,
          15
        ]
      }
    ]
  },
  {
    "id": "c159",
    "difficulty": 226,
    "function": "def c159(x):\n    # element N counts the number of occurrences of N, up to the largest element\n    out = []\n    for i, j in enumerate(range(max(x)+1)):\n        out.append(x.count(j))\n    return out\n\n",
    "data": {
      "input": [
        7,
        5,
        6,
        7,
        8,
        5,
        3,
        8
      ],
      "output": [
        0,
        0,
        0,
        1,
        0,
        2,
        1,
        2,
        2
      ]
    },
    "demos": [
      {
        "input": [
          9,
          1,
          1,
          9,
          0,
          5,
          7,
          8
        ],
        "output": [
          1,
          2,
          0,
          0,
          0,
          1,
          0,
          1,
          1,
          2
        ]
      },
      {
        "input": [
          8,
          0,
          3,
          7,
          7,
          3
        ],
        "output": [
          1,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          1
        ]
      },
      {
        "input": [
          9,
          6,
          8,
          5,
          9,
          2,
          1
        ],
        "output": [
          0,
          1,
          1,
          0,
          0,
          1,
          1,
          0,
          1,
          2
        ]
      }
    ]
  },
  {
    "id": "c205",
    "difficulty": 227,
    "function": "def c205(x):\n    # product of elements divisible by 4\n    res = 1\n    for i in x:\n        if i % 4 == 0:\n            res *= i\n    return [res]\n\n",
    "data": {
      "input": [
        1,
        12,
        19,
        15,
        20,
        15
      ],
      "output": [
        240
      ]
    },
    "demos": [
      {
        "input": [
          12,
          15,
          6,
          19,
          4,
          15
        ],
        "output": [
          48
        ]
      },
      {
        "input": [
          17,
          10,
          2,
          18,
          7,
          7
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          17,
          13,
          0,
          19,
          5,
          14
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c076",
    "difficulty": 228,
    "function": "def c076(x):\n    # the max, last, length, first, and min elements\n    return [max(x), x[-1], len(x), x[0], min(x)]\n\n",
    "data": {
      "input": [
        74,
        28,
        50,
        89,
        67,
        11
      ],
      "output": [
        89,
        11,
        6,
        74,
        11
      ]
    },
    "demos": [
      {
        "input": [
          45,
          82,
          30,
          74,
          20,
          77,
          7,
          75
        ],
        "output": [
          82,
          75,
          8,
          45,
          7
        ]
      },
      {
        "input": [
          1,
          6,
          18,
          77,
          20,
          7
        ],
        "output": [
          77,
          7,
          6,
          1,
          1
        ]
      },
      {
        "input": [
          0,
          12,
          60,
          16,
          88,
          5,
          26,
          61
        ],
        "output": [
          88,
          61,
          8,
          0,
          0
        ]
      }
    ]
  },
  {
    "id": "c250",
    "difficulty": 229,
    "function": "def c250(x):\n    # use 0s to delimit sublists, concatenate reversed sublists\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            res += sublist[::-1]\n            sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res += sublist[::-1]\n    return res\n\n",
    "data": {
      "input": [
        0,
        29,
        61,
        41,
        0,
        59,
        38,
        0,
        64
      ],
      "output": [
        41,
        61,
        29,
        38,
        59,
        64
      ]
    },
    "demos": [
      {
        "input": [
          31,
          17,
          32,
          62,
          0,
          44,
          80,
          93
        ],
        "output": [
          62,
          32,
          17,
          31,
          93,
          80,
          44
        ]
      },
      {
        "input": [
          64,
          0,
          0,
          1,
          56,
          65,
          75,
          0,
          17,
          60,
          31
        ],
        "output": [
          64,
          75,
          65,
          56,
          1,
          31,
          60,
          17
        ]
      },
      {
        "input": [
          72,
          42,
          26,
          14,
          57,
          16,
          0,
          35,
          8
        ],
        "output": [
          16,
          57,
          14,
          26,
          42,
          72,
          8,
          35
        ]
      }
    ]
  },
  {
    "id": "c186",
    "difficulty": 230,
    "function": "def c186(x):\n    # keep only elements greater than element 0\n    return [i for i in x if i > x[0]]\n\n",
    "data": {
      "input": [
        36,
        31,
        29,
        78,
        87,
        62,
        12
      ],
      "output": [
        78,
        87,
        62
      ]
    },
    "demos": [
      {
        "input": [
          5,
          96,
          37,
          39,
          32,
          66,
          34
        ],
        "output": [
          96,
          37,
          39,
          32,
          66,
          34
        ]
      },
      {
        "input": [
          57,
          5,
          69,
          31,
          69,
          81,
          52,
          26
        ],
        "output": [
          69,
          69,
          81
        ]
      },
      {
        "input": [
          57,
          13,
          65,
          68,
          40,
          24,
          14
        ],
        "output": [
          65,
          68
        ]
      }
    ]
  },
  {
    "id": "c242",
    "difficulty": 231,
    "function": "def c242(x):\n    # take the largest unique element, append the second largest unique element, prepend the third largest unique element, append the fourth largest unique element, and so on\n    unique = sorted(set(x), reverse=True)\n    res = [max(unique)]\n    unique.remove(max(unique))\n    for i in range(len(unique)):\n        if i % 2 == 0:\n            res.append(unique[i])\n        else:\n            res.insert(0, unique[i])\n    return res\n\n",
    "data": {
      "input": [
        6,
        7,
        6,
        3,
        9,
        6,
        0
      ],
      "output": [
        0,
        6,
        9,
        7,
        3
      ]
    },
    "demos": [
      {
        "input": [
          6,
          7,
          6,
          9,
          4,
          2
        ],
        "output": [
          2,
          6,
          9,
          7,
          4
        ]
      },
      {
        "input": [
          5,
          5,
          5,
          1,
          4,
          1,
          3,
          7
        ],
        "output": [
          1,
          4,
          7,
          5,
          3
        ]
      },
      {
        "input": [
          6,
          7,
          5,
          8,
          9,
          4,
          7
        ],
        "output": [
          5,
          7,
          9,
          8,
          6,
          4
        ]
      }
    ]
  },
  {
    "id": "c160",
    "difficulty": 232,
    "function": "def c160(x):\n    # replace each element with 99 - element\n    return [99-i for i in x]\n\n",
    "data": {
      "input": [
        66,
        16,
        30,
        15,
        42,
        72
      ],
      "output": [
        33,
        83,
        69,
        84,
        57,
        27
      ]
    },
    "demos": [
      {
        "input": [
          53,
          86,
          1,
          60,
          53,
          26
        ],
        "output": [
          46,
          13,
          98,
          39,
          46,
          73
        ]
      },
      {
        "input": [
          97,
          94,
          36,
          36,
          50,
          59,
          16,
          36
        ],
        "output": [
          2,
          5,
          63,
          63,
          49,
          40,
          83,
          63
        ]
      },
      {
        "input": [
          12,
          53,
          42,
          6,
          3,
          13,
          45
        ],
        "output": [
          87,
          46,
          57,
          93,
          96,
          86,
          54
        ]
      }
    ]
  },
  {
    "id": "c167",
    "difficulty": 233,
    "function": "def c167(x):\n    # keep only elements divisible by 3\n    return [i for i in x if i % 3 == 0]\n\n",
    "data": {
      "input": [
        30,
        56,
        14,
        78,
        21,
        90,
        29
      ],
      "output": [
        30,
        78,
        21,
        90
      ]
    },
    "demos": [
      {
        "input": [
          25,
          35,
          54,
          37,
          75,
          7
        ],
        "output": [
          54,
          75
        ]
      },
      {
        "input": [
          35,
          84,
          38,
          26,
          87,
          55,
          39
        ],
        "output": [
          84,
          87,
          39
        ]
      },
      {
        "input": [
          8,
          66,
          5,
          79,
          52,
          35,
          46
        ],
        "output": [
          66
        ]
      }
    ]
  },
  {
    "id": "c202",
    "difficulty": 234,
    "function": "def c202(x):\n    # the indices of every even number\n    return [i for i, j in enumerate(x) if j % 2 == 0]\n\n\n",
    "data": {
      "input": [
        44,
        15,
        21,
        4,
        36,
        33
      ],
      "output": [
        0,
        3,
        4
      ]
    },
    "demos": [
      {
        "input": [
          28,
          57,
          64,
          9,
          80,
          20
        ],
        "output": [
          0,
          2,
          4,
          5
        ]
      },
      {
        "input": [
          75,
          72,
          36,
          97,
          9,
          82
        ],
        "output": [
          1,
          2,
          5
        ]
      },
      {
        "input": [
          74,
          41,
          70,
          53,
          19,
          57,
          78,
          86
        ],
        "output": [
          0,
          2,
          6,
          7
        ]
      }
    ]
  },
  {
    "id": "c129",
    "difficulty": 235,
    "function": "def c129(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        2,
        1,
        2,
        33,
        38,
        45,
        26
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          4,
          4,
          67,
          98,
          84,
          76,
          7,
          97,
          23,
          71
        ],
        "output": []
      },
      {
        "input": [
          6,
          7,
          66,
          74,
          24,
          90,
          25,
          12,
          39
        ],
        "output": [
          39
        ]
      },
      {
        "input": [
          2,
          3,
          95,
          22,
          86,
          20,
          68,
          55,
          12
        ],
        "output": [
          86
        ]
      }
    ]
  },
  {
    "id": "c221",
    "difficulty": 236,
    "function": "def c221(x):\n    # sum of even elements\n    return [sum(i for i in x if i % 2 == 0)]\n\n",
    "data": {
      "input": [
        34,
        36,
        3,
        18,
        15,
        42
      ],
      "output": [
        130
      ]
    },
    "demos": [
      {
        "input": [
          31,
          37,
          5,
          5,
          38,
          42,
          49
        ],
        "output": [
          80
        ]
      },
      {
        "input": [
          21,
          36,
          11,
          30,
          0,
          43,
          27,
          4
        ],
        "output": [
          70
        ]
      },
      {
        "input": [
          39,
          2,
          48,
          9,
          5,
          31,
          45
        ],
        "output": [
          50
        ]
      }
    ]
  },
  {
    "id": "c131",
    "difficulty": 237,
    "function": "def c131(x):\n    # keep only elements whose tens digit is even\n    res = []\n    for i in x:\n        if len(str(i)) < 2:\n            res.append(i)\n        elif int(str(i)[-2]) % 2 == 0:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        29,
        7,
        3,
        75,
        40,
        38,
        27,
        29
      ],
      "output": [
        29,
        7,
        3,
        40,
        27,
        29
      ]
    },
    "demos": [
      {
        "input": [
          83,
          79,
          29,
          64,
          43,
          2,
          82,
          39
        ],
        "output": [
          83,
          29,
          64,
          43,
          2,
          82
        ]
      },
      {
        "input": [
          66,
          3,
          40,
          52,
          45,
          83
        ],
        "output": [
          66,
          3,
          40,
          45,
          83
        ]
      },
      {
        "input": [
          28,
          69,
          54,
          46,
          48,
          82,
          55
        ],
        "output": [
          28,
          69,
          46,
          48,
          82
        ]
      }
    ]
  },
  {
    "id": "c180",
    "difficulty": 238,
    "function": "def c180(x):\n    # take the smallest element, append the second smallest element, prepend the third smallest element, append the fourth smallest element, and so on\n    sorted_x = sorted(x)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        35,
        63,
        85,
        81,
        33,
        91
      ],
      "output": [
        85,
        63,
        33,
        35,
        81,
        91
      ]
    },
    "demos": [
      {
        "input": [
          81,
          83,
          6,
          3,
          52,
          61,
          11
        ],
        "output": [
          83,
          61,
          11,
          3,
          6,
          52,
          81
        ]
      },
      {
        "input": [
          8,
          52,
          42,
          15,
          94,
          95,
          41
        ],
        "output": [
          95,
          52,
          41,
          8,
          15,
          42,
          94
        ]
      },
      {
        "input": [
          29,
          21,
          70,
          48,
          90,
          5
        ],
        "output": [
          70,
          29,
          5,
          21,
          48,
          90
        ]
      }
    ]
  },
  {
    "id": "c015",
    "difficulty": 239,
    "function": "def c015(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        1,
        1,
        0,
        11,
        10,
        4
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          4,
          5,
          9,
          15,
          2,
          0,
          12,
          5,
          10,
          11
        ],
        "output": [
          12
        ]
      },
      {
        "input": [
          3,
          5,
          13,
          3,
          9,
          8,
          15,
          6
        ],
        "output": [
          8,
          15
        ]
      },
      {
        "input": [
          0,
          3,
          3,
          1,
          8,
          10
        ],
        "output": [
          3,
          1,
          8
        ]
      }
    ]
  },
  {
    "id": "c179",
    "difficulty": 240,
    "function": "def c179(x):\n    # take the largest element, append the second largest element, prepend the third largest element, append the fourth largest element, and so on\n    sorted_x = sorted(x, reverse=True)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        74,
        28,
        70,
        45,
        37,
        95,
        22
      ],
      "output": [
        22,
        37,
        70,
        95,
        74,
        45,
        28
      ]
    },
    "demos": [
      {
        "input": [
          31,
          48,
          44,
          53,
          5,
          70,
          59
        ],
        "output": [
          5,
          44,
          53,
          70,
          59,
          48,
          31
        ]
      },
      {
        "input": [
          9,
          86,
          49,
          10,
          22,
          17,
          66,
          19
        ],
        "output": [
          10,
          19,
          49,
          86,
          66,
          22,
          17,
          9
        ]
      },
      {
        "input": [
          35,
          73,
          38,
          59,
          86,
          75,
          91
        ],
        "output": [
          35,
          59,
          75,
          91,
          86,
          73,
          38
        ]
      }
    ]
  },
  {
    "id": "c226",
    "difficulty": 241,
    "function": "def c226(x):\n    # remove first M and last N elements, M is the first element, N is the last element\n    if x[-1] == 0:\n        return x[x[0]:]\n    return x[x[0]:-x[-1]]\n\n",
    "data": {
      "input": [
        5,
        12,
        7,
        0,
        15,
        9,
        15,
        1,
        10,
        1
      ],
      "output": [
        9,
        15,
        1,
        10
      ]
    },
    "demos": [
      {
        "input": [
          5,
          15,
          0,
          0,
          11,
          2,
          0
        ],
        "output": [
          2,
          0
        ]
      },
      {
        "input": [
          2,
          6,
          5,
          12,
          9,
          3
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          0,
          11,
          4,
          11,
          14,
          14,
          8,
          4
        ],
        "output": [
          0,
          11,
          4,
          11
        ]
      }
    ]
  },
  {
    "id": "c134",
    "difficulty": 242,
    "function": "def c134(x):\n    # remove elements M through N, M is the first element, N is the second element\n    return x[:x[0]] + x[x[1]+1:]\n\n",
    "data": {
      "input": [
        3,
        3,
        7,
        11,
        3,
        3
      ],
      "output": [
        3,
        3,
        7,
        3,
        3
      ]
    },
    "demos": [
      {
        "input": [
          3,
          7,
          6,
          11,
          7,
          15,
          4,
          1
        ],
        "output": [
          3,
          7,
          6
        ]
      },
      {
        "input": [
          0,
          6,
          15,
          2,
          14,
          6,
          15,
          12
        ],
        "output": [
          12
        ]
      },
      {
        "input": [
          3,
          7,
          6,
          0,
          13,
          9,
          3,
          12
        ],
        "output": [
          3,
          7,
          6
        ]
      }
    ]
  },
  {
    "id": "c164",
    "difficulty": 243,
    "function": "def c164(x):\n    # replace each element M with M // 4 + 5\n    return [i//4+5 for i in x]\n\n",
    "data": {
      "input": [
        57,
        10,
        57,
        73,
        81,
        25
      ],
      "output": [
        19,
        7,
        19,
        23,
        25,
        11
      ]
    },
    "demos": [
      {
        "input": [
          75,
          27,
          67,
          33,
          57,
          45,
          20,
          55
        ],
        "output": [
          23,
          11,
          21,
          13,
          19,
          16,
          10,
          18
        ]
      },
      {
        "input": [
          88,
          26,
          14,
          69,
          12,
          85
        ],
        "output": [
          27,
          11,
          8,
          22,
          8,
          26
        ]
      },
      {
        "input": [
          3,
          14,
          79,
          13,
          29,
          71
        ],
        "output": [
          5,
          8,
          24,
          8,
          12,
          22
        ]
      }
    ]
  },
  {
    "id": "c178",
    "difficulty": 244,
    "function": "def c178(x):\n    # keep only elements followed by an even number\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] % 2 == 0:\n            res.append(x[i])\n    return res \n\n",
    "data": {
      "input": [
        57,
        86,
        17,
        52,
        93,
        86,
        32,
        78
      ],
      "output": [
        57,
        17,
        93,
        86,
        32
      ]
    },
    "demos": [
      {
        "input": [
          86,
          48,
          54,
          69,
          5,
          79
        ],
        "output": [
          86,
          48
        ]
      },
      {
        "input": [
          86,
          19,
          64,
          67,
          94,
          77,
          93,
          23
        ],
        "output": [
          19,
          67
        ]
      },
      {
        "input": [
          91,
          25,
          18,
          23,
          48,
          61,
          26
        ],
        "output": [
          25,
          23,
          61
        ]
      }
    ]
  },
  {
    "id": "c113",
    "difficulty": 245,
    "function": "def c113(x):\n    # keep only elements whose ones digit is greater than the first element\n    res = []\n    for i in x:\n        if i % 10 > x[0]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        1,
        2,
        44,
        30,
        14,
        45,
        36,
        2
      ],
      "output": [
        2,
        44,
        14,
        45,
        36,
        2
      ]
    },
    "demos": [
      {
        "input": [
          0,
          38,
          42,
          43,
          13,
          27,
          25
        ],
        "output": [
          38,
          42,
          43,
          13,
          27,
          25
        ]
      },
      {
        "input": [
          8,
          27,
          39,
          9,
          10,
          39,
          13,
          18
        ],
        "output": [
          39,
          9,
          39
        ]
      },
      {
        "input": [
          0,
          4,
          31,
          28,
          10,
          39,
          18,
          34
        ],
        "output": [
          4,
          31,
          28,
          39,
          18,
          34
        ]
      }
    ]
  },
  {
    "id": "c206",
    "difficulty": 246,
    "function": "def c206(x):\n    # keep only elements whose value is between the first and second element\n    return [i for i in x if x[0] < i < x[1]]\n\n",
    "data": {
      "input": [
        14,
        49,
        35,
        16,
        41,
        25,
        34,
        12
      ],
      "output": [
        35,
        16,
        41,
        25,
        34
      ]
    },
    "demos": [
      {
        "input": [
          0,
          26,
          26,
          40,
          11,
          2,
          1,
          31
        ],
        "output": [
          11,
          2,
          1
        ]
      },
      {
        "input": [
          7,
          17,
          45,
          30,
          2,
          18,
          8
        ],
        "output": [
          8
        ]
      },
      {
        "input": [
          5,
          24,
          3,
          39,
          42,
          18,
          13,
          16,
          12,
          2
        ],
        "output": [
          18,
          13,
          16,
          12
        ]
      }
    ]
  },
  {
    "id": "c210",
    "difficulty": 247,
    "function": "def c210(x):\n    # unique elements with last element inserted at index M, where M is the first element\n    unique = []\n    for i in x:\n        if i not in unique:\n            unique.append(i)\n    unique.insert(x[0], x[-1])\n    return unique\n\n",
    "data": {
      "input": [
        4,
        3,
        8,
        3,
        9,
        8,
        6
      ],
      "output": [
        4,
        3,
        8,
        9,
        6,
        6
      ]
    },
    "demos": [
      {
        "input": [
          0,
          8,
          7,
          4,
          5,
          5,
          5
        ],
        "output": [
          5,
          0,
          8,
          7,
          4,
          5
        ]
      },
      {
        "input": [
          1,
          0,
          7,
          0,
          1,
          3,
          0
        ],
        "output": [
          1,
          0,
          0,
          7,
          3
        ]
      },
      {
        "input": [
          2,
          5,
          1,
          4,
          7,
          7
        ],
        "output": [
          2,
          5,
          7,
          1,
          4,
          7
        ]
      }
    ]
  },
  {
    "id": "c158",
    "difficulty": 248,
    "function": "def c158(x):\n    # replace each element with 1 if element N equals N, else 0\n    res = []\n    for i, j in enumerate(x):\n        if i == j:\n            res.append(1)\n        else:\n            res.append(0)\n    return res\n\n",
    "data": {
      "input": [
        6,
        1,
        2,
        3,
        4,
        5,
        6,
        0,
        8,
        7
      ],
      "output": [
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        1,
        0
      ]
    },
    "demos": [
      {
        "input": [
          5,
          5,
          7,
          3,
          4,
          3
        ],
        "output": [
          0,
          0,
          0,
          1,
          1,
          0
        ]
      },
      {
        "input": [
          8,
          1,
          1,
          3,
          4,
          2,
          6,
          7
        ],
        "output": [
          0,
          1,
          0,
          1,
          1,
          0,
          1,
          1
        ]
      },
      {
        "input": [
          0,
          1,
          6,
          3,
          6,
          5,
          6,
          7,
          8,
          9
        ],
        "output": [
          1,
          1,
          0,
          1,
          0,
          1,
          1,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c183",
    "difficulty": 249,
    "function": "def c183(x):\n    # list the index of second elements and following equal to first element\n    res = []\n    for i in range(1, len(x)):\n        if x[i] == x[0]:\n            res.append(i)\n    return res",
    "data": {
      "input": [
        13,
        3,
        10,
        13,
        15,
        3,
        11,
        13,
        0
      ],
      "output": [
        3,
        7
      ]
    },
    "demos": [
      {
        "input": [
          8,
          8,
          13,
          10,
          2,
          15
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          7,
          3,
          3,
          7,
          7,
          5,
          6,
          6,
          6,
          14
        ],
        "output": [
          3,
          4
        ]
      },
      {
        "input": [
          3,
          7,
          2,
          4,
          15,
          4,
          1
        ],
        "output": []
      }
    ]
  },
  {
    "id": "c014",
    "difficulty": 157,
    "function": "def c014(x):\n    # remove all but elements 2 through 5\n    return x[2:5]\n\n",
    "data": {
      "input": [
        27,
        38,
        37,
        92,
        77,
        95,
        16
      ],
      "output": [
        37,
        92,
        77
      ]
    },
    "demos": [
      {
        "input": [
          42,
          76,
          32,
          90,
          96,
          7
        ],
        "output": [
          32,
          90,
          96
        ]
      },
      {
        "input": [
          88,
          11,
          12,
          78,
          84,
          91,
          67
        ],
        "output": [
          12,
          78,
          84
        ]
      },
      {
        "input": [
          60,
          60,
          94,
          10,
          35,
          14
        ],
        "output": [
          94,
          10,
          35
        ]
      }
    ]
  },
  {
    "id": "c098",
    "difficulty": 86,
    "function": "def c098(x):\n    # add the index to each element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        7,
        3,
        5,
        0,
        6,
        9
      ],
      "output": [
        7,
        4,
        7,
        3,
        10,
        14
      ]
    },
    "demos": [
      {
        "input": [
          0,
          9,
          3,
          4,
          6,
          8,
          5
        ],
        "output": [
          0,
          10,
          5,
          7,
          10,
          13,
          11
        ]
      },
      {
        "input": [
          1,
          1,
          9,
          1,
          8,
          7
        ],
        "output": [
          1,
          2,
          11,
          4,
          12,
          12
        ]
      },
      {
        "input": [
          4,
          4,
          4,
          6,
          1,
          1,
          5
        ],
        "output": [
          4,
          5,
          6,
          9,
          5,
          6,
          11
        ]
      }
    ]
  },
  {
    "id": "c209",
    "difficulty": 212,
    "function": "def c209(x):\n    # elements in ascending order, insert sum of smallest and largest element at index 3\n    x = sorted(x)\n    x.insert(3, x[0] + x[-1])\n    return x\n\n",
    "data": {
      "input": [
        13,
        3,
        16,
        14,
        20,
        25
      ],
      "output": [
        3,
        13,
        14,
        28,
        16,
        20,
        25
      ]
    },
    "demos": [
      {
        "input": [
          11,
          19,
          15,
          29,
          6,
          20,
          1,
          29
        ],
        "output": [
          1,
          6,
          11,
          30,
          15,
          19,
          20,
          29,
          29
        ]
      },
      {
        "input": [
          22,
          7,
          17,
          16,
          14
        ],
        "output": [
          7,
          14,
          16,
          29,
          17,
          22
        ]
      },
      {
        "input": [
          28,
          0,
          22,
          11,
          19
        ],
        "output": [
          0,
          11,
          19,
          28,
          22,
          28
        ]
      }
    ]
  },
  {
    "id": "c211",
    "difficulty": 104,
    "function": "def c211(x):\n    # reverse input, insert fouth element and fifth element so they are fourth and third from the end respectively\n    x = x[::-1]\n    x.insert(-3, x[3])\n    x.insert(-4, x[4])\n    return x\n\n",
    "data": {
      "input": [
        39,
        5,
        5,
        60,
        85,
        70,
        86
      ],
      "output": [
        86,
        70,
        85,
        60,
        60,
        60,
        5,
        5,
        39
      ]
    },
    "demos": [
      {
        "input": [
          81,
          43,
          23,
          99,
          24,
          10
        ],
        "output": [
          10,
          24,
          99,
          23,
          23,
          23,
          43,
          81
        ]
      },
      {
        "input": [
          4,
          18,
          60,
          48,
          48,
          39,
          83,
          6
        ],
        "output": [
          6,
          83,
          39,
          48,
          48,
          48,
          48,
          60,
          18,
          4
        ]
      },
      {
        "input": [
          21,
          33,
          86,
          9,
          48,
          89,
          72
        ],
        "output": [
          72,
          89,
          48,
          9,
          9,
          9,
          86,
          33,
          21
        ]
      }
    ]
  },
  {
    "id": "c102",
    "difficulty": 0,
    "function": "def c102(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        64,
        47,
        44,
        37,
        37,
        91
      ],
      "output": [
        64,
        47,
        44,
        37,
        37,
        91
      ]
    },
    "demos": [
      {
        "input": [
          22,
          61,
          18,
          89,
          76
        ],
        "output": [
          22,
          61,
          18,
          89,
          76
        ]
      },
      {
        "input": [
          8,
          60,
          62,
          53,
          40,
          9,
          57,
          12
        ],
        "output": [
          8,
          60,
          62,
          53,
          40,
          9,
          57,
          12
        ]
      },
      {
        "input": [
          65,
          38,
          88,
          20,
          15,
          90,
          85
        ],
        "output": [
          65,
          38,
          88,
          20,
          15,
          90,
          85
        ]
      }
    ]
  },
  {
    "id": "c170",
    "difficulty": 1,
    "function": "def c170(x):\n    # remove all but the first and last element\n    return [x[0], x[-1]]\n    \n",
    "data": {
      "input": [
        39,
        59,
        17,
        57,
        32
      ],
      "output": [
        39,
        32
      ]
    },
    "demos": [
      {
        "input": [
          1,
          7,
          49,
          86,
          62
        ],
        "output": [
          1,
          62
        ]
      },
      {
        "input": [
          11,
          67,
          55,
          85,
          6,
          17,
          71
        ],
        "output": [
          11,
          71
        ]
      },
      {
        "input": [
          57,
          13,
          29,
          16,
          93,
          76,
          24,
          93
        ],
        "output": [
          57,
          93
        ]
      }
    ]
  },
  {
    "id": "c121",
    "difficulty": 2,
    "function": "def c121(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        58,
        23,
        61
      ],
      "output": [
        61
      ]
    },
    "demos": [
      {
        "input": [
          50,
          64,
          91,
          69
        ],
        "output": [
          69
        ]
      },
      {
        "input": [
          53,
          15,
          27,
          39,
          61,
          69
        ],
        "output": [
          69
        ]
      },
      {
        "input": [
          5,
          63,
          22
        ],
        "output": [
          22
        ]
      }
    ]
  },
  {
    "id": "c045",
    "difficulty": 3,
    "function": "def c045(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        17,
        28,
        71,
        19,
        33,
        50
      ],
      "output": [
        17,
        28,
        71,
        19,
        33,
        50
      ]
    },
    "demos": [
      {
        "input": [
          47,
          51,
          74,
          95
        ],
        "output": [
          47,
          51,
          74,
          95
        ]
      },
      {
        "input": [
          71,
          57,
          40
        ],
        "output": [
          71,
          57,
          40
        ]
      },
      {
        "input": [
          21,
          87,
          87,
          10,
          71
        ],
        "output": [
          21,
          87,
          87,
          10,
          71
        ]
      }
    ]
  },
  {
    "id": "c072",
    "difficulty": 4,
    "function": "def c072(x):\n    # repeat every element twice\n    return [i for i in x for _ in (0, 1)]\n\n",
    "data": {
      "input": [
        55,
        6,
        85,
        93,
        86,
        26,
        86
      ],
      "output": [
        55,
        55,
        6,
        6,
        85,
        85,
        93,
        93,
        86,
        86,
        26,
        26,
        86,
        86
      ]
    },
    "demos": [
      {
        "input": [
          36,
          66,
          86,
          83,
          11
        ],
        "output": [
          36,
          36,
          66,
          66,
          86,
          86,
          83,
          83,
          11,
          11
        ]
      },
      {
        "input": [
          21,
          61,
          62,
          89,
          69
        ],
        "output": [
          21,
          21,
          61,
          61,
          62,
          62,
          89,
          89,
          69,
          69
        ]
      },
      {
        "input": [
          39,
          43,
          73,
          58,
          52,
          28
        ],
        "output": [
          39,
          39,
          43,
          43,
          73,
          73,
          58,
          58,
          52,
          52,
          28,
          28
        ]
      }
    ]
  },
  {
    "id": "c151",
    "difficulty": 5,
    "function": "def c151(x):\n    # repeat each element, M, M times, in order of appearance\n    return [i for i in x for _ in range(i)]\n\n",
    "data": {
      "input": [
        0,
        4,
        5,
        2
      ],
      "output": [
        4,
        4,
        4,
        4,
        5,
        5,
        5,
        5,
        5,
        2,
        2
      ]
    },
    "demos": [
      {
        "input": [
          1,
          5,
          0
        ],
        "output": [
          1,
          5,
          5,
          5,
          5,
          5
        ]
      },
      {
        "input": [
          1,
          3,
          1,
          3,
          3,
          5
        ],
        "output": [
          1,
          3,
          3,
          3,
          1,
          3,
          3,
          3,
          3,
          3,
          3,
          5,
          5,
          5,
          5,
          5
        ]
      },
      {
        "input": [
          3,
          5,
          1,
          0
        ],
        "output": [
          3,
          3,
          3,
          5,
          5,
          5,
          5,
          5,
          1
        ]
      }
    ]
  },
  {
    "id": "c080",
    "difficulty": 6,
    "function": "def c080(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        25,
        89,
        33,
        98
      ],
      "output": [
        98,
        33,
        89,
        25
      ]
    },
    "demos": [
      {
        "input": [
          62,
          25,
          64,
          89,
          81
        ],
        "output": [
          81,
          89,
          64,
          25,
          62
        ]
      },
      {
        "input": [
          11,
          73,
          39
        ],
        "output": [
          39,
          73,
          11
        ]
      },
      {
        "input": [
          44,
          46,
          50,
          13,
          69
        ],
        "output": [
          69,
          13,
          50,
          46,
          44
        ]
      }
    ]
  },
  {
    "id": "c061",
    "difficulty": 7,
    "function": "def c061(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        91,
        5,
        3
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          10,
          40,
          81,
          90,
          80,
          66
        ],
        "output": [
          66
        ]
      },
      {
        "input": [
          75,
          75,
          49
        ],
        "output": [
          49
        ]
      },
      {
        "input": [
          72,
          33,
          81,
          95,
          83,
          53
        ],
        "output": [
          53
        ]
      }
    ]
  },
  {
    "id": "c189",
    "difficulty": 8,
    "function": "def c189(x):\n    # count from the smallest element to the largest element\n    return list(range(min(x), max(x)+1))\n\n",
    "data": {
      "input": [
        33,
        27,
        31
      ],
      "output": [
        27,
        28,
        29,
        30,
        31,
        32,
        33
      ]
    },
    "demos": [
      {
        "input": [
          52,
          51,
          53
        ],
        "output": [
          51,
          52,
          53
        ]
      },
      {
        "input": [
          78,
          76,
          73
        ],
        "output": [
          73,
          74,
          75,
          76,
          77,
          78
        ]
      },
      {
        "input": [
          26,
          19,
          23
        ],
        "output": [
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26
        ]
      }
    ]
  },
  {
    "id": "c050",
    "difficulty": 9,
    "function": "def c050(x):\n    # prepend first element to the list\n    return [x[0]] + x\n\n",
    "data": {
      "input": [
        27,
        91,
        85,
        97,
        33,
        47
      ],
      "output": [
        27,
        27,
        91,
        85,
        97,
        33,
        47
      ]
    },
    "demos": [
      {
        "input": [
          16,
          12,
          86,
          23,
          43,
          77
        ],
        "output": [
          16,
          16,
          12,
          86,
          23,
          43,
          77
        ]
      },
      {
        "input": [
          7,
          88,
          97,
          17
        ],
        "output": [
          7,
          7,
          88,
          97,
          17
        ]
      },
      {
        "input": [
          8,
          75,
          63,
          61,
          15,
          38,
          45
        ],
        "output": [
          8,
          8,
          75,
          63,
          61,
          15,
          38,
          45
        ]
      }
    ]
  },
  {
    "id": "c048",
    "difficulty": 10,
    "function": "def c048(x):\n    # remove all but the first element\n    return [x[0]]\n    \n",
    "data": {
      "input": [
        67,
        91,
        43,
        90,
        39,
        78
      ],
      "output": [
        67
      ]
    },
    "demos": [
      {
        "input": [
          44,
          22,
          69,
          59
        ],
        "output": [
          44
        ]
      },
      {
        "input": [
          27,
          98,
          67
        ],
        "output": [
          27
        ]
      },
      {
        "input": [
          7,
          76,
          37,
          96,
          44,
          7
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c147",
    "difficulty": 11,
    "function": "def c147(x):\n    # each element, followed by its index\n    res = []\n    for i, v in enumerate(x):\n        res.append(v)\n        res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        83,
        57,
        25
      ],
      "output": [
        83,
        0,
        57,
        1,
        25,
        2
      ]
    },
    "demos": [
      {
        "input": [
          18,
          35,
          91,
          70,
          85,
          70,
          27
        ],
        "output": [
          18,
          0,
          35,
          1,
          91,
          2,
          70,
          3,
          85,
          4,
          70,
          5,
          27,
          6
        ]
      },
      {
        "input": [
          65,
          12,
          27,
          67,
          17,
          39
        ],
        "output": [
          65,
          0,
          12,
          1,
          27,
          2,
          67,
          3,
          17,
          4,
          39,
          5
        ]
      },
      {
        "input": [
          34,
          54,
          50,
          95,
          98,
          74,
          62
        ],
        "output": [
          34,
          0,
          54,
          1,
          50,
          2,
          95,
          3,
          98,
          4,
          74,
          5,
          62,
          6
        ]
      }
    ]
  },
  {
    "id": "c120",
    "difficulty": 12,
    "function": "def c120(x):\n    # remove all but the first element\n    return [x[0]]\n\n",
    "data": {
      "input": [
        18,
        96,
        74,
        50,
        15,
        25
      ],
      "output": [
        18
      ]
    },
    "demos": [
      {
        "input": [
          76,
          35,
          87,
          26,
          28,
          22
        ],
        "output": [
          76
        ]
      },
      {
        "input": [
          64,
          81,
          30,
          56,
          61
        ],
        "output": [
          64
        ]
      },
      {
        "input": [
          53,
          59,
          59,
          17
        ],
        "output": [
          53
        ]
      }
    ]
  },
  {
    "id": "c127",
    "difficulty": 13,
    "function": "def c127(x):\n    # remove last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        72,
        45,
        11,
        0
      ],
      "output": [
        72,
        45,
        11
      ]
    },
    "demos": [
      {
        "input": [
          98,
          57,
          6,
          80,
          42
        ],
        "output": [
          98,
          57,
          6,
          80
        ]
      },
      {
        "input": [
          93,
          68,
          15
        ],
        "output": [
          93,
          68
        ]
      },
      {
        "input": [
          72,
          77,
          53,
          64,
          66
        ],
        "output": [
          72,
          77,
          53,
          64
        ]
      }
    ]
  },
  {
    "id": "c100",
    "difficulty": 14,
    "function": "def c100(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        0,
        66,
        92
      ],
      "output": [
        92,
        66,
        0
      ]
    },
    "demos": [
      {
        "input": [
          75,
          40,
          51
        ],
        "output": [
          51,
          40,
          75
        ]
      },
      {
        "input": [
          44,
          72,
          23,
          14
        ],
        "output": [
          14,
          23,
          72,
          44
        ]
      },
      {
        "input": [
          33,
          82,
          73
        ],
        "output": [
          73,
          82,
          33
        ]
      }
    ]
  },
  {
    "id": "c145",
    "difficulty": 15,
    "function": "def c145(x):\n    # replace every element with the first element\n    return [x[0]] * len(x)\n\n",
    "data": {
      "input": [
        98,
        6,
        92,
        41,
        90,
        45,
        43
      ],
      "output": [
        98,
        98,
        98,
        98,
        98,
        98,
        98
      ]
    },
    "demos": [
      {
        "input": [
          41,
          97,
          22,
          95,
          46,
          47
        ],
        "output": [
          41,
          41,
          41,
          41,
          41,
          41
        ]
      },
      {
        "input": [
          10,
          99,
          85,
          7,
          59
        ],
        "output": [
          10,
          10,
          10,
          10,
          10
        ]
      },
      {
        "input": [
          54,
          40,
          23,
          78,
          30
        ],
        "output": [
          54,
          54,
          54,
          54,
          54
        ]
      }
    ]
  },
  {
    "id": "c079",
    "difficulty": 16,
    "function": "def c079(x):\n    # sum of the list\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        10,
        4,
        2,
        6,
        7,
        16
      ],
      "output": [
        45
      ]
    },
    "demos": [
      {
        "input": [
          7,
          17,
          12
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          16,
          17,
          19,
          7
        ],
        "output": [
          59
        ]
      },
      {
        "input": [
          17,
          15,
          14,
          15,
          5,
          1
        ],
        "output": [
          67
        ]
      }
    ]
  },
  {
    "id": "c043",
    "difficulty": 17,
    "function": "def c043(x):\n    return [8, 2, 7, 0, 3]\n\n",
    "data": {
      "input": [
        56,
        90,
        30,
        74,
        36,
        72,
        94
      ],
      "output": [
        8,
        2,
        7,
        0,
        3
      ]
    },
    "demos": [
      {
        "input": [
          57,
          88,
          11,
          77
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          94,
          57,
          78
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          81,
          42,
          58,
          63
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      }
    ]
  },
  {
    "id": "c038",
    "difficulty": 18,
    "function": "def c038(x):\n    # append 9\n    return x + [9]\n\n",
    "data": {
      "input": [
        76,
        47,
        27,
        24,
        90,
        2,
        79
      ],
      "output": [
        76,
        47,
        27,
        24,
        90,
        2,
        79,
        9
      ]
    },
    "demos": [
      {
        "input": [
          82,
          39,
          37,
          69,
          73,
          73
        ],
        "output": [
          82,
          39,
          37,
          69,
          73,
          73,
          9
        ]
      },
      {
        "input": [
          71,
          88,
          89,
          21
        ],
        "output": [
          71,
          88,
          89,
          21,
          9
        ]
      },
      {
        "input": [
          10,
          91,
          65,
          77,
          67
        ],
        "output": [
          10,
          91,
          65,
          77,
          67,
          9
        ]
      }
    ]
  },
  {
    "id": "c042",
    "difficulty": 19,
    "function": "def c042(x):\n    return [5, 2]\n\n",
    "data": {
      "input": [
        31,
        47,
        1,
        6
      ],
      "output": [
        5,
        2
      ]
    },
    "demos": [
      {
        "input": [
          90,
          56,
          60,
          10
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          32,
          47,
          64,
          38
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          65,
          17,
          58,
          57,
          71,
          59
        ],
        "output": [
          5,
          2
        ]
      }
    ]
  },
  {
    "id": "c223",
    "difficulty": 20,
    "function": "def c223(x):\n    # swap the digits of each element\n    return [int(str(i)[::-1]) for i in x]\n\n",
    "data": {
      "input": [
        47,
        40,
        66,
        77,
        20,
        3
      ],
      "output": [
        74,
        4,
        66,
        77,
        2,
        3
      ]
    },
    "demos": [
      {
        "input": [
          15,
          56,
          76,
          42
        ],
        "output": [
          51,
          65,
          67,
          24
        ]
      },
      {
        "input": [
          10,
          97,
          5,
          84,
          20
        ],
        "output": [
          1,
          79,
          5,
          48,
          2
        ]
      },
      {
        "input": [
          83,
          8,
          4,
          97,
          59,
          82
        ],
        "output": [
          38,
          8,
          4,
          79,
          95,
          28
        ]
      }
    ]
  },
  {
    "id": "c137",
    "difficulty": 21,
    "function": "def c137(x):\n    # remove all 3\n    return [i for i in x if i != 3]\n\n",
    "data": {
      "input": [
        64,
        78,
        70,
        65,
        69,
        10,
        3
      ],
      "output": [
        64,
        78,
        70,
        65,
        69,
        10
      ]
    },
    "demos": [
      {
        "input": [
          3,
          49,
          74,
          33,
          3
        ],
        "output": [
          49,
          74,
          33
        ]
      },
      {
        "input": [
          3,
          38,
          8,
          16,
          50,
          62,
          3
        ],
        "output": [
          38,
          8,
          16,
          50,
          62
        ]
      },
      {
        "input": [
          96,
          16,
          13,
          62,
          34,
          3,
          56,
          33
        ],
        "output": [
          96,
          16,
          13,
          62,
          34,
          56,
          33
        ]
      }
    ]
  },
  {
    "id": "c238",
    "difficulty": 22,
    "function": "def c238(x):\n    # keep only elements that appear exactly once\n    return [i for i in x if x.count(i) == 1]\n\n",
    "data": {
      "input": [
        3,
        3,
        3,
        4,
        5,
        6,
        3,
        3
      ],
      "output": [
        4,
        5,
        6
      ]
    },
    "demos": [
      {
        "input": [
          8,
          0,
          5,
          12,
          0,
          2
        ],
        "output": [
          8,
          5,
          12,
          2
        ]
      },
      {
        "input": [
          22,
          22,
          22,
          45,
          67,
          22,
          89,
          90,
          90
        ],
        "output": [
          45,
          67,
          89
        ]
      },
      {
        "input": [
          5,
          3,
          1,
          6,
          6,
          3,
          4,
          4
        ],
        "output": [
          5,
          1
        ]
      }
    ]
  },
  {
    "id": "c108",
    "difficulty": 23,
    "function": "def c108(x):\n    # sum of elements\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        4,
        5,
        1,
        19,
        7
      ],
      "output": [
        36
      ]
    },
    "demos": [
      {
        "input": [
          18,
          14,
          14,
          5,
          4,
          16
        ],
        "output": [
          71
        ]
      },
      {
        "input": [
          17,
          2,
          13
        ],
        "output": [
          32
        ]
      },
      {
        "input": [
          13,
          16,
          9,
          16,
          16,
          5,
          19
        ],
        "output": [
          94
        ]
      }
    ]
  },
  {
    "id": "c126",
    "difficulty": 24,
    "function": "def c126(x):\n    # remove first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        42,
        36,
        22,
        84,
        10
      ],
      "output": [
        36,
        22,
        84,
        10
      ]
    },
    "demos": [
      {
        "input": [
          60,
          62,
          58,
          90,
          25,
          97
        ],
        "output": [
          62,
          58,
          90,
          25,
          97
        ]
      },
      {
        "input": [
          84,
          19,
          27
        ],
        "output": [
          19,
          27
        ]
      },
      {
        "input": [
          8,
          74,
          99,
          16,
          64,
          12
        ],
        "output": [
          74,
          99,
          16,
          64,
          12
        ]
      }
    ]
  },
  {
    "id": "c187",
    "difficulty": 25,
    "function": "def c187(x):\n    # concatenate input with itself, separated by 0\n    return x + [0] + x\n\n",
    "data": {
      "input": [
        82,
        37,
        44,
        71,
        66
      ],
      "output": [
        82,
        37,
        44,
        71,
        66,
        0,
        82,
        37,
        44,
        71,
        66
      ]
    },
    "demos": [
      {
        "input": [
          99,
          2,
          91,
          93
        ],
        "output": [
          99,
          2,
          91,
          93,
          0,
          99,
          2,
          91,
          93
        ]
      },
      {
        "input": [
          51,
          31,
          81
        ],
        "output": [
          51,
          31,
          81,
          0,
          51,
          31,
          81
        ]
      },
      {
        "input": [
          52,
          84,
          51
        ],
        "output": [
          52,
          84,
          51,
          0,
          52,
          84,
          51
        ]
      }
    ]
  },
  {
    "id": "c022",
    "difficulty": 26,
    "function": "def c022(x):\n    # insert a 5 as element 1\n    return x[:1] + [5] + x[1:]\n\n",
    "data": {
      "input": [
        90,
        35,
        79,
        67,
        65,
        60,
        5
      ],
      "output": [
        90,
        5,
        35,
        79,
        67,
        65,
        60,
        5
      ]
    },
    "demos": [
      {
        "input": [
          41,
          83,
          77
        ],
        "output": [
          41,
          5,
          83,
          77
        ]
      },
      {
        "input": [
          38,
          91,
          77,
          61,
          3,
          46,
          95
        ],
        "output": [
          38,
          5,
          91,
          77,
          61,
          3,
          46,
          95
        ]
      },
      {
        "input": [
          1,
          86,
          89
        ],
        "output": [
          1,
          5,
          86,
          89
        ]
      }
    ]
  },
  {
    "id": "c212",
    "difficulty": 27,
    "function": "def c212(x):\n    # insert 3 at index 2, 3 times\n    return x[:3] + [3,3,3] + x[3:]\n\n",
    "data": {
      "input": [
        15,
        72,
        3,
        80,
        56,
        8
      ],
      "output": [
        15,
        72,
        3,
        3,
        3,
        3,
        80,
        56,
        8
      ]
    },
    "demos": [
      {
        "input": [
          93,
          96,
          8,
          35
        ],
        "output": [
          93,
          96,
          8,
          3,
          3,
          3,
          35
        ]
      },
      {
        "input": [
          6,
          64,
          58,
          20,
          9
        ],
        "output": [
          6,
          64,
          58,
          3,
          3,
          3,
          20,
          9
        ]
      },
      {
        "input": [
          10,
          45,
          74,
          95,
          43,
          84
        ],
        "output": [
          10,
          45,
          74,
          3,
          3,
          3,
          95,
          43,
          84
        ]
      }
    ]
  },
  {
    "id": "c101",
    "difficulty": 28,
    "function": "def c101(x):\n    return [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]\n\n",
    "data": {
      "input": [
        11,
        37,
        44,
        5,
        43
      ],
      "output": [
        11,
        19,
        24,
        33,
        42,
        5,
        82,
        0,
        64,
        9
      ]
    },
    "demos": [
      {
        "input": [
          99,
          59,
          51,
          10,
          16
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          75,
          73,
          69
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          85,
          13,
          75,
          86,
          25,
          46,
          87
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      }
    ]
  },
  {
    "id": "c021",
    "difficulty": 29,
    "function": "def c021(x):\n    # insert 8 as element 1\n    return x[:1] + [8] + x[1:]\n\n",
    "data": {
      "input": [
        78,
        25,
        44,
        90,
        68,
        50,
        83
      ],
      "output": [
        78,
        8,
        25,
        44,
        90,
        68,
        50,
        83
      ]
    },
    "demos": [
      {
        "input": [
          49,
          53,
          60
        ],
        "output": [
          49,
          8,
          53,
          60
        ]
      },
      {
        "input": [
          4,
          75,
          23,
          39,
          21,
          64,
          38
        ],
        "output": [
          4,
          8,
          75,
          23,
          39,
          21,
          64,
          38
        ]
      },
      {
        "input": [
          43,
          43,
          31,
          6,
          42,
          6
        ],
        "output": [
          43,
          8,
          43,
          31,
          6,
          42,
          6
        ]
      }
    ]
  },
  {
    "id": "c105",
    "difficulty": 30,
    "function": "def c105(x):\n    # concatenate all but the last element with all but the first element\n    return x[:-1] + x[1:]\n\n",
    "data": {
      "input": [
        49,
        3,
        22
      ],
      "output": [
        49,
        3,
        3,
        22
      ]
    },
    "demos": [
      {
        "input": [
          43,
          84,
          26,
          71,
          87
        ],
        "output": [
          43,
          84,
          26,
          71,
          84,
          26,
          71,
          87
        ]
      },
      {
        "input": [
          19,
          16,
          49,
          89,
          36
        ],
        "output": [
          19,
          16,
          49,
          89,
          16,
          49,
          89,
          36
        ]
      },
      {
        "input": [
          45,
          6,
          81,
          85,
          14,
          37
        ],
        "output": [
          45,
          6,
          81,
          85,
          14,
          6,
          81,
          85,
          14,
          37
        ]
      }
    ]
  },
  {
    "id": "c041",
    "difficulty": 31,
    "function": "def c041(x):\n    return [9]\n\n",
    "data": {
      "input": [
        78,
        70,
        91
      ],
      "output": [
        9
      ]
    },
    "demos": [
      {
        "input": [
          13,
          66,
          81,
          4,
          55
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          93,
          19,
          31,
          4,
          16,
          32
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          47,
          80,
          49,
          51,
          68,
          26,
          87
        ],
        "output": [
          9
        ]
      }
    ]
  },
  {
    "id": "c070",
    "difficulty": 32,
    "function": "def c070(x):\n    # concatenate the input\n    return x + x\n\n",
    "data": {
      "input": [
        26,
        3,
        14,
        57,
        3
      ],
      "output": [
        26,
        3,
        14,
        57,
        3,
        26,
        3,
        14,
        57,
        3
      ]
    },
    "demos": [
      {
        "input": [
          3,
          26,
          97,
          94,
          13
        ],
        "output": [
          3,
          26,
          97,
          94,
          13,
          3,
          26,
          97,
          94,
          13
        ]
      },
      {
        "input": [
          74,
          73,
          75,
          17,
          35
        ],
        "output": [
          74,
          73,
          75,
          17,
          35,
          74,
          73,
          75,
          17,
          35
        ]
      },
      {
        "input": [
          62,
          26,
          22
        ],
        "output": [
          62,
          26,
          22,
          62,
          26,
          22
        ]
      }
    ]
  },
  {
    "id": "c052",
    "difficulty": 33,
    "function": "def c052(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        76,
        40,
        2,
        22
      ],
      "output": [
        76,
        76,
        76,
        76,
        76,
        76,
        76
      ]
    },
    "demos": [
      {
        "input": [
          62,
          78,
          20,
          43
        ],
        "output": [
          62,
          62,
          62,
          62,
          62,
          62,
          62
        ]
      },
      {
        "input": [
          95,
          89,
          89
        ],
        "output": [
          95,
          95,
          95,
          95,
          95,
          95,
          95
        ]
      },
      {
        "input": [
          58,
          70,
          1,
          23,
          79,
          69,
          41
        ],
        "output": [
          58,
          58,
          58,
          58,
          58,
          58,
          58
        ]
      }
    ]
  },
  {
    "id": "c044",
    "difficulty": 34,
    "function": "def c044(x):\n    return [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]\n\n",
    "data": {
      "input": [
        4,
        67,
        82,
        38,
        41
      ],
      "output": [
        1,
        9,
        4,
        3,
        2,
        5,
        8,
        0,
        4,
        9
      ]
    },
    "demos": [
      {
        "input": [
          74,
          53,
          27,
          63,
          54,
          68
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          65,
          55,
          84,
          95,
          24,
          38
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          84,
          63,
          84
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      }
    ]
  },
  {
    "id": "c190",
    "difficulty": 35,
    "function": "def c190(x):\n    # count by 2 from the first element to the last element\n    if x[0] < x[-1]:\n        return list(range(x[0], x[-1]+1, 2))\n    else:\n        return list(range(x[0], x[-1]-1, -2))\n\n",
    "data": {
      "input": [
        99,
        72,
        24,
        85
      ],
      "output": [
        99,
        97,
        95,
        93,
        91,
        89,
        87,
        85
      ]
    },
    "demos": [
      {
        "input": [
          54,
          48,
          48
        ],
        "output": [
          54,
          52,
          50,
          48
        ]
      },
      {
        "input": [
          38,
          53,
          21
        ],
        "output": [
          38,
          36,
          34,
          32,
          30,
          28,
          26,
          24,
          22
        ]
      },
      {
        "input": [
          63,
          1,
          75
        ],
        "output": [
          63,
          65,
          67,
          69,
          71,
          73,
          75
        ]
      }
    ]
  },
  {
    "id": "c037",
    "difficulty": 36,
    "function": "def c037(x):\n    # append 3\n    return x + [3]\n\n",
    "data": {
      "input": [
        23,
        65,
        77
      ],
      "output": [
        23,
        65,
        77,
        3
      ]
    },
    "demos": [
      {
        "input": [
          43,
          97,
          96,
          23,
          79
        ],
        "output": [
          43,
          97,
          96,
          23,
          79,
          3
        ]
      },
      {
        "input": [
          16,
          0,
          96,
          96,
          96,
          21
        ],
        "output": [
          16,
          0,
          96,
          96,
          96,
          21,
          3
        ]
      },
      {
        "input": [
          49,
          33,
          54,
          72,
          36
        ],
        "output": [
          49,
          33,
          54,
          72,
          36,
          3
        ]
      }
    ]
  },
  {
    "id": "c222",
    "difficulty": 37,
    "function": "def c222(x):\n    # remove each element with the input length\n    return [len(x) for _ in x]\n\n",
    "data": {
      "input": [
        86,
        8,
        13
      ],
      "output": [
        3,
        3,
        3
      ]
    },
    "demos": [
      {
        "input": [
          27,
          55,
          72,
          20,
          73,
          94,
          49
        ],
        "output": [
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ]
      },
      {
        "input": [
          51,
          11,
          81,
          53
        ],
        "output": [
          4,
          4,
          4,
          4
        ]
      },
      {
        "input": [
          2,
          20,
          12,
          51,
          57,
          84
        ],
        "output": [
          6,
          6,
          6,
          6,
          6,
          6
        ]
      }
    ]
  },
  {
    "id": "c107",
    "difficulty": 38,
    "function": "def c107(x):\n    # unique elements, in order of appearance\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        79,
        63,
        63,
        37
      ],
      "output": [
        79,
        63,
        37
      ]
    },
    "demos": [
      {
        "input": [
          47,
          79,
          61,
          12,
          85,
          79
        ],
        "output": [
          47,
          79,
          61,
          12,
          85
        ]
      },
      {
        "input": [
          22,
          40,
          35,
          17,
          22,
          60,
          31,
          17,
          31,
          59
        ],
        "output": [
          22,
          40,
          35,
          17,
          60,
          31,
          59
        ]
      },
      {
        "input": [
          6,
          85,
          21,
          85,
          79,
          62
        ],
        "output": [
          6,
          85,
          21,
          79,
          62
        ]
      }
    ]
  },
  {
    "id": "c011",
    "difficulty": 39,
    "function": "def c011(x):\n    # [1:4] of the input\n    return x[1:4]\n\n",
    "data": {
      "input": [
        80,
        86,
        99,
        39,
        89
      ],
      "output": [
        86,
        99,
        39
      ]
    },
    "demos": [
      {
        "input": [
          72,
          45,
          56,
          91,
          16
        ],
        "output": [
          45,
          56,
          91
        ]
      },
      {
        "input": [
          52,
          49,
          88,
          98,
          76,
          46,
          25
        ],
        "output": [
          49,
          88,
          98
        ]
      },
      {
        "input": [
          22,
          30,
          40,
          18,
          46,
          90,
          62
        ],
        "output": [
          30,
          40,
          18
        ]
      }
    ]
  },
  {
    "id": "c104",
    "difficulty": 40,
    "function": "def c104(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        56,
        52,
        61
      ],
      "output": [
        61
      ]
    },
    "demos": [
      {
        "input": [
          26,
          27,
          79,
          0,
          79,
          14
        ],
        "output": [
          79
        ]
      },
      {
        "input": [
          9,
          87,
          31,
          15,
          69
        ],
        "output": [
          87
        ]
      },
      {
        "input": [
          21,
          56,
          63,
          86,
          47,
          2,
          50
        ],
        "output": [
          86
        ]
      }
    ]
  },
  {
    "id": "c192",
    "difficulty": 41,
    "function": "def c192(x):\n    # replace each element, M, with its tens digit, if no tens digit, replace with 0\n    return [int(str(i)[-2]) if len(str(i)) > 1 else 0 for i in x]\n\n",
    "data": {
      "input": [
        27,
        21,
        51,
        83,
        2,
        27,
        41
      ],
      "output": [
        2,
        2,
        5,
        8,
        0,
        2,
        4
      ]
    },
    "demos": [
      {
        "input": [
          44,
          5,
          16,
          80,
          99,
          40
        ],
        "output": [
          4,
          0,
          1,
          8,
          9,
          4
        ]
      },
      {
        "input": [
          17,
          79,
          78,
          89,
          26,
          10,
          14
        ],
        "output": [
          1,
          7,
          7,
          8,
          2,
          1,
          1
        ]
      },
      {
        "input": [
          30,
          40,
          94,
          57,
          7,
          73
        ],
        "output": [
          3,
          4,
          9,
          5,
          0,
          7
        ]
      }
    ]
  },
  {
    "id": "c182",
    "difficulty": 42,
    "function": "def c182(x):\n    # keep every third element\n    return x[::3]\n\n",
    "data": {
      "input": [
        25,
        27,
        53,
        56,
        80,
        2
      ],
      "output": [
        25,
        56
      ]
    },
    "demos": [
      {
        "input": [
          19,
          31,
          8,
          38,
          6,
          70
        ],
        "output": [
          19,
          38
        ]
      },
      {
        "input": [
          15,
          30,
          30,
          54,
          41,
          15,
          74,
          48
        ],
        "output": [
          15,
          54,
          74
        ]
      },
      {
        "input": [
          95,
          45,
          68,
          36,
          49
        ],
        "output": [
          95,
          36
        ]
      }
    ]
  },
  {
    "id": "c006",
    "difficulty": 43,
    "function": "def c006(x):\n    # the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        11,
        45,
        69,
        74,
        29,
        93,
        35
      ],
      "output": [
        11,
        45
      ]
    },
    "demos": [
      {
        "input": [
          91,
          93,
          52,
          1,
          75,
          83,
          80
        ],
        "output": [
          91,
          93
        ]
      },
      {
        "input": [
          21,
          80,
          72,
          11,
          67,
          19
        ],
        "output": [
          21,
          80
        ]
      },
      {
        "input": [
          26,
          62,
          3,
          36,
          58,
          92
        ],
        "output": [
          26,
          62
        ]
      }
    ]
  },
  {
    "id": "c046",
    "difficulty": 44,
    "function": "def c046(x):\n    # prepend 7\n    return [7] + x\n\n",
    "data": {
      "input": [
        85,
        40,
        18,
        58,
        89,
        42
      ],
      "output": [
        7,
        85,
        40,
        18,
        58,
        89,
        42
      ]
    },
    "demos": [
      {
        "input": [
          8,
          61,
          11
        ],
        "output": [
          7,
          8,
          61,
          11
        ]
      },
      {
        "input": [
          72,
          5,
          69,
          88
        ],
        "output": [
          7,
          72,
          5,
          69,
          88
        ]
      },
      {
        "input": [
          39,
          84,
          93,
          31
        ],
        "output": [
          7,
          39,
          84,
          93,
          31
        ]
      }
    ]
  },
  {
    "id": "c106",
    "difficulty": 45,
    "function": "def c106(x):\n    # elements in ascending order\n    return sorted(x)\n\n",
    "data": {
      "input": [
        97,
        78,
        43
      ],
      "output": [
        43,
        78,
        97
      ]
    },
    "demos": [
      {
        "input": [
          43,
          57,
          42,
          90
        ],
        "output": [
          42,
          43,
          57,
          90
        ]
      },
      {
        "input": [
          56,
          83,
          16,
          16,
          83,
          55
        ],
        "output": [
          16,
          16,
          55,
          56,
          83,
          83
        ]
      },
      {
        "input": [
          27,
          40,
          7,
          32,
          45,
          34,
          58
        ],
        "output": [
          7,
          27,
          32,
          34,
          40,
          45,
          58
        ]
      }
    ]
  },
  {
    "id": "c114",
    "difficulty": 46,
    "function": "def c114(x):\n    # prepend the last element\n    return [x[-1]] + x\n\n",
    "data": {
      "input": [
        70,
        63,
        40,
        3
      ],
      "output": [
        3,
        70,
        63,
        40,
        3
      ]
    },
    "demos": [
      {
        "input": [
          81,
          46,
          28,
          41,
          52,
          55
        ],
        "output": [
          55,
          81,
          46,
          28,
          41,
          52,
          55
        ]
      },
      {
        "input": [
          90,
          63,
          15,
          92,
          29,
          91,
          79
        ],
        "output": [
          79,
          90,
          63,
          15,
          92,
          29,
          91,
          79
        ]
      },
      {
        "input": [
          46,
          77,
          52
        ],
        "output": [
          52,
          46,
          77,
          52
        ]
      }
    ]
  },
  {
    "id": "c093",
    "difficulty": 47,
    "function": "def c093(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        19,
        53,
        62,
        49,
        56
      ],
      "output": [
        19,
        19,
        19,
        19,
        19,
        19,
        19
      ]
    },
    "demos": [
      {
        "input": [
          32,
          0,
          35,
          37
        ],
        "output": [
          32,
          32,
          32,
          32,
          32,
          32,
          32
        ]
      },
      {
        "input": [
          55,
          42,
          3
        ],
        "output": [
          55,
          55,
          55,
          55,
          55,
          55,
          55
        ]
      },
      {
        "input": [
          1,
          9,
          85,
          89,
          86,
          12
        ],
        "output": [
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c195",
    "difficulty": 48,
    "function": "def c195(x):\n    # element 1, followed by 23, 68, 42, 99, 71, followed by last element\n    return [x[0], 23, 68, 42, 99, 71, x[-1]]\n\n",
    "data": {
      "input": [
        38,
        42,
        28
      ],
      "output": [
        38,
        23,
        68,
        42,
        99,
        71,
        28
      ]
    },
    "demos": [
      {
        "input": [
          96,
          27,
          58
        ],
        "output": [
          96,
          23,
          68,
          42,
          99,
          71,
          58
        ]
      },
      {
        "input": [
          65,
          32,
          62,
          22,
          7,
          68
        ],
        "output": [
          65,
          23,
          68,
          42,
          99,
          71,
          68
        ]
      },
      {
        "input": [
          85,
          23,
          71
        ],
        "output": [
          85,
          23,
          68,
          42,
          99,
          71,
          71
        ]
      }
    ]
  },
  {
    "id": "c196",
    "difficulty": 49,
    "function": "def c196(x):\n    # concatenate 17, 38, 82 input 1 55 27\n    return [17, 38, 82] + x + [1, 55, 27]\n\n",
    "data": {
      "input": [
        3,
        44,
        13,
        90,
        5
      ],
      "output": [
        17,
        38,
        82,
        3,
        44,
        13,
        90,
        5,
        1,
        55,
        27
      ]
    },
    "demos": [
      {
        "input": [
          93,
          96,
          61,
          66,
          90
        ],
        "output": [
          17,
          38,
          82,
          93,
          96,
          61,
          66,
          90,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          39,
          17
        ],
        "output": [
          17,
          38,
          82,
          39,
          17,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          66,
          34,
          86,
          2,
          91,
          41
        ],
        "output": [
          17,
          38,
          82,
          66,
          34,
          86,
          2,
          91,
          41,
          1,
          55,
          27
        ]
      }
    ]
  },
  {
    "id": "c095",
    "difficulty": 50,
    "function": "def c095(x):\n    # remove the first element and the last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        46,
        61,
        14,
        13,
        52,
        58,
        16
      ],
      "output": [
        61,
        14,
        13,
        52,
        58
      ]
    },
    "demos": [
      {
        "input": [
          17,
          60,
          62,
          58,
          38,
          29,
          88
        ],
        "output": [
          60,
          62,
          58,
          38,
          29
        ]
      },
      {
        "input": [
          87,
          62,
          96,
          95,
          2
        ],
        "output": [
          62,
          96,
          95
        ]
      },
      {
        "input": [
          17,
          32,
          91,
          22,
          44
        ],
        "output": [
          32,
          91,
          22
        ]
      }
    ]
  },
  {
    "id": "c016",
    "difficulty": 51,
    "function": "def c016(x):\n    # replace element 1 with 8\n    return [8] + x[1:]\n\n",
    "data": {
      "input": [
        94,
        18,
        47,
        11,
        86,
        55,
        15
      ],
      "output": [
        8,
        18,
        47,
        11,
        86,
        55,
        15
      ]
    },
    "demos": [
      {
        "input": [
          43,
          6,
          63,
          72,
          10
        ],
        "output": [
          8,
          6,
          63,
          72,
          10
        ]
      },
      {
        "input": [
          74,
          81,
          57,
          0
        ],
        "output": [
          8,
          81,
          57,
          0
        ]
      },
      {
        "input": [
          73,
          11,
          7,
          79,
          95
        ],
        "output": [
          8,
          11,
          7,
          79,
          95
        ]
      }
    ]
  },
  {
    "id": "c224",
    "difficulty": 52,
    "function": "def c224(x):\n    # reverse the list, then take every other element starting from the second element, then take every other element starting from the first element\n    return x[::-2] + x[(len(x) % 2)::2]\n\n",
    "data": {
      "input": [
        72,
        8,
        16
      ],
      "output": [
        16,
        72,
        8
      ]
    },
    "demos": [
      {
        "input": [
          43,
          28,
          8,
          25,
          8,
          16
        ],
        "output": [
          16,
          25,
          28,
          43,
          8,
          8
        ]
      },
      {
        "input": [
          61,
          68,
          85,
          50
        ],
        "output": [
          50,
          68,
          61,
          85
        ]
      },
      {
        "input": [
          87,
          94,
          55,
          40
        ],
        "output": [
          40,
          94,
          87,
          55
        ]
      }
    ]
  },
  {
    "id": "c116",
    "difficulty": 53,
    "function": "def c116(x):\n    # reflect the input on itself\n    return x[::-1] + x[1:]\n\n",
    "data": {
      "input": [
        99,
        41,
        48,
        64,
        34,
        53
      ],
      "output": [
        53,
        34,
        64,
        48,
        41,
        99,
        41,
        48,
        64,
        34,
        53
      ]
    },
    "demos": [
      {
        "input": [
          42,
          19,
          57,
          65,
          91,
          42
        ],
        "output": [
          42,
          91,
          65,
          57,
          19,
          42,
          19,
          57,
          65,
          91,
          42
        ]
      },
      {
        "input": [
          21,
          19,
          71,
          96,
          38
        ],
        "output": [
          38,
          96,
          71,
          19,
          21,
          19,
          71,
          96,
          38
        ]
      },
      {
        "input": [
          75,
          70,
          36,
          28,
          59,
          0
        ],
        "output": [
          0,
          59,
          28,
          36,
          70,
          75,
          70,
          36,
          28,
          59,
          0
        ]
      }
    ]
  },
  {
    "id": "c140",
    "difficulty": 54,
    "function": "def c140(x):\n    # replace element 1 with 9\n    return x[:1] + [9] + x[2:]\n\n",
    "data": {
      "input": [
        23,
        84,
        64,
        35,
        16,
        17,
        88
      ],
      "output": [
        23,
        9,
        64,
        35,
        16,
        17,
        88
      ]
    },
    "demos": [
      {
        "input": [
          87,
          96,
          8,
          87,
          18,
          66,
          8
        ],
        "output": [
          87,
          9,
          8,
          87,
          18,
          66,
          8
        ]
      },
      {
        "input": [
          24,
          42,
          88,
          7,
          35,
          62,
          26
        ],
        "output": [
          24,
          9,
          88,
          7,
          35,
          62,
          26
        ]
      },
      {
        "input": [
          52,
          96,
          53,
          4,
          1,
          51
        ],
        "output": [
          52,
          9,
          53,
          4,
          1,
          51
        ]
      }
    ]
  },
  {
    "id": "c049",
    "difficulty": 55,
    "function": "def c049(x):\n    # remove the first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        82,
        29,
        97,
        81,
        28,
        79,
        0
      ],
      "output": [
        29,
        97,
        81,
        28,
        79,
        0
      ]
    },
    "demos": [
      {
        "input": [
          88,
          85,
          27,
          44,
          95
        ],
        "output": [
          85,
          27,
          44,
          95
        ]
      },
      {
        "input": [
          33,
          67,
          53
        ],
        "output": [
          67,
          53
        ]
      },
      {
        "input": [
          68,
          85,
          54,
          7,
          15,
          70,
          24
        ],
        "output": [
          85,
          54,
          7,
          15,
          70,
          24
        ]
      }
    ]
  },
  {
    "id": "c071",
    "difficulty": 56,
    "function": "def c071(x):\n    # add 2 to each element\n    return [i+2 for i in x]\n\n",
    "data": {
      "input": [
        98,
        65,
        28,
        34,
        32
      ],
      "output": [
        100,
        67,
        30,
        36,
        34
      ]
    },
    "demos": [
      {
        "input": [
          26,
          60,
          72,
          23,
          4,
          73,
          14
        ],
        "output": [
          28,
          62,
          74,
          25,
          6,
          75,
          16
        ]
      },
      {
        "input": [
          82,
          84,
          92,
          18,
          62,
          84
        ],
        "output": [
          84,
          86,
          94,
          20,
          64,
          86
        ]
      },
      {
        "input": [
          48,
          23,
          49
        ],
        "output": [
          50,
          25,
          51
        ]
      }
    ]
  },
  {
    "id": "c161",
    "difficulty": 57,
    "function": "def c161(x):\n    # replace each element, M, with M + the input length - M index\n    return [i + len(x) - j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        52,
        80,
        48,
        8,
        12,
        55,
        94
      ],
      "output": [
        59,
        86,
        53,
        12,
        15,
        57,
        95
      ]
    },
    "demos": [
      {
        "input": [
          51,
          67,
          3,
          2,
          5,
          91
        ],
        "output": [
          57,
          72,
          7,
          5,
          7,
          92
        ]
      },
      {
        "input": [
          25,
          68,
          70,
          94,
          96,
          4,
          52
        ],
        "output": [
          32,
          74,
          75,
          98,
          99,
          6,
          53
        ]
      },
      {
        "input": [
          2,
          55,
          89
        ],
        "output": [
          5,
          57,
          90
        ]
      }
    ]
  },
  {
    "id": "c068",
    "difficulty": 58,
    "function": "def c068(x):\n    # concatenate the input with 7, 3, 8, 4, 3\n    return x + [7, 3, 8, 4, 3]\n\n",
    "data": {
      "input": [
        31,
        21,
        18,
        44,
        69,
        66
      ],
      "output": [
        31,
        21,
        18,
        44,
        69,
        66,
        7,
        3,
        8,
        4,
        3
      ]
    },
    "demos": [
      {
        "input": [
          21,
          96,
          37,
          36,
          96
        ],
        "output": [
          21,
          96,
          37,
          36,
          96,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          3,
          19,
          88,
          66
        ],
        "output": [
          3,
          19,
          88,
          66,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          27,
          40,
          25,
          0,
          69
        ],
        "output": [
          27,
          40,
          25,
          0,
          69,
          7,
          3,
          8,
          4,
          3
        ]
      }
    ]
  },
  {
    "id": "c103",
    "difficulty": 59,
    "function": "def c103(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        98,
        14,
        88,
        65,
        44,
        80,
        72
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          35,
          2,
          67,
          76,
          4,
          35,
          9
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          71,
          20,
          60,
          4,
          9,
          40
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          23,
          98,
          12
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c001",
    "difficulty": 60,
    "function": "def c001(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        90,
        30,
        46,
        80
      ],
      "output": [
        46
      ]
    },
    "demos": [
      {
        "input": [
          75,
          71,
          89,
          96,
          55,
          90,
          47
        ],
        "output": [
          89
        ]
      },
      {
        "input": [
          99,
          67,
          17,
          30,
          7
        ],
        "output": [
          17
        ]
      },
      {
        "input": [
          43,
          84,
          82
        ],
        "output": [
          82
        ]
      }
    ]
  },
  {
    "id": "c090",
    "difficulty": 61,
    "function": "def c090(x):\n    return [18, 42, 77, 20, 36]\n\n",
    "data": {
      "input": [
        93,
        45,
        69,
        72,
        10
      ],
      "output": [
        18,
        42,
        77,
        20,
        36
      ]
    },
    "demos": [
      {
        "input": [
          44,
          6,
          14,
          93
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          7,
          40,
          67,
          73,
          33,
          84
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          17,
          60,
          69,
          2,
          7
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      }
    ]
  },
  {
    "id": "c097",
    "difficulty": 62,
    "function": "def c097(x):\n    # concatenate 11, 21, 43 input 7 89 0\n    return [11, 21, 43] + x + [7, 89, 0]\n\n",
    "data": {
      "input": [
        10,
        91,
        64
      ],
      "output": [
        11,
        21,
        43,
        10,
        91,
        64,
        7,
        89,
        0
      ]
    },
    "demos": [
      {
        "input": [
          88,
          39,
          97,
          70,
          46
        ],
        "output": [
          11,
          21,
          43,
          88,
          39,
          97,
          70,
          46,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          20,
          63,
          97,
          66,
          52
        ],
        "output": [
          11,
          21,
          43,
          20,
          63,
          97,
          66,
          52,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          44,
          18,
          83,
          12,
          48
        ],
        "output": [
          11,
          21,
          43,
          44,
          18,
          83,
          12,
          48,
          7,
          89,
          0
        ]
      }
    ]
  },
  {
    "id": "c142",
    "difficulty": 63,
    "function": "def c142(x):\n    # every digit in order of appearance\n    res = []\n    for i in x:\n        for j in str(i):\n            res.append(int(j))\n    return res\n\n",
    "data": {
      "input": [
        47,
        91,
        8
      ],
      "output": [
        4,
        7,
        9,
        1,
        8
      ]
    },
    "demos": [
      {
        "input": [
          9,
          84,
          51,
          55
        ],
        "output": [
          9,
          8,
          4,
          5,
          1,
          5,
          5
        ]
      },
      {
        "input": [
          84,
          98,
          34,
          90,
          55
        ],
        "output": [
          8,
          4,
          9,
          8,
          3,
          4,
          9,
          0,
          5,
          5
        ]
      },
      {
        "input": [
          20,
          92,
          31,
          96
        ],
        "output": [
          2,
          0,
          9,
          2,
          3,
          1,
          9,
          6
        ]
      }
    ]
  },
  {
    "id": "c091",
    "difficulty": 64,
    "function": "def c091(x):\n    return [81, 99, 41, 23, 22, 75, 68, 30]\n\n",
    "data": {
      "input": [
        89,
        39,
        6,
        99
      ],
      "output": [
        81,
        99,
        41,
        23,
        22,
        75,
        68,
        30
      ]
    },
    "demos": [
      {
        "input": [
          21,
          64,
          11
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          86,
          12,
          29
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          59,
          46,
          33,
          9
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      }
    ]
  },
  {
    "id": "c034",
    "difficulty": 65,
    "function": "def c034(x):\n    # swap element 1 and element 2\n    x[0], x[1] = x[1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        27,
        74,
        5,
        67
      ],
      "output": [
        74,
        27,
        5,
        67
      ]
    },
    "demos": [
      {
        "input": [
          89,
          90,
          79,
          21
        ],
        "output": [
          90,
          89,
          79,
          21
        ]
      },
      {
        "input": [
          70,
          89,
          20
        ],
        "output": [
          89,
          70,
          20
        ]
      },
      {
        "input": [
          84,
          31,
          59,
          68,
          6,
          4,
          15
        ],
        "output": [
          31,
          84,
          59,
          68,
          6,
          4,
          15
        ]
      }
    ]
  },
  {
    "id": "c244",
    "difficulty": 66,
    "function": "def c244(x):\n    # number of 3s\n    return [x.count(3)]\n\n",
    "data": {
      "input": [
        3,
        15,
        56,
        30,
        75,
        3
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          45,
          79,
          87
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          3,
          62,
          3,
          31,
          21
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          3,
          43,
          3,
          2,
          20,
          3,
          62
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c171",
    "difficulty": 67,
    "function": "def c171(x):\n    # cumulative sum\n    res = []\n    s = 0\n    for i in x:\n        s += i\n        res.append(s)\n    return res\n\n",
    "data": {
      "input": [
        18,
        16,
        15,
        10,
        8,
        0
      ],
      "output": [
        18,
        34,
        49,
        59,
        67,
        67
      ]
    },
    "demos": [
      {
        "input": [
          6,
          7,
          3
        ],
        "output": [
          6,
          13,
          16
        ]
      },
      {
        "input": [
          13,
          5,
          2,
          15,
          11
        ],
        "output": [
          13,
          18,
          20,
          35,
          46
        ]
      },
      {
        "input": [
          13,
          11,
          18
        ],
        "output": [
          13,
          24,
          42
        ]
      }
    ]
  },
  {
    "id": "c172",
    "difficulty": 68,
    "function": "def c172(x):\n    # cumulative product\n    res = []\n    p = 1\n    for i in x:\n        p *= i\n        res.append(p)\n    return res\n\n",
    "data": {
      "input": [
        7,
        0,
        4,
        10,
        7
      ],
      "output": [
        7,
        0,
        0,
        0,
        0
      ]
    },
    "demos": [
      {
        "input": [
          3,
          4,
          6,
          7,
          5,
          2
        ],
        "output": [
          3,
          12,
          72,
          504,
          2520,
          5040
        ]
      },
      {
        "input": [
          0,
          2,
          3,
          8,
          1,
          8
        ],
        "output": [
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          6,
          9,
          0
        ],
        "output": [
          6,
          54,
          0
        ]
      }
    ]
  },
  {
    "id": "c062",
    "difficulty": 69,
    "function": "def c062(x):\n    # remove the last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        23,
        7,
        78,
        34
      ],
      "output": [
        23,
        7,
        78
      ]
    },
    "demos": [
      {
        "input": [
          41,
          49,
          89,
          42,
          8,
          9,
          41
        ],
        "output": [
          41,
          49,
          89,
          42,
          8,
          9
        ]
      },
      {
        "input": [
          67,
          99,
          69,
          68,
          8,
          41,
          35
        ],
        "output": [
          67,
          99,
          69,
          68,
          8,
          41
        ]
      },
      {
        "input": [
          49,
          50,
          1
        ],
        "output": [
          49,
          50
        ]
      }
    ]
  },
  {
    "id": "c096",
    "difficulty": 70,
    "function": "def c096(x):\n    # prepend 98 and append 37\n    return [98] + x + [37]\n\n",
    "data": {
      "input": [
        41,
        89,
        98
      ],
      "output": [
        98,
        41,
        89,
        98,
        37
      ]
    },
    "demos": [
      {
        "input": [
          29,
          67,
          45
        ],
        "output": [
          98,
          29,
          67,
          45,
          37
        ]
      },
      {
        "input": [
          5,
          76,
          97
        ],
        "output": [
          98,
          5,
          76,
          97,
          37
        ]
      },
      {
        "input": [
          21,
          73,
          24,
          30,
          8
        ],
        "output": [
          98,
          21,
          73,
          24,
          30,
          8,
          37
        ]
      }
    ]
  },
  {
    "id": "c081",
    "difficulty": 71,
    "function": "def c081(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        63,
        10,
        69
      ],
      "output": [
        69
      ]
    },
    "demos": [
      {
        "input": [
          63,
          64,
          12,
          14,
          79
        ],
        "output": [
          12
        ]
      },
      {
        "input": [
          48,
          45,
          81,
          34,
          87
        ],
        "output": [
          81
        ]
      },
      {
        "input": [
          3,
          47,
          71,
          33,
          78,
          9
        ],
        "output": [
          71
        ]
      }
    ]
  },
  {
    "id": "c109",
    "difficulty": 72,
    "function": "def c109(x):\n    # product of elements\n    p = 1\n    for i in x:\n        p *= i\n    return [p]\n\n",
    "data": {
      "input": [
        6,
        2,
        4,
        4,
        0
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          10,
          1,
          0,
          4
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          3,
          1,
          4,
          3
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          6,
          10,
          2,
          3,
          6,
          2
        ],
        "output": [
          4320
        ]
      }
    ]
  },
  {
    "id": "c002",
    "difficulty": 73,
    "function": "def c002(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        54,
        25,
        35,
        78
      ],
      "output": [
        35
      ]
    },
    "demos": [
      {
        "input": [
          82,
          5,
          63,
          11,
          16
        ],
        "output": [
          63
        ]
      },
      {
        "input": [
          59,
          36,
          57,
          13,
          70
        ],
        "output": [
          57
        ]
      },
      {
        "input": [
          90,
          47,
          60,
          12
        ],
        "output": [
          60
        ]
      }
    ]
  },
  {
    "id": "c132",
    "difficulty": 74,
    "function": "def c132(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        85,
        93,
        27,
        80,
        50,
        22,
        85
      ],
      "output": [
        85,
        93,
        80,
        50,
        22,
        85
      ]
    },
    "demos": [
      {
        "input": [
          62,
          60,
          66,
          40
        ],
        "output": [
          62,
          60,
          40
        ]
      },
      {
        "input": [
          43,
          92,
          19,
          22
        ],
        "output": [
          43,
          92,
          22
        ]
      },
      {
        "input": [
          20,
          28,
          58,
          6,
          94
        ],
        "output": [
          20,
          28,
          6,
          94
        ]
      }
    ]
  },
  {
    "id": "c153",
    "difficulty": 75,
    "function": "def c153(x):\n    # each unique element followed by its number of occurrences\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    out = []\n    for k, v in res.items():\n        out.append(k)\n        out.append(v)\n    return out\n\n",
    "data": {
      "input": [
        48,
        68,
        24,
        49,
        49,
        61
      ],
      "output": [
        48,
        1,
        68,
        1,
        24,
        1,
        49,
        2,
        61,
        1
      ]
    },
    "demos": [
      {
        "input": [
          32,
          34,
          34,
          37,
          32,
          73,
          3,
          32
        ],
        "output": [
          32,
          3,
          34,
          2,
          37,
          1,
          73,
          1,
          3,
          1
        ]
      },
      {
        "input": [
          4,
          36,
          63,
          4,
          4,
          4
        ],
        "output": [
          4,
          4,
          36,
          1,
          63,
          1
        ]
      },
      {
        "input": [
          2,
          2,
          2,
          24,
          47,
          38
        ],
        "output": [
          2,
          3,
          24,
          1,
          47,
          1,
          38,
          1
        ]
      }
    ]
  },
  {
    "id": "c051",
    "difficulty": 76,
    "function": "def c051(x):\n    # prepend first element 4 times\n    return [x[0]] * 4 + x\n\n",
    "data": {
      "input": [
        86,
        9,
        92,
        16,
        2
      ],
      "output": [
        86,
        86,
        86,
        86,
        86,
        9,
        92,
        16,
        2
      ]
    },
    "demos": [
      {
        "input": [
          15,
          27,
          40,
          81,
          70
        ],
        "output": [
          15,
          15,
          15,
          15,
          15,
          27,
          40,
          81,
          70
        ]
      },
      {
        "input": [
          60,
          81,
          63,
          98,
          43
        ],
        "output": [
          60,
          60,
          60,
          60,
          60,
          81,
          63,
          98,
          43
        ]
      },
      {
        "input": [
          21,
          85,
          67
        ],
        "output": [
          21,
          21,
          21,
          21,
          21,
          85,
          67
        ]
      }
    ]
  },
  {
    "id": "c225",
    "difficulty": 77,
    "function": "def c225(x):\n    # remove first and last two elements\n    return x[2:-2]\n\n",
    "data": {
      "input": [
        25,
        21,
        9,
        69,
        30,
        71,
        55
      ],
      "output": [
        9,
        69,
        30
      ]
    },
    "demos": [
      {
        "input": [
          37,
          33,
          53,
          55,
          45,
          17
        ],
        "output": [
          53,
          55
        ]
      },
      {
        "input": [
          56,
          56,
          68,
          80,
          65,
          86,
          41,
          44
        ],
        "output": [
          68,
          80,
          65,
          86
        ]
      },
      {
        "input": [
          89,
          57,
          42,
          29,
          36,
          4,
          50,
          33
        ],
        "output": [
          42,
          29,
          36,
          4
        ]
      }
    ]
  },
  {
    "id": "c067",
    "difficulty": 78,
    "function": "def c067(x):\n    # swap the first and last element\n    x[0], x[-1] = x[-1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        60,
        4,
        91,
        65
      ],
      "output": [
        65,
        4,
        91,
        60
      ]
    },
    "demos": [
      {
        "input": [
          20,
          37,
          59,
          72,
          45
        ],
        "output": [
          45,
          37,
          59,
          72,
          20
        ]
      },
      {
        "input": [
          77,
          29,
          21,
          88,
          87,
          67,
          47
        ],
        "output": [
          47,
          29,
          21,
          88,
          87,
          67,
          77
        ]
      },
      {
        "input": [
          85,
          53,
          45,
          0
        ],
        "output": [
          0,
          53,
          45,
          85
        ]
      }
    ]
  },
  {
    "id": "c112",
    "difficulty": 79,
    "function": "def c112(x):\n    # count from 1 to the last element\n    return list(range(1, x[-1]+1))\n\n",
    "data": {
      "input": [
        12,
        59,
        96,
        45,
        58,
        85,
        10
      ],
      "output": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ]
    },
    "demos": [
      {
        "input": [
          91,
          45,
          8
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ]
      },
      {
        "input": [
          89,
          14,
          89,
          13
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ]
      },
      {
        "input": [
          14,
          19,
          70,
          13
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ]
      }
    ]
  },
  {
    "id": "c030",
    "difficulty": 80,
    "function": "def c030(x):\n    # remove the last 2 elements\n    return x[:-2]\n\n",
    "data": {
      "input": [
        15,
        32,
        78,
        75
      ],
      "output": [
        15,
        32
      ]
    },
    "demos": [
      {
        "input": [
          41,
          17,
          37,
          77,
          21,
          99
        ],
        "output": [
          41,
          17,
          37,
          77
        ]
      },
      {
        "input": [
          54,
          60,
          21
        ],
        "output": [
          54
        ]
      },
      {
        "input": [
          33,
          43,
          23,
          70,
          73,
          33,
          40
        ],
        "output": [
          33,
          43,
          23,
          70,
          73
        ]
      }
    ]
  },
  {
    "id": "c149",
    "difficulty": 81,
    "function": "def c149(x):\n    # replace each element, M with M * first element; remove the first element\n    return [i*x[0] for i in x[1:]]\n\n",
    "data": {
      "input": [
        14,
        15,
        7,
        12,
        18
      ],
      "output": [
        210,
        98,
        168,
        252
      ]
    },
    "demos": [
      {
        "input": [
          12,
          19,
          9
        ],
        "output": [
          228,
          108
        ]
      },
      {
        "input": [
          1,
          6,
          15,
          17,
          15,
          16
        ],
        "output": [
          6,
          15,
          17,
          15,
          16
        ]
      },
      {
        "input": [
          18,
          8,
          8
        ],
        "output": [
          144,
          144
        ]
      }
    ]
  },
  {
    "id": "c148",
    "difficulty": 82,
    "function": "def c148(x):\n    # count from 1 to each element\n    res = []\n    for i in x:\n        res += list(range(1, i+1))\n    return res\n\n",
    "data": {
      "input": [
        0,
        3,
        2,
        0,
        2
      ],
      "output": [
        1,
        2,
        3,
        1,
        2,
        1,
        2
      ]
    },
    "demos": [
      {
        "input": [
          2,
          1,
          2
        ],
        "output": [
          1,
          2,
          1,
          1,
          2
        ]
      },
      {
        "input": [
          3,
          4,
          3,
          4
        ],
        "output": [
          1,
          2,
          3,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          1,
          2,
          3,
          4
        ]
      },
      {
        "input": [
          2,
          0,
          4,
          1,
          1,
          3
        ],
        "output": [
          1,
          2,
          1,
          2,
          3,
          4,
          1,
          1,
          1,
          2,
          3
        ]
      }
    ]
  },
  {
    "id": "c017",
    "difficulty": 83,
    "function": "def c017(x):\n    # replace x[1] with 8\n    x[1] = 8\n    return x\n\n",
    "data": {
      "input": [
        88,
        16,
        60
      ],
      "output": [
        88,
        8,
        60
      ]
    },
    "demos": [
      {
        "input": [
          22,
          19,
          4,
          94,
          30,
          81
        ],
        "output": [
          22,
          8,
          4,
          94,
          30,
          81
        ]
      },
      {
        "input": [
          56,
          37,
          39,
          42,
          39
        ],
        "output": [
          56,
          8,
          39,
          42,
          39
        ]
      },
      {
        "input": [
          37,
          91,
          17,
          95,
          83,
          42
        ],
        "output": [
          37,
          8,
          17,
          95,
          83,
          42
        ]
      }
    ]
  },
  {
    "id": "c092",
    "difficulty": 84,
    "function": "def c092(x):\n    # concatenate 92, 63, 34, 18, 55\n    return x + [92, 63, 34, 18, 55]\n\n",
    "data": {
      "input": [
        85,
        28,
        52
      ],
      "output": [
        85,
        28,
        52,
        92,
        63,
        34,
        18,
        55
      ]
    },
    "demos": [
      {
        "input": [
          80,
          85,
          89,
          97,
          5,
          90
        ],
        "output": [
          80,
          85,
          89,
          97,
          5,
          90,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          21,
          97,
          54,
          9
        ],
        "output": [
          21,
          97,
          54,
          9,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          90,
          56,
          37,
          40,
          12,
          95
        ],
        "output": [
          90,
          56,
          37,
          40,
          12,
          95,
          92,
          63,
          34,
          18,
          55
        ]
      }
    ]
  },
  {
    "id": "c077",
    "difficulty": 85,
    "function": "def c077(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        92,
        19,
        41,
        76,
        70,
        35
      ],
      "output": [
        6
      ]
    },
    "demos": [
      {
        "input": [
          72,
          57,
          4,
          33,
          7
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          98,
          82,
          21,
          95,
          64,
          16,
          76
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          34,
          62,
          35,
          90,
          53,
          28,
          95
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c248",
    "difficulty": 87,
    "function": "def c248(x):\n    # elements after the first 0\n    return x[x.index(0)+1:]\n\n",
    "data": {
      "input": [
        0,
        95,
        3,
        22,
        50,
        70
      ],
      "output": [
        95,
        3,
        22,
        50,
        70
      ]
    },
    "demos": [
      {
        "input": [
          90,
          39,
          51,
          0,
          93,
          84,
          82
        ],
        "output": [
          93,
          84,
          82
        ]
      },
      {
        "input": [
          76,
          0,
          7,
          46,
          60,
          98,
          23
        ],
        "output": [
          7,
          46,
          60,
          98,
          23
        ]
      },
      {
        "input": [
          81,
          18,
          0,
          41,
          0,
          89
        ],
        "output": [
          41,
          0,
          89
        ]
      }
    ]
  },
  {
    "id": "c199",
    "difficulty": 88,
    "function": "def c199(x):\n    # elements in ascending order, each preceded by its rank\n    res = []\n    for i, v in enumerate(sorted(x)):\n        res.append(i+1)\n        res.append(v)\n    return res\n\n",
    "data": {
      "input": [
        18,
        69,
        97,
        44,
        12,
        71
      ],
      "output": [
        1,
        12,
        2,
        18,
        3,
        44,
        4,
        69,
        5,
        71,
        6,
        97
      ]
    },
    "demos": [
      {
        "input": [
          27,
          14,
          8,
          85,
          23,
          60
        ],
        "output": [
          1,
          8,
          2,
          14,
          3,
          23,
          4,
          27,
          5,
          60,
          6,
          85
        ]
      },
      {
        "input": [
          97,
          92,
          1
        ],
        "output": [
          1,
          1,
          2,
          92,
          3,
          97
        ]
      },
      {
        "input": [
          55,
          58,
          18,
          51,
          42,
          83,
          66
        ],
        "output": [
          1,
          18,
          2,
          42,
          3,
          51,
          4,
          55,
          5,
          58,
          6,
          66,
          7,
          83
        ]
      }
    ]
  },
  {
    "id": "c007",
    "difficulty": 89,
    "function": "def c007(x):\n    # remove all but the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        71,
        89,
        15
      ],
      "output": [
        71,
        89
      ]
    },
    "demos": [
      {
        "input": [
          67,
          42,
          45,
          63,
          53,
          89
        ],
        "output": [
          67,
          42
        ]
      },
      {
        "input": [
          41,
          2,
          49
        ],
        "output": [
          41,
          2
        ]
      },
      {
        "input": [
          10,
          5,
          69,
          85,
          21,
          0
        ],
        "output": [
          10,
          5
        ]
      }
    ]
  },
  {
    "id": "c176",
    "difficulty": 90,
    "function": "def c176(x):\n    # sum of each consecutive pair of elements\n    return [x[i] + x[i+1] for i in range(0, len(x)-1)]\n\n",
    "data": {
      "input": [
        2,
        79,
        0
      ],
      "output": [
        81,
        79
      ]
    },
    "demos": [
      {
        "input": [
          31,
          17,
          60,
          15,
          42
        ],
        "output": [
          48,
          77,
          75,
          57
        ]
      },
      {
        "input": [
          53,
          21,
          70
        ],
        "output": [
          74,
          91
        ]
      },
      {
        "input": [
          13,
          95,
          73,
          10
        ],
        "output": [
          108,
          168,
          83
        ]
      }
    ]
  },
  {
    "id": "c066",
    "difficulty": 91,
    "function": "def c066(x):\n    # left rotate the list by 1\n    return x[1:] + x[:1]\n\n",
    "data": {
      "input": [
        85,
        26,
        60,
        95,
        51,
        18,
        25
      ],
      "output": [
        26,
        60,
        95,
        51,
        18,
        25,
        85
      ]
    },
    "demos": [
      {
        "input": [
          61,
          65,
          63,
          39,
          63,
          45
        ],
        "output": [
          65,
          63,
          39,
          63,
          45,
          61
        ]
      },
      {
        "input": [
          87,
          78,
          58,
          20,
          38,
          20
        ],
        "output": [
          78,
          58,
          20,
          38,
          20,
          87
        ]
      },
      {
        "input": [
          46,
          45,
          18,
          30
        ],
        "output": [
          45,
          18,
          30,
          46
        ]
      }
    ]
  },
  {
    "id": "c053",
    "difficulty": 92,
    "function": "def c053(x):\n    # replace x[1] with x[0]\n    x[1] = x[0]\n    return x\n\n",
    "data": {
      "input": [
        99,
        66,
        45,
        12,
        55
      ],
      "output": [
        99,
        99,
        45,
        12,
        55
      ]
    },
    "demos": [
      {
        "input": [
          6,
          71,
          80
        ],
        "output": [
          6,
          6,
          80
        ]
      },
      {
        "input": [
          76,
          99,
          83,
          39,
          86,
          18,
          3
        ],
        "output": [
          76,
          76,
          83,
          39,
          86,
          18,
          3
        ]
      },
      {
        "input": [
          4,
          31,
          8
        ],
        "output": [
          4,
          4,
          8
        ]
      }
    ]
  },
  {
    "id": "c047",
    "difficulty": 93,
    "function": "def c047(x):\n    # concatenate 9, 6, 3, 8, 5\n    return [9, 6, 3, 8, 5] + x\n\n",
    "data": {
      "input": [
        42,
        71,
        14,
        96
      ],
      "output": [
        9,
        6,
        3,
        8,
        5,
        42,
        71,
        14,
        96
      ]
    },
    "demos": [
      {
        "input": [
          34,
          62,
          72,
          69
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          34,
          62,
          72,
          69
        ]
      },
      {
        "input": [
          81,
          49,
          59,
          20,
          60,
          24,
          89
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          81,
          49,
          59,
          20,
          60,
          24,
          89
        ]
      },
      {
        "input": [
          45,
          12,
          68,
          54
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          45,
          12,
          68,
          54
        ]
      }
    ]
  },
  {
    "id": "c064",
    "difficulty": 94,
    "function": "def c064(x):\n    # remove the first and last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        40,
        77,
        96,
        88,
        9
      ],
      "output": [
        77,
        96,
        88
      ]
    },
    "demos": [
      {
        "input": [
          94,
          62,
          61
        ],
        "output": [
          62
        ]
      },
      {
        "input": [
          80,
          86,
          38
        ],
        "output": [
          86
        ]
      },
      {
        "input": [
          48,
          15,
          83,
          54
        ],
        "output": [
          15,
          83
        ]
      }
    ]
  },
  {
    "id": "c078",
    "difficulty": 95,
    "function": "def c078(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        26,
        30,
        23,
        12
      ],
      "output": [
        30
      ]
    },
    "demos": [
      {
        "input": [
          70,
          80,
          17,
          86,
          70,
          87,
          84
        ],
        "output": [
          87
        ]
      },
      {
        "input": [
          60,
          24,
          57,
          34,
          61,
          26
        ],
        "output": [
          61
        ]
      },
      {
        "input": [
          88,
          94,
          69,
          75,
          98,
          4
        ],
        "output": [
          98
        ]
      }
    ]
  },
  {
    "id": "c119",
    "difficulty": 96,
    "function": "def c119(x):\n    # make the list begin and ends with 8\n    if x[0] != 8:\n        x = [8] + x\n    if x[-1] != 8:\n        x = x + [8]\n    return x\n\n",
    "data": {
      "input": [
        62,
        0,
        11,
        71,
        18,
        99
      ],
      "output": [
        8,
        62,
        0,
        11,
        71,
        18,
        99,
        8
      ]
    },
    "demos": [
      {
        "input": [
          92,
          33,
          47,
          84,
          77
        ],
        "output": [
          8,
          92,
          33,
          47,
          84,
          77,
          8
        ]
      },
      {
        "input": [
          86,
          30,
          59,
          26,
          42,
          63
        ],
        "output": [
          8,
          86,
          30,
          59,
          26,
          42,
          63,
          8
        ]
      },
      {
        "input": [
          17,
          95,
          22
        ],
        "output": [
          8,
          17,
          95,
          22,
          8
        ]
      }
    ]
  },
  {
    "id": "c135",
    "difficulty": 97,
    "function": "def c135(x):\n    # remove the first 7\n    x.remove(7)\n    return x\n\n",
    "data": {
      "input": [
        4,
        4,
        7,
        9,
        7,
        7,
        7,
        0
      ],
      "output": [
        4,
        4,
        9,
        7,
        7,
        7,
        0
      ]
    },
    "demos": [
      {
        "input": [
          4,
          7,
          7,
          8,
          1,
          7,
          5,
          2
        ],
        "output": [
          4,
          7,
          8,
          1,
          7,
          5,
          2
        ]
      },
      {
        "input": [
          1,
          7,
          9,
          7,
          2
        ],
        "output": [
          1,
          9,
          7,
          2
        ]
      },
      {
        "input": [
          3,
          7,
          5,
          2,
          7,
          7
        ],
        "output": [
          3,
          5,
          2,
          7,
          7
        ]
      }
    ]
  },
  {
    "id": "c198",
    "difficulty": 98,
    "function": "def c198(x):\n    # unique elements in descending order\n    res = set(x)\n    return sorted(res, reverse=True)\n\n",
    "data": {
      "input": [
        20,
        47,
        20,
        17,
        74
      ],
      "output": [
        74,
        47,
        20,
        17
      ]
    },
    "demos": [
      {
        "input": [
          28,
          27,
          28,
          28,
          53,
          73
        ],
        "output": [
          73,
          53,
          28,
          27
        ]
      },
      {
        "input": [
          35,
          27,
          88,
          85,
          85,
          88
        ],
        "output": [
          88,
          85,
          35,
          27
        ]
      },
      {
        "input": [
          56,
          10,
          70,
          78,
          56
        ],
        "output": [
          78,
          70,
          56,
          10
        ]
      }
    ]
  },
  {
    "id": "c219",
    "difficulty": 99,
    "function": "def c219(x):\n    # keep only every other element\n    return x[::2]\n\n",
    "data": {
      "input": [
        40,
        43,
        71,
        63
      ],
      "output": [
        40,
        71
      ]
    },
    "demos": [
      {
        "input": [
          63,
          91,
          5,
          50,
          65,
          74,
          27,
          54,
          5
        ],
        "output": [
          63,
          5,
          65,
          27,
          5
        ]
      },
      {
        "input": [
          38,
          45,
          43,
          15
        ],
        "output": [
          38,
          43
        ]
      },
      {
        "input": [
          81,
          36,
          34,
          39,
          45
        ],
        "output": [
          81,
          34,
          45
        ]
      }
    ]
  },
  {
    "id": "c075",
    "difficulty": 100,
    "function": "def c075(x):\n    # remove even index\n    return x[1::2]\n\n",
    "data": {
      "input": [
        97,
        96,
        81,
        89
      ],
      "output": [
        96,
        89
      ]
    },
    "demos": [
      {
        "input": [
          74,
          25,
          6,
          89,
          81,
          81
        ],
        "output": [
          25,
          89,
          81
        ]
      },
      {
        "input": [
          0,
          84,
          80,
          46,
          87,
          94,
          77,
          82
        ],
        "output": [
          84,
          46,
          94,
          82
        ]
      },
      {
        "input": [
          79,
          97,
          77,
          52
        ],
        "output": [
          97,
          52
        ]
      }
    ]
  },
  {
    "id": "c177",
    "difficulty": 101,
    "function": "def c177(x):\n    # interleave the input and the reversed input\n    return [i for pair in zip(x, x[::-1]) for i in pair]\n\n",
    "data": {
      "input": [
        34,
        54,
        56
      ],
      "output": [
        34,
        56,
        54,
        54,
        56,
        34
      ]
    },
    "demos": [
      {
        "input": [
          92,
          4,
          96,
          42,
          61
        ],
        "output": [
          92,
          61,
          4,
          42,
          96,
          96,
          42,
          4,
          61,
          92
        ]
      },
      {
        "input": [
          10,
          3,
          68,
          78,
          17,
          35,
          35
        ],
        "output": [
          10,
          35,
          3,
          35,
          68,
          17,
          78,
          78,
          17,
          68,
          35,
          3,
          35,
          10
        ]
      },
      {
        "input": [
          86,
          74,
          2,
          75,
          74
        ],
        "output": [
          86,
          74,
          74,
          75,
          2,
          2,
          75,
          74,
          74,
          86
        ]
      }
    ]
  },
  {
    "id": "c025",
    "difficulty": 102,
    "function": "def c025(x):\n    # remove element 1\n    return x[:1] + x[2:]\n\n",
    "data": {
      "input": [
        68,
        72,
        83,
        9,
        16
      ],
      "output": [
        68,
        83,
        9,
        16
      ]
    },
    "demos": [
      {
        "input": [
          35,
          48,
          45,
          10
        ],
        "output": [
          35,
          45,
          10
        ]
      },
      {
        "input": [
          21,
          97,
          11,
          34,
          36,
          85
        ],
        "output": [
          21,
          11,
          34,
          36,
          85
        ]
      },
      {
        "input": [
          61,
          54,
          89,
          43,
          25,
          8
        ],
        "output": [
          61,
          89,
          43,
          25,
          8
        ]
      }
    ]
  },
  {
    "id": "c125",
    "difficulty": 103,
    "function": "def c125(x):\n    # keep only elements whose tens digit equals the tens digit of the first element\n    return [i for i in x if len(str(i)) > 1 and str(i)[-2] == str(x[0])[-2]]\n\n",
    "data": {
      "input": [
        93,
        97,
        34,
        74,
        31,
        84,
        68
      ],
      "output": [
        93,
        97
      ]
    },
    "demos": [
      {
        "input": [
          31,
          31,
          12,
          17,
          78,
          63,
          37
        ],
        "output": [
          31,
          31,
          37
        ]
      },
      {
        "input": [
          87,
          61,
          95,
          4,
          45
        ],
        "output": [
          87
        ]
      },
      {
        "input": [
          70,
          65,
          72,
          56,
          70,
          13,
          96,
          75,
          67
        ],
        "output": [
          70,
          72,
          70,
          75
        ]
      }
    ]
  },
  {
    "id": "c087",
    "difficulty": 105,
    "function": "def c087(x):\n    # swap second and third element\n    x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        37,
        44,
        19,
        71
      ],
      "output": [
        37,
        19,
        44,
        71
      ]
    },
    "demos": [
      {
        "input": [
          65,
          79,
          23
        ],
        "output": [
          65,
          23,
          79
        ]
      },
      {
        "input": [
          0,
          43,
          51,
          33,
          49,
          84,
          68
        ],
        "output": [
          0,
          51,
          43,
          33,
          49,
          84,
          68
        ]
      },
      {
        "input": [
          21,
          82,
          64,
          66,
          51,
          68
        ],
        "output": [
          21,
          64,
          82,
          66,
          51,
          68
        ]
      }
    ]
  },
  {
    "id": "c013",
    "difficulty": 106,
    "function": "def c013(x):\n    # element 2 through 6\n    return x[2:6]\n\n",
    "data": {
      "input": [
        68,
        65,
        99,
        84,
        99,
        61
      ],
      "output": [
        99,
        84,
        99,
        61
      ]
    },
    "demos": [
      {
        "input": [
          92,
          72,
          15,
          34,
          14,
          31,
          27,
          51,
          80
        ],
        "output": [
          15,
          34,
          14,
          31
        ]
      },
      {
        "input": [
          28,
          3,
          29,
          8,
          9,
          71,
          31,
          67
        ],
        "output": [
          29,
          8,
          9,
          71
        ]
      },
      {
        "input": [
          49,
          83,
          33,
          99,
          64,
          80,
          49,
          20,
          28
        ],
        "output": [
          33,
          99,
          64,
          80
        ]
      }
    ]
  },
  {
    "id": "c069",
    "difficulty": 107,
    "function": "def c069(x):\n    # 9,3,4,0, input, 7,2,9,1\n    return [9,3,4,0] + x + [7,2,9,1]\n\n",
    "data": {
      "input": [
        21,
        93,
        75,
        29
      ],
      "output": [
        9,
        3,
        4,
        0,
        21,
        93,
        75,
        29,
        7,
        2,
        9,
        1
      ]
    },
    "demos": [
      {
        "input": [
          0,
          84,
          63,
          52
        ],
        "output": [
          9,
          3,
          4,
          0,
          0,
          84,
          63,
          52,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          45,
          18,
          10,
          30,
          30
        ],
        "output": [
          9,
          3,
          4,
          0,
          45,
          18,
          10,
          30,
          30,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          16,
          98,
          84,
          58
        ],
        "output": [
          9,
          3,
          4,
          0,
          16,
          98,
          84,
          58,
          7,
          2,
          9,
          1
        ]
      }
    ]
  },
  {
    "id": "c117",
    "difficulty": 108,
    "function": "def c117(x):\n    # left rotate by 3\n    return x[3:] + x[:3]\n\n",
    "data": {
      "input": [
        83,
        52,
        86,
        34
      ],
      "output": [
        34,
        83,
        52,
        86
      ]
    },
    "demos": [
      {
        "input": [
          71,
          89,
          92,
          10,
          70
        ],
        "output": [
          10,
          70,
          71,
          89,
          92
        ]
      },
      {
        "input": [
          50,
          30,
          32
        ],
        "output": [
          50,
          30,
          32
        ]
      },
      {
        "input": [
          42,
          8,
          94,
          13,
          40
        ],
        "output": [
          13,
          40,
          42,
          8,
          94
        ]
      }
    ]
  },
  {
    "id": "c228",
    "difficulty": 109,
    "function": "def c228(x):\n    # replace each element with the number of occurrences of that element so far\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        92,
        92,
        69,
        54,
        98,
        92
      ],
      "output": [
        1,
        2,
        1,
        1,
        1,
        3
      ]
    },
    "demos": [
      {
        "input": [
          73,
          34,
          10,
          73,
          10,
          70
        ],
        "output": [
          1,
          1,
          1,
          2,
          2,
          1
        ]
      },
      {
        "input": [
          43,
          80,
          56,
          43,
          43,
          8
        ],
        "output": [
          1,
          1,
          1,
          2,
          3,
          1
        ]
      },
      {
        "input": [
          81,
          81,
          81,
          24,
          13
        ],
        "output": [
          1,
          2,
          3,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c197",
    "difficulty": 110,
    "function": "def c197(x):\n    # replace each element with the number of occurrences of that element\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in x:\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        87,
        26,
        76,
        50,
        87,
        15,
        67,
        15
      ],
      "output": [
        2,
        1,
        1,
        1,
        2,
        2,
        1,
        2
      ]
    },
    "demos": [
      {
        "input": [
          9,
          71,
          28,
          71,
          85
        ],
        "output": [
          1,
          2,
          1,
          2,
          1
        ]
      },
      {
        "input": [
          79,
          43,
          79,
          37,
          79,
          54
        ],
        "output": [
          3,
          1,
          3,
          1,
          3,
          1
        ]
      },
      {
        "input": [
          49,
          24,
          44,
          56,
          49,
          69,
          65
        ],
        "output": [
          2,
          1,
          1,
          1,
          2,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c065",
    "difficulty": 111,
    "function": "def c065(x):\n    # prepend 9 and append 7\n    return [9] + x + [7]\n\n",
    "data": {
      "input": [
        43,
        66,
        68
      ],
      "output": [
        9,
        43,
        66,
        68,
        7
      ]
    },
    "demos": [
      {
        "input": [
          76,
          44,
          18,
          36,
          4,
          26,
          19
        ],
        "output": [
          9,
          76,
          44,
          18,
          36,
          4,
          26,
          19,
          7
        ]
      },
      {
        "input": [
          33,
          44,
          10,
          50,
          79
        ],
        "output": [
          9,
          33,
          44,
          10,
          50,
          79,
          7
        ]
      },
      {
        "input": [
          54,
          2,
          85
        ],
        "output": [
          9,
          54,
          2,
          85,
          7
        ]
      }
    ]
  },
  {
    "id": "c156",
    "difficulty": 112,
    "function": "def c156(x):\n    # reverse the input and add each element to its new index\n    x = x[::-1]\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        71,
        32,
        99,
        42
      ],
      "output": [
        42,
        100,
        34,
        74
      ]
    },
    "demos": [
      {
        "input": [
          80,
          61,
          21,
          56
        ],
        "output": [
          56,
          22,
          63,
          83
        ]
      },
      {
        "input": [
          66,
          10,
          94,
          92,
          73,
          10
        ],
        "output": [
          10,
          74,
          94,
          97,
          14,
          71
        ]
      },
      {
        "input": [
          38,
          84,
          94
        ],
        "output": [
          94,
          85,
          40
        ]
      }
    ]
  },
  {
    "id": "c110",
    "difficulty": 113,
    "function": "def c110(x):\n    # three largest elements in descending order\n    return sorted(x, reverse=True)[:3]\n\n",
    "data": {
      "input": [
        4,
        56,
        86,
        47,
        29,
        43,
        45
      ],
      "output": [
        86,
        56,
        47
      ]
    },
    "demos": [
      {
        "input": [
          79,
          65,
          55,
          34,
          3,
          78,
          8
        ],
        "output": [
          79,
          78,
          65
        ]
      },
      {
        "input": [
          99,
          12,
          23,
          69,
          85,
          47,
          99
        ],
        "output": [
          99,
          99,
          85
        ]
      },
      {
        "input": [
          32,
          40,
          39,
          57,
          48,
          96
        ],
        "output": [
          96,
          57,
          48
        ]
      }
    ]
  },
  {
    "id": "c233",
    "difficulty": 114,
    "function": "def c233(x):\n    # number of occurrences of each unique element, in order of appearance\n    numbers = []\n    res = []\n    for i in x:\n        if i not in numbers:\n            numbers.append(i)\n            res.append(x.count(i))\n    return res\n\n",
    "data": {
      "input": [
        7,
        6,
        8,
        2,
        8
      ],
      "output": [
        1,
        1,
        2,
        1
      ]
    },
    "demos": [
      {
        "input": [
          4,
          6,
          4,
          7,
          2
        ],
        "output": [
          2,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          0,
          8,
          3,
          9,
          9,
          0,
          9,
          8
        ],
        "output": [
          2,
          2,
          1,
          3
        ]
      },
      {
        "input": [
          10,
          4,
          10,
          4,
          8,
          4,
          2
        ],
        "output": [
          2,
          3,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c003",
    "difficulty": 115,
    "function": "def c003(x):\n    # remove all but seventh element\n    return [x[6]]\n\n",
    "data": {
      "input": [
        51,
        68,
        51,
        97,
        88,
        47,
        88,
        38,
        97,
        57
      ],
      "output": [
        88
      ]
    },
    "demos": [
      {
        "input": [
          45,
          36,
          76,
          21,
          96,
          91,
          53,
          27
        ],
        "output": [
          53
        ]
      },
      {
        "input": [
          58,
          52,
          38,
          19,
          11,
          26,
          12,
          61
        ],
        "output": [
          12
        ]
      },
      {
        "input": [
          78,
          97,
          27,
          10,
          95,
          16,
          63,
          81
        ],
        "output": [
          63
        ]
      }
    ]
  },
  {
    "id": "c230",
    "difficulty": 116,
    "function": "def c230(x):\n    # count by 2 from the smallest element to the largest element\n    return list(range(min(x), max(x)+1, 2))\n\n",
    "data": {
      "input": [
        25,
        9,
        19
      ],
      "output": [
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25
      ]
    },
    "demos": [
      {
        "input": [
          43,
          42,
          30
        ],
        "output": [
          30,
          32,
          34,
          36,
          38,
          40,
          42
        ]
      },
      {
        "input": [
          11,
          15,
          4
        ],
        "output": [
          4,
          6,
          8,
          10,
          12,
          14
        ]
      },
      {
        "input": [
          60,
          52,
          59
        ],
        "output": [
          52,
          54,
          56,
          58,
          60
        ]
      }
    ]
  },
  {
    "id": "c122",
    "difficulty": 117,
    "function": "def c122(x):\n    # remove all but penultimate element\n    return [x[-2]]\n\n",
    "data": {
      "input": [
        91,
        25,
        31,
        61,
        61,
        94,
        89
      ],
      "output": [
        94
      ]
    },
    "demos": [
      {
        "input": [
          22,
          35,
          52,
          55
        ],
        "output": [
          52
        ]
      },
      {
        "input": [
          49,
          88,
          41
        ],
        "output": [
          88
        ]
      },
      {
        "input": [
          47,
          97,
          4,
          55,
          13,
          6
        ],
        "output": [
          13
        ]
      }
    ]
  },
  {
    "id": "c020",
    "difficulty": 118,
    "function": "def c020(x):\n    # replace the first element with the last element\n    x[0] = x[-1]\n    return x\n\n",
    "data": {
      "input": [
        85,
        3,
        92,
        53,
        74,
        46
      ],
      "output": [
        46,
        3,
        92,
        53,
        74,
        46
      ]
    },
    "demos": [
      {
        "input": [
          6,
          68,
          76
        ],
        "output": [
          76,
          68,
          76
        ]
      },
      {
        "input": [
          5,
          64,
          38,
          7,
          96,
          70
        ],
        "output": [
          70,
          64,
          38,
          7,
          96,
          70
        ]
      },
      {
        "input": [
          57,
          23,
          46,
          62,
          4
        ],
        "output": [
          4,
          23,
          46,
          62,
          4
        ]
      }
    ]
  },
  {
    "id": "c235",
    "difficulty": 119,
    "function": "def c235(x):\n    # count up and down between elements\n    res = []\n    for i in range(len(x)-1):\n        if x[i] < x[i+1]:\n            res += list(range(x[i], x[i+1]+1))\n        else:\n            res += list(range(x[i], x[i+1]-1, -1))\n    return res\n\n",
    "data": {
      "input": [
        95,
        90,
        91
      ],
      "output": [
        95,
        94,
        93,
        92,
        91,
        90,
        90,
        91
      ]
    },
    "demos": [
      {
        "input": [
          66,
          66,
          64
        ],
        "output": [
          66,
          66,
          65,
          64
        ]
      },
      {
        "input": [
          57,
          56,
          60
        ],
        "output": [
          57,
          56,
          56,
          57,
          58,
          59,
          60
        ]
      },
      {
        "input": [
          41,
          43,
          44
        ],
        "output": [
          41,
          42,
          43,
          43,
          44
        ]
      }
    ]
  },
  {
    "id": "c157",
    "difficulty": 120,
    "function": "def c157(x):\n    # each element followed by 0 if even, 1 if odd\n    res = []\n    for i in x:\n        res.append(i)\n        res.append(i % 2)\n    return res\n\n",
    "data": {
      "input": [
        60,
        9,
        51,
        96,
        59,
        29,
        45
      ],
      "output": [
        60,
        0,
        9,
        1,
        51,
        1,
        96,
        0,
        59,
        1,
        29,
        1,
        45,
        1
      ]
    },
    "demos": [
      {
        "input": [
          53,
          29,
          72,
          84,
          67
        ],
        "output": [
          53,
          1,
          29,
          1,
          72,
          0,
          84,
          0,
          67,
          1
        ]
      },
      {
        "input": [
          19,
          71,
          33,
          32,
          7,
          62
        ],
        "output": [
          19,
          1,
          71,
          1,
          33,
          1,
          32,
          0,
          7,
          1,
          62,
          0
        ]
      },
      {
        "input": [
          78,
          4,
          43,
          45,
          36,
          7
        ],
        "output": [
          78,
          0,
          4,
          0,
          43,
          1,
          45,
          1,
          36,
          0,
          7,
          1
        ]
      }
    ]
  },
  {
    "id": "c185",
    "difficulty": 121,
    "function": "def c185(x):\n    # replace the sublist between the first and last with its sum\n    return x[:1] + [sum(x[1:-1])] + x[-1:]\n\n",
    "data": {
      "input": [
        18,
        18,
        2,
        19,
        8
      ],
      "output": [
        18,
        39,
        8
      ]
    },
    "demos": [
      {
        "input": [
          5,
          17,
          12,
          7,
          20,
          11
        ],
        "output": [
          5,
          56,
          11
        ]
      },
      {
        "input": [
          6,
          18,
          2,
          15
        ],
        "output": [
          6,
          20,
          15
        ]
      },
      {
        "input": [
          15,
          13,
          3,
          17,
          4,
          20,
          9
        ],
        "output": [
          15,
          57,
          9
        ]
      }
    ]
  },
  {
    "id": "c213",
    "difficulty": 122,
    "function": "def c213(x):\n    # three smallest elements in ascending order\n    return sorted(x)[:3]\n\n",
    "data": {
      "input": [
        8,
        55,
        39
      ],
      "output": [
        8,
        39,
        55
      ]
    },
    "demos": [
      {
        "input": [
          99,
          11,
          86,
          51,
          85
        ],
        "output": [
          11,
          51,
          85
        ]
      },
      {
        "input": [
          4,
          13,
          14,
          39,
          47
        ],
        "output": [
          4,
          13,
          14
        ]
      },
      {
        "input": [
          63,
          57,
          21,
          39,
          54
        ],
        "output": [
          21,
          39,
          54
        ]
      }
    ]
  },
  {
    "id": "c184",
    "difficulty": 123,
    "function": "def c184(x):\n    # keep only odd elements with an even index\n    return [i for i in x if i % 2 == 1 and x.index(i) % 2 == 0]\n\n",
    "data": {
      "input": [
        99,
        40,
        5,
        66,
        72,
        57,
        53,
        71
      ],
      "output": [
        99,
        5,
        53
      ]
    },
    "demos": [
      {
        "input": [
          3,
          55,
          61,
          83,
          80,
          27,
          18
        ],
        "output": [
          3,
          61
        ]
      },
      {
        "input": [
          55,
          15,
          17,
          79,
          47,
          75,
          40
        ],
        "output": [
          55,
          17,
          47
        ]
      },
      {
        "input": [
          45,
          4,
          18,
          72,
          80,
          63,
          85,
          6
        ],
        "output": [
          45,
          85
        ]
      }
    ]
  },
  {
    "id": "c155",
    "difficulty": 124,
    "function": "def c155(x):\n    # multiply each element by its index\n    return [i*j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        20,
        31,
        11
      ],
      "output": [
        0,
        31,
        22
      ]
    },
    "demos": [
      {
        "input": [
          19,
          28,
          84,
          6
        ],
        "output": [
          0,
          28,
          168,
          18
        ]
      },
      {
        "input": [
          89,
          49,
          82
        ],
        "output": [
          0,
          49,
          164
        ]
      },
      {
        "input": [
          4,
          9,
          19,
          86,
          53
        ],
        "output": [
          0,
          9,
          38,
          258,
          212
        ]
      }
    ]
  },
  {
    "id": "c082",
    "difficulty": 125,
    "function": "def c082(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        66,
        12,
        90,
        11,
        39
      ],
      "output": [
        90
      ]
    },
    "demos": [
      {
        "input": [
          98,
          62,
          96,
          24,
          49
        ],
        "output": [
          96
        ]
      },
      {
        "input": [
          69,
          50,
          42,
          96
        ],
        "output": [
          42
        ]
      },
      {
        "input": [
          58,
          2,
          18,
          4,
          15,
          55,
          3
        ],
        "output": [
          18
        ]
      }
    ]
  },
  {
    "id": "c231",
    "difficulty": 126,
    "function": "def c231(x):\n    # the number of occurrences of each unique element in ascending order\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    return sorted(res.values())\n\n",
    "data": {
      "input": [
        8,
        6,
        7,
        10,
        10,
        2,
        8,
        7,
        7
      ],
      "output": [
        1,
        1,
        2,
        2,
        3
      ]
    },
    "demos": [
      {
        "input": [
          6,
          6,
          10,
          5,
          5,
          5,
          6,
          5,
          10
        ],
        "output": [
          2,
          3,
          4
        ]
      },
      {
        "input": [
          9,
          5,
          9,
          4,
          5,
          1,
          5,
          5,
          4,
          5,
          5
        ],
        "output": [
          1,
          2,
          2,
          6
        ]
      },
      {
        "input": [
          3,
          1,
          3,
          7,
          1,
          3,
          8,
          3,
          5
        ],
        "output": [
          1,
          1,
          1,
          2,
          4
        ]
      }
    ]
  },
  {
    "id": "c099",
    "difficulty": 127,
    "function": "def c099(x):\n    # remove the lower half of the list\n    median = sorted(x)[len(x)//2]\n    return [i for i in x if i >= median]\n\n",
    "data": {
      "input": [
        61,
        92,
        75,
        45,
        32,
        60
      ],
      "output": [
        61,
        92,
        75
      ]
    },
    "demos": [
      {
        "input": [
          67,
          53,
          38,
          24,
          77,
          38
        ],
        "output": [
          67,
          53,
          77
        ]
      },
      {
        "input": [
          97,
          22,
          73,
          90,
          7,
          72,
          4,
          44,
          48
        ],
        "output": [
          97,
          73,
          90,
          72,
          48
        ]
      },
      {
        "input": [
          64,
          25,
          12,
          10,
          58,
          80,
          81,
          91,
          9
        ],
        "output": [
          64,
          58,
          80,
          81,
          91
        ]
      }
    ]
  },
  {
    "id": "c247",
    "difficulty": 128,
    "function": "def c247(x):\n    # elements before the first 0\n    return x[:x.index(0)]\n\n",
    "data": {
      "input": [
        69,
        49,
        53,
        0,
        96,
        0
      ],
      "output": [
        69,
        49,
        53
      ]
    },
    "demos": [
      {
        "input": [
          68,
          90,
          94,
          0,
          6,
          0,
          93
        ],
        "output": [
          68,
          90,
          94
        ]
      },
      {
        "input": [
          62,
          44,
          0,
          0,
          13,
          72,
          26,
          99,
          0
        ],
        "output": [
          62,
          44
        ]
      },
      {
        "input": [
          59,
          11,
          0,
          0,
          39,
          0,
          27
        ],
        "output": [
          59,
          11
        ]
      }
    ]
  },
  {
    "id": "c008",
    "difficulty": 129,
    "function": "def c008(x):\n    # the first 5 elements\n    return x[:5]\n\n",
    "data": {
      "input": [
        12,
        19,
        92,
        16,
        41
      ],
      "output": [
        12,
        19,
        92,
        16,
        41
      ]
    },
    "demos": [
      {
        "input": [
          10,
          34,
          16,
          4,
          78
        ],
        "output": [
          10,
          34,
          16,
          4,
          78
        ]
      },
      {
        "input": [
          93,
          2,
          69,
          68,
          19,
          54,
          89
        ],
        "output": [
          93,
          2,
          69,
          68,
          19
        ]
      },
      {
        "input": [
          18,
          86,
          64,
          33,
          88,
          80,
          13,
          57
        ],
        "output": [
          18,
          86,
          64,
          33,
          88
        ]
      }
    ]
  },
  {
    "id": "c055",
    "difficulty": 130,
    "function": "def c055(x):\n    # swap x[0], x[2] and x[1], x[3]\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        12,
        35,
        4,
        79,
        72
      ],
      "output": [
        4,
        79,
        12,
        35,
        72
      ]
    },
    "demos": [
      {
        "input": [
          8,
          1,
          77,
          32
        ],
        "output": [
          77,
          32,
          8,
          1
        ]
      },
      {
        "input": [
          94,
          3,
          94,
          55
        ],
        "output": [
          94,
          55,
          94,
          3
        ]
      },
      {
        "input": [
          71,
          53,
          10,
          37,
          33,
          75,
          98
        ],
        "output": [
          10,
          37,
          71,
          53,
          33,
          75,
          98
        ]
      }
    ]
  },
  {
    "id": "c029",
    "difficulty": 131,
    "function": "def c029(x):\n    # remove the first 2 elements\n    return x[2:]\n\n",
    "data": {
      "input": [
        83,
        20,
        26,
        51,
        95
      ],
      "output": [
        26,
        51,
        95
      ]
    },
    "demos": [
      {
        "input": [
          16,
          22,
          30,
          57,
          77,
          42
        ],
        "output": [
          30,
          57,
          77,
          42
        ]
      },
      {
        "input": [
          3,
          91,
          95,
          26,
          26,
          8,
          7
        ],
        "output": [
          95,
          26,
          26,
          8,
          7
        ]
      },
      {
        "input": [
          83,
          30,
          74,
          50,
          79
        ],
        "output": [
          74,
          50,
          79
        ]
      }
    ]
  },
  {
    "id": "c168",
    "difficulty": 132,
    "function": "def c168(x):\n    # count from 1 to 10, skipping the length of the input\n    return [i for i in range(1, 11) if i != len(x)]\n\n",
    "data": {
      "input": [
        68,
        84,
        64,
        88,
        1,
        39,
        15
      ],
      "output": [
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        9,
        10
      ]
    },
    "demos": [
      {
        "input": [
          8,
          86,
          17,
          6,
          69
        ],
        "output": [
          1,
          2,
          3,
          4,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          89,
          58,
          25,
          49,
          5
        ],
        "output": [
          1,
          2,
          3,
          4,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          36,
          93,
          5,
          6,
          19
        ],
        "output": [
          1,
          2,
          3,
          4,
          6,
          7,
          8,
          9,
          10
        ]
      }
    ]
  },
  {
    "id": "c009",
    "difficulty": 133,
    "function": "def c009(x):\n    # remove all but the first 3 elements\n    return x[:3]\n\n",
    "data": {
      "input": [
        18,
        33,
        42,
        80,
        40,
        84,
        63
      ],
      "output": [
        18,
        33,
        42
      ]
    },
    "demos": [
      {
        "input": [
          95,
          33,
          71,
          90,
          60,
          58,
          82
        ],
        "output": [
          95,
          33,
          71
        ]
      },
      {
        "input": [
          26,
          88,
          79,
          5
        ],
        "output": [
          26,
          88,
          79
        ]
      },
      {
        "input": [
          43,
          41,
          80,
          67,
          85,
          64,
          20
        ],
        "output": [
          43,
          41,
          80
        ]
      }
    ]
  },
  {
    "id": "c133",
    "difficulty": 134,
    "function": "def c133(x):\n    # remove elements 1 through 4\n    return x[:1] + x[5:]\n\n",
    "data": {
      "input": [
        68,
        27,
        60,
        70,
        31,
        97
      ],
      "output": [
        68,
        97
      ]
    },
    "demos": [
      {
        "input": [
          40,
          2,
          9,
          20,
          49,
          65,
          83,
          67
        ],
        "output": [
          40,
          65,
          83,
          67
        ]
      },
      {
        "input": [
          8,
          3,
          20,
          91,
          97,
          58,
          15,
          38
        ],
        "output": [
          8,
          58,
          15,
          38
        ]
      },
      {
        "input": [
          90,
          60,
          50,
          79,
          87,
          15,
          91,
          37
        ],
        "output": [
          90,
          15,
          91,
          37
        ]
      }
    ]
  },
  {
    "id": "c146",
    "difficulty": 135,
    "function": "def c146(x):\n    # absolute difference between each consecutive pair of elements\n    return [abs(x[i] - x[i+1]) for i in range(len(x)-1)]\n\n",
    "data": {
      "input": [
        79,
        14,
        36,
        89,
        13,
        42,
        46,
        26
      ],
      "output": [
        65,
        22,
        53,
        76,
        29,
        4,
        20
      ]
    },
    "demos": [
      {
        "input": [
          73,
          88,
          26,
          23,
          11
        ],
        "output": [
          15,
          62,
          3,
          12
        ]
      },
      {
        "input": [
          1,
          43,
          40,
          53,
          87,
          74,
          63
        ],
        "output": [
          42,
          3,
          13,
          34,
          13,
          11
        ]
      },
      {
        "input": [
          24,
          82,
          87,
          6,
          80
        ],
        "output": [
          58,
          5,
          81,
          74
        ]
      }
    ]
  },
  {
    "id": "c004",
    "difficulty": 136,
    "function": "def c004(x):\n    # remove all but element 3\n    return [x[2]]\n\n",
    "data": {
      "input": [
        45,
        19,
        3
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          3,
          56,
          82,
          27,
          52,
          90
        ],
        "output": [
          82
        ]
      },
      {
        "input": [
          65,
          68,
          17,
          36,
          52
        ],
        "output": [
          17
        ]
      },
      {
        "input": [
          54,
          36,
          76
        ],
        "output": [
          76
        ]
      }
    ]
  },
  {
    "id": "c240",
    "difficulty": 137,
    "function": "def c240(x):\n    # number of elements equal to the input length\n    return [x.count(len(x))]\n\n",
    "data": {
      "input": [
        56,
        4,
        39,
        5,
        89
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          8,
          11,
          86,
          87,
          21,
          47,
          8,
          8
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          71,
          3,
          8,
          96,
          8,
          8,
          92,
          77
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          6,
          3,
          67,
          60,
          9,
          9
        ],
        "output": [
          1
        ]
      }
    ]
  },
  {
    "id": "c239",
    "difficulty": 138,
    "function": "def c239(x):\n    # number of repetitions in the input\n    res = {}\n    out = 0\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out += 1\n    return [out]\n\n",
    "data": {
      "input": [
        4,
        0,
        0,
        0,
        8,
        10,
        10,
        0,
        0
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          7,
          5,
          7,
          8,
          7,
          8,
          6
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          0,
          10,
          6,
          6,
          6,
          5,
          5,
          0
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          5,
          5,
          4,
          5,
          5,
          5
        ],
        "output": [
          1
        ]
      }
    ]
  },
  {
    "id": "c246",
    "difficulty": 139,
    "function": "def c246(x):\n    # number of unique elements\n    return [len(set(x))]\n\n",
    "data": {
      "input": [
        19,
        84,
        45,
        55,
        42,
        55,
        42,
        84,
        15
      ],
      "output": [
        6
      ]
    },
    "demos": [
      {
        "input": [
          54,
          1,
          54,
          13,
          1,
          60
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          36,
          14,
          84,
          76,
          84,
          53,
          36,
          85,
          93,
          53
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          24,
          46,
          68,
          24,
          24,
          68,
          89,
          24,
          29,
          24
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c138",
    "difficulty": 140,
    "function": "def c138(x):\n    # remove all occurrences of the first element\n    return [i for i in x if i != x[0]]\n\n",
    "data": {
      "input": [
        44,
        83,
        84,
        68
      ],
      "output": [
        83,
        84,
        68
      ]
    },
    "demos": [
      {
        "input": [
          3,
          69,
          99,
          69,
          26,
          27,
          64,
          64
        ],
        "output": [
          69,
          99,
          69,
          26,
          27,
          64,
          64
        ]
      },
      {
        "input": [
          12,
          6,
          6,
          16,
          6,
          0,
          6,
          33,
          41
        ],
        "output": [
          6,
          6,
          16,
          6,
          0,
          6,
          33,
          41
        ]
      },
      {
        "input": [
          18,
          39,
          20,
          68,
          18,
          4,
          20,
          3,
          43,
          20
        ],
        "output": [
          39,
          20,
          68,
          4,
          20,
          3,
          43,
          20
        ]
      }
    ]
  },
  {
    "id": "c018",
    "difficulty": 141,
    "function": "def c018(x):\n    # replace element 1 with 9\n    x[1] = 9\n    return x\n\n",
    "data": {
      "input": [
        52,
        10,
        28,
        85,
        28,
        2,
        74
      ],
      "output": [
        52,
        9,
        28,
        85,
        28,
        2,
        74
      ]
    },
    "demos": [
      {
        "input": [
          94,
          60,
          78
        ],
        "output": [
          94,
          9,
          78
        ]
      },
      {
        "input": [
          0,
          34,
          54,
          62,
          93,
          90,
          77
        ],
        "output": [
          0,
          9,
          54,
          62,
          93,
          90,
          77
        ]
      },
      {
        "input": [
          58,
          86,
          50,
          65,
          8
        ],
        "output": [
          58,
          9,
          50,
          65,
          8
        ]
      }
    ]
  },
  {
    "id": "c012",
    "difficulty": 142,
    "function": "def c012(x):\n    # remove all but elements 1 through 3\n    return x[1:4]\n\n",
    "data": {
      "input": [
        23,
        67,
        39,
        64,
        97
      ],
      "output": [
        67,
        39,
        64
      ]
    },
    "demos": [
      {
        "input": [
          10,
          28,
          18,
          82,
          54
        ],
        "output": [
          28,
          18,
          82
        ]
      },
      {
        "input": [
          10,
          18,
          12,
          79,
          13
        ],
        "output": [
          18,
          12,
          79
        ]
      },
      {
        "input": [
          26,
          6,
          64,
          33,
          96,
          38
        ],
        "output": [
          6,
          64,
          33
        ]
      }
    ]
  },
  {
    "id": "c232",
    "difficulty": 143,
    "function": "def c232(x):\n    # mean of the list, rounded to the nearest integer\n    return [round(sum(x)/len(x))]\n\n",
    "data": {
      "input": [
        22,
        19,
        93,
        73
      ],
      "output": [
        52
      ]
    },
    "demos": [
      {
        "input": [
          29,
          89,
          79
        ],
        "output": [
          66
        ]
      },
      {
        "input": [
          46,
          47,
          48,
          61,
          23,
          22
        ],
        "output": [
          41
        ]
      },
      {
        "input": [
          89,
          43,
          58,
          43,
          81,
          48
        ],
        "output": [
          60
        ]
      }
    ]
  },
  {
    "id": "c094",
    "difficulty": 144,
    "function": "def c094(x):\n    # swap 0,2 and 1,3\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        84,
        23,
        93,
        50,
        73
      ],
      "output": [
        93,
        50,
        84,
        23,
        73
      ]
    },
    "demos": [
      {
        "input": [
          32,
          12,
          84,
          18,
          22,
          24
        ],
        "output": [
          84,
          18,
          32,
          12,
          22,
          24
        ]
      },
      {
        "input": [
          14,
          25,
          4,
          6,
          48,
          36,
          61
        ],
        "output": [
          4,
          6,
          14,
          25,
          48,
          36,
          61
        ]
      },
      {
        "input": [
          47,
          61,
          29,
          26,
          1,
          68
        ],
        "output": [
          29,
          26,
          47,
          61,
          1,
          68
        ]
      }
    ]
  },
  {
    "id": "c086",
    "difficulty": 145,
    "function": "def c086(x):\n    # swap elements 0 and 3\n    x[0], x[3] = x[3], x[0]\n    return x\n\n",
    "data": {
      "input": [
        72,
        9,
        9,
        51,
        89,
        22,
        67
      ],
      "output": [
        51,
        9,
        9,
        72,
        89,
        22,
        67
      ]
    },
    "demos": [
      {
        "input": [
          49,
          44,
          79,
          18,
          69,
          64
        ],
        "output": [
          18,
          44,
          79,
          49,
          69,
          64
        ]
      },
      {
        "input": [
          73,
          9,
          25,
          73,
          30,
          20
        ],
        "output": [
          73,
          9,
          25,
          73,
          30,
          20
        ]
      },
      {
        "input": [
          96,
          39,
          53,
          68,
          95,
          71
        ],
        "output": [
          68,
          39,
          53,
          96,
          95,
          71
        ]
      }
    ]
  },
  {
    "id": "c193",
    "difficulty": 146,
    "function": "def c193(x):\n    # remove the smallest element and the largest element, output in ascending order\n    return sorted(x[1:-1])\n\n",
    "data": {
      "input": [
        13,
        97,
        48,
        59,
        97
      ],
      "output": [
        48,
        59,
        97
      ]
    },
    "demos": [
      {
        "input": [
          7,
          99,
          86,
          11,
          95,
          87
        ],
        "output": [
          11,
          86,
          95,
          99
        ]
      },
      {
        "input": [
          57,
          16,
          4,
          92
        ],
        "output": [
          4,
          16
        ]
      },
      {
        "input": [
          25,
          55,
          49,
          34,
          23,
          25,
          99
        ],
        "output": [
          23,
          25,
          34,
          49,
          55
        ]
      }
    ]
  },
  {
    "id": "c056",
    "difficulty": 147,
    "function": "def c056(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        14,
        43,
        81,
        60,
        35
      ],
      "output": [
        14,
        43,
        60,
        35
      ]
    },
    "demos": [
      {
        "input": [
          0,
          74,
          89,
          90,
          17,
          76,
          25
        ],
        "output": [
          0,
          74,
          90,
          17,
          76,
          25
        ]
      },
      {
        "input": [
          35,
          2,
          58,
          9
        ],
        "output": [
          35,
          2,
          9
        ]
      },
      {
        "input": [
          13,
          27,
          94,
          83,
          10
        ],
        "output": [
          13,
          27,
          83,
          10
        ]
      }
    ]
  },
  {
    "id": "c028",
    "difficulty": 148,
    "function": "def c028(x):\n    # remove element 1 if element 0 > element 1, else remove element 2\n    if x[0] > x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        13,
        90,
        25,
        58,
        0
      ],
      "output": [
        13,
        90,
        58,
        0
      ]
    },
    "demos": [
      {
        "input": [
          92,
          79,
          37,
          29,
          42
        ],
        "output": [
          92,
          37,
          29,
          42
        ]
      },
      {
        "input": [
          2,
          11,
          29,
          21,
          48,
          32
        ],
        "output": [
          2,
          11,
          21,
          48,
          32
        ]
      },
      {
        "input": [
          4,
          63,
          33,
          77,
          29
        ],
        "output": [
          4,
          63,
          77,
          29
        ]
      }
    ]
  },
  {
    "id": "c220",
    "difficulty": 149,
    "function": "def c220(x):\n    # if input length is even, double each element, else triple each element\n    if len(x) % 2 == 0:\n        return [i*2 for i in x]\n    else:\n        return [i*3 for i in x]\n\n",
    "data": {
      "input": [
        75,
        20,
        8,
        20
      ],
      "output": [
        150,
        40,
        16,
        40
      ]
    },
    "demos": [
      {
        "input": [
          97,
          40,
          87,
          24,
          35
        ],
        "output": [
          291,
          120,
          261,
          72,
          105
        ]
      },
      {
        "input": [
          13,
          30,
          62,
          75,
          56
        ],
        "output": [
          39,
          90,
          186,
          225,
          168
        ]
      },
      {
        "input": [
          80,
          65,
          61,
          37
        ],
        "output": [
          160,
          130,
          122,
          74
        ]
      }
    ]
  },
  {
    "id": "c241",
    "difficulty": 150,
    "function": "def c241(x):\n    # number of even elements\n    return [len([i for i in x if i % 2 == 0])]\n\n",
    "data": {
      "input": [
        30,
        3,
        9,
        51
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          7,
          43,
          77,
          52
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          50,
          26,
          12,
          7,
          1
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          2,
          50,
          3,
          9,
          25
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c060",
    "difficulty": 151,
    "function": "def c060(x):\n    # element 2,1,0,3,4,6 remove the rest\n    return [x[2], x[1], x[0], x[3], x[4], x[6]]\n\n",
    "data": {
      "input": [
        60,
        85,
        2,
        77,
        3,
        6,
        16,
        81,
        57,
        99
      ],
      "output": [
        2,
        85,
        60,
        77,
        3,
        16
      ]
    },
    "demos": [
      {
        "input": [
          94,
          17,
          32,
          48,
          97,
          18,
          24,
          95,
          27
        ],
        "output": [
          32,
          17,
          94,
          48,
          97,
          24
        ]
      },
      {
        "input": [
          91,
          14,
          82,
          30,
          13,
          14,
          27,
          86,
          28
        ],
        "output": [
          82,
          14,
          91,
          30,
          13,
          27
        ]
      },
      {
        "input": [
          60,
          72,
          26,
          35,
          62,
          74,
          85,
          48,
          80
        ],
        "output": [
          26,
          72,
          60,
          35,
          62,
          85
        ]
      }
    ]
  },
  {
    "id": "c169",
    "difficulty": 152,
    "function": "def c169(x):\n    # second largest element\n    return [sorted(x)[-2]]\n\n",
    "data": {
      "input": [
        30,
        16,
        41,
        88,
        84
      ],
      "output": [
        84
      ]
    },
    "demos": [
      {
        "input": [
          88,
          56,
          93,
          96,
          8,
          79
        ],
        "output": [
          93
        ]
      },
      {
        "input": [
          93,
          44,
          74,
          38
        ],
        "output": [
          74
        ]
      },
      {
        "input": [
          84,
          1,
          38,
          79,
          78,
          35
        ],
        "output": [
          79
        ]
      }
    ]
  },
  {
    "id": "c057",
    "difficulty": 153,
    "function": "def c057(x):\n    # insert a 4 as element 2\n    return x[:2] + [4] + x[2:]\n\n",
    "data": {
      "input": [
        79,
        39,
        74,
        66
      ],
      "output": [
        79,
        39,
        4,
        74,
        66
      ]
    },
    "demos": [
      {
        "input": [
          63,
          19,
          8,
          37,
          4
        ],
        "output": [
          63,
          19,
          4,
          8,
          37,
          4
        ]
      },
      {
        "input": [
          44,
          25,
          40,
          42
        ],
        "output": [
          44,
          25,
          4,
          40,
          42
        ]
      },
      {
        "input": [
          10,
          71,
          98,
          45,
          1,
          9,
          1
        ],
        "output": [
          10,
          71,
          4,
          98,
          45,
          1,
          9,
          1
        ]
      }
    ]
  },
  {
    "id": "c150",
    "difficulty": 154,
    "function": "def c150(x):\n    # count from first element to each element if the element is greater than the first element\n    res = []\n    for i in x:\n        if i > x[0]:\n            res += list(range(x[0], i+1))\n        else:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        24,
        26,
        27,
        4
      ],
      "output": [
        24,
        24,
        25,
        26,
        24,
        25,
        26,
        27,
        4
      ]
    },
    "demos": [
      {
        "input": [
          13,
          1,
          18
        ],
        "output": [
          13,
          1,
          13,
          14,
          15,
          16,
          17,
          18
        ]
      },
      {
        "input": [
          33,
          32,
          20,
          36,
          38
        ],
        "output": [
          33,
          32,
          20,
          33,
          34,
          35,
          36,
          33,
          34,
          35,
          36,
          37,
          38
        ]
      },
      {
        "input": [
          89,
          50,
          91,
          75
        ],
        "output": [
          89,
          50,
          89,
          90,
          91,
          75
        ]
      }
    ]
  },
  {
    "id": "c033",
    "difficulty": 155,
    "function": "def c033(x):\n    # swap element 0 and 2\n    x[0], x[2] = x[2], x[0]\n    return x\n\n",
    "data": {
      "input": [
        89,
        18,
        76,
        80,
        75,
        32,
        68
      ],
      "output": [
        76,
        18,
        89,
        80,
        75,
        32,
        68
      ]
    },
    "demos": [
      {
        "input": [
          23,
          16,
          22,
          11,
          83,
          16,
          81
        ],
        "output": [
          22,
          16,
          23,
          11,
          83,
          16,
          81
        ]
      },
      {
        "input": [
          44,
          61,
          69,
          1,
          11,
          83
        ],
        "output": [
          69,
          61,
          44,
          1,
          11,
          83
        ]
      },
      {
        "input": [
          94,
          26,
          75,
          47,
          6,
          64,
          43
        ],
        "output": [
          75,
          26,
          94,
          47,
          6,
          64,
          43
        ]
      }
    ]
  },
  {
    "id": "c218",
    "difficulty": 156,
    "function": "def c218(x):\n    # keep only second element and following equal to the first element\n    return [x[1]] + [i for i in x[2:] if i == x[0]]\n\n",
    "data": {
      "input": [
        65,
        88,
        65,
        82,
        65,
        0
      ],
      "output": [
        88,
        65,
        65
      ]
    },
    "demos": [
      {
        "input": [
          52,
          58,
          40,
          84,
          85,
          5,
          52,
          44,
          48,
          52
        ],
        "output": [
          58,
          52,
          52
        ]
      },
      {
        "input": [
          65,
          16,
          65,
          65,
          65,
          6,
          13,
          99,
          32,
          25
        ],
        "output": [
          16,
          65,
          65,
          65
        ]
      },
      {
        "input": [
          14,
          14,
          24,
          31,
          61,
          72,
          39
        ],
        "output": [
          14
        ]
      }
    ]
  },
  {
    "id": "c136",
    "difficulty": 158,
    "function": "def c136(x):\n    # remove the first occurrence of the largest element, keep the rest\n    x.remove(max(x))\n    return x\n\n",
    "data": {
      "input": [
        81,
        66,
        77,
        41,
        67,
        14
      ],
      "output": [
        66,
        77,
        41,
        67,
        14
      ]
    },
    "demos": [
      {
        "input": [
          22,
          55,
          32,
          18,
          77,
          75
        ],
        "output": [
          22,
          55,
          32,
          18,
          75
        ]
      },
      {
        "input": [
          25,
          12,
          39,
          86,
          95,
          96,
          8
        ],
        "output": [
          25,
          12,
          39,
          86,
          95,
          8
        ]
      },
      {
        "input": [
          50,
          87,
          48,
          96,
          0,
          38
        ],
        "output": [
          50,
          87,
          48,
          0,
          38
        ]
      }
    ]
  },
  {
    "id": "c083",
    "difficulty": 159,
    "function": "def c083(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        8,
        62,
        99,
        1,
        35,
        30,
        19,
        85,
        90
      ],
      "output": [
        19
      ]
    },
    "demos": [
      {
        "input": [
          96,
          56,
          12,
          93,
          37,
          32,
          61,
          18
        ],
        "output": [
          61
        ]
      },
      {
        "input": [
          59,
          53,
          7,
          79,
          52,
          1,
          78
        ],
        "output": [
          78
        ]
      },
      {
        "input": [
          88,
          8,
          42,
          6,
          55,
          8,
          50,
          82
        ],
        "output": [
          50
        ]
      }
    ]
  },
  {
    "id": "c019",
    "difficulty": 160,
    "function": "def c019(x):\n    # replace element 5 with a 3 if there is an element 5\n    if len(x) > 5:\n        x[4] = 3\n    return x\n\n",
    "data": {
      "input": [
        19,
        39,
        44,
        75,
        11,
        50
      ],
      "output": [
        19,
        39,
        44,
        75,
        3,
        50
      ]
    },
    "demos": [
      {
        "input": [
          99,
          72,
          78
        ],
        "output": [
          99,
          72,
          78
        ]
      },
      {
        "input": [
          4,
          33,
          60,
          77,
          96
        ],
        "output": [
          4,
          33,
          60,
          77,
          96
        ]
      },
      {
        "input": [
          12,
          96,
          9,
          82,
          3,
          86,
          84
        ],
        "output": [
          12,
          96,
          9,
          82,
          3,
          86,
          84
        ]
      }
    ]
  },
  {
    "id": "c203",
    "difficulty": 161,
    "function": "def c203(x):\n    # the first M positive multiples of the smallest element, M is the length of the input\n    return [min(x)*i for i in range(1, len(x)+1)]\n\n",
    "data": {
      "input": [
        16,
        13,
        13,
        19,
        12,
        14
      ],
      "output": [
        12,
        24,
        36,
        48,
        60,
        72
      ]
    },
    "demos": [
      {
        "input": [
          3,
          20,
          1,
          23
        ],
        "output": [
          1,
          2,
          3,
          4
        ]
      },
      {
        "input": [
          6,
          22,
          21,
          10,
          15,
          19,
          9
        ],
        "output": [
          6,
          12,
          18,
          24,
          30,
          36,
          42
        ]
      },
      {
        "input": [
          20,
          15,
          2,
          23,
          5,
          19,
          17
        ],
        "output": [
          2,
          4,
          6,
          8,
          10,
          12,
          14
        ]
      }
    ]
  },
  {
    "id": "c115",
    "difficulty": 162,
    "function": "def c115(x):\n    # the unique elements, prepended and appended by their sum\n    res = list(set(x))\n    return [sum(res)] + res + [sum(res)]\n\n",
    "data": {
      "input": [
        25,
        22,
        15,
        30
      ],
      "output": [
        92,
        25,
        30,
        22,
        15,
        92
      ]
    },
    "demos": [
      {
        "input": [
          3,
          3,
          20,
          13,
          11,
          18,
          3
        ],
        "output": [
          65,
          3,
          11,
          13,
          18,
          20,
          65
        ]
      },
      {
        "input": [
          10,
          1,
          28,
          10,
          12,
          12
        ],
        "output": [
          51,
          1,
          10,
          28,
          12,
          51
        ]
      },
      {
        "input": [
          6,
          6,
          2,
          23,
          6,
          20,
          8,
          17,
          4
        ],
        "output": [
          80,
          2,
          4,
          6,
          8,
          17,
          20,
          23,
          80
        ]
      }
    ]
  },
  {
    "id": "c207",
    "difficulty": 163,
    "function": "def c207(x):\n    # element-wise sum of the input and the reverse of the input\n    return [i+j for i, j in zip(x, x[::-1])]\n\n",
    "data": {
      "input": [
        6,
        23,
        19,
        23,
        5,
        20
      ],
      "output": [
        26,
        28,
        42,
        42,
        28,
        26
      ]
    },
    "demos": [
      {
        "input": [
          3,
          1,
          44,
          15,
          47
        ],
        "output": [
          50,
          16,
          88,
          16,
          50
        ]
      },
      {
        "input": [
          9,
          45,
          10,
          25,
          35,
          45
        ],
        "output": [
          54,
          80,
          35,
          35,
          80,
          54
        ]
      },
      {
        "input": [
          46,
          48,
          42,
          26,
          46
        ],
        "output": [
          92,
          74,
          84,
          74,
          92
        ]
      }
    ]
  },
  {
    "id": "c088",
    "difficulty": 164,
    "function": "def c088(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        42,
        5,
        27,
        51,
        53,
        49
      ],
      "output": [
        42,
        27,
        5,
        51,
        53,
        49
      ]
    },
    "demos": [
      {
        "input": [
          76,
          45,
          56,
          69,
          11,
          95,
          99
        ],
        "output": [
          76,
          56,
          45,
          69,
          11,
          95,
          99
        ]
      },
      {
        "input": [
          63,
          41,
          87,
          80,
          29,
          73,
          57
        ],
        "output": [
          63,
          87,
          41,
          80,
          29,
          73,
          57
        ]
      },
      {
        "input": [
          30,
          5,
          48,
          12,
          16
        ],
        "output": [
          30,
          48,
          5,
          12,
          16
        ]
      }
    ]
  },
  {
    "id": "c040",
    "difficulty": 165,
    "function": "def c040(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        6,
        25,
        14,
        30,
        13
      ],
      "output": [
        6,
        25,
        14,
        30,
        13
      ]
    },
    "demos": [
      {
        "input": [
          20,
          6,
          9,
          9,
          17,
          10,
          28
        ],
        "output": [
          20,
          6,
          9,
          9,
          17,
          10,
          28,
          9
        ]
      },
      {
        "input": [
          23,
          12,
          1,
          7,
          3,
          24,
          3
        ],
        "output": [
          23,
          12,
          1,
          7,
          3,
          24,
          3,
          3
        ]
      },
      {
        "input": [
          9,
          13,
          27,
          18,
          8,
          24,
          9
        ],
        "output": [
          9,
          13,
          27,
          18,
          8,
          24,
          9,
          9
        ]
      }
    ]
  },
  {
    "id": "c085",
    "difficulty": 166,
    "function": "def c085(x):\n    # remove all but element N, N=first element\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        5,
        34,
        14,
        49,
        4,
        2
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          6,
          46,
          14,
          39,
          25,
          21,
          14
        ],
        "output": [
          14
        ]
      },
      {
        "input": [
          3,
          32,
          24,
          8
        ],
        "output": [
          8
        ]
      },
      {
        "input": [
          0,
          21,
          5,
          15
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c111",
    "difficulty": 167,
    "function": "def c111(x):\n    # repeat the largest element N times, where N is the smallest element\n    return [max(x)] * min(x)\n\n",
    "data": {
      "input": [
        5,
        10,
        14,
        8,
        3,
        27,
        1
      ],
      "output": [
        27
      ]
    },
    "demos": [
      {
        "input": [
          14,
          24,
          6,
          9,
          23
        ],
        "output": [
          24,
          24,
          24,
          24,
          24,
          24
        ]
      },
      {
        "input": [
          28,
          10,
          16,
          10,
          19,
          17,
          4,
          15
        ],
        "output": [
          28,
          28,
          28,
          28
        ]
      },
      {
        "input": [
          11,
          14,
          25,
          27,
          8
        ],
        "output": [
          27,
          27,
          27,
          27,
          27,
          27,
          27,
          27
        ]
      }
    ]
  },
  {
    "id": "c073",
    "difficulty": 168,
    "function": "def c073(x):\n    # add the index to every element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        12,
        34,
        28,
        49,
        30,
        41
      ],
      "output": [
        12,
        35,
        30,
        52,
        34,
        46
      ]
    },
    "demos": [
      {
        "input": [
          5,
          29,
          42,
          0,
          26
        ],
        "output": [
          5,
          30,
          44,
          3,
          30
        ]
      },
      {
        "input": [
          5,
          34,
          0,
          11,
          3,
          50
        ],
        "output": [
          5,
          35,
          2,
          14,
          7,
          55
        ]
      },
      {
        "input": [
          23,
          37,
          41,
          14
        ],
        "output": [
          23,
          38,
          43,
          17
        ]
      }
    ]
  },
  {
    "id": "c027",
    "difficulty": 169,
    "function": "def c027(x):\n    # remove element 1 if element 0 = element 1, else remove element 2\n    if x[0] == x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        91,
        91,
        80,
        90,
        85,
        77
      ],
      "output": [
        91,
        80,
        90,
        85,
        77
      ]
    },
    "demos": [
      {
        "input": [
          5,
          37,
          49,
          11,
          31,
          97,
          94
        ],
        "output": [
          5,
          37,
          11,
          31,
          97,
          94
        ]
      },
      {
        "input": [
          28,
          96,
          57,
          98,
          79,
          18
        ],
        "output": [
          28,
          96,
          98,
          79,
          18
        ]
      },
      {
        "input": [
          12,
          12,
          94,
          71,
          82
        ],
        "output": [
          12,
          94,
          71,
          82
        ]
      }
    ]
  },
  {
    "id": "c234",
    "difficulty": 170,
    "function": "def c234(x):\n    # repetitions in order of first appearance\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out.append(i)\n    return out\n\n",
    "data": {
      "input": [
        97,
        32,
        32,
        3,
        25,
        2,
        25,
        92,
        3
      ],
      "output": [
        32,
        3,
        25
      ]
    },
    "demos": [
      {
        "input": [
          87,
          27,
          87,
          33,
          0,
          59,
          0
        ],
        "output": [
          87,
          0
        ]
      },
      {
        "input": [
          99,
          40,
          7,
          88,
          90,
          7,
          88
        ],
        "output": [
          7,
          88
        ]
      },
      {
        "input": [
          89,
          39,
          7,
          89,
          71,
          75,
          36,
          39
        ],
        "output": [
          89,
          39
        ]
      }
    ]
  },
  {
    "id": "c165",
    "difficulty": 171,
    "function": "def c165(x):\n    # reverse the input and keep only even elements\n    return [i for i in x[::-1] if i % 2 == 0]\n\n",
    "data": {
      "input": [
        33,
        0,
        50,
        53,
        85,
        0
      ],
      "output": [
        0,
        50,
        0
      ]
    },
    "demos": [
      {
        "input": [
          57,
          58,
          90,
          78,
          35,
          24
        ],
        "output": [
          24,
          78,
          90,
          58
        ]
      },
      {
        "input": [
          41,
          27,
          40,
          18,
          41,
          2,
          2,
          95
        ],
        "output": [
          2,
          2,
          18,
          40
        ]
      },
      {
        "input": [
          98,
          29,
          53,
          73,
          37,
          40
        ],
        "output": [
          40,
          98
        ]
      }
    ]
  },
  {
    "id": "c191",
    "difficulty": 172,
    "function": "def c191(x):\n    # repeat each element N times, where N is its tens digit\n    out = []\n    for i in x:\n        if len(str(i)) > 1:\n            out += [i] * int(str(i)[-2])\n    return out\n\n",
    "data": {
      "input": [
        20,
        21,
        21,
        13
      ],
      "output": [
        20,
        20,
        21,
        21,
        21,
        21,
        13
      ]
    },
    "demos": [
      {
        "input": [
          25,
          24,
          35,
          22,
          6,
          4,
          28
        ],
        "output": [
          25,
          25,
          24,
          24,
          35,
          35,
          35,
          22,
          22,
          28,
          28
        ]
      },
      {
        "input": [
          30,
          3,
          11,
          11
        ],
        "output": [
          30,
          30,
          30,
          11,
          11
        ]
      },
      {
        "input": [
          23,
          40,
          3,
          4,
          33,
          1
        ],
        "output": [
          23,
          23,
          40,
          40,
          40,
          40,
          33,
          33,
          33
        ]
      }
    ]
  },
  {
    "id": "c026",
    "difficulty": 173,
    "function": "def c026(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        78,
        5,
        37,
        79,
        58
      ],
      "output": [
        78,
        5,
        79,
        58
      ]
    },
    "demos": [
      {
        "input": [
          79,
          64,
          43,
          53,
          60,
          87
        ],
        "output": [
          79,
          64,
          53,
          60,
          87
        ]
      },
      {
        "input": [
          11,
          7,
          16,
          89,
          31
        ],
        "output": [
          11,
          7,
          89,
          31
        ]
      },
      {
        "input": [
          94,
          69,
          24,
          9
        ],
        "output": [
          94,
          69,
          9
        ]
      }
    ]
  },
  {
    "id": "c059",
    "difficulty": 174,
    "function": "def c059(x):\n    # swap element 2 and element 5\n    x[2], x[5] = x[5], x[2]\n    return x\n\n",
    "data": {
      "input": [
        36,
        15,
        34,
        2,
        29,
        75,
        16
      ],
      "output": [
        36,
        15,
        75,
        2,
        29,
        34,
        16
      ]
    },
    "demos": [
      {
        "input": [
          83,
          45,
          20,
          8,
          41,
          42,
          44
        ],
        "output": [
          83,
          45,
          42,
          8,
          41,
          20,
          44
        ]
      },
      {
        "input": [
          23,
          86,
          43,
          47,
          92,
          64,
          42,
          29
        ],
        "output": [
          23,
          86,
          64,
          47,
          92,
          43,
          42,
          29
        ]
      },
      {
        "input": [
          8,
          95,
          97,
          56,
          23,
          1,
          76,
          91
        ],
        "output": [
          8,
          95,
          1,
          56,
          23,
          97,
          76,
          91
        ]
      }
    ]
  },
  {
    "id": "c074",
    "difficulty": 175,
    "function": "def c074(x):\n    # remove every element whose value < 8\n    return [i for i in x if i >= 8]\n\n",
    "data": {
      "input": [
        16,
        0,
        13,
        12,
        8,
        24,
        7
      ],
      "output": [
        16,
        13,
        12,
        8,
        24
      ]
    },
    "demos": [
      {
        "input": [
          22,
          7,
          25,
          5,
          26,
          25,
          30,
          11
        ],
        "output": [
          22,
          25,
          26,
          25,
          30,
          11
        ]
      },
      {
        "input": [
          23,
          15,
          17,
          8,
          5
        ],
        "output": [
          23,
          15,
          17,
          8
        ]
      },
      {
        "input": [
          11,
          7,
          14,
          15,
          23
        ],
        "output": [
          11,
          14,
          15,
          23
        ]
      }
    ]
  },
  {
    "id": "c173",
    "difficulty": 176,
    "function": "def c173(x):\n    # replace element N with the largest element in element 0 through N\n    for i in range(len(x)):\n        x[i] = max(x[:i+1])\n    return x\n\n",
    "data": {
      "input": [
        93,
        67,
        10,
        68,
        86,
        26,
        67,
        16
      ],
      "output": [
        93,
        93,
        93,
        93,
        93,
        93,
        93,
        93
      ]
    },
    "demos": [
      {
        "input": [
          9,
          33,
          33,
          59,
          68,
          36,
          20,
          63
        ],
        "output": [
          9,
          33,
          33,
          59,
          68,
          68,
          68,
          68
        ]
      },
      {
        "input": [
          54,
          75,
          77,
          0,
          54,
          23
        ],
        "output": [
          54,
          75,
          77,
          77,
          77,
          77
        ]
      },
      {
        "input": [
          2,
          56,
          27,
          91,
          0,
          41,
          13,
          16
        ],
        "output": [
          2,
          56,
          56,
          91,
          91,
          91,
          91,
          91
        ]
      }
    ]
  },
  {
    "id": "c175",
    "difficulty": 177,
    "function": "def c175(x):\n    # keep only elements larger than any preceding element\n    res = [x[0]]\n    for i in x[1:]:\n        if i > res[-1]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        18,
        12,
        36,
        44,
        88
      ],
      "output": [
        18,
        36,
        44,
        88
      ]
    },
    "demos": [
      {
        "input": [
          49,
          45,
          82,
          60,
          73,
          54,
          82
        ],
        "output": [
          49,
          82
        ]
      },
      {
        "input": [
          63,
          74,
          48,
          91,
          25,
          9,
          91,
          69
        ],
        "output": [
          63,
          74,
          91
        ]
      },
      {
        "input": [
          46,
          24,
          88,
          10,
          68,
          64,
          84,
          24
        ],
        "output": [
          46,
          88
        ]
      }
    ]
  },
  {
    "id": "c204",
    "difficulty": 178,
    "function": "def c204(x):\n    # keep only elements followed by 0\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] == 0:\n            res.append(x[i])\n    return res\n\n",
    "data": {
      "input": [
        29,
        26,
        29,
        3,
        28,
        18,
        24,
        0
      ],
      "output": [
        24
      ]
    },
    "demos": [
      {
        "input": [
          2,
          25,
          13,
          12,
          3,
          24,
          22
        ],
        "output": []
      },
      {
        "input": [
          0,
          28,
          3,
          7,
          30,
          0,
          20
        ],
        "output": [
          30
        ]
      },
      {
        "input": [
          12,
          0,
          0,
          4,
          0,
          16,
          15,
          30,
          0,
          6
        ],
        "output": [
          12,
          0,
          4,
          30
        ]
      }
    ]
  },
  {
    "id": "c031",
    "difficulty": 179,
    "function": "def c031(x):\n    # remove whichever are equal, the first 2 elements or the last 2 elements\n    if x[0] == x[1]:\n        return x[2:]\n    elif x[-1] == x[-2]:\n        return x[:-2]\n    return x\n\n",
    "data": {
      "input": [
        14,
        14,
        90,
        1,
        82,
        62
      ],
      "output": [
        90,
        1,
        82,
        62
      ]
    },
    "demos": [
      {
        "input": [
          25,
          82,
          48,
          51,
          2,
          38,
          48,
          52
        ],
        "output": [
          25,
          82,
          48,
          51,
          2,
          38,
          48,
          52
        ]
      },
      {
        "input": [
          77,
          8,
          81,
          22,
          86,
          9
        ],
        "output": [
          77,
          8,
          81,
          22,
          86,
          9
        ]
      },
      {
        "input": [
          80,
          56,
          60,
          55,
          52,
          59,
          59
        ],
        "output": [
          80,
          56,
          60,
          55,
          52
        ]
      }
    ]
  },
  {
    "id": "c236",
    "difficulty": 180,
    "function": "def c236(x):\n    # even elements divided by 2\n    return [i//2 for i in x if i % 2 == 0]\n\n",
    "data": {
      "input": [
        20,
        60,
        63,
        89,
        71,
        99,
        7,
        48,
        17,
        29
      ],
      "output": [
        10,
        30,
        24
      ]
    },
    "demos": [
      {
        "input": [
          89,
          59,
          96,
          6,
          26,
          26,
          96
        ],
        "output": [
          48,
          3,
          13,
          13,
          48
        ]
      },
      {
        "input": [
          13,
          93,
          35,
          44,
          29,
          84,
          67,
          66,
          55
        ],
        "output": [
          22,
          42,
          33
        ]
      },
      {
        "input": [
          72,
          61,
          95,
          59,
          97,
          47,
          74
        ],
        "output": [
          36,
          37
        ]
      }
    ]
  },
  {
    "id": "c054",
    "difficulty": 181,
    "function": "def c054(x):\n    # replace element 0 and 1 with element 2\n    x[0] = x[2]\n    x[1] = x[2]\n    return x\n\n",
    "data": {
      "input": [
        8,
        54,
        28,
        74,
        61
      ],
      "output": [
        28,
        28,
        28,
        74,
        61
      ]
    },
    "demos": [
      {
        "input": [
          20,
          12,
          38,
          12,
          50
        ],
        "output": [
          38,
          38,
          38,
          12,
          50
        ]
      },
      {
        "input": [
          2,
          92,
          35,
          17,
          69
        ],
        "output": [
          35,
          35,
          35,
          17,
          69
        ]
      },
      {
        "input": [
          27,
          23,
          65,
          52
        ],
        "output": [
          65,
          65,
          65,
          52
        ]
      }
    ]
  },
  {
    "id": "c227",
    "difficulty": 182,
    "function": "def c227(x):\n    # interleave the input and reversed input, keep only unique elements in order of appearance\n    res = []\n    mid = len(x) // 2\n    for i in range(mid):\n        if x[i] not in res:\n            res.append(x[i])\n        if x[-i-1] not in res:\n            res.append(x[-i-1])\n    if len(x) % 2 == 1 and x[mid] not in res:\n        res.append(x[mid])\n    return res\n\n",
    "data": {
      "input": [
        62,
        22,
        3,
        32,
        28
      ],
      "output": [
        62,
        28,
        22,
        32,
        3
      ]
    },
    "demos": [
      {
        "input": [
          40,
          80,
          97,
          34,
          51,
          9
        ],
        "output": [
          40,
          9,
          80,
          51,
          97,
          34
        ]
      },
      {
        "input": [
          25,
          8,
          25,
          25,
          25,
          99,
          4
        ],
        "output": [
          25,
          4,
          8,
          99
        ]
      },
      {
        "input": [
          0,
          15,
          0,
          53,
          5,
          30,
          42,
          0,
          50
        ],
        "output": [
          0,
          50,
          15,
          42,
          53,
          30,
          5
        ]
      }
    ]
  },
  {
    "id": "c024",
    "difficulty": 183,
    "function": "def c024(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        11,
        4,
        14,
        2,
        2,
        4
      ],
      "output": [
        11,
        8,
        4,
        14,
        2,
        2,
        4
      ]
    },
    "demos": [
      {
        "input": [
          3,
          3,
          7,
          14,
          3,
          3,
          17
        ],
        "output": [
          3,
          5,
          3,
          7,
          14,
          3,
          3,
          17
        ]
      },
      {
        "input": [
          3,
          0,
          13,
          20,
          14,
          4,
          18
        ],
        "output": [
          3,
          5,
          0,
          13,
          20,
          14,
          4,
          18
        ]
      },
      {
        "input": [
          12,
          16,
          16,
          15,
          16,
          9,
          12,
          20
        ],
        "output": [
          12,
          8,
          16,
          16,
          15,
          16,
          9,
          12,
          20
        ]
      }
    ]
  },
  {
    "id": "c200",
    "difficulty": 184,
    "function": "def c200(x):\n    # tens digits of the elements in ascending order\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append(int(str(i)[-2]))\n        else:\n            res.append(0)\n    return sorted(res)\n\n",
    "data": {
      "input": [
        1,
        11,
        60,
        50,
        14
      ],
      "output": [
        0,
        1,
        1,
        5,
        6
      ]
    },
    "demos": [
      {
        "input": [
          48,
          93,
          42,
          97,
          89
        ],
        "output": [
          4,
          4,
          8,
          9,
          9
        ]
      },
      {
        "input": [
          99,
          99,
          20,
          58,
          81,
          10,
          92,
          6
        ],
        "output": [
          0,
          1,
          2,
          5,
          8,
          9,
          9,
          9
        ]
      },
      {
        "input": [
          9,
          90,
          37,
          23,
          74,
          94
        ],
        "output": [
          0,
          2,
          3,
          7,
          9,
          9
        ]
      }
    ]
  },
  {
    "id": "c010",
    "difficulty": 185,
    "function": "def c010(x):\n    # elements 1 through N + 1, N is the first element\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        2,
        4,
        10,
        19,
        11
      ],
      "output": [
        4,
        10
      ]
    },
    "demos": [
      {
        "input": [
          6,
          1,
          10,
          6,
          17,
          1
        ],
        "output": [
          1,
          10,
          6,
          17,
          1
        ]
      },
      {
        "input": [
          2,
          13,
          8,
          3,
          1,
          4
        ],
        "output": [
          13,
          8
        ]
      },
      {
        "input": [
          5,
          11,
          20,
          13,
          5,
          4,
          13,
          12
        ],
        "output": [
          11,
          20,
          13,
          5,
          4
        ]
      }
    ]
  },
  {
    "id": "c123",
    "difficulty": 186,
    "function": "def c123(x):\n    # remove all but element N, N is the last element\n    return [x[x[-1]]]\n\n",
    "data": {
      "input": [
        0,
        13,
        5,
        12,
        12,
        2
      ],
      "output": [
        5
      ]
    },
    "demos": [
      {
        "input": [
          2,
          3,
          16,
          16,
          1
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          8,
          8,
          16,
          6,
          3,
          1,
          20,
          5
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          14,
          6,
          3,
          14,
          0,
          6,
          1,
          7
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c023",
    "difficulty": 187,
    "function": "def c023(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        20,
        3,
        18,
        14
      ],
      "output": [
        20,
        8,
        3,
        18,
        14
      ]
    },
    "demos": [
      {
        "input": [
          0,
          17,
          4,
          13,
          4,
          13,
          20,
          17
        ],
        "output": [
          0,
          5,
          17,
          4,
          13,
          4,
          13,
          20,
          17
        ]
      },
      {
        "input": [
          2,
          13,
          16,
          6,
          19,
          5,
          5,
          5
        ],
        "output": [
          2,
          5,
          13,
          16,
          6,
          19,
          5,
          5,
          5
        ]
      },
      {
        "input": [
          18,
          10,
          8,
          9,
          20,
          4
        ],
        "output": [
          18,
          8,
          10,
          8,
          9,
          20,
          4
        ]
      }
    ]
  },
  {
    "id": "c194",
    "difficulty": 188,
    "function": "def c194(x):\n    # reverse the input; prepend and append the length of the input\n    return [len(x)] + x[::-1] + [len(x)]\n\n",
    "data": {
      "input": [
        18,
        12,
        14,
        10,
        0
      ],
      "output": [
        5,
        0,
        10,
        14,
        12,
        18,
        5
      ]
    },
    "demos": [
      {
        "input": [
          4,
          11,
          12,
          9,
          14
        ],
        "output": [
          5,
          14,
          9,
          12,
          11,
          4,
          5
        ]
      },
      {
        "input": [
          19,
          7,
          2,
          18,
          10,
          9
        ],
        "output": [
          6,
          9,
          10,
          18,
          2,
          7,
          19,
          6
        ]
      },
      {
        "input": [
          19,
          19,
          13,
          3,
          13,
          15,
          1
        ],
        "output": [
          7,
          1,
          15,
          13,
          3,
          13,
          19,
          19,
          7
        ]
      }
    ]
  },
  {
    "id": "c245",
    "difficulty": 189,
    "function": "def c245(x):\n    # number of times element 0 appears in the following elements\n    return [x[1:].count(x[0])]\n\n",
    "data": {
      "input": [
        15,
        19,
        19,
        11,
        15,
        15
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          12,
          2,
          12,
          4,
          2,
          12,
          19
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          9,
          7,
          7,
          13,
          15,
          11,
          10
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          0,
          0,
          6,
          20,
          7,
          8
        ],
        "output": [
          1
        ]
      }
    ]
  },
  {
    "id": "c032",
    "difficulty": 190,
    "function": "def c032(x):\n    # remove first 2 elements if element 0 > last element, else remove last 2 elements\n    if x[0] > x[-1]:\n        return x[2:]\n    else:\n        return x[:-2]\n    \n",
    "data": {
      "input": [
        61,
        83,
        5,
        46,
        76,
        96,
        55
      ],
      "output": [
        5,
        46,
        76,
        96,
        55
      ]
    },
    "demos": [
      {
        "input": [
          60,
          52,
          56,
          97,
          17,
          19,
          57
        ],
        "output": [
          56,
          97,
          17,
          19,
          57
        ]
      },
      {
        "input": [
          55,
          29,
          20,
          8,
          99,
          87,
          14
        ],
        "output": [
          20,
          8,
          99,
          87,
          14
        ]
      },
      {
        "input": [
          24,
          5,
          17,
          8,
          52,
          0,
          14
        ],
        "output": [
          17,
          8,
          52,
          0,
          14
        ]
      }
    ]
  },
  {
    "id": "c058",
    "difficulty": 191,
    "function": "def c058(x):\n    # remove the first 5 elements\n    return x[5:]\n\n",
    "data": {
      "input": [
        84,
        68,
        35,
        50,
        30,
        34,
        96,
        53
      ],
      "output": [
        34,
        96,
        53
      ]
    },
    "demos": [
      {
        "input": [
          74,
          58,
          81,
          38
        ],
        "output": []
      },
      {
        "input": [
          53,
          37,
          21,
          70,
          91,
          48,
          38,
          26
        ],
        "output": [
          48,
          38,
          26
        ]
      },
      {
        "input": [
          51,
          52,
          78,
          26,
          78,
          25,
          77
        ],
        "output": [
          25,
          77
        ]
      }
    ]
  },
  {
    "id": "c174",
    "difficulty": 192,
    "function": "def c174(x):\n    # keep the first M elements, where M is the number of unique elements\n    return x[:len(set(x))]\n\n",
    "data": {
      "input": [
        84,
        87,
        69,
        19,
        13
      ],
      "output": [
        84,
        87,
        69,
        19,
        13
      ]
    },
    "demos": [
      {
        "input": [
          80,
          23,
          17,
          82,
          82,
          17,
          97
        ],
        "output": [
          80,
          23,
          17,
          82,
          82
        ]
      },
      {
        "input": [
          37,
          17,
          96,
          87,
          96,
          96,
          17,
          49,
          1
        ],
        "output": [
          37,
          17,
          96,
          87,
          96,
          96
        ]
      },
      {
        "input": [
          35,
          57,
          4,
          55,
          20
        ],
        "output": [
          35,
          57,
          4,
          55,
          20
        ]
      }
    ]
  },
  {
    "id": "c229",
    "difficulty": 193,
    "function": "def c229(x):\n    # keep only first N elements of the reversed input, N is the first element\n    length = x[0]\n    return x[::-1][:length]\n\n",
    "data": {
      "input": [
        3,
        98,
        81,
        45,
        90,
        77,
        78
      ],
      "output": [
        78,
        77,
        90
      ]
    },
    "demos": [
      {
        "input": [
          2,
          50,
          69,
          41,
          78
        ],
        "output": [
          78,
          41
        ]
      },
      {
        "input": [
          1,
          24,
          73,
          74,
          85,
          18,
          40
        ],
        "output": [
          40
        ]
      },
      {
        "input": [
          5,
          62,
          58,
          29,
          43,
          99,
          48,
          33
        ],
        "output": [
          33,
          48,
          99,
          43,
          29
        ]
      }
    ]
  },
  {
    "id": "c162",
    "difficulty": 194,
    "function": "def c162(x):\n    # replace each element M with 3 * M + 7\n    return [3*i+7 for i in x]\n\n",
    "data": {
      "input": [
        16,
        5,
        26,
        14,
        19,
        16,
        15,
        5
      ],
      "output": [
        55,
        22,
        85,
        49,
        64,
        55,
        52,
        22
      ]
    },
    "demos": [
      {
        "input": [
          18,
          0,
          6,
          28,
          8,
          28,
          22
        ],
        "output": [
          61,
          7,
          25,
          91,
          31,
          91,
          73
        ]
      },
      {
        "input": [
          9,
          6,
          15,
          17,
          17,
          23,
          22
        ],
        "output": [
          34,
          25,
          52,
          58,
          58,
          76,
          73
        ]
      },
      {
        "input": [
          13,
          13,
          19,
          26,
          10,
          17,
          29
        ],
        "output": [
          46,
          46,
          64,
          85,
          37,
          58,
          94
        ]
      }
    ]
  },
  {
    "id": "c039",
    "difficulty": 195,
    "function": "def c039(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        22,
        19,
        11,
        43,
        15,
        38,
        42,
        14
      ],
      "output": [
        22,
        19,
        11,
        43,
        15,
        38,
        42,
        14
      ]
    },
    "demos": [
      {
        "input": [
          24,
          40,
          16,
          41,
          9,
          11,
          44
        ],
        "output": [
          24,
          40,
          16,
          41,
          9,
          11,
          44,
          9
        ]
      },
      {
        "input": [
          49,
          6,
          39,
          12,
          10,
          9,
          42
        ],
        "output": [
          49,
          6,
          39,
          12,
          10,
          9,
          42,
          9
        ]
      },
      {
        "input": [
          9,
          24,
          0,
          2,
          11,
          21,
          42
        ],
        "output": [
          9,
          24,
          0,
          2,
          11,
          21,
          42,
          9
        ]
      }
    ]
  },
  {
    "id": "c181",
    "difficulty": 196,
    "function": "def c181(x):\n    # reverse the order of elements with even index\n    return [x[i] if i % 2 == 1 else x[-i-1] for i in range(len(x))]\n\n",
    "data": {
      "input": [
        98,
        3,
        14,
        72,
        42
      ],
      "output": [
        42,
        3,
        14,
        72,
        98
      ]
    },
    "demos": [
      {
        "input": [
          50,
          89,
          20,
          77,
          28,
          94
        ],
        "output": [
          94,
          89,
          77,
          77,
          89,
          94
        ]
      },
      {
        "input": [
          6,
          47,
          86,
          47,
          80,
          42,
          36
        ],
        "output": [
          36,
          47,
          80,
          47,
          86,
          42,
          6
        ]
      },
      {
        "input": [
          97,
          61,
          13,
          56,
          18,
          55,
          37,
          55
        ],
        "output": [
          55,
          61,
          55,
          56,
          56,
          55,
          61,
          55
        ]
      }
    ]
  },
  {
    "id": "c163",
    "difficulty": 197,
    "function": "def c163(x):\n    # replace each element M with 2 * M - 10\n    return [2*i-10 for i in x]\n\n",
    "data": {
      "input": [
        28,
        27,
        80,
        58,
        12,
        75
      ],
      "output": [
        46,
        44,
        150,
        106,
        14,
        140
      ]
    },
    "demos": [
      {
        "input": [
          87,
          32,
          74,
          74,
          69,
          35,
          81,
          45
        ],
        "output": [
          164,
          54,
          138,
          138,
          128,
          60,
          152,
          80
        ]
      },
      {
        "input": [
          26,
          90,
          30,
          77,
          43,
          32,
          98,
          12
        ],
        "output": [
          42,
          170,
          50,
          144,
          76,
          54,
          186,
          14
        ]
      },
      {
        "input": [
          35,
          71,
          12,
          42,
          82,
          62,
          20
        ],
        "output": [
          60,
          132,
          14,
          74,
          154,
          114,
          30
        ]
      }
    ]
  },
  {
    "id": "c154",
    "difficulty": 198,
    "function": "def c154(x):\n    # triple each even element\n    return [i*3 if i % 2 == 0 else i for i in x]\n\n",
    "data": {
      "input": [
        16,
        8,
        5,
        12,
        19,
        1,
        9
      ],
      "output": [
        48,
        24,
        5,
        36,
        19,
        1,
        9
      ]
    },
    "demos": [
      {
        "input": [
          19,
          23,
          18,
          18,
          19,
          8,
          17
        ],
        "output": [
          19,
          23,
          54,
          54,
          19,
          24,
          17
        ]
      },
      {
        "input": [
          1,
          15,
          28,
          1,
          18,
          14,
          1,
          32
        ],
        "output": [
          1,
          15,
          84,
          1,
          54,
          42,
          1,
          96
        ]
      },
      {
        "input": [
          5,
          23,
          20,
          0,
          2,
          14,
          29,
          18
        ],
        "output": [
          5,
          23,
          60,
          0,
          6,
          42,
          29,
          54
        ]
      }
    ]
  },
  {
    "id": "c166",
    "difficulty": 199,
    "function": "def c166(x):\n    # unique elements in ascending order by the sum of their digits\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = sum(map(int, str(i)))\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        83,
        65,
        31,
        68,
        13,
        7
      ],
      "output": [
        31,
        13,
        7,
        83,
        65,
        68
      ]
    },
    "demos": [
      {
        "input": [
          54,
          63,
          47,
          5,
          57
        ],
        "output": [
          5,
          54,
          63,
          47,
          57
        ]
      },
      {
        "input": [
          52,
          87,
          26,
          87,
          37
        ],
        "output": [
          52,
          26,
          37,
          87
        ]
      },
      {
        "input": [
          6,
          7,
          23,
          23,
          72,
          54
        ],
        "output": [
          23,
          6,
          7,
          72,
          54
        ]
      }
    ]
  },
  {
    "id": "c084",
    "difficulty": 200,
    "function": "def c084(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        40,
        67,
        23,
        93,
        53,
        66,
        26,
        90
      ],
      "output": [
        26
      ]
    },
    "demos": [
      {
        "input": [
          51,
          10,
          6,
          23,
          60,
          11,
          32,
          66
        ],
        "output": [
          32
        ]
      },
      {
        "input": [
          38,
          98,
          84,
          16,
          20,
          26,
          16,
          90
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          89,
          62,
          49,
          54,
          18,
          49,
          26,
          24,
          78,
          50
        ],
        "output": [
          26
        ]
      }
    ]
  },
  {
    "id": "c249",
    "difficulty": 201,
    "function": "def c249(x):\n    # use 0s to delimit sublists, give the first element of each sublist\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            if sublist:\n                res.append(sublist[0])\n                sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res.append(sublist[0])\n    return res\n\n",
    "data": {
      "input": [
        73,
        71,
        72,
        54,
        29,
        59,
        86,
        17
      ],
      "output": [
        73
      ]
    },
    "demos": [
      {
        "input": [
          29,
          0,
          30,
          0,
          22,
          77,
          92,
          60,
          35,
          32,
          0,
          79
        ],
        "output": [
          29,
          30,
          22,
          79
        ]
      },
      {
        "input": [
          13,
          54,
          0,
          64,
          79,
          55,
          58,
          35,
          22
        ],
        "output": [
          13,
          64
        ]
      },
      {
        "input": [
          20,
          1,
          91,
          12,
          62,
          97,
          56
        ],
        "output": [
          20
        ]
      }
    ]
  },
  {
    "id": "c118",
    "difficulty": 202,
    "function": "def c118(x):\n    # left rotate by N elements, N is the last element\n    return x[x[-1]:] + x[:x[-1]]\n\n",
    "data": {
      "input": [
        34,
        36,
        12,
        72,
        79,
        1
      ],
      "output": [
        36,
        12,
        72,
        79,
        1,
        34
      ]
    },
    "demos": [
      {
        "input": [
          44,
          36,
          95,
          15,
          1,
          37,
          1
        ],
        "output": [
          36,
          95,
          15,
          1,
          37,
          1,
          44
        ]
      },
      {
        "input": [
          24,
          3,
          45,
          72,
          3,
          2
        ],
        "output": [
          45,
          72,
          3,
          2,
          24,
          3
        ]
      },
      {
        "input": [
          14,
          43,
          28,
          55,
          34,
          29,
          73,
          44,
          8
        ],
        "output": [
          8,
          14,
          43,
          28,
          55,
          34,
          29,
          73,
          44
        ]
      }
    ]
  },
  {
    "id": "c152",
    "difficulty": 203,
    "function": "def c152(x):\n    # replace each element with the product of its digits\n    res = []\n    for i in x:\n        if i < 10:\n            res.append(0)\n        else:\n            res.append(int(str(i)[0]) * int(str(i)[1]))\n    return res\n\n",
    "data": {
      "input": [
        18,
        96,
        30,
        91,
        58,
        52
      ],
      "output": [
        8,
        54,
        0,
        9,
        40,
        10
      ]
    },
    "demos": [
      {
        "input": [
          9,
          61,
          52,
          22,
          7,
          85,
          95
        ],
        "output": [
          0,
          6,
          10,
          4,
          0,
          40,
          45
        ]
      },
      {
        "input": [
          72,
          99,
          82,
          63,
          71
        ],
        "output": [
          14,
          81,
          16,
          18,
          7
        ]
      },
      {
        "input": [
          73,
          5,
          37,
          47,
          23
        ],
        "output": [
          21,
          0,
          21,
          28,
          6
        ]
      }
    ]
  },
  {
    "id": "c237",
    "difficulty": 204,
    "function": "def c237(x):\n    # cumulative sum of unique elements\n    res = []\n    s = 0\n    for i in x:\n        if i not in res:\n            res.append(i)\n    for i in range(len(res)):\n        s += res[i]\n        res[i] = s\n    return res\n\n",
    "data": {
      "input": [
        6,
        25,
        7,
        25,
        25,
        15,
        18
      ],
      "output": [
        6,
        31,
        38,
        53,
        71
      ]
    },
    "demos": [
      {
        "input": [
          0,
          9,
          13,
          9,
          12,
          29,
          0
        ],
        "output": [
          0,
          9,
          22,
          34,
          63
        ]
      },
      {
        "input": [
          21,
          10,
          5,
          20,
          20,
          21
        ],
        "output": [
          21,
          31,
          36,
          56
        ]
      },
      {
        "input": [
          16,
          3,
          14,
          30,
          14
        ],
        "output": [
          16,
          19,
          33,
          63
        ]
      }
    ]
  },
  {
    "id": "c243",
    "difficulty": 205,
    "function": "def c243(x):\n    # number of odd elements\n    return [len([i for i in x if i % 2 == 1])]\n\n",
    "data": {
      "input": [
        96,
        24,
        28,
        8,
        32,
        15
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          62,
          54,
          83,
          25,
          55,
          28
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          11,
          7,
          11,
          41,
          62,
          98,
          84
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          51,
          44,
          23,
          56,
          76,
          10,
          21,
          25
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c188",
    "difficulty": 206,
    "function": "def c188(x):\n    # replace each element with 1 if it is divisible by 3, else replace with 0\n    return [1 if i % 3 == 0 else 0 for i in x]\n\n",
    "data": {
      "input": [
        50,
        69,
        52,
        62,
        20,
        54
      ],
      "output": [
        0,
        1,
        0,
        0,
        0,
        1
      ]
    },
    "demos": [
      {
        "input": [
          50,
          92,
          91,
          16,
          31,
          13,
          59
        ],
        "output": [
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          91,
          91,
          26,
          69,
          83,
          82,
          19,
          55
        ],
        "output": [
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          26,
          18,
          12,
          4,
          7,
          90,
          96
        ],
        "output": [
          0,
          1,
          1,
          0,
          0,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c139",
    "difficulty": 207,
    "function": "def c139(x):\n    # remove all occurrences of the smallest element and the largest element\n    min_val = min(x)\n    max_val = max(x)\n    return [i for i in x if i != min_val and i != max_val]\n\n",
    "data": {
      "input": [
        7,
        7,
        0,
        1,
        7,
        3,
        3
      ],
      "output": [
        1,
        3,
        3
      ]
    },
    "demos": [
      {
        "input": [
          3,
          1,
          0,
          4,
          0,
          10,
          6,
          1
        ],
        "output": [
          3,
          1,
          4,
          6,
          1
        ]
      },
      {
        "input": [
          0,
          7,
          1,
          1,
          5,
          2,
          2
        ],
        "output": [
          1,
          1,
          5,
          2,
          2
        ]
      },
      {
        "input": [
          1,
          4,
          8,
          6,
          9
        ],
        "output": [
          4,
          8,
          6
        ]
      }
    ]
  },
  {
    "id": "c036",
    "difficulty": 208,
    "function": "def c036(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        5,
        9,
        0,
        10,
        6,
        3
      ],
      "output": [
        5,
        6,
        0,
        10,
        9,
        3
      ]
    },
    "demos": [
      {
        "input": [
          9,
          10,
          4,
          10,
          0,
          0,
          9
        ],
        "output": [
          9,
          0,
          4,
          10,
          10,
          0,
          9
        ]
      },
      {
        "input": [
          6,
          3,
          8,
          10,
          0
        ],
        "output": [
          6,
          0,
          8,
          10,
          3
        ]
      },
      {
        "input": [
          2,
          7,
          0,
          7,
          10,
          9,
          3,
          5
        ],
        "output": [
          2,
          10,
          0,
          7,
          7,
          9,
          3,
          5
        ]
      }
    ]
  },
  {
    "id": "c201",
    "difficulty": 209,
    "function": "def c201(x):\n    # elements > first element, followed by elements < first element\n    return [i for i in x if i > x[0]] + [i for i in x if i < x[0]]\n\n",
    "data": {
      "input": [
        52,
        5,
        85,
        22,
        11
      ],
      "output": [
        85,
        5,
        22,
        11
      ]
    },
    "demos": [
      {
        "input": [
          8,
          54,
          77,
          80,
          80,
          82,
          87,
          84
        ],
        "output": [
          54,
          77,
          80,
          80,
          82,
          87,
          84
        ]
      },
      {
        "input": [
          46,
          9,
          56,
          72,
          59,
          95,
          49
        ],
        "output": [
          56,
          72,
          59,
          95,
          49,
          9
        ]
      },
      {
        "input": [
          75,
          88,
          86,
          10,
          74,
          79
        ],
        "output": [
          88,
          86,
          79,
          10,
          74
        ]
      }
    ]
  },
  {
    "id": "c217",
    "difficulty": 210,
    "function": "def c217(x):\n    # elements in ascending order by ones digit\n    return sorted(x, key=lambda i: i % 10)\n\n",
    "data": {
      "input": [
        17,
        59,
        17,
        0,
        70,
        72,
        1
      ],
      "output": [
        0,
        70,
        1,
        72,
        17,
        17,
        59
      ]
    },
    "demos": [
      {
        "input": [
          54,
          11,
          8,
          81,
          49,
          23,
          34,
          12
        ],
        "output": [
          11,
          81,
          12,
          23,
          54,
          34,
          8,
          49
        ]
      },
      {
        "input": [
          95,
          51,
          67,
          75,
          30
        ],
        "output": [
          30,
          51,
          95,
          75,
          67
        ]
      },
      {
        "input": [
          65,
          18,
          99,
          18,
          76,
          44,
          21,
          28
        ],
        "output": [
          21,
          44,
          65,
          76,
          18,
          18,
          28,
          99
        ]
      }
    ]
  },
  {
    "id": "c005",
    "difficulty": 211,
    "function": "def c005(x):\n    # remove all but element N + 1, N is the first element\n    return [x[x[0]+1]]\n\n",
    "data": {
      "input": [
        0,
        34,
        61,
        35,
        37,
        67,
        4,
        73
      ],
      "output": [
        34
      ]
    },
    "demos": [
      {
        "input": [
          2,
          96,
          32,
          44,
          82
        ],
        "output": [
          44
        ]
      },
      {
        "input": [
          0,
          16,
          46,
          77,
          34,
          93
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          1,
          32,
          73,
          77,
          64
        ],
        "output": [
          73
        ]
      }
    ]
  },
  {
    "id": "c063",
    "difficulty": 213,
    "function": "def c063(x):\n    # remove the first N + 1 elements, N is the first element\n    return x[x[0]+1:]\n\n",
    "data": {
      "input": [
        5,
        6,
        8,
        6,
        3,
        5,
        2
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          3,
          1,
          2,
          7,
          3,
          9,
          5
        ],
        "output": [
          3,
          9,
          5
        ]
      },
      {
        "input": [
          3,
          6,
          4,
          6,
          2,
          2,
          6
        ],
        "output": [
          2,
          2,
          6
        ]
      },
      {
        "input": [
          3,
          1,
          10,
          0,
          8,
          3
        ],
        "output": [
          8,
          3
        ]
      }
    ]
  },
  {
    "id": "c141",
    "difficulty": 214,
    "function": "def c141(x):\n    # replace element M + 2 with N, M = element 0, N = element 1; remove elements 0 and 1\n    x[x[0]+2] = x[1]\n    return x[2:]\n\n",
    "data": {
      "input": [
        0,
        8,
        9,
        2,
        1
      ],
      "output": [
        8,
        2,
        1
      ]
    },
    "demos": [
      {
        "input": [
          1,
          6,
          8,
          7,
          8
        ],
        "output": [
          8,
          6,
          8
        ]
      },
      {
        "input": [
          0,
          2,
          3,
          0,
          9,
          3,
          2
        ],
        "output": [
          2,
          0,
          9,
          3,
          2
        ]
      },
      {
        "input": [
          0,
          0,
          9,
          3,
          3,
          10
        ],
        "output": [
          0,
          3,
          3,
          10
        ]
      }
    ]
  },
  {
    "id": "c089",
    "difficulty": 215,
    "function": "def c089(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        49,
        90,
        15,
        36,
        47,
        9,
        30
      ],
      "output": [
        49,
        47,
        15,
        36,
        90,
        9,
        30
      ]
    },
    "demos": [
      {
        "input": [
          29,
          77,
          19,
          47,
          84,
          61,
          77,
          58
        ],
        "output": [
          29,
          84,
          19,
          47,
          77,
          61,
          77,
          58
        ]
      },
      {
        "input": [
          86,
          87,
          13,
          44,
          75,
          57,
          2
        ],
        "output": [
          86,
          75,
          13,
          44,
          87,
          57,
          2
        ]
      },
      {
        "input": [
          65,
          83,
          47,
          62,
          80
        ],
        "output": [
          65,
          80,
          47,
          62,
          83
        ]
      }
    ]
  },
  {
    "id": "c124",
    "difficulty": 216,
    "function": "def c124(x):\n    # element M, M = element N, N = element 0\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        4,
        4,
        3,
        4,
        5,
        9,
        0,
        0,
        0,
        1
      ],
      "output": [
        5
      ]
    },
    "demos": [
      {
        "input": [
          3,
          9,
          8,
          3,
          7,
          7,
          5,
          3,
          4,
          4
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          5,
          4,
          2,
          0,
          2,
          4,
          4,
          1,
          3
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          7,
          5,
          5,
          3,
          9,
          0,
          3,
          7,
          1,
          9
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c216",
    "difficulty": 217,
    "function": "def c216(x):\n    # elements in ascending order by tens digit\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append([i, int(str(i)[-2])])\n        else:\n            res.append([i, 0])\n    return [i[0] for i in sorted(res, key=lambda i: i[1])]\n\n",
    "data": {
      "input": [
        20,
        48,
        79,
        43,
        91,
        43
      ],
      "output": [
        20,
        48,
        43,
        43,
        79,
        91
      ]
    },
    "demos": [
      {
        "input": [
          93,
          94,
          41,
          11,
          39,
          33,
          75,
          0
        ],
        "output": [
          0,
          11,
          39,
          33,
          41,
          75,
          93,
          94
        ]
      },
      {
        "input": [
          77,
          49,
          20,
          41,
          39,
          93,
          46,
          47
        ],
        "output": [
          20,
          39,
          49,
          41,
          46,
          47,
          77,
          93
        ]
      },
      {
        "input": [
          1,
          98,
          43,
          0,
          91,
          37,
          14,
          62
        ],
        "output": [
          1,
          0,
          14,
          37,
          43,
          62,
          98,
          91
        ]
      }
    ]
  },
  {
    "id": "c143",
    "difficulty": 218,
    "function": "def c143(x):\n    # replace every occurrence of the largest element with the smallest element\n    max_val = max(x)\n    min_val = min(x)\n    return [min_val if i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        8,
        7,
        6,
        0,
        8,
        8
      ],
      "output": [
        0,
        7,
        6,
        0,
        0,
        0
      ]
    },
    "demos": [
      {
        "input": [
          1,
          7,
          1,
          6,
          0,
          4
        ],
        "output": [
          1,
          0,
          1,
          6,
          0,
          4
        ]
      },
      {
        "input": [
          6,
          10,
          7,
          5,
          8,
          7
        ],
        "output": [
          6,
          5,
          7,
          5,
          8,
          7
        ]
      },
      {
        "input": [
          6,
          2,
          3,
          5,
          6,
          6,
          2,
          1
        ],
        "output": [
          1,
          2,
          3,
          5,
          1,
          1,
          2,
          1
        ]
      }
    ]
  },
  {
    "id": "c215",
    "difficulty": 219,
    "function": "def c215(x):\n    # elements in ascending order by hundreds digit\n    res = {}\n    for i in x:\n        if len(str(i)) > 2:\n            res[i] = int(str(i)[-3])\n        else:\n            res[i] = 0\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        417,
        724,
        173,
        205,
        404,
        838
      ],
      "output": [
        173,
        205,
        417,
        404,
        724,
        838
      ]
    },
    "demos": [
      {
        "input": [
          801,
          510,
          52,
          886,
          866,
          721,
          738
        ],
        "output": [
          52,
          510,
          721,
          738,
          801,
          886,
          866
        ]
      },
      {
        "input": [
          422,
          556,
          471,
          180,
          399,
          825,
          662,
          263
        ],
        "output": [
          180,
          263,
          399,
          422,
          471,
          556,
          662,
          825
        ]
      },
      {
        "input": [
          690,
          937,
          267,
          250,
          56,
          807
        ],
        "output": [
          56,
          267,
          250,
          690,
          807,
          937
        ]
      }
    ]
  },
  {
    "id": "c144",
    "difficulty": 220,
    "function": "def c144(x):\n    # replace every occurrence of the largest or smallest element with their absolute difference\n    max_val = max(x)\n    min_val = min(x)\n    return [abs(min_val - max_val) if i == min_val or i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        73,
        45
      ],
      "output": [
        28,
        28
      ]
    },
    "demos": [
      {
        "input": [
          30,
          85,
          94,
          58
        ],
        "output": [
          64,
          85,
          64,
          58
        ]
      },
      {
        "input": [
          52,
          9,
          5,
          81
        ],
        "output": [
          52,
          9,
          76,
          76
        ]
      },
      {
        "input": [
          15,
          91,
          87,
          2,
          66
        ],
        "output": [
          15,
          89,
          87,
          89,
          66
        ]
      }
    ]
  },
  {
    "id": "c128",
    "difficulty": 221,
    "function": "def c128(x):\n    # elements in ascending order after removing elements 0,1,and 4\n    x = x[2:4] + x[5:]\n    return sorted(x)\n\n",
    "data": {
      "input": [
        13,
        58,
        85,
        12,
        10,
        9
      ],
      "output": [
        9,
        12,
        85
      ]
    },
    "demos": [
      {
        "input": [
          88,
          62,
          22,
          94,
          13
        ],
        "output": [
          22,
          94
        ]
      },
      {
        "input": [
          38,
          82,
          28,
          87,
          99
        ],
        "output": [
          28,
          87
        ]
      },
      {
        "input": [
          31,
          15,
          3,
          7,
          95,
          19
        ],
        "output": [
          3,
          7,
          19
        ]
      }
    ]
  },
  {
    "id": "c208",
    "difficulty": 222,
    "function": "def c208(x):\n    # keep only last N elements, N is the last element\n    return x[-x[-1]:]\n\n",
    "data": {
      "input": [
        6,
        7,
        7,
        2,
        2,
        2,
        6,
        4
      ],
      "output": [
        2,
        2,
        6,
        4
      ]
    },
    "demos": [
      {
        "input": [
          0,
          3,
          9,
          9,
          9,
          6,
          6
        ],
        "output": [
          3,
          9,
          9,
          9,
          6,
          6
        ]
      },
      {
        "input": [
          9,
          7,
          1,
          6,
          4,
          3,
          3,
          5
        ],
        "output": [
          6,
          4,
          3,
          3,
          5
        ]
      },
      {
        "input": [
          4,
          9,
          6,
          7,
          0,
          10,
          2,
          6
        ],
        "output": [
          6,
          7,
          0,
          10,
          2,
          6
        ]
      }
    ]
  },
  {
    "id": "c035",
    "difficulty": 223,
    "function": "def c035(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        8,
        1,
        9,
        2,
        9,
        6,
        3
      ],
      "output": [
        8,
        9,
        1,
        2,
        9,
        6,
        3
      ]
    },
    "demos": [
      {
        "input": [
          10,
          1,
          7,
          7,
          3,
          2,
          0,
          10
        ],
        "output": [
          10,
          7,
          1,
          7,
          3,
          2,
          0,
          10
        ]
      },
      {
        "input": [
          4,
          1,
          3,
          4,
          3,
          9
        ],
        "output": [
          4,
          3,
          1,
          4,
          3,
          9
        ]
      },
      {
        "input": [
          4,
          6,
          6,
          4,
          10,
          5
        ],
        "output": [
          4,
          6,
          6,
          4,
          10,
          5
        ]
      }
    ]
  },
  {
    "id": "c214",
    "difficulty": 224,
    "function": "def c214(x):\n    # remove elements 0 and N + 1, N is the first element\n    x = x[1:x[0]+1] + x[x[0]+2:]\n    return x\n\n",
    "data": {
      "input": [
        1,
        46,
        66,
        37,
        29,
        3,
        24,
        62
      ],
      "output": [
        46,
        37,
        29,
        3,
        24,
        62
      ]
    },
    "demos": [
      {
        "input": [
          0,
          74,
          52,
          12,
          0,
          28,
          74,
          31
        ],
        "output": [
          52,
          12,
          0,
          28,
          74,
          31
        ]
      },
      {
        "input": [
          1,
          13,
          45,
          3,
          1,
          72,
          85
        ],
        "output": [
          13,
          3,
          1,
          72,
          85
        ]
      },
      {
        "input": [
          2,
          68,
          37,
          22,
          14,
          24,
          38
        ],
        "output": [
          68,
          37,
          14,
          24,
          38
        ]
      }
    ]
  },
  {
    "id": "c130",
    "difficulty": 225,
    "function": "def c130(x):\n    # elements 1 through N + 1, N = element 0\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        2,
        33,
        20,
        98,
        8
      ],
      "output": [
        33,
        20
      ]
    },
    "demos": [
      {
        "input": [
          1,
          89,
          5,
          11,
          90,
          70,
          19,
          69
        ],
        "output": [
          89
        ]
      },
      {
        "input": [
          6,
          63,
          12,
          18,
          71,
          80,
          9,
          59
        ],
        "output": [
          63,
          12,
          18,
          71,
          80,
          9
        ]
      },
      {
        "input": [
          7,
          9,
          84,
          7,
          36,
          16,
          35,
          15
        ],
        "output": [
          9,
          84,
          7,
          36,
          16,
          35,
          15
        ]
      }
    ]
  },
  {
    "id": "c159",
    "difficulty": 226,
    "function": "def c159(x):\n    # element N counts the number of occurrences of N, up to the largest element\n    out = []\n    for i, j in enumerate(range(max(x)+1)):\n        out.append(x.count(j))\n    return out\n\n",
    "data": {
      "input": [
        9,
        6,
        8,
        5,
        9,
        2,
        1
      ],
      "output": [
        0,
        1,
        1,
        0,
        0,
        1,
        1,
        0,
        1,
        2
      ]
    },
    "demos": [
      {
        "input": [
          8,
          0,
          3,
          7,
          7,
          3
        ],
        "output": [
          1,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          1
        ]
      },
      {
        "input": [
          7,
          0,
          5,
          9,
          0,
          7,
          2
        ],
        "output": [
          2,
          0,
          1,
          0,
          0,
          1,
          0,
          2,
          0,
          1
        ]
      },
      {
        "input": [
          3,
          7,
          7,
          1,
          9,
          2
        ],
        "output": [
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          2,
          0,
          1
        ]
      }
    ]
  },
  {
    "id": "c205",
    "difficulty": 227,
    "function": "def c205(x):\n    # product of elements divisible by 4\n    res = 1\n    for i in x:\n        if i % 4 == 0:\n            res *= i\n    return [res]\n\n",
    "data": {
      "input": [
        10,
        12,
        8,
        15,
        7,
        1
      ],
      "output": [
        96
      ]
    },
    "demos": [
      {
        "input": [
          6,
          20,
          9,
          3,
          13,
          10,
          5
        ],
        "output": [
          20
        ]
      },
      {
        "input": [
          12,
          15,
          6,
          19,
          4,
          15
        ],
        "output": [
          48
        ]
      },
      {
        "input": [
          13,
          4,
          5,
          4,
          5,
          7,
          5,
          4
        ],
        "output": [
          64
        ]
      }
    ]
  },
  {
    "id": "c076",
    "difficulty": 228,
    "function": "def c076(x):\n    # the max, last, length, first, and min elements\n    return [max(x), x[-1], len(x), x[0], min(x)]\n\n",
    "data": {
      "input": [
        1,
        6,
        18,
        77,
        20,
        7
      ],
      "output": [
        77,
        7,
        6,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          45,
          82,
          30,
          74,
          20,
          77,
          7,
          75
        ],
        "output": [
          82,
          75,
          8,
          45,
          7
        ]
      },
      {
        "input": [
          24,
          63,
          57,
          67,
          22,
          46
        ],
        "output": [
          67,
          46,
          6,
          24,
          22
        ]
      },
      {
        "input": [
          41,
          64,
          45,
          95,
          37,
          55,
          65
        ],
        "output": [
          95,
          65,
          7,
          41,
          37
        ]
      }
    ]
  },
  {
    "id": "c250",
    "difficulty": 229,
    "function": "def c250(x):\n    # use 0s to delimit sublists, concatenate reversed sublists\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            res += sublist[::-1]\n            sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res += sublist[::-1]\n    return res\n\n",
    "data": {
      "input": [
        2,
        51,
        68,
        2,
        0,
        16,
        0,
        81
      ],
      "output": [
        2,
        68,
        51,
        2,
        16,
        81
      ]
    },
    "demos": [
      {
        "input": [
          0,
          73,
          22,
          34,
          19,
          24,
          95
        ],
        "output": [
          95,
          24,
          19,
          34,
          22,
          73
        ]
      },
      {
        "input": [
          64,
          0,
          0,
          1,
          56,
          65,
          75,
          0,
          17,
          60,
          31
        ],
        "output": [
          64,
          75,
          65,
          56,
          1,
          31,
          60,
          17
        ]
      },
      {
        "input": [
          31,
          17,
          32,
          62,
          0,
          44,
          80,
          93
        ],
        "output": [
          62,
          32,
          17,
          31,
          93,
          80,
          44
        ]
      }
    ]
  },
  {
    "id": "c186",
    "difficulty": 230,
    "function": "def c186(x):\n    # keep only elements greater than element 0\n    return [i for i in x if i > x[0]]\n\n",
    "data": {
      "input": [
        76,
        48,
        63,
        61,
        29,
        19,
        97
      ],
      "output": [
        97
      ]
    },
    "demos": [
      {
        "input": [
          68,
          36,
          1,
          91,
          32,
          11
        ],
        "output": [
          91
        ]
      },
      {
        "input": [
          32,
          8,
          93,
          15,
          46,
          49
        ],
        "output": [
          93,
          46,
          49
        ]
      },
      {
        "input": [
          36,
          31,
          29,
          78,
          87,
          62,
          12
        ],
        "output": [
          78,
          87,
          62
        ]
      }
    ]
  },
  {
    "id": "c242",
    "difficulty": 231,
    "function": "def c242(x):\n    # take the largest unique element, append the second largest unique element, prepend the third largest unique element, append the fourth largest unique element, and so on\n    unique = sorted(set(x), reverse=True)\n    res = [max(unique)]\n    unique.remove(max(unique))\n    for i in range(len(unique)):\n        if i % 2 == 0:\n            res.append(unique[i])\n        else:\n            res.insert(0, unique[i])\n    return res\n\n",
    "data": {
      "input": [
        6,
        2,
        9,
        2,
        3,
        2,
        6,
        7
      ],
      "output": [
        2,
        6,
        9,
        7,
        3
      ]
    },
    "demos": [
      {
        "input": [
          6,
          7,
          5,
          8,
          9,
          4,
          7
        ],
        "output": [
          5,
          7,
          9,
          8,
          6,
          4
        ]
      },
      {
        "input": [
          6,
          7,
          6,
          3,
          9,
          6,
          0
        ],
        "output": [
          0,
          6,
          9,
          7,
          3
        ]
      },
      {
        "input": [
          1,
          4,
          5,
          9,
          1,
          6,
          1,
          5
        ],
        "output": [
          1,
          5,
          9,
          6,
          4
        ]
      }
    ]
  },
  {
    "id": "c160",
    "difficulty": 232,
    "function": "def c160(x):\n    # replace each element with 99 - element\n    return [99-i for i in x]\n\n",
    "data": {
      "input": [
        74,
        79,
        49,
        59,
        40,
        52,
        17
      ],
      "output": [
        25,
        20,
        50,
        40,
        59,
        47,
        82
      ]
    },
    "demos": [
      {
        "input": [
          0,
          65,
          84,
          86,
          45,
          10,
          96
        ],
        "output": [
          99,
          34,
          15,
          13,
          54,
          89,
          3
        ]
      },
      {
        "input": [
          97,
          47,
          97,
          40,
          7,
          6,
          86
        ],
        "output": [
          2,
          52,
          2,
          59,
          92,
          93,
          13
        ]
      },
      {
        "input": [
          8,
          63,
          43,
          71,
          34,
          77
        ],
        "output": [
          91,
          36,
          56,
          28,
          65,
          22
        ]
      }
    ]
  },
  {
    "id": "c167",
    "difficulty": 233,
    "function": "def c167(x):\n    # keep only elements divisible by 3\n    return [i for i in x if i % 3 == 0]\n\n",
    "data": {
      "input": [
        25,
        35,
        54,
        37,
        75,
        7
      ],
      "output": [
        54,
        75
      ]
    },
    "demos": [
      {
        "input": [
          40,
          29,
          59,
          86,
          29,
          18,
          47,
          5
        ],
        "output": [
          18
        ]
      },
      {
        "input": [
          8,
          66,
          5,
          79,
          52,
          35,
          46
        ],
        "output": [
          66
        ]
      },
      {
        "input": [
          54,
          52,
          4,
          8,
          39,
          61,
          41,
          0
        ],
        "output": [
          54,
          39,
          0
        ]
      }
    ]
  },
  {
    "id": "c202",
    "difficulty": 234,
    "function": "def c202(x):\n    # the indices of every even number\n    return [i for i, j in enumerate(x) if j % 2 == 0]\n\n\n",
    "data": {
      "input": [
        94,
        97,
        5,
        94,
        1,
        86,
        34,
        80
      ],
      "output": [
        0,
        3,
        5,
        6,
        7
      ]
    },
    "demos": [
      {
        "input": [
          74,
          41,
          70,
          53,
          19,
          57,
          78,
          86
        ],
        "output": [
          0,
          2,
          6,
          7
        ]
      },
      {
        "input": [
          44,
          15,
          21,
          4,
          36,
          33
        ],
        "output": [
          0,
          3,
          4
        ]
      },
      {
        "input": [
          13,
          84,
          12,
          82,
          80,
          46,
          4
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      }
    ]
  },
  {
    "id": "c129",
    "difficulty": 235,
    "function": "def c129(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        2,
        3,
        95,
        22,
        86,
        20,
        68,
        55,
        12
      ],
      "output": [
        86
      ]
    },
    "demos": [
      {
        "input": [
          1,
          1,
          0,
          52,
          55,
          54,
          47,
          69,
          95
        ],
        "output": []
      },
      {
        "input": [
          4,
          5,
          77,
          75,
          83,
          4,
          14,
          71,
          72,
          23
        ],
        "output": [
          14
        ]
      },
      {
        "input": [
          6,
          7,
          66,
          74,
          24,
          90,
          25,
          12,
          39
        ],
        "output": [
          39
        ]
      }
    ]
  },
  {
    "id": "c221",
    "difficulty": 236,
    "function": "def c221(x):\n    # sum of even elements\n    return [sum(i for i in x if i % 2 == 0)]\n\n",
    "data": {
      "input": [
        32,
        25,
        1,
        24,
        9,
        42,
        3
      ],
      "output": [
        98
      ]
    },
    "demos": [
      {
        "input": [
          3,
          43,
          10,
          5,
          35,
          9,
          25
        ],
        "output": [
          10
        ]
      },
      {
        "input": [
          31,
          37,
          5,
          5,
          38,
          42,
          49
        ],
        "output": [
          80
        ]
      },
      {
        "input": [
          6,
          14,
          43,
          6,
          24,
          31,
          5
        ],
        "output": [
          50
        ]
      }
    ]
  },
  {
    "id": "c131",
    "difficulty": 237,
    "function": "def c131(x):\n    # keep only elements whose tens digit is even\n    res = []\n    for i in x:\n        if len(str(i)) < 2:\n            res.append(i)\n        elif int(str(i)[-2]) % 2 == 0:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        51,
        81,
        97,
        35,
        98,
        89,
        70
      ],
      "output": [
        81,
        89
      ]
    },
    "demos": [
      {
        "input": [
          33,
          85,
          33,
          99,
          24,
          17,
          81,
          8
        ],
        "output": [
          85,
          24,
          81,
          8
        ]
      },
      {
        "input": [
          83,
          79,
          29,
          64,
          43,
          2,
          82,
          39
        ],
        "output": [
          83,
          29,
          64,
          43,
          2,
          82
        ]
      },
      {
        "input": [
          10,
          57,
          2,
          79,
          59,
          36,
          49,
          70
        ],
        "output": [
          2,
          49
        ]
      }
    ]
  },
  {
    "id": "c180",
    "difficulty": 238,
    "function": "def c180(x):\n    # take the smallest element, append the second smallest element, prepend the third smallest element, append the fourth smallest element, and so on\n    sorted_x = sorted(x)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        8,
        52,
        42,
        15,
        94,
        95,
        41
      ],
      "output": [
        95,
        52,
        41,
        8,
        15,
        42,
        94
      ]
    },
    "demos": [
      {
        "input": [
          28,
          2,
          8,
          12,
          73,
          71,
          94,
          97
        ],
        "output": [
          94,
          71,
          12,
          2,
          8,
          28,
          73,
          97
        ]
      },
      {
        "input": [
          46,
          60,
          9,
          64,
          33,
          99,
          44,
          48
        ],
        "output": [
          64,
          48,
          44,
          9,
          33,
          46,
          60,
          99
        ]
      },
      {
        "input": [
          35,
          63,
          85,
          81,
          33,
          91
        ],
        "output": [
          85,
          63,
          33,
          35,
          81,
          91
        ]
      }
    ]
  },
  {
    "id": "c015",
    "difficulty": 239,
    "function": "def c015(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        4,
        4,
        5,
        15,
        11,
        13,
        8,
        11
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          3,
          5,
          13,
          3,
          9,
          8,
          15,
          6
        ],
        "output": [
          8,
          15
        ]
      },
      {
        "input": [
          1,
          5,
          7,
          8,
          8,
          2
        ],
        "output": [
          8,
          8,
          2
        ]
      },
      {
        "input": [
          1,
          5,
          6,
          4,
          15,
          6,
          10,
          3,
          2
        ],
        "output": [
          4,
          15,
          6,
          10
        ]
      }
    ]
  },
  {
    "id": "c179",
    "difficulty": 240,
    "function": "def c179(x):\n    # take the largest element, append the second largest element, prepend the third largest element, append the fourth largest element, and so on\n    sorted_x = sorted(x, reverse=True)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        56,
        98,
        93,
        62,
        99,
        76,
        71
      ],
      "output": [
        56,
        71,
        93,
        99,
        98,
        76,
        62
      ]
    },
    "demos": [
      {
        "input": [
          35,
          73,
          38,
          59,
          86,
          75,
          91
        ],
        "output": [
          35,
          59,
          75,
          91,
          86,
          73,
          38
        ]
      },
      {
        "input": [
          31,
          48,
          44,
          53,
          5,
          70,
          59
        ],
        "output": [
          5,
          44,
          53,
          70,
          59,
          48,
          31
        ]
      },
      {
        "input": [
          84,
          91,
          44,
          83,
          1,
          72,
          55
        ],
        "output": [
          1,
          55,
          83,
          91,
          84,
          72,
          44
        ]
      }
    ]
  },
  {
    "id": "c226",
    "difficulty": 241,
    "function": "def c226(x):\n    # remove first M and last N elements, M is the first element, N is the last element\n    if x[-1] == 0:\n        return x[x[0]:]\n    return x[x[0]:-x[-1]]\n\n",
    "data": {
      "input": [
        0,
        2,
        8,
        13,
        0,
        14,
        14,
        9,
        2
      ],
      "output": [
        0,
        2,
        8,
        13,
        0,
        14,
        14
      ]
    },
    "demos": [
      {
        "input": [
          2,
          6,
          9,
          9,
          4,
          11,
          14,
          5,
          0
        ],
        "output": [
          9,
          9,
          4,
          11,
          14,
          5,
          0
        ]
      },
      {
        "input": [
          5,
          12,
          7,
          0,
          15,
          9,
          15,
          1,
          10,
          1
        ],
        "output": [
          9,
          15,
          1,
          10
        ]
      },
      {
        "input": [
          1,
          11,
          14,
          10,
          15,
          4,
          9,
          8,
          3
        ],
        "output": [
          11,
          14,
          10,
          15,
          4
        ]
      }
    ]
  },
  {
    "id": "c134",
    "difficulty": 242,
    "function": "def c134(x):\n    # remove elements M through N, M is the first element, N is the second element\n    return x[:x[0]] + x[x[1]+1:]\n\n",
    "data": {
      "input": [
        0,
        1,
        13,
        3,
        0,
        6,
        2,
        13
      ],
      "output": [
        13,
        3,
        0,
        6,
        2,
        13
      ]
    },
    "demos": [
      {
        "input": [
          2,
          6,
          15,
          10,
          10,
          3,
          10,
          12,
          11,
          14
        ],
        "output": [
          2,
          6,
          12,
          11,
          14
        ]
      },
      {
        "input": [
          0,
          6,
          15,
          2,
          14,
          6,
          15,
          12
        ],
        "output": [
          12
        ]
      },
      {
        "input": [
          3,
          3,
          0,
          0,
          15,
          11
        ],
        "output": [
          3,
          3,
          0,
          15,
          11
        ]
      }
    ]
  },
  {
    "id": "c164",
    "difficulty": 243,
    "function": "def c164(x):\n    # replace each element M with M // 4 + 5\n    return [i//4+5 for i in x]\n\n",
    "data": {
      "input": [
        79,
        53,
        92,
        16,
        4,
        34
      ],
      "output": [
        24,
        18,
        28,
        9,
        6,
        13
      ]
    },
    "demos": [
      {
        "input": [
          62,
          8,
          66,
          56,
          1,
          30
        ],
        "output": [
          20,
          7,
          21,
          19,
          5,
          12
        ]
      },
      {
        "input": [
          62,
          84,
          85,
          97,
          75,
          23
        ],
        "output": [
          20,
          26,
          26,
          29,
          23,
          10
        ]
      },
      {
        "input": [
          70,
          76,
          11,
          88,
          25,
          93
        ],
        "output": [
          22,
          24,
          7,
          27,
          11,
          28
        ]
      }
    ]
  },
  {
    "id": "c178",
    "difficulty": 244,
    "function": "def c178(x):\n    # keep only elements followed by an even number\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] % 2 == 0:\n            res.append(x[i])\n    return res \n\n",
    "data": {
      "input": [
        71,
        26,
        33,
        51,
        24,
        60,
        59,
        92
      ],
      "output": [
        71,
        51,
        24,
        59
      ]
    },
    "demos": [
      {
        "input": [
          80,
          68,
          66,
          24,
          4,
          97
        ],
        "output": [
          80,
          68,
          66,
          24
        ]
      },
      {
        "input": [
          27,
          37,
          58,
          13,
          33,
          71
        ],
        "output": [
          37
        ]
      },
      {
        "input": [
          63,
          43,
          41,
          64,
          28,
          87,
          92
        ],
        "output": [
          41,
          64,
          87
        ]
      }
    ]
  },
  {
    "id": "c113",
    "difficulty": 245,
    "function": "def c113(x):\n    # keep only elements whose ones digit is greater than the first element\n    res = []\n    for i in x:\n        if i % 10 > x[0]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        1,
        13,
        7,
        45,
        49,
        28,
        24,
        22,
        11,
        34
      ],
      "output": [
        13,
        7,
        45,
        49,
        28,
        24,
        22,
        34
      ]
    },
    "demos": [
      {
        "input": [
          5,
          49,
          19,
          15,
          11,
          35,
          3,
          39,
          16,
          4
        ],
        "output": [
          49,
          19,
          39,
          16
        ]
      },
      {
        "input": [
          9,
          44,
          25,
          15,
          24,
          3,
          8,
          35,
          27,
          23
        ],
        "output": []
      },
      {
        "input": [
          0,
          4,
          31,
          28,
          10,
          39,
          18,
          34
        ],
        "output": [
          4,
          31,
          28,
          39,
          18,
          34
        ]
      }
    ]
  },
  {
    "id": "c206",
    "difficulty": 246,
    "function": "def c206(x):\n    # keep only elements whose value is between the first and second element\n    return [i for i in x if x[0] < i < x[1]]\n\n",
    "data": {
      "input": [
        13,
        28,
        38,
        22,
        21,
        44,
        37
      ],
      "output": [
        22,
        21
      ]
    },
    "demos": [
      {
        "input": [
          3,
          35,
          26,
          18,
          32,
          37,
          3,
          42
        ],
        "output": [
          26,
          18,
          32
        ]
      },
      {
        "input": [
          5,
          24,
          3,
          39,
          42,
          18,
          13,
          16,
          12,
          2
        ],
        "output": [
          18,
          13,
          16,
          12
        ]
      },
      {
        "input": [
          0,
          26,
          26,
          40,
          11,
          2,
          1,
          31
        ],
        "output": [
          11,
          2,
          1
        ]
      }
    ]
  },
  {
    "id": "c210",
    "difficulty": 247,
    "function": "def c210(x):\n    # unique elements with last element inserted at index M, where M is the first element\n    unique = []\n    for i in x:\n        if i not in unique:\n            unique.append(i)\n    unique.insert(x[0], x[-1])\n    return unique\n\n",
    "data": {
      "input": [
        1,
        7,
        9,
        6,
        4,
        2,
        3
      ],
      "output": [
        1,
        3,
        7,
        9,
        6,
        4,
        2,
        3
      ]
    },
    "demos": [
      {
        "input": [
          4,
          3,
          8,
          3,
          9,
          8,
          6
        ],
        "output": [
          4,
          3,
          8,
          9,
          6,
          6
        ]
      },
      {
        "input": [
          1,
          0,
          7,
          0,
          1,
          3,
          0
        ],
        "output": [
          1,
          0,
          0,
          7,
          3
        ]
      },
      {
        "input": [
          2,
          5,
          1,
          4,
          7,
          7
        ],
        "output": [
          2,
          5,
          7,
          1,
          4,
          7
        ]
      }
    ]
  },
  {
    "id": "c158",
    "difficulty": 248,
    "function": "def c158(x):\n    # replace each element with 1 if element N equals N, else 0\n    res = []\n    for i, j in enumerate(x):\n        if i == j:\n            res.append(1)\n        else:\n            res.append(0)\n    return res\n\n",
    "data": {
      "input": [
        0,
        0,
        1,
        4,
        4,
        8
      ],
      "output": [
        1,
        0,
        0,
        0,
        1,
        0
      ]
    },
    "demos": [
      {
        "input": [
          6,
          7,
          8,
          3,
          4,
          3,
          6,
          4,
          8,
          9
        ],
        "output": [
          0,
          0,
          0,
          1,
          1,
          0,
          1,
          0,
          1,
          1
        ]
      },
      {
        "input": [
          6,
          1,
          2,
          3,
          4,
          5,
          6,
          0,
          8,
          7
        ],
        "output": [
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          0
        ]
      },
      {
        "input": [
          5,
          5,
          7,
          3,
          4,
          3
        ],
        "output": [
          0,
          0,
          0,
          1,
          1,
          0
        ]
      }
    ]
  },
  {
    "id": "c183",
    "difficulty": 249,
    "function": "def c183(x):\n    # list the index of second elements and following equal to first element\n    res = []\n    for i in range(1, len(x)):\n        if x[i] == x[0]:\n            res.append(i)\n    return res",
    "data": {
      "input": [
        12,
        9,
        12,
        9,
        2,
        12,
        12,
        12,
        13,
        14
      ],
      "output": [
        2,
        5,
        6,
        7
      ]
    },
    "demos": [
      {
        "input": [
          8,
          8,
          13,
          10,
          2,
          15
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          13,
          3,
          10,
          13,
          15,
          3,
          11,
          13,
          0
        ],
        "output": [
          3,
          7
        ]
      },
      {
        "input": [
          10,
          10,
          1,
          10,
          10,
          5,
          10,
          10
        ],
        "output": [
          1,
          3,
          4,
          6,
          7
        ]
      }
    ]
  },
  {
    "id": "c014",
    "difficulty": 157,
    "function": "def c014(x):\n    # remove all but elements 2 through 5\n    return x[2:5]\n\n",
    "data": {
      "input": [
        88,
        25,
        5,
        86,
        74,
        93,
        20,
        10
      ],
      "output": [
        5,
        86,
        74
      ]
    },
    "demos": [
      {
        "input": [
          60,
          60,
          94,
          10,
          35,
          14
        ],
        "output": [
          94,
          10,
          35
        ]
      },
      {
        "input": [
          42,
          76,
          32,
          90,
          96,
          7
        ],
        "output": [
          32,
          90,
          96
        ]
      },
      {
        "input": [
          88,
          11,
          12,
          78,
          84,
          91,
          67
        ],
        "output": [
          12,
          78,
          84
        ]
      }
    ]
  },
  {
    "id": "c098",
    "difficulty": 86,
    "function": "def c098(x):\n    # add the index to each element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        1,
        1,
        9,
        1,
        8,
        7
      ],
      "output": [
        1,
        2,
        11,
        4,
        12,
        12
      ]
    },
    "demos": [
      {
        "input": [
          0,
          9,
          3,
          4,
          6,
          8,
          5
        ],
        "output": [
          0,
          10,
          5,
          7,
          10,
          13,
          11
        ]
      },
      {
        "input": [
          4,
          3,
          0,
          5,
          2,
          2,
          4
        ],
        "output": [
          4,
          4,
          2,
          8,
          6,
          7,
          10
        ]
      },
      {
        "input": [
          7,
          5,
          6,
          1,
          0,
          1,
          6,
          8
        ],
        "output": [
          7,
          6,
          8,
          4,
          4,
          6,
          12,
          15
        ]
      }
    ]
  },
  {
    "id": "c209",
    "difficulty": 212,
    "function": "def c209(x):\n    # elements in ascending order, insert sum of smallest and largest element at index 3\n    x = sorted(x)\n    x.insert(3, x[0] + x[-1])\n    return x\n\n",
    "data": {
      "input": [
        1,
        11,
        13,
        13,
        19,
        3,
        19,
        16
      ],
      "output": [
        1,
        3,
        11,
        20,
        13,
        13,
        16,
        19,
        19
      ]
    },
    "demos": [
      {
        "input": [
          26,
          8,
          5,
          22,
          28,
          25
        ],
        "output": [
          5,
          8,
          22,
          33,
          25,
          26,
          28
        ]
      },
      {
        "input": [
          11,
          11,
          12,
          21,
          14,
          19,
          25
        ],
        "output": [
          11,
          11,
          12,
          36,
          14,
          19,
          21,
          25
        ]
      },
      {
        "input": [
          28,
          0,
          22,
          11,
          19
        ],
        "output": [
          0,
          11,
          19,
          28,
          22,
          28
        ]
      }
    ]
  },
  {
    "id": "c211",
    "difficulty": 104,
    "function": "def c211(x):\n    # reverse input, insert fouth element and fifth element so they are fourth and third from the end respectively\n    x = x[::-1]\n    x.insert(-3, x[3])\n    x.insert(-4, x[4])\n    return x\n\n",
    "data": {
      "input": [
        66,
        19,
        84,
        13,
        55,
        44,
        67
      ],
      "output": [
        67,
        44,
        55,
        13,
        13,
        13,
        84,
        19,
        66
      ]
    },
    "demos": [
      {
        "input": [
          42,
          94,
          71,
          44,
          50,
          49,
          35,
          13
        ],
        "output": [
          13,
          35,
          49,
          50,
          44,
          44,
          50,
          71,
          94,
          42
        ]
      },
      {
        "input": [
          39,
          5,
          5,
          60,
          85,
          70,
          86
        ],
        "output": [
          86,
          70,
          85,
          60,
          60,
          60,
          5,
          5,
          39
        ]
      },
      {
        "input": [
          3,
          10,
          63,
          61,
          18,
          63,
          85,
          77
        ],
        "output": [
          77,
          85,
          63,
          18,
          61,
          61,
          18,
          63,
          10,
          3
        ]
      }
    ]
  },
  {
    "id": "c102",
    "difficulty": 0,
    "function": "def c102(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        56,
        72,
        88,
        70,
        80,
        19
      ],
      "output": [
        56,
        72,
        88,
        70,
        80,
        19
      ]
    },
    "demos": [
      {
        "input": [
          22,
          61,
          18,
          89,
          76
        ],
        "output": [
          22,
          61,
          18,
          89,
          76
        ]
      },
      {
        "input": [
          65,
          75,
          52,
          49,
          23,
          61
        ],
        "output": [
          65,
          75,
          52,
          49,
          23,
          61
        ]
      },
      {
        "input": [
          65,
          38,
          88,
          20,
          15,
          90,
          85
        ],
        "output": [
          65,
          38,
          88,
          20,
          15,
          90,
          85
        ]
      }
    ]
  },
  {
    "id": "c170",
    "difficulty": 1,
    "function": "def c170(x):\n    # remove all but the first and last element\n    return [x[0], x[-1]]\n    \n",
    "data": {
      "input": [
        5,
        78,
        43,
        17,
        16,
        86
      ],
      "output": [
        5,
        86
      ]
    },
    "demos": [
      {
        "input": [
          1,
          7,
          49,
          86,
          62
        ],
        "output": [
          1,
          62
        ]
      },
      {
        "input": [
          68,
          26,
          100,
          46,
          16,
          40,
          45
        ],
        "output": [
          68,
          45
        ]
      },
      {
        "input": [
          37,
          69,
          35,
          68,
          97,
          23,
          5
        ],
        "output": [
          37,
          5
        ]
      }
    ]
  },
  {
    "id": "c121",
    "difficulty": 2,
    "function": "def c121(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        18,
        57,
        64,
        16,
        31,
        51
      ],
      "output": [
        51
      ]
    },
    "demos": [
      {
        "input": [
          5,
          63,
          22
        ],
        "output": [
          22
        ]
      },
      {
        "input": [
          90,
          41,
          79,
          66
        ],
        "output": [
          66
        ]
      },
      {
        "input": [
          50,
          64,
          91,
          69
        ],
        "output": [
          69
        ]
      }
    ]
  },
  {
    "id": "c045",
    "difficulty": 3,
    "function": "def c045(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        34,
        6,
        86,
        95,
        98,
        23
      ],
      "output": [
        34,
        6,
        86,
        95,
        98,
        23
      ]
    },
    "demos": [
      {
        "input": [
          21,
          87,
          87,
          10,
          71
        ],
        "output": [
          21,
          87,
          87,
          10,
          71
        ]
      },
      {
        "input": [
          71,
          57,
          40
        ],
        "output": [
          71,
          57,
          40
        ]
      },
      {
        "input": [
          45,
          81,
          83,
          19,
          82
        ],
        "output": [
          45,
          81,
          83,
          19,
          82
        ]
      }
    ]
  },
  {
    "id": "c072",
    "difficulty": 4,
    "function": "def c072(x):\n    # repeat every element twice\n    return [i for i in x for _ in (0, 1)]\n\n",
    "data": {
      "input": [
        59,
        12,
        67
      ],
      "output": [
        59,
        59,
        12,
        12,
        67,
        67
      ]
    },
    "demos": [
      {
        "input": [
          83,
          27,
          35
        ],
        "output": [
          83,
          83,
          27,
          27,
          35,
          35
        ]
      },
      {
        "input": [
          49,
          49,
          77,
          36
        ],
        "output": [
          49,
          49,
          49,
          49,
          77,
          77,
          36,
          36
        ]
      },
      {
        "input": [
          39,
          43,
          73,
          58,
          52,
          28
        ],
        "output": [
          39,
          39,
          43,
          43,
          73,
          73,
          58,
          58,
          52,
          52,
          28,
          28
        ]
      }
    ]
  },
  {
    "id": "c151",
    "difficulty": 5,
    "function": "def c151(x):\n    # repeat each element, M, M times, in order of appearance\n    return [i for i in x for _ in range(i)]\n\n",
    "data": {
      "input": [
        5,
        3,
        0,
        0
      ],
      "output": [
        5,
        5,
        5,
        5,
        5,
        3,
        3,
        3
      ]
    },
    "demos": [
      {
        "input": [
          2,
          4,
          1,
          0
        ],
        "output": [
          2,
          2,
          4,
          4,
          4,
          4,
          1
        ]
      },
      {
        "input": [
          1,
          5,
          0
        ],
        "output": [
          1,
          5,
          5,
          5,
          5,
          5
        ]
      },
      {
        "input": [
          3,
          4,
          1
        ],
        "output": [
          3,
          3,
          3,
          4,
          4,
          4,
          4,
          1
        ]
      }
    ]
  },
  {
    "id": "c080",
    "difficulty": 6,
    "function": "def c080(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        2,
        78,
        80,
        35
      ],
      "output": [
        35,
        80,
        78,
        2
      ]
    },
    "demos": [
      {
        "input": [
          25,
          89,
          33,
          98
        ],
        "output": [
          98,
          33,
          89,
          25
        ]
      },
      {
        "input": [
          39,
          26,
          98
        ],
        "output": [
          98,
          26,
          39
        ]
      },
      {
        "input": [
          62,
          25,
          64,
          89,
          81
        ],
        "output": [
          81,
          89,
          64,
          25,
          62
        ]
      }
    ]
  },
  {
    "id": "c061",
    "difficulty": 7,
    "function": "def c061(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        58,
        60,
        44,
        15,
        14,
        53
      ],
      "output": [
        53
      ]
    },
    "demos": [
      {
        "input": [
          20,
          93,
          26
        ],
        "output": [
          26
        ]
      },
      {
        "input": [
          60,
          14,
          63
        ],
        "output": [
          63
        ]
      },
      {
        "input": [
          7,
          14,
          38,
          9,
          89,
          80
        ],
        "output": [
          80
        ]
      }
    ]
  },
  {
    "id": "c189",
    "difficulty": 8,
    "function": "def c189(x):\n    # count from the smallest element to the largest element\n    return list(range(min(x), max(x)+1))\n\n",
    "data": {
      "input": [
        19,
        19,
        14
      ],
      "output": [
        14,
        15,
        16,
        17,
        18,
        19
      ]
    },
    "demos": [
      {
        "input": [
          47,
          50,
          48
        ],
        "output": [
          47,
          48,
          49,
          50
        ]
      },
      {
        "input": [
          88,
          91,
          92
        ],
        "output": [
          88,
          89,
          90,
          91,
          92
        ]
      },
      {
        "input": [
          33,
          27,
          31
        ],
        "output": [
          27,
          28,
          29,
          30,
          31,
          32,
          33
        ]
      }
    ]
  },
  {
    "id": "c050",
    "difficulty": 9,
    "function": "def c050(x):\n    # prepend first element to the list\n    return [x[0]] + x\n\n",
    "data": {
      "input": [
        16,
        12,
        86,
        23,
        43,
        77
      ],
      "output": [
        16,
        16,
        12,
        86,
        23,
        43,
        77
      ]
    },
    "demos": [
      {
        "input": [
          84,
          51,
          61
        ],
        "output": [
          84,
          84,
          51,
          61
        ]
      },
      {
        "input": [
          8,
          75,
          63,
          61,
          15,
          38,
          45
        ],
        "output": [
          8,
          8,
          75,
          63,
          61,
          15,
          38,
          45
        ]
      },
      {
        "input": [
          70,
          28,
          70,
          15,
          72,
          69,
          3
        ],
        "output": [
          70,
          70,
          28,
          70,
          15,
          72,
          69,
          3
        ]
      }
    ]
  },
  {
    "id": "c048",
    "difficulty": 10,
    "function": "def c048(x):\n    # remove all but the first element\n    return [x[0]]\n    \n",
    "data": {
      "input": [
        78,
        83,
        56,
        89
      ],
      "output": [
        78
      ]
    },
    "demos": [
      {
        "input": [
          27,
          98,
          67
        ],
        "output": [
          27
        ]
      },
      {
        "input": [
          22,
          47,
          56,
          5,
          31
        ],
        "output": [
          22
        ]
      },
      {
        "input": [
          44,
          22,
          69,
          59
        ],
        "output": [
          44
        ]
      }
    ]
  },
  {
    "id": "c147",
    "difficulty": 11,
    "function": "def c147(x):\n    # each element, followed by its index\n    res = []\n    for i, v in enumerate(x):\n        res.append(v)\n        res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        60,
        42,
        92,
        44
      ],
      "output": [
        60,
        0,
        42,
        1,
        92,
        2,
        44,
        3
      ]
    },
    "demos": [
      {
        "input": [
          78,
          54,
          4,
          83,
          76,
          51,
          40
        ],
        "output": [
          78,
          0,
          54,
          1,
          4,
          2,
          83,
          3,
          76,
          4,
          51,
          5,
          40,
          6
        ]
      },
      {
        "input": [
          51,
          31,
          15,
          94,
          84,
          48,
          38
        ],
        "output": [
          51,
          0,
          31,
          1,
          15,
          2,
          94,
          3,
          84,
          4,
          48,
          5,
          38,
          6
        ]
      },
      {
        "input": [
          34,
          54,
          50,
          95,
          98,
          74,
          62
        ],
        "output": [
          34,
          0,
          54,
          1,
          50,
          2,
          95,
          3,
          98,
          4,
          74,
          5,
          62,
          6
        ]
      }
    ]
  },
  {
    "id": "c120",
    "difficulty": 12,
    "function": "def c120(x):\n    # remove all but the first element\n    return [x[0]]\n\n",
    "data": {
      "input": [
        27,
        89,
        97,
        83,
        83
      ],
      "output": [
        27
      ]
    },
    "demos": [
      {
        "input": [
          22,
          14,
          61,
          72
        ],
        "output": [
          22
        ]
      },
      {
        "input": [
          64,
          81,
          30,
          56,
          61
        ],
        "output": [
          64
        ]
      },
      {
        "input": [
          30,
          63,
          52,
          46,
          20
        ],
        "output": [
          30
        ]
      }
    ]
  },
  {
    "id": "c127",
    "difficulty": 13,
    "function": "def c127(x):\n    # remove last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        93,
        68,
        15
      ],
      "output": [
        93,
        68
      ]
    },
    "demos": [
      {
        "input": [
          98,
          57,
          6,
          80,
          42
        ],
        "output": [
          98,
          57,
          6,
          80
        ]
      },
      {
        "input": [
          42,
          31,
          23,
          36,
          70
        ],
        "output": [
          42,
          31,
          23,
          36
        ]
      },
      {
        "input": [
          69,
          2,
          47,
          73,
          43
        ],
        "output": [
          69,
          2,
          47,
          73
        ]
      }
    ]
  },
  {
    "id": "c100",
    "difficulty": 14,
    "function": "def c100(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        33,
        82,
        73
      ],
      "output": [
        73,
        82,
        33
      ]
    },
    "demos": [
      {
        "input": [
          28,
          86,
          6,
          74
        ],
        "output": [
          74,
          6,
          86,
          28
        ]
      },
      {
        "input": [
          70,
          81,
          44,
          88,
          87,
          38,
          2
        ],
        "output": [
          2,
          38,
          87,
          88,
          44,
          81,
          70
        ]
      },
      {
        "input": [
          75,
          40,
          51
        ],
        "output": [
          51,
          40,
          75
        ]
      }
    ]
  },
  {
    "id": "c145",
    "difficulty": 15,
    "function": "def c145(x):\n    # replace every element with the first element\n    return [x[0]] * len(x)\n\n",
    "data": {
      "input": [
        64,
        29,
        91,
        9,
        26
      ],
      "output": [
        64,
        64,
        64,
        64,
        64
      ]
    },
    "demos": [
      {
        "input": [
          10,
          99,
          85,
          7,
          59
        ],
        "output": [
          10,
          10,
          10,
          10,
          10
        ]
      },
      {
        "input": [
          98,
          6,
          92,
          41,
          90,
          45,
          43
        ],
        "output": [
          98,
          98,
          98,
          98,
          98,
          98,
          98
        ]
      },
      {
        "input": [
          41,
          97,
          22,
          95,
          46,
          47
        ],
        "output": [
          41,
          41,
          41,
          41,
          41,
          41
        ]
      }
    ]
  },
  {
    "id": "c079",
    "difficulty": 16,
    "function": "def c079(x):\n    # sum of the list\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        5,
        12,
        2,
        9,
        16,
        11
      ],
      "output": [
        55
      ]
    },
    "demos": [
      {
        "input": [
          7,
          17,
          12
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          16,
          17,
          19,
          7
        ],
        "output": [
          59
        ]
      },
      {
        "input": [
          0,
          15,
          12,
          12,
          2,
          13,
          8
        ],
        "output": [
          62
        ]
      }
    ]
  },
  {
    "id": "c043",
    "difficulty": 17,
    "function": "def c043(x):\n    return [8, 2, 7, 0, 3]\n\n",
    "data": {
      "input": [
        15,
        77,
        49,
        42
      ],
      "output": [
        8,
        2,
        7,
        0,
        3
      ]
    },
    "demos": [
      {
        "input": [
          82,
          56,
          36,
          48,
          49,
          71,
          6
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          68,
          24,
          54
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          13,
          95,
          76
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      }
    ]
  },
  {
    "id": "c038",
    "difficulty": 18,
    "function": "def c038(x):\n    # append 9\n    return x + [9]\n\n",
    "data": {
      "input": [
        3,
        38,
        35,
        85
      ],
      "output": [
        3,
        38,
        35,
        85,
        9
      ]
    },
    "demos": [
      {
        "input": [
          35,
          28,
          76
        ],
        "output": [
          35,
          28,
          76,
          9
        ]
      },
      {
        "input": [
          10,
          91,
          65,
          77,
          67
        ],
        "output": [
          10,
          91,
          65,
          77,
          67,
          9
        ]
      },
      {
        "input": [
          71,
          88,
          89,
          21
        ],
        "output": [
          71,
          88,
          89,
          21,
          9
        ]
      }
    ]
  },
  {
    "id": "c042",
    "difficulty": 19,
    "function": "def c042(x):\n    return [5, 2]\n\n",
    "data": {
      "input": [
        65,
        17,
        58,
        57,
        71,
        59
      ],
      "output": [
        5,
        2
      ]
    },
    "demos": [
      {
        "input": [
          64,
          59,
          94,
          62,
          60,
          78
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          49,
          57,
          72,
          64
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          80,
          86,
          89,
          95
        ],
        "output": [
          5,
          2
        ]
      }
    ]
  },
  {
    "id": "c223",
    "difficulty": 20,
    "function": "def c223(x):\n    # swap the digits of each element\n    return [int(str(i)[::-1]) for i in x]\n\n",
    "data": {
      "input": [
        4,
        46,
        99,
        70,
        89,
        11
      ],
      "output": [
        4,
        64,
        99,
        7,
        98,
        11
      ]
    },
    "demos": [
      {
        "input": [
          97,
          7,
          93
        ],
        "output": [
          79,
          7,
          39
        ]
      },
      {
        "input": [
          30,
          50,
          37,
          23,
          42
        ],
        "output": [
          3,
          5,
          73,
          32,
          24
        ]
      },
      {
        "input": [
          40,
          39,
          4,
          92,
          86,
          47,
          78
        ],
        "output": [
          4,
          93,
          4,
          29,
          68,
          74,
          87
        ]
      }
    ]
  },
  {
    "id": "c137",
    "difficulty": 21,
    "function": "def c137(x):\n    # remove all 3\n    return [i for i in x if i != 3]\n\n",
    "data": {
      "input": [
        76,
        3,
        3,
        74
      ],
      "output": [
        76,
        74
      ]
    },
    "demos": [
      {
        "input": [
          3,
          38,
          21,
          66,
          54
        ],
        "output": [
          38,
          21,
          66,
          54
        ]
      },
      {
        "input": [
          3,
          6,
          5,
          9,
          37,
          16
        ],
        "output": [
          6,
          5,
          9,
          37,
          16
        ]
      },
      {
        "input": [
          3,
          38,
          8,
          16,
          50,
          62,
          3
        ],
        "output": [
          38,
          8,
          16,
          50,
          62
        ]
      }
    ]
  },
  {
    "id": "c238",
    "difficulty": 22,
    "function": "def c238(x):\n    # keep only elements that appear exactly once\n    return [i for i in x if x.count(i) == 1]\n\n",
    "data": {
      "input": [
        5,
        3,
        1,
        6,
        6,
        3,
        4,
        4
      ],
      "output": [
        5,
        1
      ]
    },
    "demos": [
      {
        "input": [
          9,
          9,
          6,
          0,
          13,
          12,
          12,
          12
        ],
        "output": [
          6,
          0,
          13
        ]
      },
      {
        "input": [
          8,
          19,
          7,
          8,
          8,
          8,
          7,
          7,
          7,
          7
        ],
        "output": [
          19
        ]
      },
      {
        "input": [
          3,
          3,
          3,
          4,
          5,
          6,
          3,
          3
        ],
        "output": [
          4,
          5,
          6
        ]
      }
    ]
  },
  {
    "id": "c108",
    "difficulty": 23,
    "function": "def c108(x):\n    # sum of elements\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        19,
        19,
        4,
        8,
        20,
        6,
        12
      ],
      "output": [
        88
      ]
    },
    "demos": [
      {
        "input": [
          5,
          7,
          4,
          0
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          0,
          6,
          10,
          5
        ],
        "output": [
          21
        ]
      },
      {
        "input": [
          4,
          5,
          1,
          19,
          7
        ],
        "output": [
          36
        ]
      }
    ]
  },
  {
    "id": "c126",
    "difficulty": 24,
    "function": "def c126(x):\n    # remove first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        89,
        95,
        93
      ],
      "output": [
        95,
        93
      ]
    },
    "demos": [
      {
        "input": [
          84,
          19,
          27
        ],
        "output": [
          19,
          27
        ]
      },
      {
        "input": [
          86,
          92,
          54,
          26,
          19,
          16,
          14
        ],
        "output": [
          92,
          54,
          26,
          19,
          16,
          14
        ]
      },
      {
        "input": [
          60,
          62,
          58,
          90,
          25,
          97
        ],
        "output": [
          62,
          58,
          90,
          25,
          97
        ]
      }
    ]
  },
  {
    "id": "c187",
    "difficulty": 25,
    "function": "def c187(x):\n    # concatenate input with itself, separated by 0\n    return x + [0] + x\n\n",
    "data": {
      "input": [
        88,
        99,
        62,
        73
      ],
      "output": [
        88,
        99,
        62,
        73,
        0,
        88,
        99,
        62,
        73
      ]
    },
    "demos": [
      {
        "input": [
          6,
          34,
          82,
          84,
          66
        ],
        "output": [
          6,
          34,
          82,
          84,
          66,
          0,
          6,
          34,
          82,
          84,
          66
        ]
      },
      {
        "input": [
          30,
          52,
          46,
          11
        ],
        "output": [
          30,
          52,
          46,
          11,
          0,
          30,
          52,
          46,
          11
        ]
      },
      {
        "input": [
          72,
          54,
          35,
          44,
          0
        ],
        "output": [
          72,
          54,
          35,
          44,
          0,
          0,
          72,
          54,
          35,
          44,
          0
        ]
      }
    ]
  },
  {
    "id": "c022",
    "difficulty": 26,
    "function": "def c022(x):\n    # insert a 5 as element 1\n    return x[:1] + [5] + x[1:]\n\n",
    "data": {
      "input": [
        54,
        46,
        75,
        92,
        74
      ],
      "output": [
        54,
        5,
        46,
        75,
        92,
        74
      ]
    },
    "demos": [
      {
        "input": [
          47,
          24,
          78,
          77,
          77
        ],
        "output": [
          47,
          5,
          24,
          78,
          77,
          77
        ]
      },
      {
        "input": [
          90,
          35,
          79,
          67,
          65,
          60,
          5
        ],
        "output": [
          90,
          5,
          35,
          79,
          67,
          65,
          60,
          5
        ]
      },
      {
        "input": [
          70,
          37,
          93,
          6,
          46,
          7,
          17
        ],
        "output": [
          70,
          5,
          37,
          93,
          6,
          46,
          7,
          17
        ]
      }
    ]
  },
  {
    "id": "c212",
    "difficulty": 27,
    "function": "def c212(x):\n    # insert 3 at index 2, 3 times\n    return x[:3] + [3,3,3] + x[3:]\n\n",
    "data": {
      "input": [
        63,
        95,
        52,
        96,
        38
      ],
      "output": [
        63,
        95,
        52,
        3,
        3,
        3,
        96,
        38
      ]
    },
    "demos": [
      {
        "input": [
          16,
          55,
          87,
          10,
          47,
          85
        ],
        "output": [
          16,
          55,
          87,
          3,
          3,
          3,
          10,
          47,
          85
        ]
      },
      {
        "input": [
          18,
          95,
          5,
          59,
          20,
          56
        ],
        "output": [
          18,
          95,
          5,
          3,
          3,
          3,
          59,
          20,
          56
        ]
      },
      {
        "input": [
          15,
          72,
          3,
          80,
          56,
          8
        ],
        "output": [
          15,
          72,
          3,
          3,
          3,
          3,
          80,
          56,
          8
        ]
      }
    ]
  },
  {
    "id": "c101",
    "difficulty": 28,
    "function": "def c101(x):\n    return [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]\n\n",
    "data": {
      "input": [
        86,
        91,
        85,
        68,
        93,
        52,
        79
      ],
      "output": [
        11,
        19,
        24,
        33,
        42,
        5,
        82,
        0,
        64,
        9
      ]
    },
    "demos": [
      {
        "input": [
          99,
          59,
          51,
          10,
          16
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          53,
          90,
          18,
          93,
          6
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          66,
          46,
          75,
          72,
          39,
          90
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      }
    ]
  },
  {
    "id": "c021",
    "difficulty": 29,
    "function": "def c021(x):\n    # insert 8 as element 1\n    return x[:1] + [8] + x[1:]\n\n",
    "data": {
      "input": [
        3,
        5,
        33,
        81,
        70,
        5,
        54
      ],
      "output": [
        3,
        8,
        5,
        33,
        81,
        70,
        5,
        54
      ]
    },
    "demos": [
      {
        "input": [
          97,
          89,
          41,
          36,
          47
        ],
        "output": [
          97,
          8,
          89,
          41,
          36,
          47
        ]
      },
      {
        "input": [
          78,
          25,
          44,
          90,
          68,
          50,
          83
        ],
        "output": [
          78,
          8,
          25,
          44,
          90,
          68,
          50,
          83
        ]
      },
      {
        "input": [
          91,
          74,
          21,
          30,
          28
        ],
        "output": [
          91,
          8,
          74,
          21,
          30,
          28
        ]
      }
    ]
  },
  {
    "id": "c105",
    "difficulty": 30,
    "function": "def c105(x):\n    # concatenate all but the last element with all but the first element\n    return x[:-1] + x[1:]\n\n",
    "data": {
      "input": [
        97,
        94,
        6,
        55,
        82,
        11
      ],
      "output": [
        97,
        94,
        6,
        55,
        82,
        94,
        6,
        55,
        82,
        11
      ]
    },
    "demos": [
      {
        "input": [
          51,
          46,
          62,
          83,
          61
        ],
        "output": [
          51,
          46,
          62,
          83,
          46,
          62,
          83,
          61
        ]
      },
      {
        "input": [
          45,
          6,
          81,
          85,
          14,
          37
        ],
        "output": [
          45,
          6,
          81,
          85,
          14,
          6,
          81,
          85,
          14,
          37
        ]
      },
      {
        "input": [
          81,
          47,
          20,
          38,
          66,
          32
        ],
        "output": [
          81,
          47,
          20,
          38,
          66,
          47,
          20,
          38,
          66,
          32
        ]
      }
    ]
  },
  {
    "id": "c041",
    "difficulty": 31,
    "function": "def c041(x):\n    return [9]\n\n",
    "data": {
      "input": [
        13,
        66,
        81,
        4,
        55
      ],
      "output": [
        9
      ]
    },
    "demos": [
      {
        "input": [
          77,
          82,
          11,
          61
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          47,
          80,
          49,
          51,
          68,
          26,
          87
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          59,
          55,
          2,
          98,
          44,
          64,
          3
        ],
        "output": [
          9
        ]
      }
    ]
  },
  {
    "id": "c070",
    "difficulty": 32,
    "function": "def c070(x):\n    # concatenate the input\n    return x + x\n\n",
    "data": {
      "input": [
        62,
        26,
        22
      ],
      "output": [
        62,
        26,
        22,
        62,
        26,
        22
      ]
    },
    "demos": [
      {
        "input": [
          26,
          3,
          14,
          57,
          3
        ],
        "output": [
          26,
          3,
          14,
          57,
          3,
          26,
          3,
          14,
          57,
          3
        ]
      },
      {
        "input": [
          13,
          98,
          97,
          47,
          75
        ],
        "output": [
          13,
          98,
          97,
          47,
          75,
          13,
          98,
          97,
          47,
          75
        ]
      },
      {
        "input": [
          3,
          26,
          97,
          94,
          13
        ],
        "output": [
          3,
          26,
          97,
          94,
          13,
          3,
          26,
          97,
          94,
          13
        ]
      }
    ]
  },
  {
    "id": "c052",
    "difficulty": 33,
    "function": "def c052(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        95,
        89,
        89
      ],
      "output": [
        95,
        95,
        95,
        95,
        95,
        95,
        95
      ]
    },
    "demos": [
      {
        "input": [
          63,
          13,
          8
        ],
        "output": [
          63,
          63,
          63,
          63,
          63,
          63,
          63
        ]
      },
      {
        "input": [
          68,
          11,
          65,
          32
        ],
        "output": [
          68,
          68,
          68,
          68,
          68,
          68,
          68
        ]
      },
      {
        "input": [
          76,
          40,
          2,
          22
        ],
        "output": [
          76,
          76,
          76,
          76,
          76,
          76,
          76
        ]
      }
    ]
  },
  {
    "id": "c044",
    "difficulty": 34,
    "function": "def c044(x):\n    return [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]\n\n",
    "data": {
      "input": [
        19,
        22,
        87,
        14
      ],
      "output": [
        1,
        9,
        4,
        3,
        2,
        5,
        8,
        0,
        4,
        9
      ]
    },
    "demos": [
      {
        "input": [
          45,
          49,
          8,
          25
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          84,
          63,
          84
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          88,
          84,
          49
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      }
    ]
  },
  {
    "id": "c190",
    "difficulty": 35,
    "function": "def c190(x):\n    # count by 2 from the first element to the last element\n    if x[0] < x[-1]:\n        return list(range(x[0], x[-1]+1, 2))\n    else:\n        return list(range(x[0], x[-1]-1, -2))\n\n",
    "data": {
      "input": [
        54,
        48,
        48
      ],
      "output": [
        54,
        52,
        50,
        48
      ]
    },
    "demos": [
      {
        "input": [
          45,
          23,
          29
        ],
        "output": [
          45,
          43,
          41,
          39,
          37,
          35,
          33,
          31,
          29
        ]
      },
      {
        "input": [
          78,
          82,
          84
        ],
        "output": [
          78,
          80,
          82,
          84
        ]
      },
      {
        "input": [
          73,
          9,
          77,
          79,
          80
        ],
        "output": [
          73,
          75,
          77,
          79
        ]
      }
    ]
  },
  {
    "id": "c037",
    "difficulty": 36,
    "function": "def c037(x):\n    # append 3\n    return x + [3]\n\n",
    "data": {
      "input": [
        53,
        79,
        15,
        81,
        3
      ],
      "output": [
        53,
        79,
        15,
        81,
        3,
        3
      ]
    },
    "demos": [
      {
        "input": [
          23,
          65,
          77
        ],
        "output": [
          23,
          65,
          77,
          3
        ]
      },
      {
        "input": [
          43,
          97,
          96,
          23,
          79
        ],
        "output": [
          43,
          97,
          96,
          23,
          79,
          3
        ]
      },
      {
        "input": [
          16,
          0,
          96,
          96,
          96,
          21
        ],
        "output": [
          16,
          0,
          96,
          96,
          96,
          21,
          3
        ]
      }
    ]
  },
  {
    "id": "c222",
    "difficulty": 37,
    "function": "def c222(x):\n    # remove each element with the input length\n    return [len(x) for _ in x]\n\n",
    "data": {
      "input": [
        7,
        76,
        42,
        80
      ],
      "output": [
        4,
        4,
        4,
        4
      ]
    },
    "demos": [
      {
        "input": [
          95,
          4,
          1,
          23
        ],
        "output": [
          4,
          4,
          4,
          4
        ]
      },
      {
        "input": [
          88,
          8,
          14,
          13,
          6
        ],
        "output": [
          5,
          5,
          5,
          5,
          5
        ]
      },
      {
        "input": [
          51,
          11,
          81,
          53
        ],
        "output": [
          4,
          4,
          4,
          4
        ]
      }
    ]
  },
  {
    "id": "c107",
    "difficulty": 38,
    "function": "def c107(x):\n    # unique elements, in order of appearance\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        40,
        85,
        63,
        44,
        63,
        40,
        63
      ],
      "output": [
        40,
        85,
        63,
        44
      ]
    },
    "demos": [
      {
        "input": [
          79,
          63,
          63,
          37
        ],
        "output": [
          79,
          63,
          37
        ]
      },
      {
        "input": [
          38,
          91,
          29,
          76,
          11,
          38,
          74,
          91,
          11,
          27
        ],
        "output": [
          38,
          91,
          29,
          76,
          11,
          74,
          27
        ]
      },
      {
        "input": [
          30,
          9,
          62,
          62,
          33,
          62,
          62
        ],
        "output": [
          30,
          9,
          62,
          33
        ]
      }
    ]
  },
  {
    "id": "c011",
    "difficulty": 39,
    "function": "def c011(x):\n    # [1:4] of the input\n    return x[1:4]\n\n",
    "data": {
      "input": [
        12,
        48,
        57,
        48,
        71,
        20,
        96
      ],
      "output": [
        48,
        57,
        48
      ]
    },
    "demos": [
      {
        "input": [
          97,
          38,
          53,
          82,
          46,
          58,
          42
        ],
        "output": [
          38,
          53,
          82
        ]
      },
      {
        "input": [
          72,
          45,
          56,
          91,
          16
        ],
        "output": [
          45,
          56,
          91
        ]
      },
      {
        "input": [
          80,
          86,
          99,
          39,
          89
        ],
        "output": [
          86,
          99,
          39
        ]
      }
    ]
  },
  {
    "id": "c104",
    "difficulty": 40,
    "function": "def c104(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        9,
        87,
        31,
        15,
        69
      ],
      "output": [
        87
      ]
    },
    "demos": [
      {
        "input": [
          10,
          4,
          99,
          46,
          14
        ],
        "output": [
          99
        ]
      },
      {
        "input": [
          11,
          34,
          10,
          80,
          69
        ],
        "output": [
          80
        ]
      },
      {
        "input": [
          8,
          25,
          58,
          67,
          85,
          73
        ],
        "output": [
          85
        ]
      }
    ]
  },
  {
    "id": "c192",
    "difficulty": 41,
    "function": "def c192(x):\n    # replace each element, M, with its tens digit, if no tens digit, replace with 0\n    return [int(str(i)[-2]) if len(str(i)) > 1 else 0 for i in x]\n\n",
    "data": {
      "input": [
        16,
        66,
        90,
        23
      ],
      "output": [
        1,
        6,
        9,
        2
      ]
    },
    "demos": [
      {
        "input": [
          90,
          24,
          95,
          37,
          86,
          84
        ],
        "output": [
          9,
          2,
          9,
          3,
          8,
          8
        ]
      },
      {
        "input": [
          47,
          54,
          91,
          82
        ],
        "output": [
          4,
          5,
          9,
          8
        ]
      },
      {
        "input": [
          78,
          98,
          35,
          25
        ],
        "output": [
          7,
          9,
          3,
          2
        ]
      }
    ]
  },
  {
    "id": "c182",
    "difficulty": 42,
    "function": "def c182(x):\n    # keep every third element\n    return x[::3]\n\n",
    "data": {
      "input": [
        64,
        42,
        67,
        55,
        77,
        21,
        10,
        36
      ],
      "output": [
        64,
        55,
        10
      ]
    },
    "demos": [
      {
        "input": [
          45,
          22,
          48,
          6,
          9,
          93
        ],
        "output": [
          45,
          6
        ]
      },
      {
        "input": [
          15,
          30,
          30,
          54,
          41,
          15,
          74,
          48
        ],
        "output": [
          15,
          54,
          74
        ]
      },
      {
        "input": [
          25,
          27,
          53,
          56,
          80,
          2
        ],
        "output": [
          25,
          56
        ]
      }
    ]
  },
  {
    "id": "c006",
    "difficulty": 43,
    "function": "def c006(x):\n    # the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        4,
        51,
        96,
        34,
        11,
        29
      ],
      "output": [
        4,
        51
      ]
    },
    "demos": [
      {
        "input": [
          31,
          95,
          67,
          66,
          93,
          69
        ],
        "output": [
          31,
          95
        ]
      },
      {
        "input": [
          5,
          90,
          58
        ],
        "output": [
          5,
          90
        ]
      },
      {
        "input": [
          68,
          73,
          79,
          46,
          23,
          11
        ],
        "output": [
          68,
          73
        ]
      }
    ]
  },
  {
    "id": "c046",
    "difficulty": 44,
    "function": "def c046(x):\n    # prepend 7\n    return [7] + x\n\n",
    "data": {
      "input": [
        36,
        27,
        40
      ],
      "output": [
        7,
        36,
        27,
        40
      ]
    },
    "demos": [
      {
        "input": [
          72,
          5,
          69,
          88
        ],
        "output": [
          7,
          72,
          5,
          69,
          88
        ]
      },
      {
        "input": [
          13,
          13,
          63,
          51
        ],
        "output": [
          7,
          13,
          13,
          63,
          51
        ]
      },
      {
        "input": [
          58,
          8,
          38,
          33,
          50,
          58
        ],
        "output": [
          7,
          58,
          8,
          38,
          33,
          50,
          58
        ]
      }
    ]
  },
  {
    "id": "c106",
    "difficulty": 45,
    "function": "def c106(x):\n    # elements in ascending order\n    return sorted(x)\n\n",
    "data": {
      "input": [
        71,
        31,
        57
      ],
      "output": [
        31,
        57,
        71
      ]
    },
    "demos": [
      {
        "input": [
          46,
          31,
          30,
          65,
          59,
          82
        ],
        "output": [
          30,
          31,
          46,
          59,
          65,
          82
        ]
      },
      {
        "input": [
          79,
          35,
          20,
          61,
          65,
          69,
          93
        ],
        "output": [
          20,
          35,
          61,
          65,
          69,
          79,
          93
        ]
      },
      {
        "input": [
          43,
          57,
          42,
          90
        ],
        "output": [
          42,
          43,
          57,
          90
        ]
      }
    ]
  },
  {
    "id": "c114",
    "difficulty": 46,
    "function": "def c114(x):\n    # prepend the last element\n    return [x[-1]] + x\n\n",
    "data": {
      "input": [
        90,
        63,
        15,
        92,
        29,
        91,
        79
      ],
      "output": [
        79,
        90,
        63,
        15,
        92,
        29,
        91,
        79
      ]
    },
    "demos": [
      {
        "input": [
          85,
          90,
          55,
          62
        ],
        "output": [
          62,
          85,
          90,
          55,
          62
        ]
      },
      {
        "input": [
          69,
          68,
          53,
          83,
          72,
          32
        ],
        "output": [
          32,
          69,
          68,
          53,
          83,
          72,
          32
        ]
      },
      {
        "input": [
          81,
          46,
          28,
          41,
          52,
          55
        ],
        "output": [
          55,
          81,
          46,
          28,
          41,
          52,
          55
        ]
      }
    ]
  },
  {
    "id": "c093",
    "difficulty": 47,
    "function": "def c093(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        57,
        18,
        43,
        7,
        13
      ],
      "output": [
        57,
        57,
        57,
        57,
        57,
        57,
        57
      ]
    },
    "demos": [
      {
        "input": [
          41,
          68,
          45,
          8,
          74,
          66
        ],
        "output": [
          41,
          41,
          41,
          41,
          41,
          41,
          41
        ]
      },
      {
        "input": [
          89,
          53,
          75,
          64
        ],
        "output": [
          89,
          89,
          89,
          89,
          89,
          89,
          89
        ]
      },
      {
        "input": [
          25,
          85,
          82,
          16
        ],
        "output": [
          25,
          25,
          25,
          25,
          25,
          25,
          25
        ]
      }
    ]
  },
  {
    "id": "c195",
    "difficulty": 48,
    "function": "def c195(x):\n    # element 1, followed by 23, 68, 42, 99, 71, followed by last element\n    return [x[0], 23, 68, 42, 99, 71, x[-1]]\n\n",
    "data": {
      "input": [
        29,
        82,
        35,
        84,
        23,
        25,
        34
      ],
      "output": [
        29,
        23,
        68,
        42,
        99,
        71,
        34
      ]
    },
    "demos": [
      {
        "input": [
          96,
          84,
          94,
          25,
          19
        ],
        "output": [
          96,
          23,
          68,
          42,
          99,
          71,
          19
        ]
      },
      {
        "input": [
          38,
          42,
          28
        ],
        "output": [
          38,
          23,
          68,
          42,
          99,
          71,
          28
        ]
      },
      {
        "input": [
          85,
          23,
          71
        ],
        "output": [
          85,
          23,
          68,
          42,
          99,
          71,
          71
        ]
      }
    ]
  },
  {
    "id": "c196",
    "difficulty": 49,
    "function": "def c196(x):\n    # concatenate 17, 38, 82 input 1 55 27\n    return [17, 38, 82] + x + [1, 55, 27]\n\n",
    "data": {
      "input": [
        93,
        96,
        61,
        66,
        90
      ],
      "output": [
        17,
        38,
        82,
        93,
        96,
        61,
        66,
        90,
        1,
        55,
        27
      ]
    },
    "demos": [
      {
        "input": [
          39,
          17
        ],
        "output": [
          17,
          38,
          82,
          39,
          17,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          66,
          34,
          86,
          2,
          91,
          41
        ],
        "output": [
          17,
          38,
          82,
          66,
          34,
          86,
          2,
          91,
          41,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          91,
          36
        ],
        "output": [
          17,
          38,
          82,
          91,
          36,
          1,
          55,
          27
        ]
      }
    ]
  },
  {
    "id": "c095",
    "difficulty": 50,
    "function": "def c095(x):\n    # remove the first element and the last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        28,
        21,
        64,
        79,
        73,
        40
      ],
      "output": [
        21,
        64,
        79,
        73
      ]
    },
    "demos": [
      {
        "input": [
          99,
          42,
          82,
          16,
          70
        ],
        "output": [
          42,
          82,
          16
        ]
      },
      {
        "input": [
          78,
          91,
          72,
          50
        ],
        "output": [
          91,
          72
        ]
      },
      {
        "input": [
          17,
          32,
          91,
          22,
          44
        ],
        "output": [
          32,
          91,
          22
        ]
      }
    ]
  },
  {
    "id": "c016",
    "difficulty": 51,
    "function": "def c016(x):\n    # replace element 1 with 8\n    return [8] + x[1:]\n\n",
    "data": {
      "input": [
        54,
        10,
        24,
        51,
        4,
        27
      ],
      "output": [
        8,
        10,
        24,
        51,
        4,
        27
      ]
    },
    "demos": [
      {
        "input": [
          94,
          18,
          47,
          11,
          86,
          55,
          15
        ],
        "output": [
          8,
          18,
          47,
          11,
          86,
          55,
          15
        ]
      },
      {
        "input": [
          44,
          25,
          88,
          89,
          8
        ],
        "output": [
          8,
          25,
          88,
          89,
          8
        ]
      },
      {
        "input": [
          74,
          81,
          57,
          0
        ],
        "output": [
          8,
          81,
          57,
          0
        ]
      }
    ]
  },
  {
    "id": "c224",
    "difficulty": 52,
    "function": "def c224(x):\n    # reverse the list, then take every other element starting from the second element, then take every other element starting from the first element\n    return x[::-2] + x[(len(x) % 2)::2]\n\n",
    "data": {
      "input": [
        43,
        15,
        35,
        6,
        39,
        56
      ],
      "output": [
        56,
        6,
        15,
        43,
        35,
        39
      ]
    },
    "demos": [
      {
        "input": [
          85,
          10,
          38,
          59
        ],
        "output": [
          59,
          10,
          85,
          38
        ]
      },
      {
        "input": [
          87,
          94,
          55,
          40
        ],
        "output": [
          40,
          94,
          87,
          55
        ]
      },
      {
        "input": [
          43,
          28,
          8,
          25,
          8,
          16
        ],
        "output": [
          16,
          25,
          28,
          43,
          8,
          8
        ]
      }
    ]
  },
  {
    "id": "c116",
    "difficulty": 53,
    "function": "def c116(x):\n    # reflect the input on itself\n    return x[::-1] + x[1:]\n\n",
    "data": {
      "input": [
        33,
        86,
        30,
        65,
        58,
        85,
        95
      ],
      "output": [
        95,
        85,
        58,
        65,
        30,
        86,
        33,
        86,
        30,
        65,
        58,
        85,
        95
      ]
    },
    "demos": [
      {
        "input": [
          13,
          57,
          58,
          54,
          56,
          4
        ],
        "output": [
          4,
          56,
          54,
          58,
          57,
          13,
          57,
          58,
          54,
          56,
          4
        ]
      },
      {
        "input": [
          75,
          70,
          36,
          28,
          59,
          0
        ],
        "output": [
          0,
          59,
          28,
          36,
          70,
          75,
          70,
          36,
          28,
          59,
          0
        ]
      },
      {
        "input": [
          94,
          7,
          77,
          71,
          37,
          50
        ],
        "output": [
          50,
          37,
          71,
          77,
          7,
          94,
          7,
          77,
          71,
          37,
          50
        ]
      }
    ]
  },
  {
    "id": "c140",
    "difficulty": 54,
    "function": "def c140(x):\n    # replace element 1 with 9\n    return x[:1] + [9] + x[2:]\n\n",
    "data": {
      "input": [
        52,
        96,
        53,
        4,
        1,
        51
      ],
      "output": [
        52,
        9,
        53,
        4,
        1,
        51
      ]
    },
    "demos": [
      {
        "input": [
          65,
          89,
          82,
          34,
          53,
          99
        ],
        "output": [
          65,
          9,
          82,
          34,
          53,
          99
        ]
      },
      {
        "input": [
          82,
          26,
          49,
          16
        ],
        "output": [
          82,
          9,
          49,
          16
        ]
      },
      {
        "input": [
          46,
          51,
          75,
          2,
          29
        ],
        "output": [
          46,
          9,
          75,
          2,
          29
        ]
      }
    ]
  },
  {
    "id": "c049",
    "difficulty": 55,
    "function": "def c049(x):\n    # remove the first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        3,
        49,
        34,
        19,
        99
      ],
      "output": [
        49,
        34,
        19,
        99
      ]
    },
    "demos": [
      {
        "input": [
          83,
          1,
          42,
          23,
          24,
          23,
          69
        ],
        "output": [
          1,
          42,
          23,
          24,
          23,
          69
        ]
      },
      {
        "input": [
          90,
          21,
          43
        ],
        "output": [
          21,
          43
        ]
      },
      {
        "input": [
          59,
          57,
          19,
          84,
          11,
          94,
          22
        ],
        "output": [
          57,
          19,
          84,
          11,
          94,
          22
        ]
      }
    ]
  },
  {
    "id": "c071",
    "difficulty": 56,
    "function": "def c071(x):\n    # add 2 to each element\n    return [i+2 for i in x]\n\n",
    "data": {
      "input": [
        46,
        57,
        36,
        65,
        49,
        7
      ],
      "output": [
        48,
        59,
        38,
        67,
        51,
        9
      ]
    },
    "demos": [
      {
        "input": [
          5,
          52,
          42,
          31
        ],
        "output": [
          7,
          54,
          44,
          33
        ]
      },
      {
        "input": [
          26,
          60,
          72,
          23,
          4,
          73,
          14
        ],
        "output": [
          28,
          62,
          74,
          25,
          6,
          75,
          16
        ]
      },
      {
        "input": [
          54,
          28,
          59,
          6
        ],
        "output": [
          56,
          30,
          61,
          8
        ]
      }
    ]
  },
  {
    "id": "c161",
    "difficulty": 57,
    "function": "def c161(x):\n    # replace each element, M, with M + the input length - M index\n    return [i + len(x) - j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        2,
        55,
        89
      ],
      "output": [
        5,
        57,
        90
      ]
    },
    "demos": [
      {
        "input": [
          52,
          80,
          48,
          8,
          12,
          55,
          94
        ],
        "output": [
          59,
          86,
          53,
          12,
          15,
          57,
          95
        ]
      },
      {
        "input": [
          64,
          64,
          92,
          89,
          55,
          72,
          90
        ],
        "output": [
          71,
          70,
          97,
          93,
          58,
          74,
          91
        ]
      },
      {
        "input": [
          59,
          66,
          88,
          92,
          94
        ],
        "output": [
          64,
          70,
          91,
          94,
          95
        ]
      }
    ]
  },
  {
    "id": "c068",
    "difficulty": 58,
    "function": "def c068(x):\n    # concatenate the input with 7, 3, 8, 4, 3\n    return x + [7, 3, 8, 4, 3]\n\n",
    "data": {
      "input": [
        9,
        93,
        6,
        1,
        46
      ],
      "output": [
        9,
        93,
        6,
        1,
        46,
        7,
        3,
        8,
        4,
        3
      ]
    },
    "demos": [
      {
        "input": [
          26,
          92,
          27
        ],
        "output": [
          26,
          92,
          27,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          46,
          77,
          13
        ],
        "output": [
          46,
          77,
          13,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          3,
          19,
          88,
          66
        ],
        "output": [
          3,
          19,
          88,
          66,
          7,
          3,
          8,
          4,
          3
        ]
      }
    ]
  },
  {
    "id": "c103",
    "difficulty": 59,
    "function": "def c103(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        37,
        36,
        44,
        69,
        83
      ],
      "output": [
        5
      ]
    },
    "demos": [
      {
        "input": [
          98,
          14,
          88,
          65,
          44,
          80,
          72
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          63,
          51,
          75,
          15
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          77,
          48,
          68,
          47,
          91
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c001",
    "difficulty": 60,
    "function": "def c001(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        73,
        45,
        53,
        21,
        4,
        74
      ],
      "output": [
        53
      ]
    },
    "demos": [
      {
        "input": [
          43,
          84,
          82
        ],
        "output": [
          82
        ]
      },
      {
        "input": [
          81,
          45,
          13
        ],
        "output": [
          13
        ]
      },
      {
        "input": [
          28,
          53,
          78,
          88,
          91,
          24,
          97
        ],
        "output": [
          78
        ]
      }
    ]
  },
  {
    "id": "c090",
    "difficulty": 61,
    "function": "def c090(x):\n    return [18, 42, 77, 20, 36]\n\n",
    "data": {
      "input": [
        17,
        60,
        69,
        2,
        7
      ],
      "output": [
        18,
        42,
        77,
        20,
        36
      ]
    },
    "demos": [
      {
        "input": [
          44,
          6,
          14,
          93
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          68,
          89,
          93,
          82
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          72,
          21,
          76,
          75
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      }
    ]
  },
  {
    "id": "c097",
    "difficulty": 62,
    "function": "def c097(x):\n    # concatenate 11, 21, 43 input 7 89 0\n    return [11, 21, 43] + x + [7, 89, 0]\n\n",
    "data": {
      "input": [
        44,
        80,
        40,
        41,
        47
      ],
      "output": [
        11,
        21,
        43,
        44,
        80,
        40,
        41,
        47,
        7,
        89,
        0
      ]
    },
    "demos": [
      {
        "input": [
          52,
          16,
          62
        ],
        "output": [
          11,
          21,
          43,
          52,
          16,
          62,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          20,
          63,
          97,
          66,
          52
        ],
        "output": [
          11,
          21,
          43,
          20,
          63,
          97,
          66,
          52,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          88,
          39,
          97,
          70,
          46
        ],
        "output": [
          11,
          21,
          43,
          88,
          39,
          97,
          70,
          46,
          7,
          89,
          0
        ]
      }
    ]
  },
  {
    "id": "c142",
    "difficulty": 63,
    "function": "def c142(x):\n    # every digit in order of appearance\n    res = []\n    for i in x:\n        for j in str(i):\n            res.append(int(j))\n    return res\n\n",
    "data": {
      "input": [
        38,
        9,
        43,
        38,
        56,
        49
      ],
      "output": [
        3,
        8,
        9,
        4,
        3,
        3,
        8,
        5,
        6,
        4,
        9
      ]
    },
    "demos": [
      {
        "input": [
          20,
          92,
          31,
          96
        ],
        "output": [
          2,
          0,
          9,
          2,
          3,
          1,
          9,
          6
        ]
      },
      {
        "input": [
          2,
          27,
          41,
          94,
          8,
          10,
          2
        ],
        "output": [
          2,
          2,
          7,
          4,
          1,
          9,
          4,
          8,
          1,
          0,
          2
        ]
      },
      {
        "input": [
          84,
          99,
          77,
          75,
          24,
          11,
          25
        ],
        "output": [
          8,
          4,
          9,
          9,
          7,
          7,
          7,
          5,
          2,
          4,
          1,
          1,
          2,
          5
        ]
      }
    ]
  },
  {
    "id": "c091",
    "difficulty": 64,
    "function": "def c091(x):\n    return [81, 99, 41, 23, 22, 75, 68, 30]\n\n",
    "data": {
      "input": [
        33,
        2,
        50
      ],
      "output": [
        81,
        99,
        41,
        23,
        22,
        75,
        68,
        30
      ]
    },
    "demos": [
      {
        "input": [
          86,
          12,
          29
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          55,
          24,
          8,
          15,
          21,
          19
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          20,
          26,
          29,
          88
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      }
    ]
  },
  {
    "id": "c034",
    "difficulty": 65,
    "function": "def c034(x):\n    # swap element 1 and element 2\n    x[0], x[1] = x[1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        81,
        27,
        86,
        8,
        66
      ],
      "output": [
        27,
        81,
        86,
        8,
        66
      ]
    },
    "demos": [
      {
        "input": [
          35,
          32,
          32,
          83
        ],
        "output": [
          32,
          35,
          32,
          83
        ]
      },
      {
        "input": [
          89,
          90,
          79,
          21
        ],
        "output": [
          90,
          89,
          79,
          21
        ]
      },
      {
        "input": [
          1,
          85,
          30,
          2,
          47,
          14,
          37
        ],
        "output": [
          85,
          1,
          30,
          2,
          47,
          14,
          37
        ]
      }
    ]
  },
  {
    "id": "c244",
    "difficulty": 66,
    "function": "def c244(x):\n    # number of 3s\n    return [x.count(3)]\n\n",
    "data": {
      "input": [
        83,
        11,
        3,
        48,
        3,
        95
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          45,
          3,
          3,
          85,
          93,
          66
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          67,
          6,
          3,
          75,
          28,
          14,
          3
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          21,
          67,
          25,
          34,
          2
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c171",
    "difficulty": 67,
    "function": "def c171(x):\n    # cumulative sum\n    res = []\n    s = 0\n    for i in x:\n        s += i\n        res.append(s)\n    return res\n\n",
    "data": {
      "input": [
        6,
        7,
        3
      ],
      "output": [
        6,
        13,
        16
      ]
    },
    "demos": [
      {
        "input": [
          20,
          18,
          12,
          2,
          2,
          4,
          8
        ],
        "output": [
          20,
          38,
          50,
          52,
          54,
          58,
          66
        ]
      },
      {
        "input": [
          13,
          2,
          5
        ],
        "output": [
          13,
          15,
          20
        ]
      },
      {
        "input": [
          10,
          20,
          8
        ],
        "output": [
          10,
          30,
          38
        ]
      }
    ]
  },
  {
    "id": "c172",
    "difficulty": 68,
    "function": "def c172(x):\n    # cumulative product\n    res = []\n    p = 1\n    for i in x:\n        p *= i\n        res.append(p)\n    return res\n\n",
    "data": {
      "input": [
        5,
        6,
        0,
        3
      ],
      "output": [
        5,
        30,
        0,
        0
      ]
    },
    "demos": [
      {
        "input": [
          5,
          7,
          2,
          9,
          8
        ],
        "output": [
          5,
          35,
          70,
          630,
          5040
        ]
      },
      {
        "input": [
          6,
          9,
          0
        ],
        "output": [
          6,
          54,
          0
        ]
      },
      {
        "input": [
          7,
          0,
          4,
          10,
          7
        ],
        "output": [
          7,
          0,
          0,
          0,
          0
        ]
      }
    ]
  },
  {
    "id": "c062",
    "difficulty": 69,
    "function": "def c062(x):\n    # remove the last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        80,
        26,
        89,
        48,
        51,
        25
      ],
      "output": [
        80,
        26,
        89,
        48,
        51
      ]
    },
    "demos": [
      {
        "input": [
          49,
          50,
          1
        ],
        "output": [
          49,
          50
        ]
      },
      {
        "input": [
          21,
          12,
          18,
          25,
          73,
          65
        ],
        "output": [
          21,
          12,
          18,
          25,
          73
        ]
      },
      {
        "input": [
          61,
          50,
          81
        ],
        "output": [
          61,
          50
        ]
      }
    ]
  },
  {
    "id": "c096",
    "difficulty": 70,
    "function": "def c096(x):\n    # prepend 98 and append 37\n    return [98] + x + [37]\n\n",
    "data": {
      "input": [
        14,
        42,
        10,
        20,
        37,
        98,
        99
      ],
      "output": [
        98,
        14,
        42,
        10,
        20,
        37,
        98,
        99,
        37
      ]
    },
    "demos": [
      {
        "input": [
          41,
          89,
          98
        ],
        "output": [
          98,
          41,
          89,
          98,
          37
        ]
      },
      {
        "input": [
          48,
          24,
          76,
          55,
          93
        ],
        "output": [
          98,
          48,
          24,
          76,
          55,
          93,
          37
        ]
      },
      {
        "input": [
          21,
          73,
          24,
          30,
          8
        ],
        "output": [
          98,
          21,
          73,
          24,
          30,
          8,
          37
        ]
      }
    ]
  },
  {
    "id": "c081",
    "difficulty": 71,
    "function": "def c081(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        77,
        36,
        71,
        90
      ],
      "output": [
        71
      ]
    },
    "demos": [
      {
        "input": [
          84,
          48,
          45,
          35,
          55,
          10
        ],
        "output": [
          45
        ]
      },
      {
        "input": [
          48,
          45,
          81,
          34,
          87
        ],
        "output": [
          81
        ]
      },
      {
        "input": [
          29,
          46,
          38
        ],
        "output": [
          38
        ]
      }
    ]
  },
  {
    "id": "c109",
    "difficulty": 72,
    "function": "def c109(x):\n    # product of elements\n    p = 1\n    for i in x:\n        p *= i\n    return [p]\n\n",
    "data": {
      "input": [
        0,
        3,
        2,
        2,
        2,
        9,
        10
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          6,
          2,
          4,
          4,
          0
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          10,
          1,
          0,
          4
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          3,
          0,
          6,
          10,
          0,
          1,
          7
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c002",
    "difficulty": 73,
    "function": "def c002(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        42,
        28,
        0,
        64,
        66
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          48,
          8,
          60
        ],
        "output": [
          60
        ]
      },
      {
        "input": [
          54,
          25,
          35,
          78
        ],
        "output": [
          35
        ]
      },
      {
        "input": [
          82,
          5,
          63,
          11,
          16
        ],
        "output": [
          63
        ]
      }
    ]
  },
  {
    "id": "c132",
    "difficulty": 74,
    "function": "def c132(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        51,
        76,
        30,
        73,
        36,
        54
      ],
      "output": [
        51,
        76,
        73,
        36,
        54
      ]
    },
    "demos": [
      {
        "input": [
          20,
          28,
          58,
          6,
          94
        ],
        "output": [
          20,
          28,
          6,
          94
        ]
      },
      {
        "input": [
          55,
          96,
          27,
          20
        ],
        "output": [
          55,
          96,
          20
        ]
      },
      {
        "input": [
          85,
          93,
          27,
          80,
          50,
          22,
          85
        ],
        "output": [
          85,
          93,
          80,
          50,
          22,
          85
        ]
      }
    ]
  },
  {
    "id": "c153",
    "difficulty": 75,
    "function": "def c153(x):\n    # each unique element followed by its number of occurrences\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    out = []\n    for k, v in res.items():\n        out.append(k)\n        out.append(v)\n    return out\n\n",
    "data": {
      "input": [
        89,
        61,
        44,
        61
      ],
      "output": [
        89,
        1,
        61,
        2,
        44,
        1
      ]
    },
    "demos": [
      {
        "input": [
          78,
          15,
          63,
          15,
          15
        ],
        "output": [
          78,
          1,
          15,
          3,
          63,
          1
        ]
      },
      {
        "input": [
          18,
          37,
          18,
          96,
          28,
          18,
          18,
          18
        ],
        "output": [
          18,
          5,
          37,
          1,
          96,
          1,
          28,
          1
        ]
      },
      {
        "input": [
          88,
          52,
          36,
          23,
          49,
          36,
          52,
          23
        ],
        "output": [
          88,
          1,
          52,
          2,
          36,
          2,
          23,
          2,
          49,
          1
        ]
      }
    ]
  },
  {
    "id": "c051",
    "difficulty": 76,
    "function": "def c051(x):\n    # prepend first element 4 times\n    return [x[0]] * 4 + x\n\n",
    "data": {
      "input": [
        11,
        19,
        66,
        52,
        2
      ],
      "output": [
        11,
        11,
        11,
        11,
        11,
        19,
        66,
        52,
        2
      ]
    },
    "demos": [
      {
        "input": [
          3,
          45,
          78
        ],
        "output": [
          3,
          3,
          3,
          3,
          3,
          45,
          78
        ]
      },
      {
        "input": [
          60,
          81,
          63,
          98,
          43
        ],
        "output": [
          60,
          60,
          60,
          60,
          60,
          81,
          63,
          98,
          43
        ]
      },
      {
        "input": [
          24,
          28,
          69,
          46,
          24,
          60
        ],
        "output": [
          24,
          24,
          24,
          24,
          24,
          28,
          69,
          46,
          24,
          60
        ]
      }
    ]
  },
  {
    "id": "c225",
    "difficulty": 77,
    "function": "def c225(x):\n    # remove first and last two elements\n    return x[2:-2]\n\n",
    "data": {
      "input": [
        65,
        22,
        25,
        11,
        86,
        33,
        96,
        5
      ],
      "output": [
        25,
        11,
        86,
        33
      ]
    },
    "demos": [
      {
        "input": [
          56,
          56,
          68,
          80,
          65,
          86,
          41,
          44
        ],
        "output": [
          68,
          80,
          65,
          86
        ]
      },
      {
        "input": [
          4,
          4,
          68,
          80,
          49,
          46
        ],
        "output": [
          68,
          80
        ]
      },
      {
        "input": [
          25,
          21,
          9,
          69,
          30,
          71,
          55
        ],
        "output": [
          9,
          69,
          30
        ]
      }
    ]
  },
  {
    "id": "c067",
    "difficulty": 78,
    "function": "def c067(x):\n    # swap the first and last element\n    x[0], x[-1] = x[-1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        20,
        37,
        59,
        72,
        45
      ],
      "output": [
        45,
        37,
        59,
        72,
        20
      ]
    },
    "demos": [
      {
        "input": [
          0,
          74,
          90
        ],
        "output": [
          90,
          74,
          0
        ]
      },
      {
        "input": [
          79,
          25,
          92
        ],
        "output": [
          92,
          25,
          79
        ]
      },
      {
        "input": [
          60,
          4,
          91,
          65
        ],
        "output": [
          65,
          4,
          91,
          60
        ]
      }
    ]
  },
  {
    "id": "c112",
    "difficulty": 79,
    "function": "def c112(x):\n    # count from 1 to the last element\n    return list(range(1, x[-1]+1))\n\n",
    "data": {
      "input": [
        69,
        87,
        41,
        97,
        74,
        3
      ],
      "output": [
        1,
        2,
        3
      ]
    },
    "demos": [
      {
        "input": [
          49,
          20,
          50,
          3
        ],
        "output": [
          1,
          2,
          3
        ]
      },
      {
        "input": [
          92,
          33,
          34,
          64,
          34,
          99,
          3
        ],
        "output": [
          1,
          2,
          3
        ]
      },
      {
        "input": [
          58,
          25,
          12,
          85,
          9
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ]
      }
    ]
  },
  {
    "id": "c030",
    "difficulty": 80,
    "function": "def c030(x):\n    # remove the last 2 elements\n    return x[:-2]\n\n",
    "data": {
      "input": [
        32,
        54,
        31,
        50
      ],
      "output": [
        32,
        54
      ]
    },
    "demos": [
      {
        "input": [
          54,
          60,
          21
        ],
        "output": [
          54
        ]
      },
      {
        "input": [
          77,
          26,
          74,
          48,
          45,
          73
        ],
        "output": [
          77,
          26,
          74,
          48
        ]
      },
      {
        "input": [
          33,
          43,
          23,
          70,
          73,
          33,
          40
        ],
        "output": [
          33,
          43,
          23,
          70,
          73
        ]
      }
    ]
  },
  {
    "id": "c149",
    "difficulty": 81,
    "function": "def c149(x):\n    # replace each element, M with M * first element; remove the first element\n    return [i*x[0] for i in x[1:]]\n\n",
    "data": {
      "input": [
        1,
        6,
        15,
        17,
        15,
        16
      ],
      "output": [
        6,
        15,
        17,
        15,
        16
      ]
    },
    "demos": [
      {
        "input": [
          18,
          8,
          8
        ],
        "output": [
          144,
          144
        ]
      },
      {
        "input": [
          8,
          8,
          11,
          1
        ],
        "output": [
          64,
          88,
          8
        ]
      },
      {
        "input": [
          20,
          12,
          6,
          5,
          0,
          20,
          3
        ],
        "output": [
          240,
          120,
          100,
          0,
          400,
          60
        ]
      }
    ]
  },
  {
    "id": "c148",
    "difficulty": 82,
    "function": "def c148(x):\n    # count from 1 to each element\n    res = []\n    for i in x:\n        res += list(range(1, i+1))\n    return res\n\n",
    "data": {
      "input": [
        4,
        2,
        4
      ],
      "output": [
        1,
        2,
        3,
        4,
        1,
        2,
        1,
        2,
        3,
        4
      ]
    },
    "demos": [
      {
        "input": [
          3,
          4,
          3,
          4
        ],
        "output": [
          1,
          2,
          3,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          1,
          2,
          3,
          4
        ]
      },
      {
        "input": [
          5,
          4,
          4,
          5,
          2
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          4,
          5,
          1,
          2
        ]
      },
      {
        "input": [
          0,
          1,
          4,
          1,
          4
        ],
        "output": [
          1,
          1,
          2,
          3,
          4,
          1,
          1,
          2,
          3,
          4
        ]
      }
    ]
  },
  {
    "id": "c017",
    "difficulty": 83,
    "function": "def c017(x):\n    # replace x[1] with 8\n    x[1] = 8\n    return x\n\n",
    "data": {
      "input": [
        22,
        19,
        4,
        94,
        30,
        81
      ],
      "output": [
        22,
        8,
        4,
        94,
        30,
        81
      ]
    },
    "demos": [
      {
        "input": [
          87,
          1,
          21,
          27,
          96
        ],
        "output": [
          87,
          8,
          21,
          27,
          96
        ]
      },
      {
        "input": [
          37,
          91,
          17,
          95,
          83,
          42
        ],
        "output": [
          37,
          8,
          17,
          95,
          83,
          42
        ]
      },
      {
        "input": [
          88,
          16,
          60
        ],
        "output": [
          88,
          8,
          60
        ]
      }
    ]
  },
  {
    "id": "c092",
    "difficulty": 84,
    "function": "def c092(x):\n    # concatenate 92, 63, 34, 18, 55\n    return x + [92, 63, 34, 18, 55]\n\n",
    "data": {
      "input": [
        56,
        92,
        45,
        59,
        46
      ],
      "output": [
        56,
        92,
        45,
        59,
        46,
        92,
        63,
        34,
        18,
        55
      ]
    },
    "demos": [
      {
        "input": [
          90,
          56,
          37,
          40,
          12,
          95
        ],
        "output": [
          90,
          56,
          37,
          40,
          12,
          95,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          71,
          79,
          93,
          33,
          22
        ],
        "output": [
          71,
          79,
          93,
          33,
          22,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          83,
          1,
          90,
          62
        ],
        "output": [
          83,
          1,
          90,
          62,
          92,
          63,
          34,
          18,
          55
        ]
      }
    ]
  },
  {
    "id": "c077",
    "difficulty": 85,
    "function": "def c077(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        59,
        14,
        3,
        21,
        73,
        78,
        65
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          17,
          53,
          80,
          40,
          4,
          9
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          98,
          82,
          21,
          95,
          64,
          16,
          76
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          33,
          5,
          29,
          81,
          14
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c248",
    "difficulty": 87,
    "function": "def c248(x):\n    # elements after the first 0\n    return x[x.index(0)+1:]\n\n",
    "data": {
      "input": [
        90,
        39,
        51,
        0,
        93,
        84,
        82
      ],
      "output": [
        93,
        84,
        82
      ]
    },
    "demos": [
      {
        "input": [
          0,
          73,
          55,
          22,
          59,
          9
        ],
        "output": [
          73,
          55,
          22,
          59,
          9
        ]
      },
      {
        "input": [
          18,
          91,
          89,
          21,
          0,
          53,
          40,
          93
        ],
        "output": [
          53,
          40,
          93
        ]
      },
      {
        "input": [
          43,
          47,
          41,
          83,
          0,
          22
        ],
        "output": [
          22
        ]
      }
    ]
  },
  {
    "id": "c199",
    "difficulty": 88,
    "function": "def c199(x):\n    # elements in ascending order, each preceded by its rank\n    res = []\n    for i, v in enumerate(sorted(x)):\n        res.append(i+1)\n        res.append(v)\n    return res\n\n",
    "data": {
      "input": [
        13,
        47,
        33,
        88,
        74,
        74
      ],
      "output": [
        1,
        13,
        2,
        33,
        3,
        47,
        4,
        74,
        5,
        74,
        6,
        88
      ]
    },
    "demos": [
      {
        "input": [
          52,
          20,
          77,
          62,
          7
        ],
        "output": [
          1,
          7,
          2,
          20,
          3,
          52,
          4,
          62,
          5,
          77
        ]
      },
      {
        "input": [
          18,
          69,
          97,
          44,
          12,
          71
        ],
        "output": [
          1,
          12,
          2,
          18,
          3,
          44,
          4,
          69,
          5,
          71,
          6,
          97
        ]
      },
      {
        "input": [
          55,
          58,
          18,
          51,
          42,
          83,
          66
        ],
        "output": [
          1,
          18,
          2,
          42,
          3,
          51,
          4,
          55,
          5,
          58,
          6,
          66,
          7,
          83
        ]
      }
    ]
  },
  {
    "id": "c007",
    "difficulty": 89,
    "function": "def c007(x):\n    # remove all but the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        99,
        77,
        50
      ],
      "output": [
        99,
        77
      ]
    },
    "demos": [
      {
        "input": [
          57,
          79,
          49,
          45,
          68
        ],
        "output": [
          57,
          79
        ]
      },
      {
        "input": [
          71,
          89,
          15
        ],
        "output": [
          71,
          89
        ]
      },
      {
        "input": [
          93,
          31,
          19,
          22,
          40
        ],
        "output": [
          93,
          31
        ]
      }
    ]
  },
  {
    "id": "c176",
    "difficulty": 90,
    "function": "def c176(x):\n    # sum of each consecutive pair of elements\n    return [x[i] + x[i+1] for i in range(0, len(x)-1)]\n\n",
    "data": {
      "input": [
        82,
        18,
        83,
        65,
        66,
        34,
        49
      ],
      "output": [
        100,
        101,
        148,
        131,
        100,
        83
      ]
    },
    "demos": [
      {
        "input": [
          53,
          21,
          70
        ],
        "output": [
          74,
          91
        ]
      },
      {
        "input": [
          33,
          22,
          25,
          33,
          69,
          16,
          53
        ],
        "output": [
          55,
          47,
          58,
          102,
          85,
          69
        ]
      },
      {
        "input": [
          13,
          95,
          73,
          10
        ],
        "output": [
          108,
          168,
          83
        ]
      }
    ]
  },
  {
    "id": "c066",
    "difficulty": 91,
    "function": "def c066(x):\n    # left rotate the list by 1\n    return x[1:] + x[:1]\n\n",
    "data": {
      "input": [
        49,
        44,
        9
      ],
      "output": [
        44,
        9,
        49
      ]
    },
    "demos": [
      {
        "input": [
          21,
          98,
          15
        ],
        "output": [
          98,
          15,
          21
        ]
      },
      {
        "input": [
          61,
          65,
          63,
          39,
          63,
          45
        ],
        "output": [
          65,
          63,
          39,
          63,
          45,
          61
        ]
      },
      {
        "input": [
          87,
          78,
          58,
          20,
          38,
          20
        ],
        "output": [
          78,
          58,
          20,
          38,
          20,
          87
        ]
      }
    ]
  },
  {
    "id": "c053",
    "difficulty": 92,
    "function": "def c053(x):\n    # replace x[1] with x[0]\n    x[1] = x[0]\n    return x\n\n",
    "data": {
      "input": [
        65,
        96,
        6,
        56,
        96,
        54,
        53
      ],
      "output": [
        65,
        65,
        6,
        56,
        96,
        54,
        53
      ]
    },
    "demos": [
      {
        "input": [
          90,
          63,
          82,
          38
        ],
        "output": [
          90,
          90,
          82,
          38
        ]
      },
      {
        "input": [
          99,
          66,
          45,
          12,
          55
        ],
        "output": [
          99,
          99,
          45,
          12,
          55
        ]
      },
      {
        "input": [
          44,
          16,
          47,
          84,
          70
        ],
        "output": [
          44,
          44,
          47,
          84,
          70
        ]
      }
    ]
  },
  {
    "id": "c047",
    "difficulty": 93,
    "function": "def c047(x):\n    # concatenate 9, 6, 3, 8, 5\n    return [9, 6, 3, 8, 5] + x\n\n",
    "data": {
      "input": [
        27,
        30,
        72,
        58,
        8,
        7
      ],
      "output": [
        9,
        6,
        3,
        8,
        5,
        27,
        30,
        72,
        58,
        8,
        7
      ]
    },
    "demos": [
      {
        "input": [
          98,
          65,
          93,
          42,
          64,
          65
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          98,
          65,
          93,
          42,
          64,
          65
        ]
      },
      {
        "input": [
          81,
          49,
          59,
          20,
          60,
          24,
          89
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          81,
          49,
          59,
          20,
          60,
          24,
          89
        ]
      },
      {
        "input": [
          7,
          81,
          22,
          1
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          7,
          81,
          22,
          1
        ]
      }
    ]
  },
  {
    "id": "c064",
    "difficulty": 94,
    "function": "def c064(x):\n    # remove the first and last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        80,
        86,
        38
      ],
      "output": [
        86
      ]
    },
    "demos": [
      {
        "input": [
          29,
          45,
          5,
          39,
          74,
          26,
          40
        ],
        "output": [
          45,
          5,
          39,
          74,
          26
        ]
      },
      {
        "input": [
          40,
          77,
          96,
          88,
          9
        ],
        "output": [
          77,
          96,
          88
        ]
      },
      {
        "input": [
          53,
          90,
          14
        ],
        "output": [
          90
        ]
      }
    ]
  },
  {
    "id": "c078",
    "difficulty": 95,
    "function": "def c078(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        88,
        94,
        69,
        75,
        98,
        4
      ],
      "output": [
        98
      ]
    },
    "demos": [
      {
        "input": [
          16,
          21,
          44,
          14,
          8,
          20
        ],
        "output": [
          44
        ]
      },
      {
        "input": [
          69,
          90,
          86,
          70
        ],
        "output": [
          90
        ]
      },
      {
        "input": [
          26,
          30,
          23,
          12
        ],
        "output": [
          30
        ]
      }
    ]
  },
  {
    "id": "c119",
    "difficulty": 96,
    "function": "def c119(x):\n    # make the list begin and ends with 8\n    if x[0] != 8:\n        x = [8] + x\n    if x[-1] != 8:\n        x = x + [8]\n    return x\n\n",
    "data": {
      "input": [
        92,
        33,
        47,
        84,
        77
      ],
      "output": [
        8,
        92,
        33,
        47,
        84,
        77,
        8
      ]
    },
    "demos": [
      {
        "input": [
          2,
          72,
          93,
          1
        ],
        "output": [
          8,
          2,
          72,
          93,
          1,
          8
        ]
      },
      {
        "input": [
          18,
          68,
          89
        ],
        "output": [
          8,
          18,
          68,
          89,
          8
        ]
      },
      {
        "input": [
          57,
          9,
          66,
          99,
          25
        ],
        "output": [
          8,
          57,
          9,
          66,
          99,
          25,
          8
        ]
      }
    ]
  },
  {
    "id": "c135",
    "difficulty": 97,
    "function": "def c135(x):\n    # remove the first 7\n    x.remove(7)\n    return x\n\n",
    "data": {
      "input": [
        3,
        7,
        5,
        2,
        7,
        7
      ],
      "output": [
        3,
        5,
        2,
        7,
        7
      ]
    },
    "demos": [
      {
        "input": [
          4,
          4,
          7,
          9,
          7,
          7,
          7,
          0
        ],
        "output": [
          4,
          4,
          9,
          7,
          7,
          7,
          0
        ]
      },
      {
        "input": [
          7,
          5,
          6,
          9,
          7,
          9,
          6
        ],
        "output": [
          5,
          6,
          9,
          7,
          9,
          6
        ]
      },
      {
        "input": [
          3,
          9,
          3,
          5,
          7,
          3
        ],
        "output": [
          3,
          9,
          3,
          5,
          3
        ]
      }
    ]
  },
  {
    "id": "c198",
    "difficulty": 98,
    "function": "def c198(x):\n    # unique elements in descending order\n    res = set(x)\n    return sorted(res, reverse=True)\n\n",
    "data": {
      "input": [
        67,
        91,
        92,
        84,
        92,
        48,
        23,
        60
      ],
      "output": [
        92,
        91,
        84,
        67,
        60,
        48,
        23
      ]
    },
    "demos": [
      {
        "input": [
          51,
          87,
          42,
          70,
          87
        ],
        "output": [
          87,
          70,
          51,
          42
        ]
      },
      {
        "input": [
          35,
          27,
          88,
          85,
          85,
          88
        ],
        "output": [
          88,
          85,
          35,
          27
        ]
      },
      {
        "input": [
          31,
          84,
          59,
          12,
          65,
          65,
          61,
          9,
          59
        ],
        "output": [
          84,
          65,
          61,
          59,
          31,
          12,
          9
        ]
      }
    ]
  },
  {
    "id": "c219",
    "difficulty": 99,
    "function": "def c219(x):\n    # keep only every other element\n    return x[::2]\n\n",
    "data": {
      "input": [
        84,
        94,
        88,
        6,
        35,
        62,
        64,
        25,
        28
      ],
      "output": [
        84,
        88,
        35,
        64,
        28
      ]
    },
    "demos": [
      {
        "input": [
          2,
          69,
          67,
          26,
          12,
          98,
          37
        ],
        "output": [
          2,
          67,
          12,
          37
        ]
      },
      {
        "input": [
          77,
          73,
          32,
          75,
          25,
          67
        ],
        "output": [
          77,
          32,
          25
        ]
      },
      {
        "input": [
          22,
          99,
          67,
          34,
          82,
          3,
          13,
          65
        ],
        "output": [
          22,
          67,
          82,
          13
        ]
      }
    ]
  },
  {
    "id": "c075",
    "difficulty": 100,
    "function": "def c075(x):\n    # remove even index\n    return x[1::2]\n\n",
    "data": {
      "input": [
        39,
        32,
        68,
        0,
        33,
        75
      ],
      "output": [
        32,
        0,
        75
      ]
    },
    "demos": [
      {
        "input": [
          97,
          96,
          81,
          89
        ],
        "output": [
          96,
          89
        ]
      },
      {
        "input": [
          34,
          57,
          38,
          47
        ],
        "output": [
          57,
          47
        ]
      },
      {
        "input": [
          14,
          96,
          71,
          86,
          56,
          11,
          7
        ],
        "output": [
          96,
          86,
          11
        ]
      }
    ]
  },
  {
    "id": "c177",
    "difficulty": 101,
    "function": "def c177(x):\n    # interleave the input and the reversed input\n    return [i for pair in zip(x, x[::-1]) for i in pair]\n\n",
    "data": {
      "input": [
        86,
        74,
        2,
        75,
        74
      ],
      "output": [
        86,
        74,
        74,
        75,
        2,
        2,
        75,
        74,
        74,
        86
      ]
    },
    "demos": [
      {
        "input": [
          58,
          23,
          6,
          43,
          93,
          7,
          1
        ],
        "output": [
          58,
          1,
          23,
          7,
          6,
          93,
          43,
          43,
          93,
          6,
          7,
          23,
          1,
          58
        ]
      },
      {
        "input": [
          52,
          23,
          42,
          65,
          99,
          15
        ],
        "output": [
          52,
          15,
          23,
          99,
          42,
          65,
          65,
          42,
          99,
          23,
          15,
          52
        ]
      },
      {
        "input": [
          92,
          4,
          96,
          42,
          61
        ],
        "output": [
          92,
          61,
          4,
          42,
          96,
          96,
          42,
          4,
          61,
          92
        ]
      }
    ]
  },
  {
    "id": "c025",
    "difficulty": 102,
    "function": "def c025(x):\n    # remove element 1\n    return x[:1] + x[2:]\n\n",
    "data": {
      "input": [
        28,
        34,
        54
      ],
      "output": [
        28,
        54
      ]
    },
    "demos": [
      {
        "input": [
          1,
          38,
          42,
          3,
          56,
          46,
          42
        ],
        "output": [
          1,
          42,
          3,
          56,
          46,
          42
        ]
      },
      {
        "input": [
          97,
          98,
          8,
          5,
          81,
          9
        ],
        "output": [
          97,
          8,
          5,
          81,
          9
        ]
      },
      {
        "input": [
          35,
          48,
          45,
          10
        ],
        "output": [
          35,
          45,
          10
        ]
      }
    ]
  },
  {
    "id": "c125",
    "difficulty": 103,
    "function": "def c125(x):\n    # keep only elements whose tens digit equals the tens digit of the first element\n    return [i for i in x if len(str(i)) > 1 and str(i)[-2] == str(x[0])[-2]]\n\n",
    "data": {
      "input": [
        87,
        61,
        95,
        4,
        45
      ],
      "output": [
        87
      ]
    },
    "demos": [
      {
        "input": [
          31,
          31,
          12,
          17,
          78,
          63,
          37
        ],
        "output": [
          31,
          31,
          37
        ]
      },
      {
        "input": [
          96,
          102,
          104,
          1,
          105,
          78,
          97,
          39
        ],
        "output": [
          96,
          97
        ]
      },
      {
        "input": [
          80,
          4,
          19,
          85,
          11,
          85,
          92,
          67,
          88
        ],
        "output": [
          80,
          85,
          85,
          88
        ]
      }
    ]
  },
  {
    "id": "c087",
    "difficulty": 105,
    "function": "def c087(x):\n    # swap second and third element\n    x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        91,
        90,
        59,
        76
      ],
      "output": [
        91,
        59,
        90,
        76
      ]
    },
    "demos": [
      {
        "input": [
          65,
          79,
          23
        ],
        "output": [
          65,
          23,
          79
        ]
      },
      {
        "input": [
          0,
          43,
          51,
          33,
          49,
          84,
          68
        ],
        "output": [
          0,
          51,
          43,
          33,
          49,
          84,
          68
        ]
      },
      {
        "input": [
          47,
          91,
          7,
          39
        ],
        "output": [
          47,
          7,
          91,
          39
        ]
      }
    ]
  },
  {
    "id": "c013",
    "difficulty": 106,
    "function": "def c013(x):\n    # element 2 through 6\n    return x[2:6]\n\n",
    "data": {
      "input": [
        92,
        72,
        15,
        34,
        14,
        31,
        27,
        51,
        80
      ],
      "output": [
        15,
        34,
        14,
        31
      ]
    },
    "demos": [
      {
        "input": [
          49,
          83,
          33,
          99,
          64,
          80,
          49,
          20,
          28
        ],
        "output": [
          33,
          99,
          64,
          80
        ]
      },
      {
        "input": [
          68,
          65,
          99,
          84,
          99,
          61
        ],
        "output": [
          99,
          84,
          99,
          61
        ]
      },
      {
        "input": [
          44,
          58,
          86,
          17,
          82,
          28,
          26
        ],
        "output": [
          86,
          17,
          82,
          28
        ]
      }
    ]
  },
  {
    "id": "c069",
    "difficulty": 107,
    "function": "def c069(x):\n    # 9,3,4,0, input, 7,2,9,1\n    return [9,3,4,0] + x + [7,2,9,1]\n\n",
    "data": {
      "input": [
        65,
        20,
        68
      ],
      "output": [
        9,
        3,
        4,
        0,
        65,
        20,
        68,
        7,
        2,
        9,
        1
      ]
    },
    "demos": [
      {
        "input": [
          0,
          84,
          63,
          52
        ],
        "output": [
          9,
          3,
          4,
          0,
          0,
          84,
          63,
          52,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          99,
          92,
          78,
          2
        ],
        "output": [
          9,
          3,
          4,
          0,
          99,
          92,
          78,
          2,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          12,
          42,
          69,
          41,
          42
        ],
        "output": [
          9,
          3,
          4,
          0,
          12,
          42,
          69,
          41,
          42,
          7,
          2,
          9,
          1
        ]
      }
    ]
  },
  {
    "id": "c117",
    "difficulty": 108,
    "function": "def c117(x):\n    # left rotate by 3\n    return x[3:] + x[:3]\n\n",
    "data": {
      "input": [
        53,
        53,
        93,
        40,
        23
      ],
      "output": [
        40,
        23,
        53,
        53,
        93
      ]
    },
    "demos": [
      {
        "input": [
          97,
          57,
          68,
          72,
          32,
          27
        ],
        "output": [
          72,
          32,
          27,
          97,
          57,
          68
        ]
      },
      {
        "input": [
          95,
          45,
          70,
          19
        ],
        "output": [
          19,
          95,
          45,
          70
        ]
      },
      {
        "input": [
          42,
          8,
          94,
          13,
          40
        ],
        "output": [
          13,
          40,
          42,
          8,
          94
        ]
      }
    ]
  },
  {
    "id": "c228",
    "difficulty": 109,
    "function": "def c228(x):\n    # replace each element with the number of occurrences of that element so far\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        8,
        66,
        16,
        90,
        96,
        50,
        68,
        8,
        67
      ],
      "output": [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        1
      ]
    },
    "demos": [
      {
        "input": [
          6,
          6,
          42,
          62,
          23,
          9,
          77,
          6
        ],
        "output": [
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          3
        ]
      },
      {
        "input": [
          73,
          34,
          10,
          73,
          10,
          70
        ],
        "output": [
          1,
          1,
          1,
          2,
          2,
          1
        ]
      },
      {
        "input": [
          60,
          45,
          38,
          9,
          6,
          38
        ],
        "output": [
          1,
          1,
          1,
          1,
          1,
          2
        ]
      }
    ]
  },
  {
    "id": "c197",
    "difficulty": 110,
    "function": "def c197(x):\n    # replace each element with the number of occurrences of that element\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in x:\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        71,
        80,
        68,
        50,
        50,
        69,
        47,
        61
      ],
      "output": [
        1,
        1,
        1,
        2,
        2,
        1,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          87,
          25,
          31,
          53,
          46,
          55,
          53,
          29
        ],
        "output": [
          1,
          1,
          1,
          2,
          1,
          1,
          2,
          1
        ]
      },
      {
        "input": [
          60,
          26,
          51,
          32,
          53,
          39,
          39
        ],
        "output": [
          1,
          1,
          1,
          1,
          1,
          2,
          2
        ]
      },
      {
        "input": [
          9,
          71,
          28,
          71,
          85
        ],
        "output": [
          1,
          2,
          1,
          2,
          1
        ]
      }
    ]
  },
  {
    "id": "c065",
    "difficulty": 111,
    "function": "def c065(x):\n    # prepend 9 and append 7\n    return [9] + x + [7]\n\n",
    "data": {
      "input": [
        23,
        37,
        43,
        91,
        37,
        86
      ],
      "output": [
        9,
        23,
        37,
        43,
        91,
        37,
        86,
        7
      ]
    },
    "demos": [
      {
        "input": [
          80,
          93,
          5,
          54,
          83,
          89
        ],
        "output": [
          9,
          80,
          93,
          5,
          54,
          83,
          89,
          7
        ]
      },
      {
        "input": [
          6,
          38,
          79,
          36,
          31,
          58
        ],
        "output": [
          9,
          6,
          38,
          79,
          36,
          31,
          58,
          7
        ]
      },
      {
        "input": [
          75,
          13,
          86,
          19
        ],
        "output": [
          9,
          75,
          13,
          86,
          19,
          7
        ]
      }
    ]
  },
  {
    "id": "c156",
    "difficulty": 112,
    "function": "def c156(x):\n    # reverse the input and add each element to its new index\n    x = x[::-1]\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        52,
        54,
        74,
        22,
        43
      ],
      "output": [
        43,
        23,
        76,
        57,
        56
      ]
    },
    "demos": [
      {
        "input": [
          72,
          80,
          14,
          76,
          76,
          33
        ],
        "output": [
          33,
          77,
          78,
          17,
          84,
          77
        ]
      },
      {
        "input": [
          6,
          7,
          34
        ],
        "output": [
          34,
          8,
          8
        ]
      },
      {
        "input": [
          14,
          1,
          21,
          30,
          46
        ],
        "output": [
          46,
          31,
          23,
          4,
          18
        ]
      }
    ]
  },
  {
    "id": "c110",
    "difficulty": 113,
    "function": "def c110(x):\n    # three largest elements in descending order\n    return sorted(x, reverse=True)[:3]\n\n",
    "data": {
      "input": [
        99,
        12,
        23,
        69,
        85,
        47,
        99
      ],
      "output": [
        99,
        99,
        85
      ]
    },
    "demos": [
      {
        "input": [
          25,
          67,
          78,
          51,
          92,
          6,
          91
        ],
        "output": [
          92,
          91,
          78
        ]
      },
      {
        "input": [
          42,
          22,
          29,
          19,
          81,
          97,
          5
        ],
        "output": [
          97,
          81,
          42
        ]
      },
      {
        "input": [
          95,
          17,
          59,
          7,
          89,
          33
        ],
        "output": [
          95,
          89,
          59
        ]
      }
    ]
  },
  {
    "id": "c233",
    "difficulty": 114,
    "function": "def c233(x):\n    # number of occurrences of each unique element, in order of appearance\n    numbers = []\n    res = []\n    for i in x:\n        if i not in numbers:\n            numbers.append(i)\n            res.append(x.count(i))\n    return res\n\n",
    "data": {
      "input": [
        10,
        4,
        10,
        4,
        8,
        4,
        2
      ],
      "output": [
        2,
        3,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          9,
          9,
          8,
          5,
          4,
          4,
          2
        ],
        "output": [
          2,
          1,
          1,
          2,
          1
        ]
      },
      {
        "input": [
          0,
          8,
          3,
          9,
          9,
          0,
          9,
          8
        ],
        "output": [
          2,
          2,
          1,
          3
        ]
      },
      {
        "input": [
          3,
          6,
          4,
          8,
          3,
          6
        ],
        "output": [
          2,
          2,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c003",
    "difficulty": 115,
    "function": "def c003(x):\n    # remove all but seventh element\n    return [x[6]]\n\n",
    "data": {
      "input": [
        78,
        97,
        27,
        10,
        95,
        16,
        63,
        81
      ],
      "output": [
        63
      ]
    },
    "demos": [
      {
        "input": [
          45,
          36,
          76,
          21,
          96,
          91,
          53,
          27
        ],
        "output": [
          53
        ]
      },
      {
        "input": [
          25,
          91,
          15,
          16,
          65,
          80,
          84,
          60,
          15
        ],
        "output": [
          84
        ]
      },
      {
        "input": [
          35,
          65,
          26,
          21,
          94,
          38,
          57,
          41,
          84,
          67
        ],
        "output": [
          57
        ]
      }
    ]
  },
  {
    "id": "c230",
    "difficulty": 116,
    "function": "def c230(x):\n    # count by 2 from the smallest element to the largest element\n    return list(range(min(x), max(x)+1, 2))\n\n",
    "data": {
      "input": [
        54,
        59,
        56
      ],
      "output": [
        54,
        56,
        58
      ]
    },
    "demos": [
      {
        "input": [
          60,
          52,
          59
        ],
        "output": [
          52,
          54,
          56,
          58,
          60
        ]
      },
      {
        "input": [
          49,
          45,
          37,
          52
        ],
        "output": [
          37,
          39,
          41,
          43,
          45,
          47,
          49,
          51
        ]
      },
      {
        "input": [
          43,
          42,
          30
        ],
        "output": [
          30,
          32,
          34,
          36,
          38,
          40,
          42
        ]
      }
    ]
  },
  {
    "id": "c122",
    "difficulty": 117,
    "function": "def c122(x):\n    # remove all but penultimate element\n    return [x[-2]]\n\n",
    "data": {
      "input": [
        93,
        49,
        86
      ],
      "output": [
        49
      ]
    },
    "demos": [
      {
        "input": [
          37,
          15,
          60,
          70,
          41,
          56,
          2
        ],
        "output": [
          56
        ]
      },
      {
        "input": [
          91,
          25,
          31,
          61,
          61,
          94,
          89
        ],
        "output": [
          94
        ]
      },
      {
        "input": [
          47,
          97,
          4,
          55,
          13,
          6
        ],
        "output": [
          13
        ]
      }
    ]
  },
  {
    "id": "c020",
    "difficulty": 118,
    "function": "def c020(x):\n    # replace the first element with the last element\n    x[0] = x[-1]\n    return x\n\n",
    "data": {
      "input": [
        6,
        68,
        76
      ],
      "output": [
        76,
        68,
        76
      ]
    },
    "demos": [
      {
        "input": [
          5,
          64,
          38,
          7,
          96,
          70
        ],
        "output": [
          70,
          64,
          38,
          7,
          96,
          70
        ]
      },
      {
        "input": [
          90,
          2,
          90,
          79,
          18,
          13,
          93
        ],
        "output": [
          93,
          2,
          90,
          79,
          18,
          13,
          93
        ]
      },
      {
        "input": [
          73,
          0,
          22,
          78,
          93,
          35
        ],
        "output": [
          35,
          0,
          22,
          78,
          93,
          35
        ]
      }
    ]
  },
  {
    "id": "c235",
    "difficulty": 119,
    "function": "def c235(x):\n    # count up and down between elements\n    res = []\n    for i in range(len(x)-1):\n        if x[i] < x[i+1]:\n            res += list(range(x[i], x[i+1]+1))\n        else:\n            res += list(range(x[i], x[i+1]-1, -1))\n    return res\n\n",
    "data": {
      "input": [
        32,
        35,
        34
      ],
      "output": [
        32,
        33,
        34,
        35,
        35,
        34
      ]
    },
    "demos": [
      {
        "input": [
          65,
          67,
          70
        ],
        "output": [
          65,
          66,
          67,
          67,
          68,
          69,
          70
        ]
      },
      {
        "input": [
          95,
          90,
          91
        ],
        "output": [
          95,
          94,
          93,
          92,
          91,
          90,
          90,
          91
        ]
      },
      {
        "input": [
          66,
          65,
          66
        ],
        "output": [
          66,
          65,
          65,
          66
        ]
      }
    ]
  },
  {
    "id": "c157",
    "difficulty": 120,
    "function": "def c157(x):\n    # each element followed by 0 if even, 1 if odd\n    res = []\n    for i in x:\n        res.append(i)\n        res.append(i % 2)\n    return res\n\n",
    "data": {
      "input": [
        45,
        17,
        86,
        73
      ],
      "output": [
        45,
        1,
        17,
        1,
        86,
        0,
        73,
        1
      ]
    },
    "demos": [
      {
        "input": [
          78,
          4,
          43,
          45,
          36,
          7
        ],
        "output": [
          78,
          0,
          4,
          0,
          43,
          1,
          45,
          1,
          36,
          0,
          7,
          1
        ]
      },
      {
        "input": [
          41,
          42,
          56,
          95,
          3
        ],
        "output": [
          41,
          1,
          42,
          0,
          56,
          0,
          95,
          1,
          3,
          1
        ]
      },
      {
        "input": [
          53,
          29,
          72,
          84,
          67
        ],
        "output": [
          53,
          1,
          29,
          1,
          72,
          0,
          84,
          0,
          67,
          1
        ]
      }
    ]
  },
  {
    "id": "c185",
    "difficulty": 121,
    "function": "def c185(x):\n    # replace the sublist between the first and last with its sum\n    return x[:1] + [sum(x[1:-1])] + x[-1:]\n\n",
    "data": {
      "input": [
        6,
        4,
        9,
        5
      ],
      "output": [
        6,
        13,
        5
      ]
    },
    "demos": [
      {
        "input": [
          6,
          18,
          2,
          15
        ],
        "output": [
          6,
          20,
          15
        ]
      },
      {
        "input": [
          3,
          0,
          3,
          12
        ],
        "output": [
          3,
          3,
          12
        ]
      },
      {
        "input": [
          2,
          16,
          5
        ],
        "output": [
          2,
          16,
          5
        ]
      }
    ]
  },
  {
    "id": "c213",
    "difficulty": 122,
    "function": "def c213(x):\n    # three smallest elements in ascending order\n    return sorted(x)[:3]\n\n",
    "data": {
      "input": [
        43,
        86,
        38
      ],
      "output": [
        38,
        43,
        86
      ]
    },
    "demos": [
      {
        "input": [
          4,
          13,
          14,
          39,
          47
        ],
        "output": [
          4,
          13,
          14
        ]
      },
      {
        "input": [
          8,
          55,
          39
        ],
        "output": [
          8,
          39,
          55
        ]
      },
      {
        "input": [
          59,
          42,
          44,
          74
        ],
        "output": [
          42,
          44,
          59
        ]
      }
    ]
  },
  {
    "id": "c184",
    "difficulty": 123,
    "function": "def c184(x):\n    # keep only odd elements with an even index\n    return [i for i in x if i % 2 == 1 and x.index(i) % 2 == 0]\n\n",
    "data": {
      "input": [
        99,
        28,
        41,
        20,
        41,
        19,
        60,
        14
      ],
      "output": [
        99,
        41,
        41
      ]
    },
    "demos": [
      {
        "input": [
          3,
          55,
          61,
          83,
          80,
          27,
          18
        ],
        "output": [
          3,
          61
        ]
      },
      {
        "input": [
          22,
          39,
          92,
          54,
          81,
          40,
          78,
          74,
          37,
          86
        ],
        "output": [
          81,
          37
        ]
      },
      {
        "input": [
          80,
          7,
          88,
          77,
          47,
          18,
          57
        ],
        "output": [
          47,
          57
        ]
      }
    ]
  },
  {
    "id": "c155",
    "difficulty": 124,
    "function": "def c155(x):\n    # multiply each element by its index\n    return [i*j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        83,
        5,
        40
      ],
      "output": [
        0,
        5,
        80
      ]
    },
    "demos": [
      {
        "input": [
          9,
          14,
          32,
          68
        ],
        "output": [
          0,
          14,
          64,
          204
        ]
      },
      {
        "input": [
          20,
          31,
          11
        ],
        "output": [
          0,
          31,
          22
        ]
      },
      {
        "input": [
          11,
          70,
          19,
          18
        ],
        "output": [
          0,
          70,
          38,
          54
        ]
      }
    ]
  },
  {
    "id": "c082",
    "difficulty": 125,
    "function": "def c082(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        93,
        47,
        98,
        10,
        95,
        95,
        14
      ],
      "output": [
        98
      ]
    },
    "demos": [
      {
        "input": [
          48,
          90,
          36
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          12,
          96,
          54,
          92,
          3,
          47,
          16
        ],
        "output": [
          54
        ]
      },
      {
        "input": [
          69,
          50,
          42,
          96
        ],
        "output": [
          42
        ]
      }
    ]
  },
  {
    "id": "c231",
    "difficulty": 126,
    "function": "def c231(x):\n    # the number of occurrences of each unique element in ascending order\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    return sorted(res.values())\n\n",
    "data": {
      "input": [
        8,
        8,
        5,
        5,
        8,
        5,
        8
      ],
      "output": [
        3,
        4
      ]
    },
    "demos": [
      {
        "input": [
          0,
          0,
          9,
          5,
          0,
          0,
          0,
          0
        ],
        "output": [
          1,
          1,
          6
        ]
      },
      {
        "input": [
          9,
          1,
          10,
          9,
          10,
          10,
          10,
          8,
          10
        ],
        "output": [
          1,
          1,
          2,
          5
        ]
      },
      {
        "input": [
          3,
          1,
          3,
          7,
          1,
          3,
          8,
          3,
          5
        ],
        "output": [
          1,
          1,
          1,
          2,
          4
        ]
      }
    ]
  },
  {
    "id": "c099",
    "difficulty": 127,
    "function": "def c099(x):\n    # remove the lower half of the list\n    median = sorted(x)[len(x)//2]\n    return [i for i in x if i >= median]\n\n",
    "data": {
      "input": [
        93,
        36,
        68,
        88,
        54,
        21
      ],
      "output": [
        93,
        68,
        88
      ]
    },
    "demos": [
      {
        "input": [
          32,
          12,
          29,
          17,
          48
        ],
        "output": [
          32,
          29,
          48
        ]
      },
      {
        "input": [
          61,
          92,
          75,
          45,
          32,
          60
        ],
        "output": [
          61,
          92,
          75
        ]
      },
      {
        "input": [
          22,
          91,
          39,
          76,
          25,
          54
        ],
        "output": [
          91,
          76,
          54
        ]
      }
    ]
  },
  {
    "id": "c247",
    "difficulty": 128,
    "function": "def c247(x):\n    # elements before the first 0\n    return x[:x.index(0)]\n\n",
    "data": {
      "input": [
        70,
        0,
        0,
        0,
        36,
        74,
        69
      ],
      "output": [
        70
      ]
    },
    "demos": [
      {
        "input": [
          59,
          0,
          41,
          0,
          66,
          81,
          66
        ],
        "output": [
          59
        ]
      },
      {
        "input": [
          5,
          0,
          11,
          0,
          85,
          0,
          0,
          66
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          62,
          44,
          0,
          0,
          13,
          72,
          26,
          99,
          0
        ],
        "output": [
          62,
          44
        ]
      }
    ]
  },
  {
    "id": "c008",
    "difficulty": 129,
    "function": "def c008(x):\n    # the first 5 elements\n    return x[:5]\n\n",
    "data": {
      "input": [
        14,
        29,
        76,
        13,
        61
      ],
      "output": [
        14,
        29,
        76,
        13,
        61
      ]
    },
    "demos": [
      {
        "input": [
          39,
          41,
          52,
          44,
          62,
          7,
          10,
          85
        ],
        "output": [
          39,
          41,
          52,
          44,
          62
        ]
      },
      {
        "input": [
          52,
          63,
          14,
          91,
          96,
          83
        ],
        "output": [
          52,
          63,
          14,
          91,
          96
        ]
      },
      {
        "input": [
          93,
          2,
          69,
          68,
          19,
          54,
          89
        ],
        "output": [
          93,
          2,
          69,
          68,
          19
        ]
      }
    ]
  },
  {
    "id": "c055",
    "difficulty": 130,
    "function": "def c055(x):\n    # swap x[0], x[2] and x[1], x[3]\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        71,
        53,
        10,
        37,
        33,
        75,
        98
      ],
      "output": [
        10,
        37,
        71,
        53,
        33,
        75,
        98
      ]
    },
    "demos": [
      {
        "input": [
          8,
          1,
          77,
          32
        ],
        "output": [
          77,
          32,
          8,
          1
        ]
      },
      {
        "input": [
          29,
          74,
          40,
          78
        ],
        "output": [
          40,
          78,
          29,
          74
        ]
      },
      {
        "input": [
          94,
          3,
          94,
          55
        ],
        "output": [
          94,
          55,
          94,
          3
        ]
      }
    ]
  },
  {
    "id": "c029",
    "difficulty": 131,
    "function": "def c029(x):\n    # remove the first 2 elements\n    return x[2:]\n\n",
    "data": {
      "input": [
        83,
        30,
        74,
        50,
        79
      ],
      "output": [
        74,
        50,
        79
      ]
    },
    "demos": [
      {
        "input": [
          49,
          79,
          45,
          30,
          4,
          14
        ],
        "output": [
          45,
          30,
          4,
          14
        ]
      },
      {
        "input": [
          16,
          22,
          30,
          57,
          77,
          42
        ],
        "output": [
          30,
          57,
          77,
          42
        ]
      },
      {
        "input": [
          57,
          35,
          32,
          31,
          50
        ],
        "output": [
          32,
          31,
          50
        ]
      }
    ]
  },
  {
    "id": "c168",
    "difficulty": 132,
    "function": "def c168(x):\n    # count from 1 to 10, skipping the length of the input\n    return [i for i in range(1, 11) if i != len(x)]\n\n",
    "data": {
      "input": [
        8,
        86,
        17,
        6,
        69
      ],
      "output": [
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10
      ]
    },
    "demos": [
      {
        "input": [
          40,
          76,
          24,
          64
        ],
        "output": [
          1,
          2,
          3,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          79,
          44,
          78
        ],
        "output": [
          1,
          2,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          68,
          84,
          64,
          88,
          1,
          39,
          15
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          8,
          9,
          10
        ]
      }
    ]
  },
  {
    "id": "c009",
    "difficulty": 133,
    "function": "def c009(x):\n    # remove all but the first 3 elements\n    return x[:3]\n\n",
    "data": {
      "input": [
        64,
        68,
        16,
        6,
        16
      ],
      "output": [
        64,
        68,
        16
      ]
    },
    "demos": [
      {
        "input": [
          78,
          46,
          99,
          82
        ],
        "output": [
          78,
          46,
          99
        ]
      },
      {
        "input": [
          95,
          33,
          71,
          90,
          60,
          58,
          82
        ],
        "output": [
          95,
          33,
          71
        ]
      },
      {
        "input": [
          18,
          32,
          64,
          76,
          95
        ],
        "output": [
          18,
          32,
          64
        ]
      }
    ]
  },
  {
    "id": "c133",
    "difficulty": 134,
    "function": "def c133(x):\n    # remove elements 1 through 4\n    return x[:1] + x[5:]\n\n",
    "data": {
      "input": [
        63,
        7,
        11,
        62,
        32,
        52,
        41,
        4
      ],
      "output": [
        63,
        52,
        41,
        4
      ]
    },
    "demos": [
      {
        "input": [
          40,
          76,
          67,
          73,
          73
        ],
        "output": [
          40
        ]
      },
      {
        "input": [
          90,
          60,
          50,
          79,
          87,
          15,
          91,
          37
        ],
        "output": [
          90,
          15,
          91,
          37
        ]
      },
      {
        "input": [
          47,
          24,
          32,
          26,
          64,
          31
        ],
        "output": [
          47,
          31
        ]
      }
    ]
  },
  {
    "id": "c146",
    "difficulty": 135,
    "function": "def c146(x):\n    # absolute difference between each consecutive pair of elements\n    return [abs(x[i] - x[i+1]) for i in range(len(x)-1)]\n\n",
    "data": {
      "input": [
        8,
        61,
        43,
        91,
        99
      ],
      "output": [
        53,
        18,
        48,
        8
      ]
    },
    "demos": [
      {
        "input": [
          24,
          82,
          87,
          6,
          80
        ],
        "output": [
          58,
          5,
          81,
          74
        ]
      },
      {
        "input": [
          79,
          14,
          36,
          89,
          13,
          42,
          46,
          26
        ],
        "output": [
          65,
          22,
          53,
          76,
          29,
          4,
          20
        ]
      },
      {
        "input": [
          12,
          50,
          92,
          94,
          72,
          10,
          63,
          12,
          48
        ],
        "output": [
          38,
          42,
          2,
          22,
          62,
          53,
          51,
          36
        ]
      }
    ]
  },
  {
    "id": "c004",
    "difficulty": 136,
    "function": "def c004(x):\n    # remove all but element 3\n    return [x[2]]\n\n",
    "data": {
      "input": [
        39,
        68,
        99,
        7,
        21,
        54,
        5
      ],
      "output": [
        99
      ]
    },
    "demos": [
      {
        "input": [
          0,
          71,
          93,
          7,
          59,
          66,
          40
        ],
        "output": [
          93
        ]
      },
      {
        "input": [
          65,
          68,
          17,
          36,
          52
        ],
        "output": [
          17
        ]
      },
      {
        "input": [
          3,
          56,
          82,
          27,
          52,
          90
        ],
        "output": [
          82
        ]
      }
    ]
  },
  {
    "id": "c240",
    "difficulty": 137,
    "function": "def c240(x):\n    # number of elements equal to the input length\n    return [x.count(len(x))]\n\n",
    "data": {
      "input": [
        6,
        3,
        67,
        60,
        9,
        9
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          27,
          4,
          31,
          9
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          71,
          3,
          8,
          96,
          8,
          8,
          92,
          77
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          88,
          21,
          34,
          46,
          48,
          9,
          9,
          9,
          68
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c239",
    "difficulty": 138,
    "function": "def c239(x):\n    # number of repetitions in the input\n    res = {}\n    out = 0\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out += 1\n    return [out]\n\n",
    "data": {
      "input": [
        7,
        10,
        5,
        10,
        9,
        10,
        9,
        2,
        9,
        10
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          7,
          5,
          5,
          9,
          9,
          3,
          9,
          1,
          3,
          2,
          2
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          0,
          10,
          6,
          6,
          6,
          5,
          5,
          0
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          10,
          0,
          7,
          1,
          9,
          1,
          8,
          10,
          10
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c246",
    "difficulty": 139,
    "function": "def c246(x):\n    # number of unique elements\n    return [len(set(x))]\n\n",
    "data": {
      "input": [
        36,
        14,
        84,
        76,
        84,
        53,
        36,
        85,
        93,
        53
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          2,
          55,
          32,
          27,
          46,
          32,
          11,
          32
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          52,
          69,
          69,
          42,
          52,
          69,
          69,
          5
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          26,
          94,
          80,
          26,
          6,
          94,
          6
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c138",
    "difficulty": 140,
    "function": "def c138(x):\n    # remove all occurrences of the first element\n    return [i for i in x if i != x[0]]\n\n",
    "data": {
      "input": [
        46,
        58,
        20,
        22,
        46,
        46,
        48,
        46,
        79
      ],
      "output": [
        58,
        20,
        22,
        48,
        79
      ]
    },
    "demos": [
      {
        "input": [
          18,
          39,
          20,
          68,
          18,
          4,
          20,
          3,
          43,
          20
        ],
        "output": [
          39,
          20,
          68,
          4,
          20,
          3,
          43,
          20
        ]
      },
      {
        "input": [
          92,
          10,
          1,
          63,
          92,
          56,
          39,
          40,
          92
        ],
        "output": [
          10,
          1,
          63,
          56,
          39,
          40
        ]
      },
      {
        "input": [
          12,
          6,
          6,
          16,
          6,
          0,
          6,
          33,
          41
        ],
        "output": [
          6,
          6,
          16,
          6,
          0,
          6,
          33,
          41
        ]
      }
    ]
  },
  {
    "id": "c018",
    "difficulty": 141,
    "function": "def c018(x):\n    # replace element 1 with 9\n    x[1] = 9\n    return x\n\n",
    "data": {
      "input": [
        95,
        69,
        12
      ],
      "output": [
        95,
        9,
        12
      ]
    },
    "demos": [
      {
        "input": [
          25,
          38,
          22,
          60,
          85,
          78,
          27
        ],
        "output": [
          25,
          9,
          22,
          60,
          85,
          78,
          27
        ]
      },
      {
        "input": [
          52,
          10,
          28,
          85,
          28,
          2,
          74
        ],
        "output": [
          52,
          9,
          28,
          85,
          28,
          2,
          74
        ]
      },
      {
        "input": [
          0,
          34,
          54,
          62,
          93,
          90,
          77
        ],
        "output": [
          0,
          9,
          54,
          62,
          93,
          90,
          77
        ]
      }
    ]
  },
  {
    "id": "c012",
    "difficulty": 142,
    "function": "def c012(x):\n    # remove all but elements 1 through 3\n    return x[1:4]\n\n",
    "data": {
      "input": [
        61,
        91,
        85,
        68,
        44
      ],
      "output": [
        91,
        85,
        68
      ]
    },
    "demos": [
      {
        "input": [
          80,
          59,
          74,
          80,
          84,
          40
        ],
        "output": [
          59,
          74,
          80
        ]
      },
      {
        "input": [
          28,
          50,
          54,
          77,
          36,
          3,
          43
        ],
        "output": [
          50,
          54,
          77
        ]
      },
      {
        "input": [
          77,
          53,
          14,
          94,
          95,
          73,
          37
        ],
        "output": [
          53,
          14,
          94
        ]
      }
    ]
  },
  {
    "id": "c232",
    "difficulty": 143,
    "function": "def c232(x):\n    # mean of the list, rounded to the nearest integer\n    return [round(sum(x)/len(x))]\n\n",
    "data": {
      "input": [
        98,
        34,
        86,
        30
      ],
      "output": [
        62
      ]
    },
    "demos": [
      {
        "input": [
          87,
          80,
          0,
          37,
          55,
          26,
          14
        ],
        "output": [
          43
        ]
      },
      {
        "input": [
          54,
          13,
          68,
          42
        ],
        "output": [
          44
        ]
      },
      {
        "input": [
          17,
          90,
          3,
          1,
          47,
          41
        ],
        "output": [
          33
        ]
      }
    ]
  },
  {
    "id": "c094",
    "difficulty": 144,
    "function": "def c094(x):\n    # swap 0,2 and 1,3\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        49,
        41,
        35,
        82,
        61
      ],
      "output": [
        35,
        82,
        49,
        41,
        61
      ]
    },
    "demos": [
      {
        "input": [
          14,
          25,
          4,
          6,
          48,
          36,
          61
        ],
        "output": [
          4,
          6,
          14,
          25,
          48,
          36,
          61
        ]
      },
      {
        "input": [
          10,
          46,
          34,
          46,
          0
        ],
        "output": [
          34,
          46,
          10,
          46,
          0
        ]
      },
      {
        "input": [
          70,
          43,
          6,
          2,
          72,
          6
        ],
        "output": [
          6,
          2,
          70,
          43,
          72,
          6
        ]
      }
    ]
  },
  {
    "id": "c086",
    "difficulty": 145,
    "function": "def c086(x):\n    # swap elements 0 and 3\n    x[0], x[3] = x[3], x[0]\n    return x\n\n",
    "data": {
      "input": [
        72,
        72,
        87,
        91,
        8,
        27
      ],
      "output": [
        91,
        72,
        87,
        72,
        8,
        27
      ]
    },
    "demos": [
      {
        "input": [
          79,
          35,
          60,
          67,
          80,
          67,
          31
        ],
        "output": [
          67,
          35,
          60,
          79,
          80,
          67,
          31
        ]
      },
      {
        "input": [
          77,
          70,
          49,
          91,
          18,
          16,
          1
        ],
        "output": [
          91,
          70,
          49,
          77,
          18,
          16,
          1
        ]
      },
      {
        "input": [
          29,
          36,
          72,
          59,
          94,
          87,
          83
        ],
        "output": [
          59,
          36,
          72,
          29,
          94,
          87,
          83
        ]
      }
    ]
  },
  {
    "id": "c193",
    "difficulty": 146,
    "function": "def c193(x):\n    # remove the smallest element and the largest element, output in ascending order\n    return sorted(x[1:-1])\n\n",
    "data": {
      "input": [
        12,
        9,
        26,
        80,
        52,
        54,
        41
      ],
      "output": [
        9,
        26,
        52,
        54,
        80
      ]
    },
    "demos": [
      {
        "input": [
          4,
          94,
          98,
          15
        ],
        "output": [
          94,
          98
        ]
      },
      {
        "input": [
          57,
          16,
          4,
          92
        ],
        "output": [
          4,
          16
        ]
      },
      {
        "input": [
          25,
          55,
          49,
          34,
          23,
          25,
          99
        ],
        "output": [
          23,
          25,
          34,
          49,
          55
        ]
      }
    ]
  },
  {
    "id": "c056",
    "difficulty": 147,
    "function": "def c056(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        0,
        74,
        89,
        90,
        17,
        76,
        25
      ],
      "output": [
        0,
        74,
        90,
        17,
        76,
        25
      ]
    },
    "demos": [
      {
        "input": [
          41,
          12,
          80,
          77
        ],
        "output": [
          41,
          12,
          77
        ]
      },
      {
        "input": [
          14,
          43,
          81,
          60,
          35
        ],
        "output": [
          14,
          43,
          60,
          35
        ]
      },
      {
        "input": [
          13,
          27,
          94,
          83,
          10
        ],
        "output": [
          13,
          27,
          83,
          10
        ]
      }
    ]
  },
  {
    "id": "c028",
    "difficulty": 148,
    "function": "def c028(x):\n    # remove element 1 if element 0 > element 1, else remove element 2\n    if x[0] > x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        4,
        63,
        33,
        77,
        29
      ],
      "output": [
        4,
        63,
        77,
        29
      ]
    },
    "demos": [
      {
        "input": [
          13,
          90,
          25,
          58,
          0
        ],
        "output": [
          13,
          90,
          58,
          0
        ]
      },
      {
        "input": [
          5,
          36,
          30,
          27,
          80
        ],
        "output": [
          5,
          36,
          27,
          80
        ]
      },
      {
        "input": [
          4,
          8,
          82,
          83,
          21,
          98,
          68,
          72
        ],
        "output": [
          4,
          8,
          83,
          21,
          98,
          68,
          72
        ]
      }
    ]
  },
  {
    "id": "c220",
    "difficulty": 149,
    "function": "def c220(x):\n    # if input length is even, double each element, else triple each element\n    if len(x) % 2 == 0:\n        return [i*2 for i in x]\n    else:\n        return [i*3 for i in x]\n\n",
    "data": {
      "input": [
        13,
        30,
        62,
        75,
        56
      ],
      "output": [
        39,
        90,
        186,
        225,
        168
      ]
    },
    "demos": [
      {
        "input": [
          16,
          65,
          99,
          95,
          90,
          17
        ],
        "output": [
          32,
          130,
          198,
          190,
          180,
          34
        ]
      },
      {
        "input": [
          29,
          44,
          43,
          81,
          11,
          88,
          98
        ],
        "output": [
          87,
          132,
          129,
          243,
          33,
          264,
          294
        ]
      },
      {
        "input": [
          14,
          1,
          56,
          80,
          76,
          59
        ],
        "output": [
          28,
          2,
          112,
          160,
          152,
          118
        ]
      }
    ]
  },
  {
    "id": "c241",
    "difficulty": 150,
    "function": "def c241(x):\n    # number of even elements\n    return [len([i for i in x if i % 2 == 0])]\n\n",
    "data": {
      "input": [
        2,
        50,
        3,
        9,
        25
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          27,
          66,
          65,
          48
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          30,
          3,
          9,
          51
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          7,
          43,
          77,
          52
        ],
        "output": [
          1
        ]
      }
    ]
  },
  {
    "id": "c060",
    "difficulty": 151,
    "function": "def c060(x):\n    # element 2,1,0,3,4,6 remove the rest\n    return [x[2], x[1], x[0], x[3], x[4], x[6]]\n\n",
    "data": {
      "input": [
        88,
        70,
        43,
        23,
        41,
        64,
        0,
        21,
        38
      ],
      "output": [
        43,
        70,
        88,
        23,
        41,
        0
      ]
    },
    "demos": [
      {
        "input": [
          83,
          29,
          27,
          93,
          47,
          38,
          80,
          24,
          81
        ],
        "output": [
          27,
          29,
          83,
          93,
          47,
          80
        ]
      },
      {
        "input": [
          47,
          11,
          94,
          9,
          69,
          44,
          15,
          94
        ],
        "output": [
          94,
          11,
          47,
          9,
          69,
          15
        ]
      },
      {
        "input": [
          56,
          59,
          48,
          74,
          8,
          88,
          58,
          86,
          36,
          36
        ],
        "output": [
          48,
          59,
          56,
          74,
          8,
          58
        ]
      }
    ]
  },
  {
    "id": "c169",
    "difficulty": 152,
    "function": "def c169(x):\n    # second largest element\n    return [sorted(x)[-2]]\n\n",
    "data": {
      "input": [
        99,
        25,
        70,
        91,
        41,
        88,
        46
      ],
      "output": [
        91
      ]
    },
    "demos": [
      {
        "input": [
          77,
          82,
          85,
          36,
          63,
          27
        ],
        "output": [
          82
        ]
      },
      {
        "input": [
          88,
          56,
          93,
          96,
          8,
          79
        ],
        "output": [
          93
        ]
      },
      {
        "input": [
          59,
          95,
          9,
          65
        ],
        "output": [
          65
        ]
      }
    ]
  },
  {
    "id": "c057",
    "difficulty": 153,
    "function": "def c057(x):\n    # insert a 4 as element 2\n    return x[:2] + [4] + x[2:]\n\n",
    "data": {
      "input": [
        78,
        22,
        78,
        4,
        24
      ],
      "output": [
        78,
        22,
        4,
        78,
        4,
        24
      ]
    },
    "demos": [
      {
        "input": [
          44,
          25,
          40,
          42
        ],
        "output": [
          44,
          25,
          4,
          40,
          42
        ]
      },
      {
        "input": [
          99,
          36,
          12,
          90,
          29
        ],
        "output": [
          99,
          36,
          4,
          12,
          90,
          29
        ]
      },
      {
        "input": [
          24,
          22,
          33,
          51
        ],
        "output": [
          24,
          22,
          4,
          33,
          51
        ]
      }
    ]
  },
  {
    "id": "c150",
    "difficulty": 154,
    "function": "def c150(x):\n    # count from first element to each element if the element is greater than the first element\n    res = []\n    for i in x:\n        if i > x[0]:\n            res += list(range(x[0], i+1))\n        else:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        77,
        80,
        70,
        82,
        55,
        40
      ],
      "output": [
        77,
        77,
        78,
        79,
        80,
        70,
        77,
        78,
        79,
        80,
        81,
        82,
        55,
        40
      ]
    },
    "demos": [
      {
        "input": [
          83,
          19,
          7,
          32,
          9,
          86
        ],
        "output": [
          83,
          19,
          7,
          32,
          9,
          83,
          84,
          85,
          86
        ]
      },
      {
        "input": [
          13,
          1,
          18
        ],
        "output": [
          13,
          1,
          13,
          14,
          15,
          16,
          17,
          18
        ]
      },
      {
        "input": [
          37,
          20,
          47,
          8,
          5
        ],
        "output": [
          37,
          20,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          8,
          5
        ]
      }
    ]
  },
  {
    "id": "c033",
    "difficulty": 155,
    "function": "def c033(x):\n    # swap element 0 and 2\n    x[0], x[2] = x[2], x[0]\n    return x\n\n",
    "data": {
      "input": [
        60,
        16,
        36,
        11,
        35,
        70
      ],
      "output": [
        36,
        16,
        60,
        11,
        35,
        70
      ]
    },
    "demos": [
      {
        "input": [
          89,
          18,
          76,
          80,
          75,
          32,
          68
        ],
        "output": [
          76,
          18,
          89,
          80,
          75,
          32,
          68
        ]
      },
      {
        "input": [
          44,
          61,
          69,
          1,
          11,
          83
        ],
        "output": [
          69,
          61,
          44,
          1,
          11,
          83
        ]
      },
      {
        "input": [
          42,
          97,
          46,
          24
        ],
        "output": [
          46,
          97,
          42,
          24
        ]
      }
    ]
  },
  {
    "id": "c218",
    "difficulty": 156,
    "function": "def c218(x):\n    # keep only second element and following equal to the first element\n    return [x[1]] + [i for i in x[2:] if i == x[0]]\n\n",
    "data": {
      "input": [
        52,
        58,
        40,
        84,
        85,
        5,
        52,
        44,
        48,
        52
      ],
      "output": [
        58,
        52,
        52
      ]
    },
    "demos": [
      {
        "input": [
          28,
          62,
          99,
          28,
          79,
          10,
          28,
          70,
          8,
          26
        ],
        "output": [
          62,
          28,
          28
        ]
      },
      {
        "input": [
          20,
          84,
          13,
          20,
          69
        ],
        "output": [
          84,
          20
        ]
      },
      {
        "input": [
          14,
          14,
          24,
          31,
          61,
          72,
          39
        ],
        "output": [
          14
        ]
      }
    ]
  },
  {
    "id": "c136",
    "difficulty": 158,
    "function": "def c136(x):\n    # remove the first occurrence of the largest element, keep the rest\n    x.remove(max(x))\n    return x\n\n",
    "data": {
      "input": [
        68,
        32,
        82,
        29,
        21
      ],
      "output": [
        68,
        32,
        29,
        21
      ]
    },
    "demos": [
      {
        "input": [
          81,
          66,
          77,
          41,
          67,
          14
        ],
        "output": [
          66,
          77,
          41,
          67,
          14
        ]
      },
      {
        "input": [
          57,
          41,
          78,
          19
        ],
        "output": [
          57,
          41,
          19
        ]
      },
      {
        "input": [
          50,
          87,
          48,
          96,
          0,
          38
        ],
        "output": [
          50,
          87,
          48,
          0,
          38
        ]
      }
    ]
  },
  {
    "id": "c083",
    "difficulty": 159,
    "function": "def c083(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        60,
        71,
        27,
        24,
        49,
        59,
        78
      ],
      "output": [
        78
      ]
    },
    "demos": [
      {
        "input": [
          96,
          56,
          12,
          93,
          37,
          32,
          61,
          18
        ],
        "output": [
          61
        ]
      },
      {
        "input": [
          59,
          53,
          7,
          79,
          52,
          1,
          78
        ],
        "output": [
          78
        ]
      },
      {
        "input": [
          88,
          8,
          42,
          6,
          55,
          8,
          50,
          82
        ],
        "output": [
          50
        ]
      }
    ]
  },
  {
    "id": "c019",
    "difficulty": 160,
    "function": "def c019(x):\n    # replace element 5 with a 3 if there is an element 5\n    if len(x) > 5:\n        x[4] = 3\n    return x\n\n",
    "data": {
      "input": [
        54,
        13,
        87,
        74,
        25
      ],
      "output": [
        54,
        13,
        87,
        74,
        25
      ]
    },
    "demos": [
      {
        "input": [
          19,
          39,
          44,
          75,
          11,
          50
        ],
        "output": [
          19,
          39,
          44,
          75,
          3,
          50
        ]
      },
      {
        "input": [
          95,
          87,
          8,
          21,
          52,
          82,
          90
        ],
        "output": [
          95,
          87,
          8,
          21,
          3,
          82,
          90
        ]
      },
      {
        "input": [
          57,
          52,
          74,
          57
        ],
        "output": [
          57,
          52,
          74,
          57
        ]
      }
    ]
  },
  {
    "id": "c203",
    "difficulty": 161,
    "function": "def c203(x):\n    # the first M positive multiples of the smallest element, M is the length of the input\n    return [min(x)*i for i in range(1, len(x)+1)]\n\n",
    "data": {
      "input": [
        20,
        15,
        2,
        23,
        5,
        19,
        17
      ],
      "output": [
        2,
        4,
        6,
        8,
        10,
        12,
        14
      ]
    },
    "demos": [
      {
        "input": [
          3,
          20,
          1,
          23
        ],
        "output": [
          1,
          2,
          3,
          4
        ]
      },
      {
        "input": [
          23,
          1,
          15,
          9,
          21
        ],
        "output": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      {
        "input": [
          6,
          11,
          12,
          20,
          3
        ],
        "output": [
          3,
          6,
          9,
          12,
          15
        ]
      }
    ]
  },
  {
    "id": "c115",
    "difficulty": 162,
    "function": "def c115(x):\n    # the unique elements, prepended and appended by their sum\n    res = list(set(x))\n    return [sum(res)] + res + [sum(res)]\n\n",
    "data": {
      "input": [
        6,
        6,
        2,
        23,
        6,
        20,
        8,
        17,
        4
      ],
      "output": [
        80,
        2,
        4,
        6,
        8,
        17,
        20,
        23,
        80
      ]
    },
    "demos": [
      {
        "input": [
          12,
          6,
          14,
          12,
          5,
          26,
          14
        ],
        "output": [
          63,
          5,
          6,
          12,
          14,
          26,
          63
        ]
      },
      {
        "input": [
          25,
          15,
          15,
          25,
          18,
          27,
          22
        ],
        "output": [
          107,
          15,
          18,
          22,
          25,
          27,
          107
        ]
      },
      {
        "input": [
          3,
          3,
          20,
          13,
          11,
          18,
          3
        ],
        "output": [
          65,
          3,
          11,
          13,
          18,
          20,
          65
        ]
      }
    ]
  },
  {
    "id": "c207",
    "difficulty": 163,
    "function": "def c207(x):\n    # element-wise sum of the input and the reverse of the input\n    return [i+j for i, j in zip(x, x[::-1])]\n\n",
    "data": {
      "input": [
        24,
        22,
        34,
        27,
        47,
        0,
        16
      ],
      "output": [
        40,
        22,
        81,
        54,
        81,
        22,
        40
      ]
    },
    "demos": [
      {
        "input": [
          6,
          23,
          19,
          23,
          5,
          20
        ],
        "output": [
          26,
          28,
          42,
          42,
          28,
          26
        ]
      },
      {
        "input": [
          10,
          13,
          2,
          24,
          22,
          39,
          29
        ],
        "output": [
          39,
          52,
          24,
          48,
          24,
          52,
          39
        ]
      },
      {
        "input": [
          3,
          1,
          44,
          15,
          47
        ],
        "output": [
          50,
          16,
          88,
          16,
          50
        ]
      }
    ]
  },
  {
    "id": "c088",
    "difficulty": 164,
    "function": "def c088(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        36,
        32,
        28,
        47,
        17,
        43,
        27
      ],
      "output": [
        36,
        28,
        32,
        47,
        17,
        43,
        27
      ]
    },
    "demos": [
      {
        "input": [
          10,
          7,
          7,
          36,
          64,
          53
        ],
        "output": [
          36,
          7,
          7,
          10,
          64,
          53
        ]
      },
      {
        "input": [
          68,
          43,
          43,
          46,
          17,
          1
        ],
        "output": [
          46,
          43,
          43,
          68,
          17,
          1
        ]
      },
      {
        "input": [
          30,
          5,
          48,
          12,
          16
        ],
        "output": [
          30,
          48,
          5,
          12,
          16
        ]
      }
    ]
  },
  {
    "id": "c040",
    "difficulty": 165,
    "function": "def c040(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        8,
        20,
        21,
        29,
        11
      ],
      "output": [
        8,
        20,
        21,
        29,
        11
      ]
    },
    "demos": [
      {
        "input": [
          17,
          20,
          14,
          19,
          26
        ],
        "output": [
          17,
          20,
          14,
          19,
          26
        ]
      },
      {
        "input": [
          23,
          12,
          1,
          7,
          3,
          24,
          3
        ],
        "output": [
          23,
          12,
          1,
          7,
          3,
          24,
          3,
          3
        ]
      },
      {
        "input": [
          16,
          20,
          29,
          20,
          9,
          22,
          8,
          9
        ],
        "output": [
          16,
          20,
          29,
          20,
          9,
          22,
          8,
          9,
          9
        ]
      }
    ]
  },
  {
    "id": "c085",
    "difficulty": 166,
    "function": "def c085(x):\n    # remove all but element N, N=first element\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        2,
        28,
        4,
        7
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          4,
          43,
          0,
          21,
          3
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          0,
          21,
          5,
          15
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          6,
          46,
          14,
          39,
          25,
          21,
          14
        ],
        "output": [
          14
        ]
      }
    ]
  },
  {
    "id": "c111",
    "difficulty": 167,
    "function": "def c111(x):\n    # repeat the largest element N times, where N is the smallest element\n    return [max(x)] * min(x)\n\n",
    "data": {
      "input": [
        28,
        10,
        16,
        10,
        19,
        17,
        4,
        15
      ],
      "output": [
        28,
        28,
        28,
        28
      ]
    },
    "demos": [
      {
        "input": [
          5,
          5,
          14,
          18,
          9
        ],
        "output": [
          18,
          18,
          18,
          18,
          18
        ]
      },
      {
        "input": [
          11,
          14,
          25,
          27,
          8
        ],
        "output": [
          27,
          27,
          27,
          27,
          27,
          27,
          27,
          27
        ]
      },
      {
        "input": [
          30,
          6,
          2,
          8,
          2
        ],
        "output": [
          30,
          30
        ]
      }
    ]
  },
  {
    "id": "c073",
    "difficulty": 168,
    "function": "def c073(x):\n    # add the index to every element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        5,
        29,
        42,
        0,
        26
      ],
      "output": [
        5,
        30,
        44,
        3,
        30
      ]
    },
    "demos": [
      {
        "input": [
          23,
          30,
          3,
          22
        ],
        "output": [
          23,
          31,
          5,
          25
        ]
      },
      {
        "input": [
          5,
          9,
          34,
          24,
          32,
          25
        ],
        "output": [
          5,
          10,
          36,
          27,
          36,
          30
        ]
      },
      {
        "input": [
          5,
          34,
          0,
          11,
          3,
          50
        ],
        "output": [
          5,
          35,
          2,
          14,
          7,
          55
        ]
      }
    ]
  },
  {
    "id": "c027",
    "difficulty": 169,
    "function": "def c027(x):\n    # remove element 1 if element 0 = element 1, else remove element 2\n    if x[0] == x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        48,
        48,
        71,
        80,
        34,
        8
      ],
      "output": [
        48,
        71,
        80,
        34,
        8
      ]
    },
    "demos": [
      {
        "input": [
          5,
          37,
          49,
          11,
          31,
          97,
          94
        ],
        "output": [
          5,
          37,
          11,
          31,
          97,
          94
        ]
      },
      {
        "input": [
          52,
          76,
          73,
          48,
          42,
          79,
          1
        ],
        "output": [
          52,
          76,
          48,
          42,
          79,
          1
        ]
      },
      {
        "input": [
          22,
          22,
          59,
          60,
          42,
          44
        ],
        "output": [
          22,
          59,
          60,
          42,
          44
        ]
      }
    ]
  },
  {
    "id": "c234",
    "difficulty": 170,
    "function": "def c234(x):\n    # repetitions in order of first appearance\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out.append(i)\n    return out\n\n",
    "data": {
      "input": [
        47,
        67,
        54,
        54,
        7,
        54,
        22
      ],
      "output": [
        54
      ]
    },
    "demos": [
      {
        "input": [
          90,
          52,
          37,
          52,
          68,
          52,
          99,
          52,
          0
        ],
        "output": [
          52
        ]
      },
      {
        "input": [
          35,
          35,
          12,
          53,
          7,
          53,
          97,
          12,
          28
        ],
        "output": [
          35,
          12,
          53
        ]
      },
      {
        "input": [
          89,
          39,
          7,
          89,
          71,
          75,
          36,
          39
        ],
        "output": [
          89,
          39
        ]
      }
    ]
  },
  {
    "id": "c165",
    "difficulty": 171,
    "function": "def c165(x):\n    # reverse the input and keep only even elements\n    return [i for i in x[::-1] if i % 2 == 0]\n\n",
    "data": {
      "input": [
        36,
        53,
        6,
        53,
        91,
        28,
        75,
        88
      ],
      "output": [
        88,
        28,
        6,
        36
      ]
    },
    "demos": [
      {
        "input": [
          25,
          44,
          92,
          65,
          21,
          25,
          51
        ],
        "output": [
          92,
          44
        ]
      },
      {
        "input": [
          14,
          93,
          41,
          77,
          55,
          7,
          87
        ],
        "output": [
          14
        ]
      },
      {
        "input": [
          29,
          38,
          69,
          1,
          65,
          47,
          28,
          85
        ],
        "output": [
          28,
          38
        ]
      }
    ]
  },
  {
    "id": "c191",
    "difficulty": 172,
    "function": "def c191(x):\n    # repeat each element N times, where N is its tens digit\n    out = []\n    for i in x:\n        if len(str(i)) > 1:\n            out += [i] * int(str(i)[-2])\n    return out\n\n",
    "data": {
      "input": [
        30,
        3,
        11,
        11
      ],
      "output": [
        30,
        30,
        30,
        11,
        11
      ]
    },
    "demos": [
      {
        "input": [
          16,
          40,
          12,
          27,
          27
        ],
        "output": [
          16,
          40,
          40,
          40,
          40,
          12,
          27,
          27,
          27,
          27
        ]
      },
      {
        "input": [
          18,
          18,
          35,
          37,
          26
        ],
        "output": [
          18,
          18,
          35,
          35,
          35,
          37,
          37,
          37,
          26,
          26
        ]
      },
      {
        "input": [
          25,
          24,
          35,
          22,
          6,
          4,
          28
        ],
        "output": [
          25,
          25,
          24,
          24,
          35,
          35,
          35,
          22,
          22,
          28,
          28
        ]
      }
    ]
  },
  {
    "id": "c026",
    "difficulty": 173,
    "function": "def c026(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        94,
        69,
        24,
        9
      ],
      "output": [
        94,
        69,
        9
      ]
    },
    "demos": [
      {
        "input": [
          62,
          38,
          91,
          25,
          17,
          62,
          53
        ],
        "output": [
          62,
          38,
          25,
          17,
          62,
          53
        ]
      },
      {
        "input": [
          96,
          76,
          76,
          62,
          64,
          1
        ],
        "output": [
          96,
          76,
          62,
          64,
          1
        ]
      },
      {
        "input": [
          78,
          5,
          37,
          79,
          58
        ],
        "output": [
          78,
          5,
          79,
          58
        ]
      }
    ]
  },
  {
    "id": "c059",
    "difficulty": 174,
    "function": "def c059(x):\n    # swap element 2 and element 5\n    x[2], x[5] = x[5], x[2]\n    return x\n\n",
    "data": {
      "input": [
        88,
        27,
        91,
        47,
        43,
        94,
        84,
        62
      ],
      "output": [
        88,
        27,
        94,
        47,
        43,
        91,
        84,
        62
      ]
    },
    "demos": [
      {
        "input": [
          28,
          8,
          34,
          14,
          13,
          37,
          13
        ],
        "output": [
          28,
          8,
          37,
          14,
          13,
          34,
          13
        ]
      },
      {
        "input": [
          23,
          86,
          43,
          47,
          92,
          64,
          42,
          29
        ],
        "output": [
          23,
          86,
          64,
          47,
          92,
          43,
          42,
          29
        ]
      },
      {
        "input": [
          36,
          15,
          34,
          2,
          29,
          75,
          16
        ],
        "output": [
          36,
          15,
          75,
          2,
          29,
          34,
          16
        ]
      }
    ]
  },
  {
    "id": "c074",
    "difficulty": 175,
    "function": "def c074(x):\n    # remove every element whose value < 8\n    return [i for i in x if i >= 8]\n\n",
    "data": {
      "input": [
        10,
        36,
        16,
        27,
        16,
        8,
        14,
        26
      ],
      "output": [
        10,
        36,
        16,
        27,
        16,
        8,
        14,
        26
      ]
    },
    "demos": [
      {
        "input": [
          11,
          7,
          14,
          15,
          23
        ],
        "output": [
          11,
          14,
          15,
          23
        ]
      },
      {
        "input": [
          8,
          13,
          1,
          13,
          18,
          0
        ],
        "output": [
          8,
          13,
          13,
          18
        ]
      },
      {
        "input": [
          21,
          28,
          7,
          23,
          20,
          30
        ],
        "output": [
          21,
          28,
          23,
          20,
          30
        ]
      }
    ]
  },
  {
    "id": "c173",
    "difficulty": 176,
    "function": "def c173(x):\n    # replace element N with the largest element in element 0 through N\n    for i in range(len(x)):\n        x[i] = max(x[:i+1])\n    return x\n\n",
    "data": {
      "input": [
        0,
        90,
        57,
        97,
        18,
        46
      ],
      "output": [
        0,
        90,
        90,
        97,
        97,
        97
      ]
    },
    "demos": [
      {
        "input": [
          9,
          33,
          33,
          59,
          68,
          36,
          20,
          63
        ],
        "output": [
          9,
          33,
          33,
          59,
          68,
          68,
          68,
          68
        ]
      },
      {
        "input": [
          33,
          2,
          25,
          24,
          81,
          58
        ],
        "output": [
          33,
          33,
          33,
          33,
          81,
          81
        ]
      },
      {
        "input": [
          2,
          56,
          27,
          91,
          0,
          41,
          13,
          16
        ],
        "output": [
          2,
          56,
          56,
          91,
          91,
          91,
          91,
          91
        ]
      }
    ]
  },
  {
    "id": "c175",
    "difficulty": 177,
    "function": "def c175(x):\n    # keep only elements larger than any preceding element\n    res = [x[0]]\n    for i in x[1:]:\n        if i > res[-1]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        46,
        79,
        72,
        83,
        41,
        49,
        47
      ],
      "output": [
        46,
        79,
        83
      ]
    },
    "demos": [
      {
        "input": [
          5,
          10,
          25,
          57,
          2,
          37,
          82,
          29
        ],
        "output": [
          5,
          10,
          25,
          57,
          82
        ]
      },
      {
        "input": [
          63,
          74,
          48,
          91,
          25,
          9,
          91,
          69
        ],
        "output": [
          63,
          74,
          91
        ]
      },
      {
        "input": [
          46,
          24,
          88,
          10,
          68,
          64,
          84,
          24
        ],
        "output": [
          46,
          88
        ]
      }
    ]
  },
  {
    "id": "c204",
    "difficulty": 178,
    "function": "def c204(x):\n    # keep only elements followed by 0\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] == 0:\n            res.append(x[i])\n    return res\n\n",
    "data": {
      "input": [
        20,
        0,
        15,
        12,
        10,
        29,
        16,
        0,
        0
      ],
      "output": [
        20,
        16,
        0
      ]
    },
    "demos": [
      {
        "input": [
          2,
          25,
          13,
          12,
          3,
          24,
          22
        ],
        "output": []
      },
      {
        "input": [
          26,
          21,
          0,
          0,
          5,
          0,
          24,
          30,
          24,
          15
        ],
        "output": [
          21,
          0,
          5
        ]
      },
      {
        "input": [
          23,
          21,
          21,
          0,
          27,
          13,
          3,
          0
        ],
        "output": [
          21,
          3
        ]
      }
    ]
  },
  {
    "id": "c031",
    "difficulty": 179,
    "function": "def c031(x):\n    # remove whichever are equal, the first 2 elements or the last 2 elements\n    if x[0] == x[1]:\n        return x[2:]\n    elif x[-1] == x[-2]:\n        return x[:-2]\n    return x\n\n",
    "data": {
      "input": [
        28,
        69,
        12,
        92,
        3,
        3
      ],
      "output": [
        28,
        69,
        12,
        92
      ]
    },
    "demos": [
      {
        "input": [
          25,
          25,
          25,
          20,
          55,
          76,
          37
        ],
        "output": [
          25,
          20,
          55,
          76,
          37
        ]
      },
      {
        "input": [
          14,
          14,
          90,
          1,
          82,
          62
        ],
        "output": [
          90,
          1,
          82,
          62
        ]
      },
      {
        "input": [
          77,
          8,
          81,
          22,
          86,
          9
        ],
        "output": [
          77,
          8,
          81,
          22,
          86,
          9
        ]
      }
    ]
  },
  {
    "id": "c236",
    "difficulty": 180,
    "function": "def c236(x):\n    # even elements divided by 2\n    return [i//2 for i in x if i % 2 == 0]\n\n",
    "data": {
      "input": [
        13,
        93,
        35,
        44,
        29,
        84,
        67,
        66,
        55
      ],
      "output": [
        22,
        42,
        33
      ]
    },
    "demos": [
      {
        "input": [
          71,
          51,
          87,
          75,
          94,
          46,
          48,
          32,
          83,
          76
        ],
        "output": [
          47,
          23,
          24,
          16,
          38
        ]
      },
      {
        "input": [
          20,
          2,
          51,
          25,
          21,
          68,
          51,
          93,
          63
        ],
        "output": [
          10,
          1,
          34
        ]
      },
      {
        "input": [
          20,
          60,
          63,
          89,
          71,
          99,
          7,
          48,
          17,
          29
        ],
        "output": [
          10,
          30,
          24
        ]
      }
    ]
  },
  {
    "id": "c054",
    "difficulty": 181,
    "function": "def c054(x):\n    # replace element 0 and 1 with element 2\n    x[0] = x[2]\n    x[1] = x[2]\n    return x\n\n",
    "data": {
      "input": [
        2,
        92,
        35,
        17,
        69
      ],
      "output": [
        35,
        35,
        35,
        17,
        69
      ]
    },
    "demos": [
      {
        "input": [
          23,
          91,
          49,
          32
        ],
        "output": [
          49,
          49,
          49,
          32
        ]
      },
      {
        "input": [
          36,
          57,
          67,
          31,
          49
        ],
        "output": [
          67,
          67,
          67,
          31,
          49
        ]
      },
      {
        "input": [
          89,
          10,
          83,
          28,
          65,
          89,
          71
        ],
        "output": [
          83,
          83,
          83,
          28,
          65,
          89,
          71
        ]
      }
    ]
  },
  {
    "id": "c227",
    "difficulty": 182,
    "function": "def c227(x):\n    # interleave the input and reversed input, keep only unique elements in order of appearance\n    res = []\n    mid = len(x) // 2\n    for i in range(mid):\n        if x[i] not in res:\n            res.append(x[i])\n        if x[-i-1] not in res:\n            res.append(x[-i-1])\n    if len(x) % 2 == 1 and x[mid] not in res:\n        res.append(x[mid])\n    return res\n\n",
    "data": {
      "input": [
        40,
        80,
        97,
        34,
        51,
        9
      ],
      "output": [
        40,
        9,
        80,
        51,
        97,
        34
      ]
    },
    "demos": [
      {
        "input": [
          32,
          39,
          15,
          56,
          64
        ],
        "output": [
          32,
          64,
          39,
          56,
          15
        ]
      },
      {
        "input": [
          21,
          68,
          16,
          28,
          85,
          73
        ],
        "output": [
          21,
          73,
          68,
          85,
          16,
          28
        ]
      },
      {
        "input": [
          69,
          76,
          45,
          85,
          80,
          74,
          0,
          22
        ],
        "output": [
          69,
          22,
          76,
          0,
          45,
          74,
          85,
          80
        ]
      }
    ]
  },
  {
    "id": "c024",
    "difficulty": 183,
    "function": "def c024(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        0,
        12,
        16,
        0,
        1,
        11,
        19
      ],
      "output": [
        0,
        5,
        12,
        16,
        0,
        1,
        11,
        19
      ]
    },
    "demos": [
      {
        "input": [
          9,
          1,
          15,
          5
        ],
        "output": [
          9,
          8,
          1,
          15,
          5
        ]
      },
      {
        "input": [
          11,
          4,
          14,
          2,
          2,
          4
        ],
        "output": [
          11,
          8,
          4,
          14,
          2,
          2,
          4
        ]
      },
      {
        "input": [
          9,
          11,
          5,
          20,
          7,
          20
        ],
        "output": [
          9,
          8,
          11,
          5,
          20,
          7,
          20
        ]
      }
    ]
  },
  {
    "id": "c200",
    "difficulty": 184,
    "function": "def c200(x):\n    # tens digits of the elements in ascending order\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append(int(str(i)[-2]))\n        else:\n            res.append(0)\n    return sorted(res)\n\n",
    "data": {
      "input": [
        48,
        93,
        42,
        97,
        89
      ],
      "output": [
        4,
        4,
        8,
        9,
        9
      ]
    },
    "demos": [
      {
        "input": [
          99,
          99,
          20,
          58,
          81,
          10,
          92,
          6
        ],
        "output": [
          0,
          1,
          2,
          5,
          8,
          9,
          9,
          9
        ]
      },
      {
        "input": [
          9,
          90,
          37,
          23,
          74,
          94
        ],
        "output": [
          0,
          2,
          3,
          7,
          9,
          9
        ]
      },
      {
        "input": [
          20,
          24,
          0,
          2,
          47,
          76
        ],
        "output": [
          0,
          0,
          2,
          2,
          4,
          7
        ]
      }
    ]
  },
  {
    "id": "c010",
    "difficulty": 185,
    "function": "def c010(x):\n    # elements 1 through N + 1, N is the first element\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        2,
        13,
        8,
        3,
        1,
        4
      ],
      "output": [
        13,
        8
      ]
    },
    "demos": [
      {
        "input": [
          1,
          10,
          17,
          14,
          8
        ],
        "output": [
          10
        ]
      },
      {
        "input": [
          6,
          14,
          8,
          13,
          17,
          11,
          18
        ],
        "output": [
          14,
          8,
          13,
          17,
          11,
          18
        ]
      },
      {
        "input": [
          5,
          3,
          13,
          11,
          5
        ],
        "output": [
          3,
          13,
          11,
          5
        ]
      }
    ]
  },
  {
    "id": "c123",
    "difficulty": 186,
    "function": "def c123(x):\n    # remove all but element N, N is the last element\n    return [x[x[-1]]]\n\n",
    "data": {
      "input": [
        2,
        3,
        16,
        16,
        1
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          0,
          7,
          19,
          20,
          1,
          0
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          17,
          10,
          0,
          15,
          8,
          1
        ],
        "output": [
          10
        ]
      },
      {
        "input": [
          13,
          10,
          8,
          8,
          1,
          13,
          2
        ],
        "output": [
          8
        ]
      }
    ]
  },
  {
    "id": "c023",
    "difficulty": 187,
    "function": "def c023(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        9,
        5,
        9,
        6,
        17,
        6
      ],
      "output": [
        9,
        8,
        5,
        9,
        6,
        17,
        6
      ]
    },
    "demos": [
      {
        "input": [
          14,
          2,
          11,
          0,
          1,
          13,
          7,
          10
        ],
        "output": [
          14,
          8,
          2,
          11,
          0,
          1,
          13,
          7,
          10
        ]
      },
      {
        "input": [
          2,
          13,
          16,
          6,
          19,
          5,
          5,
          5
        ],
        "output": [
          2,
          5,
          13,
          16,
          6,
          19,
          5,
          5,
          5
        ]
      },
      {
        "input": [
          5,
          7,
          16,
          11,
          13,
          9,
          16,
          2
        ],
        "output": [
          5,
          5,
          7,
          16,
          11,
          13,
          9,
          16,
          2
        ]
      }
    ]
  },
  {
    "id": "c194",
    "difficulty": 188,
    "function": "def c194(x):\n    # reverse the input; prepend and append the length of the input\n    return [len(x)] + x[::-1] + [len(x)]\n\n",
    "data": {
      "input": [
        19,
        19,
        13,
        3,
        13,
        15,
        1
      ],
      "output": [
        7,
        1,
        15,
        13,
        3,
        13,
        19,
        19,
        7
      ]
    },
    "demos": [
      {
        "input": [
          5,
          0,
          14,
          1,
          2,
          8,
          2
        ],
        "output": [
          7,
          2,
          8,
          2,
          1,
          14,
          0,
          5,
          7
        ]
      },
      {
        "input": [
          16,
          8,
          3,
          4,
          18
        ],
        "output": [
          5,
          18,
          4,
          3,
          8,
          16,
          5
        ]
      },
      {
        "input": [
          17,
          13,
          6,
          19,
          10,
          15,
          6,
          4
        ],
        "output": [
          8,
          4,
          6,
          15,
          10,
          19,
          6,
          13,
          17,
          8
        ]
      }
    ]
  },
  {
    "id": "c245",
    "difficulty": 189,
    "function": "def c245(x):\n    # number of times element 0 appears in the following elements\n    return [x[1:].count(x[0])]\n\n",
    "data": {
      "input": [
        2,
        14,
        2,
        6,
        8,
        1,
        16
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          9,
          7,
          7,
          13,
          15,
          11,
          10
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          12,
          2,
          12,
          4,
          2,
          12,
          19
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          9,
          9,
          11,
          20,
          13,
          5,
          18,
          9
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c032",
    "difficulty": 190,
    "function": "def c032(x):\n    # remove first 2 elements if element 0 > last element, else remove last 2 elements\n    if x[0] > x[-1]:\n        return x[2:]\n    else:\n        return x[:-2]\n    \n",
    "data": {
      "input": [
        64,
        47,
        80,
        55,
        9
      ],
      "output": [
        80,
        55,
        9
      ]
    },
    "demos": [
      {
        "input": [
          61,
          83,
          5,
          46,
          76,
          96,
          55
        ],
        "output": [
          5,
          46,
          76,
          96,
          55
        ]
      },
      {
        "input": [
          14,
          89,
          45,
          43,
          26,
          3
        ],
        "output": [
          45,
          43,
          26,
          3
        ]
      },
      {
        "input": [
          60,
          52,
          56,
          97,
          17,
          19,
          57
        ],
        "output": [
          56,
          97,
          17,
          19,
          57
        ]
      }
    ]
  },
  {
    "id": "c058",
    "difficulty": 191,
    "function": "def c058(x):\n    # remove the first 5 elements\n    return x[5:]\n\n",
    "data": {
      "input": [
        51,
        52,
        78,
        26,
        78,
        25,
        77
      ],
      "output": [
        25,
        77
      ]
    },
    "demos": [
      {
        "input": [
          46,
          36,
          86,
          77,
          89,
          63,
          14
        ],
        "output": [
          63,
          14
        ]
      },
      {
        "input": [
          85,
          61,
          53,
          29
        ],
        "output": []
      },
      {
        "input": [
          74,
          58,
          81,
          38
        ],
        "output": []
      }
    ]
  },
  {
    "id": "c174",
    "difficulty": 192,
    "function": "def c174(x):\n    # keep the first M elements, where M is the number of unique elements\n    return x[:len(set(x))]\n\n",
    "data": {
      "input": [
        40,
        92,
        32,
        47,
        0
      ],
      "output": [
        40,
        92,
        32,
        47,
        0
      ]
    },
    "demos": [
      {
        "input": [
          80,
          23,
          17,
          82,
          82,
          17,
          97
        ],
        "output": [
          80,
          23,
          17,
          82,
          82
        ]
      },
      {
        "input": [
          46,
          78,
          65,
          62,
          78,
          27,
          22,
          16,
          65,
          78
        ],
        "output": [
          46,
          78,
          65,
          62,
          78,
          27,
          22
        ]
      },
      {
        "input": [
          33,
          94,
          71,
          50,
          54,
          33,
          71,
          33,
          42,
          71
        ],
        "output": [
          33,
          94,
          71,
          50,
          54,
          33
        ]
      }
    ]
  },
  {
    "id": "c229",
    "difficulty": 193,
    "function": "def c229(x):\n    # keep only first N elements of the reversed input, N is the first element\n    length = x[0]\n    return x[::-1][:length]\n\n",
    "data": {
      "input": [
        4,
        27,
        65,
        26,
        91
      ],
      "output": [
        91,
        26,
        65,
        27
      ]
    },
    "demos": [
      {
        "input": [
          0,
          40,
          87,
          68,
          88
        ],
        "output": []
      },
      {
        "input": [
          6,
          22,
          97,
          11,
          29,
          41
        ],
        "output": [
          41,
          29,
          11,
          97,
          22,
          6
        ]
      },
      {
        "input": [
          0,
          90,
          23,
          37,
          52
        ],
        "output": []
      }
    ]
  },
  {
    "id": "c162",
    "difficulty": 194,
    "function": "def c162(x):\n    # replace each element M with 3 * M + 7\n    return [3*i+7 for i in x]\n\n",
    "data": {
      "input": [
        2,
        22,
        12,
        18,
        4,
        0
      ],
      "output": [
        13,
        73,
        43,
        61,
        19,
        7
      ]
    },
    "demos": [
      {
        "input": [
          2,
          22,
          7,
          3,
          12,
          0
        ],
        "output": [
          13,
          73,
          28,
          16,
          43,
          7
        ]
      },
      {
        "input": [
          23,
          18,
          2,
          21,
          29,
          21
        ],
        "output": [
          76,
          61,
          13,
          70,
          94,
          70
        ]
      },
      {
        "input": [
          16,
          5,
          26,
          14,
          19,
          16,
          15,
          5
        ],
        "output": [
          55,
          22,
          85,
          49,
          64,
          55,
          52,
          22
        ]
      }
    ]
  },
  {
    "id": "c039",
    "difficulty": 195,
    "function": "def c039(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        6,
        20,
        50,
        3,
        3,
        3,
        32,
        23,
        19
      ],
      "output": [
        6,
        20,
        50,
        3,
        3,
        3,
        32,
        23,
        19,
        3
      ]
    },
    "demos": [
      {
        "input": [
          12,
          50,
          17,
          18,
          18,
          23,
          31,
          3
        ],
        "output": [
          12,
          50,
          17,
          18,
          18,
          23,
          31,
          3,
          3
        ]
      },
      {
        "input": [
          18,
          1,
          4,
          43,
          37,
          46
        ],
        "output": [
          18,
          1,
          4,
          43,
          37,
          46
        ]
      },
      {
        "input": [
          49,
          6,
          39,
          12,
          10,
          9,
          42
        ],
        "output": [
          49,
          6,
          39,
          12,
          10,
          9,
          42,
          9
        ]
      }
    ]
  },
  {
    "id": "c181",
    "difficulty": 196,
    "function": "def c181(x):\n    # reverse the order of elements with even index\n    return [x[i] if i % 2 == 1 else x[-i-1] for i in range(len(x))]\n\n",
    "data": {
      "input": [
        25,
        17,
        3,
        76,
        23,
        43,
        71,
        10
      ],
      "output": [
        10,
        17,
        43,
        76,
        76,
        43,
        17,
        10
      ]
    },
    "demos": [
      {
        "input": [
          50,
          89,
          20,
          77,
          28,
          94
        ],
        "output": [
          94,
          89,
          77,
          77,
          89,
          94
        ]
      },
      {
        "input": [
          97,
          61,
          13,
          56,
          18,
          55,
          37,
          55
        ],
        "output": [
          55,
          61,
          55,
          56,
          56,
          55,
          61,
          55
        ]
      },
      {
        "input": [
          50,
          28,
          36,
          1,
          6,
          73,
          46,
          30
        ],
        "output": [
          30,
          28,
          73,
          1,
          1,
          73,
          28,
          30
        ]
      }
    ]
  },
  {
    "id": "c163",
    "difficulty": 197,
    "function": "def c163(x):\n    # replace each element M with 2 * M - 10\n    return [2*i-10 for i in x]\n\n",
    "data": {
      "input": [
        87,
        55,
        54,
        24,
        77,
        55,
        46,
        87
      ],
      "output": [
        164,
        100,
        98,
        38,
        144,
        100,
        82,
        164
      ]
    },
    "demos": [
      {
        "input": [
          96,
          84,
          66,
          10,
          23,
          14
        ],
        "output": [
          182,
          158,
          122,
          10,
          36,
          18
        ]
      },
      {
        "input": [
          35,
          71,
          12,
          42,
          82,
          62,
          20
        ],
        "output": [
          60,
          132,
          14,
          74,
          154,
          114,
          30
        ]
      },
      {
        "input": [
          28,
          27,
          80,
          58,
          12,
          75
        ],
        "output": [
          46,
          44,
          150,
          106,
          14,
          140
        ]
      }
    ]
  },
  {
    "id": "c154",
    "difficulty": 198,
    "function": "def c154(x):\n    # triple each even element\n    return [i*3 if i % 2 == 0 else i for i in x]\n\n",
    "data": {
      "input": [
        10,
        26,
        3,
        33,
        0,
        31,
        12
      ],
      "output": [
        30,
        78,
        3,
        33,
        0,
        31,
        36
      ]
    },
    "demos": [
      {
        "input": [
          22,
          30,
          19,
          33,
          33,
          11
        ],
        "output": [
          66,
          90,
          19,
          33,
          33,
          11
        ]
      },
      {
        "input": [
          19,
          23,
          18,
          18,
          19,
          8,
          17
        ],
        "output": [
          19,
          23,
          54,
          54,
          19,
          24,
          17
        ]
      },
      {
        "input": [
          5,
          0,
          30,
          24,
          29
        ],
        "output": [
          5,
          0,
          90,
          72,
          29
        ]
      }
    ]
  },
  {
    "id": "c166",
    "difficulty": 199,
    "function": "def c166(x):\n    # unique elements in ascending order by the sum of their digits\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = sum(map(int, str(i)))\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        54,
        63,
        47,
        5,
        57
      ],
      "output": [
        5,
        54,
        63,
        47,
        57
      ]
    },
    "demos": [
      {
        "input": [
          4,
          97,
          28,
          4,
          22,
          22,
          2
        ],
        "output": [
          2,
          4,
          22,
          28,
          97
        ]
      },
      {
        "input": [
          6,
          7,
          23,
          23,
          72,
          54
        ],
        "output": [
          23,
          6,
          7,
          72,
          54
        ]
      },
      {
        "input": [
          3,
          39,
          97,
          48,
          39
        ],
        "output": [
          3,
          39,
          48,
          97
        ]
      }
    ]
  },
  {
    "id": "c084",
    "difficulty": 200,
    "function": "def c084(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        38,
        98,
        84,
        16,
        20,
        26,
        16,
        90
      ],
      "output": [
        16
      ]
    },
    "demos": [
      {
        "input": [
          51,
          10,
          6,
          23,
          60,
          11,
          32,
          66
        ],
        "output": [
          32
        ]
      },
      {
        "input": [
          99,
          62,
          77,
          11,
          68,
          27,
          40
        ],
        "output": [
          40
        ]
      },
      {
        "input": [
          53,
          56,
          61,
          50,
          79,
          30,
          19
        ],
        "output": [
          19
        ]
      }
    ]
  },
  {
    "id": "c249",
    "difficulty": 201,
    "function": "def c249(x):\n    # use 0s to delimit sublists, give the first element of each sublist\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            if sublist:\n                res.append(sublist[0])\n                sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res.append(sublist[0])\n    return res\n\n",
    "data": {
      "input": [
        23,
        38,
        0,
        0,
        64,
        73,
        39,
        86
      ],
      "output": [
        23,
        64
      ]
    },
    "demos": [
      {
        "input": [
          20,
          1,
          91,
          12,
          62,
          97,
          56
        ],
        "output": [
          20
        ]
      },
      {
        "input": [
          29,
          0,
          30,
          0,
          22,
          77,
          92,
          60,
          35,
          32,
          0,
          79
        ],
        "output": [
          29,
          30,
          22,
          79
        ]
      },
      {
        "input": [
          4,
          46,
          99,
          0,
          11,
          41,
          34,
          99
        ],
        "output": [
          4,
          11
        ]
      }
    ]
  },
  {
    "id": "c118",
    "difficulty": 202,
    "function": "def c118(x):\n    # left rotate by N elements, N is the last element\n    return x[x[-1]:] + x[:x[-1]]\n\n",
    "data": {
      "input": [
        69,
        89,
        28,
        46,
        1,
        23,
        39,
        1
      ],
      "output": [
        89,
        28,
        46,
        1,
        23,
        39,
        1,
        69
      ]
    },
    "demos": [
      {
        "input": [
          3,
          41,
          55,
          32,
          45,
          6,
          4
        ],
        "output": [
          45,
          6,
          4,
          3,
          41,
          55,
          32
        ]
      },
      {
        "input": [
          44,
          36,
          95,
          15,
          1,
          37,
          1
        ],
        "output": [
          36,
          95,
          15,
          1,
          37,
          1,
          44
        ]
      },
      {
        "input": [
          12,
          33,
          18,
          22,
          4,
          18,
          38,
          30,
          7
        ],
        "output": [
          30,
          7,
          12,
          33,
          18,
          22,
          4,
          18,
          38
        ]
      }
    ]
  },
  {
    "id": "c152",
    "difficulty": 203,
    "function": "def c152(x):\n    # replace each element with the product of its digits\n    res = []\n    for i in x:\n        if i < 10:\n            res.append(0)\n        else:\n            res.append(int(str(i)[0]) * int(str(i)[1]))\n    return res\n\n",
    "data": {
      "input": [
        72,
        99,
        82,
        63,
        71
      ],
      "output": [
        14,
        81,
        16,
        18,
        7
      ]
    },
    "demos": [
      {
        "input": [
          91,
          44,
          34,
          35,
          90,
          24,
          67,
          71
        ],
        "output": [
          9,
          16,
          12,
          15,
          0,
          8,
          42,
          7
        ]
      },
      {
        "input": [
          32,
          93,
          9,
          7,
          84,
          83,
          95
        ],
        "output": [
          6,
          27,
          0,
          0,
          32,
          24,
          45
        ]
      },
      {
        "input": [
          73,
          5,
          37,
          47,
          23
        ],
        "output": [
          21,
          0,
          21,
          28,
          6
        ]
      }
    ]
  },
  {
    "id": "c237",
    "difficulty": 204,
    "function": "def c237(x):\n    # cumulative sum of unique elements\n    res = []\n    s = 0\n    for i in x:\n        if i not in res:\n            res.append(i)\n    for i in range(len(res)):\n        s += res[i]\n        res[i] = s\n    return res\n\n",
    "data": {
      "input": [
        17,
        17,
        11,
        17,
        23,
        11,
        6,
        23,
        17
      ],
      "output": [
        17,
        28,
        51,
        57
      ]
    },
    "demos": [
      {
        "input": [
          0,
          9,
          13,
          9,
          12,
          29,
          0
        ],
        "output": [
          0,
          9,
          22,
          34,
          63
        ]
      },
      {
        "input": [
          14,
          8,
          8,
          28,
          21,
          14,
          8,
          28
        ],
        "output": [
          14,
          22,
          50,
          71
        ]
      },
      {
        "input": [
          21,
          10,
          5,
          20,
          20,
          21
        ],
        "output": [
          21,
          31,
          36,
          56
        ]
      }
    ]
  },
  {
    "id": "c243",
    "difficulty": 205,
    "function": "def c243(x):\n    # number of odd elements\n    return [len([i for i in x if i % 2 == 1])]\n\n",
    "data": {
      "input": [
        34,
        73,
        26,
        41,
        18,
        19
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          62,
          54,
          83,
          25,
          55,
          28
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          11,
          7,
          11,
          41,
          62,
          98,
          84
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          51,
          88,
          12,
          70,
          64,
          83
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c188",
    "difficulty": 206,
    "function": "def c188(x):\n    # replace each element with 1 if it is divisible by 3, else replace with 0\n    return [1 if i % 3 == 0 else 0 for i in x]\n\n",
    "data": {
      "input": [
        26,
        18,
        12,
        4,
        7,
        90,
        96
      ],
      "output": [
        0,
        1,
        1,
        0,
        0,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          50,
          69,
          52,
          62,
          20,
          54
        ],
        "output": [
          0,
          1,
          0,
          0,
          0,
          1
        ]
      },
      {
        "input": [
          91,
          91,
          26,
          69,
          83,
          82,
          19,
          55
        ],
        "output": [
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          25,
          39,
          87,
          92,
          17,
          85
        ],
        "output": [
          0,
          1,
          1,
          0,
          0,
          0
        ]
      }
    ]
  },
  {
    "id": "c139",
    "difficulty": 207,
    "function": "def c139(x):\n    # remove all occurrences of the smallest element and the largest element\n    min_val = min(x)\n    max_val = max(x)\n    return [i for i in x if i != min_val and i != max_val]\n\n",
    "data": {
      "input": [
        4,
        8,
        2,
        0,
        2
      ],
      "output": [
        4,
        2,
        2
      ]
    },
    "demos": [
      {
        "input": [
          5,
          10,
          5,
          4,
          4,
          3
        ],
        "output": [
          5,
          5,
          4,
          4
        ]
      },
      {
        "input": [
          2,
          5,
          3,
          3,
          9,
          1
        ],
        "output": [
          2,
          5,
          3,
          3
        ]
      },
      {
        "input": [
          0,
          7,
          1,
          1,
          5,
          2,
          2
        ],
        "output": [
          1,
          1,
          5,
          2,
          2
        ]
      }
    ]
  },
  {
    "id": "c036",
    "difficulty": 208,
    "function": "def c036(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        10,
        8,
        7,
        10,
        9
      ],
      "output": [
        10,
        9,
        7,
        10,
        8
      ]
    },
    "demos": [
      {
        "input": [
          6,
          3,
          8,
          10,
          0
        ],
        "output": [
          6,
          0,
          8,
          10,
          3
        ]
      },
      {
        "input": [
          9,
          10,
          4,
          10,
          0,
          0,
          9
        ],
        "output": [
          9,
          0,
          4,
          10,
          10,
          0,
          9
        ]
      },
      {
        "input": [
          3,
          8,
          9,
          9,
          1,
          1,
          9,
          3
        ],
        "output": [
          3,
          1,
          9,
          9,
          8,
          1,
          9,
          3
        ]
      }
    ]
  },
  {
    "id": "c201",
    "difficulty": 209,
    "function": "def c201(x):\n    # elements > first element, followed by elements < first element\n    return [i for i in x if i > x[0]] + [i for i in x if i < x[0]]\n\n",
    "data": {
      "input": [
        75,
        88,
        86,
        10,
        74,
        79
      ],
      "output": [
        88,
        86,
        79,
        10,
        74
      ]
    },
    "demos": [
      {
        "input": [
          46,
          9,
          56,
          72,
          59,
          95,
          49
        ],
        "output": [
          56,
          72,
          59,
          95,
          49,
          9
        ]
      },
      {
        "input": [
          35,
          36,
          7,
          40,
          23,
          32,
          78
        ],
        "output": [
          36,
          40,
          78,
          7,
          23,
          32
        ]
      },
      {
        "input": [
          41,
          18,
          7,
          98,
          63,
          70,
          15,
          82
        ],
        "output": [
          98,
          63,
          70,
          82,
          18,
          7,
          15
        ]
      }
    ]
  },
  {
    "id": "c217",
    "difficulty": 210,
    "function": "def c217(x):\n    # elements in ascending order by ones digit\n    return sorted(x, key=lambda i: i % 10)\n\n",
    "data": {
      "input": [
        65,
        18,
        99,
        18,
        76,
        44,
        21,
        28
      ],
      "output": [
        21,
        44,
        65,
        76,
        18,
        18,
        28,
        99
      ]
    },
    "demos": [
      {
        "input": [
          15,
          97,
          44,
          25,
          64
        ],
        "output": [
          44,
          64,
          15,
          25,
          97
        ]
      },
      {
        "input": [
          67,
          54,
          53,
          82,
          23
        ],
        "output": [
          82,
          53,
          23,
          54,
          67
        ]
      },
      {
        "input": [
          58,
          5,
          64,
          9,
          63,
          78
        ],
        "output": [
          63,
          64,
          5,
          58,
          78,
          9
        ]
      }
    ]
  },
  {
    "id": "c005",
    "difficulty": 211,
    "function": "def c005(x):\n    # remove all but element N + 1, N is the first element\n    return [x[x[0]+1]]\n\n",
    "data": {
      "input": [
        1,
        56,
        39,
        26,
        93,
        71,
        15,
        62
      ],
      "output": [
        39
      ]
    },
    "demos": [
      {
        "input": [
          1,
          32,
          73,
          77,
          64
        ],
        "output": [
          73
        ]
      },
      {
        "input": [
          0,
          59,
          89,
          10,
          17,
          42,
          64,
          57
        ],
        "output": [
          59
        ]
      },
      {
        "input": [
          0,
          16,
          46,
          77,
          34,
          93
        ],
        "output": [
          16
        ]
      }
    ]
  },
  {
    "id": "c063",
    "difficulty": 213,
    "function": "def c063(x):\n    # remove the first N + 1 elements, N is the first element\n    return x[x[0]+1:]\n\n",
    "data": {
      "input": [
        2,
        6,
        8,
        4,
        3
      ],
      "output": [
        4,
        3
      ]
    },
    "demos": [
      {
        "input": [
          0,
          10,
          8,
          5,
          10,
          2,
          4
        ],
        "output": [
          10,
          8,
          5,
          10,
          2,
          4
        ]
      },
      {
        "input": [
          0,
          10,
          10,
          5,
          3
        ],
        "output": [
          10,
          10,
          5,
          3
        ]
      },
      {
        "input": [
          3,
          6,
          4,
          6,
          2,
          2,
          6
        ],
        "output": [
          2,
          2,
          6
        ]
      }
    ]
  },
  {
    "id": "c141",
    "difficulty": 214,
    "function": "def c141(x):\n    # replace element M + 2 with N, M = element 0, N = element 1; remove elements 0 and 1\n    x[x[0]+2] = x[1]\n    return x[2:]\n\n",
    "data": {
      "input": [
        3,
        1,
        6,
        2,
        2,
        0,
        8,
        7
      ],
      "output": [
        6,
        2,
        2,
        1,
        8,
        7
      ]
    },
    "demos": [
      {
        "input": [
          0,
          0,
          9,
          3,
          3,
          10
        ],
        "output": [
          0,
          3,
          3,
          10
        ]
      },
      {
        "input": [
          0,
          2,
          6,
          7,
          4
        ],
        "output": [
          2,
          7,
          4
        ]
      },
      {
        "input": [
          2,
          8,
          1,
          5,
          4,
          1,
          3
        ],
        "output": [
          1,
          5,
          8,
          1,
          3
        ]
      }
    ]
  },
  {
    "id": "c089",
    "difficulty": 215,
    "function": "def c089(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        52,
        19,
        70,
        77,
        38,
        41,
        17
      ],
      "output": [
        52,
        38,
        70,
        77,
        19,
        41,
        17
      ]
    },
    "demos": [
      {
        "input": [
          49,
          90,
          15,
          36,
          47,
          9,
          30
        ],
        "output": [
          49,
          47,
          15,
          36,
          90,
          9,
          30
        ]
      },
      {
        "input": [
          55,
          69,
          60,
          1,
          33,
          98,
          74
        ],
        "output": [
          55,
          69,
          1,
          60,
          33,
          98,
          74
        ]
      },
      {
        "input": [
          96,
          35,
          28,
          10,
          1,
          57,
          64
        ],
        "output": [
          96,
          35,
          10,
          28,
          1,
          57,
          64
        ]
      }
    ]
  },
  {
    "id": "c124",
    "difficulty": 216,
    "function": "def c124(x):\n    # element M, M = element N, N = element 0\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        7,
        5,
        5,
        3,
        9,
        0,
        3,
        7,
        1,
        9
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          8,
          8,
          6,
          4,
          2,
          6,
          3,
          8,
          7,
          1
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          3,
          9,
          8,
          3,
          7,
          7,
          5,
          3,
          4,
          4
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          3,
          2,
          8,
          9,
          5,
          3,
          6,
          1,
          7,
          8
        ],
        "output": [
          9
        ]
      }
    ]
  },
  {
    "id": "c216",
    "difficulty": 217,
    "function": "def c216(x):\n    # elements in ascending order by tens digit\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append([i, int(str(i)[-2])])\n        else:\n            res.append([i, 0])\n    return [i[0] for i in sorted(res, key=lambda i: i[1])]\n\n",
    "data": {
      "input": [
        77,
        49,
        20,
        41,
        39,
        93,
        46,
        47
      ],
      "output": [
        20,
        39,
        49,
        41,
        46,
        47,
        77,
        93
      ]
    },
    "demos": [
      {
        "input": [
          42,
          95,
          82,
          99,
          96
        ],
        "output": [
          42,
          82,
          95,
          99,
          96
        ]
      },
      {
        "input": [
          61,
          19,
          22,
          58,
          19,
          26
        ],
        "output": [
          19,
          19,
          22,
          26,
          58,
          61
        ]
      },
      {
        "input": [
          1,
          98,
          43,
          0,
          91,
          37,
          14,
          62
        ],
        "output": [
          1,
          0,
          14,
          37,
          43,
          62,
          98,
          91
        ]
      }
    ]
  },
  {
    "id": "c143",
    "difficulty": 218,
    "function": "def c143(x):\n    # replace every occurrence of the largest element with the smallest element\n    max_val = max(x)\n    min_val = min(x)\n    return [min_val if i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        1,
        7,
        1,
        6,
        0,
        4
      ],
      "output": [
        1,
        0,
        1,
        6,
        0,
        4
      ]
    },
    "demos": [
      {
        "input": [
          2,
          10,
          6,
          10,
          5
        ],
        "output": [
          2,
          2,
          6,
          2,
          5
        ]
      },
      {
        "input": [
          6,
          2,
          3,
          5,
          6,
          6,
          2,
          1
        ],
        "output": [
          1,
          2,
          3,
          5,
          1,
          1,
          2,
          1
        ]
      },
      {
        "input": [
          8,
          7,
          6,
          0,
          8,
          8
        ],
        "output": [
          0,
          7,
          6,
          0,
          0,
          0
        ]
      }
    ]
  },
  {
    "id": "c215",
    "difficulty": 219,
    "function": "def c215(x):\n    # elements in ascending order by hundreds digit\n    res = {}\n    for i in x:\n        if len(str(i)) > 2:\n            res[i] = int(str(i)[-3])\n        else:\n            res[i] = 0\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        422,
        556,
        471,
        180,
        399,
        825,
        662,
        263
      ],
      "output": [
        180,
        263,
        399,
        422,
        471,
        556,
        662,
        825
      ]
    },
    "demos": [
      {
        "input": [
          408,
          51,
          815,
          332,
          458
        ],
        "output": [
          51,
          332,
          408,
          458,
          815
        ]
      },
      {
        "input": [
          936,
          371,
          23,
          381,
          268,
          651,
          441
        ],
        "output": [
          23,
          268,
          371,
          381,
          441,
          651,
          936
        ]
      },
      {
        "input": [
          173,
          726,
          14,
          89,
          789
        ],
        "output": [
          14,
          89,
          173,
          726,
          789
        ]
      }
    ]
  },
  {
    "id": "c144",
    "difficulty": 220,
    "function": "def c144(x):\n    # replace every occurrence of the largest or smallest element with their absolute difference\n    max_val = max(x)\n    min_val = min(x)\n    return [abs(min_val - max_val) if i == min_val or i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        7,
        71,
        44
      ],
      "output": [
        64,
        64,
        44
      ]
    },
    "demos": [
      {
        "input": [
          21,
          41,
          69,
          4
        ],
        "output": [
          21,
          41,
          65,
          65
        ]
      },
      {
        "input": [
          73,
          45
        ],
        "output": [
          28,
          28
        ]
      },
      {
        "input": [
          67,
          41,
          79
        ],
        "output": [
          67,
          38,
          38
        ]
      }
    ]
  },
  {
    "id": "c128",
    "difficulty": 221,
    "function": "def c128(x):\n    # elements in ascending order after removing elements 0,1,and 4\n    x = x[2:4] + x[5:]\n    return sorted(x)\n\n",
    "data": {
      "input": [
        38,
        82,
        28,
        87,
        99
      ],
      "output": [
        28,
        87
      ]
    },
    "demos": [
      {
        "input": [
          13,
          62,
          51,
          7,
          18,
          35
        ],
        "output": [
          7,
          35,
          51
        ]
      },
      {
        "input": [
          13,
          58,
          85,
          12,
          10,
          9
        ],
        "output": [
          9,
          12,
          85
        ]
      },
      {
        "input": [
          42,
          79,
          61,
          48,
          65
        ],
        "output": [
          48,
          61
        ]
      }
    ]
  },
  {
    "id": "c208",
    "difficulty": 222,
    "function": "def c208(x):\n    # keep only last N elements, N is the last element\n    return x[-x[-1]:]\n\n",
    "data": {
      "input": [
        9,
        8,
        7,
        3,
        7,
        3
      ],
      "output": [
        3,
        7,
        3
      ]
    },
    "demos": [
      {
        "input": [
          0,
          9,
          5,
          9,
          6,
          2,
          5,
          0
        ],
        "output": [
          0,
          9,
          5,
          9,
          6,
          2,
          5,
          0
        ]
      },
      {
        "input": [
          2,
          9,
          6,
          8,
          7,
          1
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          3,
          6,
          0,
          9,
          4,
          5,
          1
        ],
        "output": [
          1
        ]
      }
    ]
  },
  {
    "id": "c035",
    "difficulty": 223,
    "function": "def c035(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        7,
        2,
        2,
        7,
        5
      ],
      "output": [
        7,
        2,
        2,
        7,
        5
      ]
    },
    "demos": [
      {
        "input": [
          3,
          10,
          6,
          8,
          6,
          6,
          8,
          2
        ],
        "output": [
          3,
          6,
          10,
          8,
          6,
          6,
          8,
          2
        ]
      },
      {
        "input": [
          10,
          1,
          7,
          7,
          3,
          2,
          0,
          10
        ],
        "output": [
          10,
          7,
          1,
          7,
          3,
          2,
          0,
          10
        ]
      },
      {
        "input": [
          0,
          3,
          3,
          6,
          8,
          7
        ],
        "output": [
          6,
          3,
          3,
          0,
          8,
          7
        ]
      }
    ]
  },
  {
    "id": "c214",
    "difficulty": 224,
    "function": "def c214(x):\n    # remove elements 0 and N + 1, N is the first element\n    x = x[1:x[0]+1] + x[x[0]+2:]\n    return x\n\n",
    "data": {
      "input": [
        4,
        95,
        26,
        71,
        86,
        3
      ],
      "output": [
        95,
        26,
        71,
        86
      ]
    },
    "demos": [
      {
        "input": [
          2,
          25,
          67,
          96,
          70,
          37,
          89
        ],
        "output": [
          25,
          67,
          70,
          37,
          89
        ]
      },
      {
        "input": [
          1,
          51,
          44,
          58,
          59,
          34
        ],
        "output": [
          51,
          58,
          59,
          34
        ]
      },
      {
        "input": [
          0,
          74,
          52,
          12,
          0,
          28,
          74,
          31
        ],
        "output": [
          52,
          12,
          0,
          28,
          74,
          31
        ]
      }
    ]
  },
  {
    "id": "c130",
    "difficulty": 225,
    "function": "def c130(x):\n    # elements 1 through N + 1, N = element 0\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        7,
        9,
        84,
        7,
        36,
        16,
        35,
        15
      ],
      "output": [
        9,
        84,
        7,
        36,
        16,
        35,
        15
      ]
    },
    "demos": [
      {
        "input": [
          2,
          33,
          20,
          98,
          8
        ],
        "output": [
          33,
          20
        ]
      },
      {
        "input": [
          1,
          55,
          71,
          91,
          56
        ],
        "output": [
          55
        ]
      },
      {
        "input": [
          2,
          14,
          55,
          95,
          35,
          54
        ],
        "output": [
          14,
          55
        ]
      }
    ]
  },
  {
    "id": "c159",
    "difficulty": 226,
    "function": "def c159(x):\n    # element N counts the number of occurrences of N, up to the largest element\n    out = []\n    for i, j in enumerate(range(max(x)+1)):\n        out.append(x.count(j))\n    return out\n\n",
    "data": {
      "input": [
        3,
        9,
        0,
        3,
        8,
        4,
        7,
        5
      ],
      "output": [
        1,
        0,
        0,
        2,
        1,
        1,
        0,
        1,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          8,
          0,
          3,
          7,
          7,
          3
        ],
        "output": [
          1,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          1
        ]
      },
      {
        "input": [
          3,
          7,
          7,
          1,
          9,
          2
        ],
        "output": [
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          2,
          0,
          1
        ]
      },
      {
        "input": [
          2,
          9,
          4,
          5,
          7,
          8,
          9,
          4,
          9
        ],
        "output": [
          0,
          0,
          1,
          0,
          2,
          1,
          0,
          1,
          1,
          3
        ]
      }
    ]
  },
  {
    "id": "c205",
    "difficulty": 227,
    "function": "def c205(x):\n    # product of elements divisible by 4\n    res = 1\n    for i in x:\n        if i % 4 == 0:\n            res *= i\n    return [res]\n\n",
    "data": {
      "input": [
        5,
        8,
        15,
        17,
        12,
        9,
        14
      ],
      "output": [
        96
      ]
    },
    "demos": [
      {
        "input": [
          6,
          20,
          9,
          3,
          13,
          10,
          5
        ],
        "output": [
          20
        ]
      },
      {
        "input": [
          17,
          13,
          0,
          19,
          5,
          14
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          12,
          15,
          6,
          19,
          4,
          15
        ],
        "output": [
          48
        ]
      }
    ]
  },
  {
    "id": "c076",
    "difficulty": 228,
    "function": "def c076(x):\n    # the max, last, length, first, and min elements\n    return [max(x), x[-1], len(x), x[0], min(x)]\n\n",
    "data": {
      "input": [
        0,
        12,
        60,
        16,
        88,
        5,
        26,
        61
      ],
      "output": [
        88,
        61,
        8,
        0,
        0
      ]
    },
    "demos": [
      {
        "input": [
          7,
          29,
          12,
          39,
          12,
          88
        ],
        "output": [
          88,
          88,
          6,
          7,
          7
        ]
      },
      {
        "input": [
          96,
          52,
          52,
          17,
          50,
          86,
          59,
          89
        ],
        "output": [
          96,
          89,
          8,
          96,
          17
        ]
      },
      {
        "input": [
          45,
          82,
          30,
          74,
          20,
          77,
          7,
          75
        ],
        "output": [
          82,
          75,
          8,
          45,
          7
        ]
      }
    ]
  },
  {
    "id": "c250",
    "difficulty": 229,
    "function": "def c250(x):\n    # use 0s to delimit sublists, concatenate reversed sublists\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            res += sublist[::-1]\n            sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res += sublist[::-1]\n    return res\n\n",
    "data": {
      "input": [
        0,
        73,
        22,
        34,
        19,
        24,
        95
      ],
      "output": [
        95,
        24,
        19,
        34,
        22,
        73
      ]
    },
    "demos": [
      {
        "input": [
          0,
          75,
          0,
          22,
          13,
          0,
          75,
          25,
          36
        ],
        "output": [
          75,
          13,
          22,
          36,
          25,
          75
        ]
      },
      {
        "input": [
          2,
          51,
          68,
          2,
          0,
          16,
          0,
          81
        ],
        "output": [
          2,
          68,
          51,
          2,
          16,
          81
        ]
      },
      {
        "input": [
          64,
          0,
          0,
          1,
          56,
          65,
          75,
          0,
          17,
          60,
          31
        ],
        "output": [
          64,
          75,
          65,
          56,
          1,
          31,
          60,
          17
        ]
      }
    ]
  },
  {
    "id": "c186",
    "difficulty": 230,
    "function": "def c186(x):\n    # keep only elements greater than element 0\n    return [i for i in x if i > x[0]]\n\n",
    "data": {
      "input": [
        57,
        13,
        65,
        68,
        40,
        24,
        14
      ],
      "output": [
        65,
        68
      ]
    },
    "demos": [
      {
        "input": [
          68,
          36,
          1,
          91,
          32,
          11
        ],
        "output": [
          91
        ]
      },
      {
        "input": [
          57,
          5,
          69,
          31,
          69,
          81,
          52,
          26
        ],
        "output": [
          69,
          69,
          81
        ]
      },
      {
        "input": [
          36,
          31,
          29,
          78,
          87,
          62,
          12
        ],
        "output": [
          78,
          87,
          62
        ]
      }
    ]
  },
  {
    "id": "c242",
    "difficulty": 231,
    "function": "def c242(x):\n    # take the largest unique element, append the second largest unique element, prepend the third largest unique element, append the fourth largest unique element, and so on\n    unique = sorted(set(x), reverse=True)\n    res = [max(unique)]\n    unique.remove(max(unique))\n    for i in range(len(unique)):\n        if i % 2 == 0:\n            res.append(unique[i])\n        else:\n            res.insert(0, unique[i])\n    return res\n\n",
    "data": {
      "input": [
        6,
        7,
        6,
        9,
        4,
        2
      ],
      "output": [
        2,
        6,
        9,
        7,
        4
      ]
    },
    "demos": [
      {
        "input": [
          5,
          5,
          5,
          1,
          4,
          1,
          3,
          7
        ],
        "output": [
          1,
          4,
          7,
          5,
          3
        ]
      },
      {
        "input": [
          6,
          7,
          6,
          3,
          9,
          6,
          0
        ],
        "output": [
          0,
          6,
          9,
          7,
          3
        ]
      },
      {
        "input": [
          1,
          4,
          5,
          9,
          1,
          6,
          1,
          5
        ],
        "output": [
          1,
          5,
          9,
          6,
          4
        ]
      }
    ]
  },
  {
    "id": "c160",
    "difficulty": 232,
    "function": "def c160(x):\n    # replace each element with 99 - element\n    return [99-i for i in x]\n\n",
    "data": {
      "input": [
        8,
        63,
        43,
        71,
        34,
        77
      ],
      "output": [
        91,
        36,
        56,
        28,
        65,
        22
      ]
    },
    "demos": [
      {
        "input": [
          49,
          16,
          91,
          4,
          38,
          23,
          87,
          75
        ],
        "output": [
          50,
          83,
          8,
          95,
          61,
          76,
          12,
          24
        ]
      },
      {
        "input": [
          66,
          16,
          30,
          15,
          42,
          72
        ],
        "output": [
          33,
          83,
          69,
          84,
          57,
          27
        ]
      },
      {
        "input": [
          92,
          83,
          57,
          44,
          79,
          15,
          61,
          3
        ],
        "output": [
          7,
          16,
          42,
          55,
          20,
          84,
          38,
          96
        ]
      }
    ]
  },
  {
    "id": "c167",
    "difficulty": 233,
    "function": "def c167(x):\n    # keep only elements divisible by 3\n    return [i for i in x if i % 3 == 0]\n\n",
    "data": {
      "input": [
        35,
        84,
        38,
        26,
        87,
        55,
        39
      ],
      "output": [
        84,
        87,
        39
      ]
    },
    "demos": [
      {
        "input": [
          25,
          35,
          54,
          37,
          75,
          7
        ],
        "output": [
          54,
          75
        ]
      },
      {
        "input": [
          40,
          29,
          59,
          86,
          29,
          18,
          47,
          5
        ],
        "output": [
          18
        ]
      },
      {
        "input": [
          81,
          48,
          56,
          20,
          80,
          82,
          48
        ],
        "output": [
          81,
          48,
          48
        ]
      }
    ]
  },
  {
    "id": "c202",
    "difficulty": 234,
    "function": "def c202(x):\n    # the indices of every even number\n    return [i for i, j in enumerate(x) if j % 2 == 0]\n\n\n",
    "data": {
      "input": [
        74,
        41,
        70,
        53,
        19,
        57,
        78,
        86
      ],
      "output": [
        0,
        2,
        6,
        7
      ]
    },
    "demos": [
      {
        "input": [
          94,
          97,
          5,
          94,
          1,
          86,
          34,
          80
        ],
        "output": [
          0,
          3,
          5,
          6,
          7
        ]
      },
      {
        "input": [
          44,
          15,
          21,
          4,
          36,
          33
        ],
        "output": [
          0,
          3,
          4
        ]
      },
      {
        "input": [
          55,
          12,
          72,
          2,
          21,
          66,
          82,
          60
        ],
        "output": [
          1,
          2,
          3,
          5,
          6,
          7
        ]
      }
    ]
  },
  {
    "id": "c129",
    "difficulty": 235,
    "function": "def c129(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        4,
        8,
        87,
        61,
        16,
        25,
        59,
        30,
        85,
        16
      ],
      "output": [
        59,
        30,
        85,
        16
      ]
    },
    "demos": [
      {
        "input": [
          6,
          7,
          66,
          74,
          24,
          90,
          25,
          12,
          39
        ],
        "output": [
          39
        ]
      },
      {
        "input": [
          2,
          4,
          4,
          26,
          67,
          66,
          74,
          51
        ],
        "output": [
          67,
          66
        ]
      },
      {
        "input": [
          1,
          1,
          0,
          52,
          55,
          54,
          47,
          69,
          95
        ],
        "output": []
      }
    ]
  },
  {
    "id": "c221",
    "difficulty": 236,
    "function": "def c221(x):\n    # sum of even elements\n    return [sum(i for i in x if i % 2 == 0)]\n\n",
    "data": {
      "input": [
        49,
        6,
        33,
        3,
        21,
        38,
        21,
        23
      ],
      "output": [
        44
      ]
    },
    "demos": [
      {
        "input": [
          32,
          25,
          1,
          24,
          9,
          42,
          3
        ],
        "output": [
          98
        ]
      },
      {
        "input": [
          31,
          37,
          5,
          5,
          38,
          42,
          49
        ],
        "output": [
          80
        ]
      },
      {
        "input": [
          34,
          36,
          3,
          18,
          15,
          42
        ],
        "output": [
          130
        ]
      }
    ]
  },
  {
    "id": "c131",
    "difficulty": 237,
    "function": "def c131(x):\n    # keep only elements whose tens digit is even\n    res = []\n    for i in x:\n        if len(str(i)) < 2:\n            res.append(i)\n        elif int(str(i)[-2]) % 2 == 0:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        10,
        57,
        2,
        79,
        59,
        36,
        49,
        70
      ],
      "output": [
        2,
        49
      ]
    },
    "demos": [
      {
        "input": [
          11,
          3,
          31,
          46,
          20,
          67
        ],
        "output": [
          3,
          46,
          20,
          67
        ]
      },
      {
        "input": [
          29,
          7,
          3,
          75,
          40,
          38,
          27,
          29
        ],
        "output": [
          29,
          7,
          3,
          40,
          27,
          29
        ]
      },
      {
        "input": [
          66,
          3,
          40,
          52,
          45,
          83
        ],
        "output": [
          66,
          3,
          40,
          45,
          83
        ]
      }
    ]
  },
  {
    "id": "c180",
    "difficulty": 238,
    "function": "def c180(x):\n    # take the smallest element, append the second smallest element, prepend the third smallest element, append the fourth smallest element, and so on\n    sorted_x = sorted(x)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        81,
        83,
        6,
        3,
        52,
        61,
        11
      ],
      "output": [
        83,
        61,
        11,
        3,
        6,
        52,
        81
      ]
    },
    "demos": [
      {
        "input": [
          35,
          63,
          85,
          81,
          33,
          91
        ],
        "output": [
          85,
          63,
          33,
          35,
          81,
          91
        ]
      },
      {
        "input": [
          4,
          13,
          7,
          64,
          11,
          9
        ],
        "output": [
          13,
          9,
          4,
          7,
          11,
          64
        ]
      },
      {
        "input": [
          81,
          77,
          48,
          88,
          96,
          80,
          92,
          82
        ],
        "output": [
          92,
          82,
          80,
          48,
          77,
          81,
          88,
          96
        ]
      }
    ]
  },
  {
    "id": "c015",
    "difficulty": 239,
    "function": "def c015(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        1,
        5,
        6,
        4,
        15,
        6,
        10,
        3,
        2
      ],
      "output": [
        4,
        15,
        6,
        10
      ]
    },
    "demos": [
      {
        "input": [
          1,
          1,
          0,
          11,
          10,
          4
        ],
        "output": []
      },
      {
        "input": [
          4,
          4,
          5,
          15,
          11,
          13,
          8,
          11
        ],
        "output": []
      },
      {
        "input": [
          3,
          4,
          3,
          2,
          12,
          15
        ],
        "output": [
          15
        ]
      }
    ]
  },
  {
    "id": "c179",
    "difficulty": 240,
    "function": "def c179(x):\n    # take the largest element, append the second largest element, prepend the third largest element, append the fourth largest element, and so on\n    sorted_x = sorted(x, reverse=True)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        31,
        48,
        44,
        53,
        5,
        70,
        59
      ],
      "output": [
        5,
        44,
        53,
        70,
        59,
        48,
        31
      ]
    },
    "demos": [
      {
        "input": [
          60,
          67,
          85,
          36,
          52,
          15
        ],
        "output": [
          36,
          60,
          85,
          67,
          52,
          15
        ]
      },
      {
        "input": [
          10,
          59,
          88,
          59,
          56,
          18
        ],
        "output": [
          18,
          59,
          88,
          59,
          56,
          10
        ]
      },
      {
        "input": [
          95,
          57,
          59,
          33,
          36,
          3
        ],
        "output": [
          33,
          57,
          95,
          59,
          36,
          3
        ]
      }
    ]
  },
  {
    "id": "c226",
    "difficulty": 241,
    "function": "def c226(x):\n    # remove first M and last N elements, M is the first element, N is the last element\n    if x[-1] == 0:\n        return x[x[0]:]\n    return x[x[0]:-x[-1]]\n\n",
    "data": {
      "input": [
        1,
        11,
        14,
        10,
        15,
        4,
        9,
        8,
        3
      ],
      "output": [
        11,
        14,
        10,
        15,
        4
      ]
    },
    "demos": [
      {
        "input": [
          0,
          10,
          5,
          13,
          13,
          3,
          4,
          6,
          10,
          2
        ],
        "output": [
          0,
          10,
          5,
          13,
          13,
          3,
          4,
          6
        ]
      },
      {
        "input": [
          4,
          9,
          13,
          11,
          0,
          7,
          10,
          11,
          8,
          1
        ],
        "output": [
          0,
          7,
          10,
          11,
          8
        ]
      },
      {
        "input": [
          0,
          11,
          4,
          11,
          14,
          14,
          8,
          4
        ],
        "output": [
          0,
          11,
          4,
          11
        ]
      }
    ]
  },
  {
    "id": "c134",
    "difficulty": 242,
    "function": "def c134(x):\n    # remove elements M through N, M is the first element, N is the second element\n    return x[:x[0]] + x[x[1]+1:]\n\n",
    "data": {
      "input": [
        3,
        7,
        6,
        0,
        13,
        9,
        3,
        12
      ],
      "output": [
        3,
        7,
        6
      ]
    },
    "demos": [
      {
        "input": [
          3,
          7,
          6,
          11,
          7,
          15,
          4,
          1
        ],
        "output": [
          3,
          7,
          6
        ]
      },
      {
        "input": [
          1,
          6,
          9,
          12,
          8,
          14,
          8,
          11,
          14,
          6
        ],
        "output": [
          1,
          11,
          14,
          6
        ]
      },
      {
        "input": [
          0,
          6,
          15,
          2,
          14,
          6,
          15,
          12
        ],
        "output": [
          12
        ]
      }
    ]
  },
  {
    "id": "c164",
    "difficulty": 243,
    "function": "def c164(x):\n    # replace each element M with M // 4 + 5\n    return [i//4+5 for i in x]\n\n",
    "data": {
      "input": [
        88,
        26,
        14,
        69,
        12,
        85
      ],
      "output": [
        27,
        11,
        8,
        22,
        8,
        26
      ]
    },
    "demos": [
      {
        "input": [
          79,
          53,
          92,
          16,
          4,
          34
        ],
        "output": [
          24,
          18,
          28,
          9,
          6,
          13
        ]
      },
      {
        "input": [
          2,
          34,
          51,
          32,
          87,
          30
        ],
        "output": [
          5,
          13,
          17,
          13,
          26,
          12
        ]
      },
      {
        "input": [
          62,
          8,
          66,
          56,
          1,
          30
        ],
        "output": [
          20,
          7,
          21,
          19,
          5,
          12
        ]
      }
    ]
  },
  {
    "id": "c178",
    "difficulty": 244,
    "function": "def c178(x):\n    # keep only elements followed by an even number\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] % 2 == 0:\n            res.append(x[i])\n    return res \n\n",
    "data": {
      "input": [
        91,
        25,
        18,
        23,
        48,
        61,
        26
      ],
      "output": [
        25,
        23,
        61
      ]
    },
    "demos": [
      {
        "input": [
          63,
          43,
          41,
          64,
          28,
          87,
          92
        ],
        "output": [
          41,
          64,
          87
        ]
      },
      {
        "input": [
          57,
          86,
          17,
          52,
          93,
          86,
          32,
          78
        ],
        "output": [
          57,
          17,
          93,
          86,
          32
        ]
      },
      {
        "input": [
          86,
          48,
          54,
          69,
          5,
          79
        ],
        "output": [
          86,
          48
        ]
      }
    ]
  },
  {
    "id": "c113",
    "difficulty": 245,
    "function": "def c113(x):\n    # keep only elements whose ones digit is greater than the first element\n    res = []\n    for i in x:\n        if i % 10 > x[0]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        0,
        38,
        42,
        43,
        13,
        27,
        25
      ],
      "output": [
        38,
        42,
        43,
        13,
        27,
        25
      ]
    },
    "demos": [
      {
        "input": [
          7,
          45,
          20,
          38,
          21,
          5,
          7,
          41
        ],
        "output": [
          38
        ]
      },
      {
        "input": [
          7,
          9,
          27,
          42,
          30,
          25,
          15,
          25,
          36,
          28
        ],
        "output": [
          9,
          28
        ]
      },
      {
        "input": [
          7,
          32,
          6,
          19,
          44,
          45,
          31,
          12,
          26,
          33
        ],
        "output": [
          19
        ]
      }
    ]
  },
  {
    "id": "c206",
    "difficulty": 246,
    "function": "def c206(x):\n    # keep only elements whose value is between the first and second element\n    return [i for i in x if x[0] < i < x[1]]\n\n",
    "data": {
      "input": [
        7,
        17,
        45,
        30,
        2,
        18,
        8
      ],
      "output": [
        8
      ]
    },
    "demos": [
      {
        "input": [
          3,
          35,
          26,
          18,
          32,
          37,
          3,
          42
        ],
        "output": [
          26,
          18,
          32
        ]
      },
      {
        "input": [
          14,
          49,
          35,
          16,
          41,
          25,
          34,
          12
        ],
        "output": [
          35,
          16,
          41,
          25,
          34
        ]
      },
      {
        "input": [
          1,
          31,
          5,
          22,
          9,
          23
        ],
        "output": [
          5,
          22,
          9,
          23
        ]
      }
    ]
  },
  {
    "id": "c210",
    "difficulty": 247,
    "function": "def c210(x):\n    # unique elements with last element inserted at index M, where M is the first element\n    unique = []\n    for i in x:\n        if i not in unique:\n            unique.append(i)\n    unique.insert(x[0], x[-1])\n    return unique\n\n",
    "data": {
      "input": [
        3,
        3,
        8,
        7,
        9
      ],
      "output": [
        3,
        8,
        7,
        9,
        9
      ]
    },
    "demos": [
      {
        "input": [
          1,
          0,
          7,
          0,
          1,
          3,
          0
        ],
        "output": [
          1,
          0,
          0,
          7,
          3
        ]
      },
      {
        "input": [
          0,
          7,
          5,
          3,
          4,
          7,
          0,
          2
        ],
        "output": [
          2,
          0,
          7,
          5,
          3,
          4,
          2
        ]
      },
      {
        "input": [
          0,
          2,
          7,
          4,
          2,
          1,
          0
        ],
        "output": [
          0,
          0,
          2,
          7,
          4,
          1
        ]
      }
    ]
  },
  {
    "id": "c158",
    "difficulty": 248,
    "function": "def c158(x):\n    # replace each element with 1 if element N equals N, else 0\n    res = []\n    for i, j in enumerate(x):\n        if i == j:\n            res.append(1)\n        else:\n            res.append(0)\n    return res\n\n",
    "data": {
      "input": [
        0,
        1,
        1,
        5,
        1,
        5,
        0,
        4,
        7
      ],
      "output": [
        1,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    },
    "demos": [
      {
        "input": [
          0,
          1,
          6,
          3,
          6,
          5,
          6,
          7,
          8,
          9
        ],
        "output": [
          1,
          1,
          0,
          1,
          0,
          1,
          1,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          6,
          7,
          8,
          3,
          4,
          3,
          6,
          4,
          8,
          9
        ],
        "output": [
          0,
          0,
          0,
          1,
          1,
          0,
          1,
          0,
          1,
          1
        ]
      },
      {
        "input": [
          0,
          0,
          1,
          4,
          4,
          8
        ],
        "output": [
          1,
          0,
          0,
          0,
          1,
          0
        ]
      }
    ]
  },
  {
    "id": "c183",
    "difficulty": 249,
    "function": "def c183(x):\n    # list the index of second elements and following equal to first element\n    res = []\n    for i in range(1, len(x)):\n        if x[i] == x[0]:\n            res.append(i)\n    return res",
    "data": {
      "input": [
        8,
        8,
        13,
        10,
        2,
        15
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          7,
          3,
          3,
          7,
          7,
          5,
          6,
          6,
          6,
          14
        ],
        "output": [
          3,
          4
        ]
      },
      {
        "input": [
          6,
          5,
          8,
          6,
          12,
          6,
          6
        ],
        "output": [
          3,
          5,
          6
        ]
      },
      {
        "input": [
          13,
          3,
          10,
          13,
          15,
          3,
          11,
          13,
          0
        ],
        "output": [
          3,
          7
        ]
      }
    ]
  },
  {
    "id": "c014",
    "difficulty": 157,
    "function": "def c014(x):\n    # remove all but elements 2 through 5\n    return x[2:5]\n\n",
    "data": {
      "input": [
        88,
        11,
        12,
        78,
        84,
        91,
        67
      ],
      "output": [
        12,
        78,
        84
      ]
    },
    "demos": [
      {
        "input": [
          60,
          60,
          94,
          10,
          35,
          14
        ],
        "output": [
          94,
          10,
          35
        ]
      },
      {
        "input": [
          58,
          41,
          71,
          10,
          16,
          93,
          97
        ],
        "output": [
          71,
          10,
          16
        ]
      },
      {
        "input": [
          82,
          10,
          65,
          94,
          90,
          78
        ],
        "output": [
          65,
          94,
          90
        ]
      }
    ]
  },
  {
    "id": "c098",
    "difficulty": 86,
    "function": "def c098(x):\n    # add the index to each element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        0,
        9,
        3,
        4,
        6,
        8,
        5
      ],
      "output": [
        0,
        10,
        5,
        7,
        10,
        13,
        11
      ]
    },
    "demos": [
      {
        "input": [
          7,
          5,
          8,
          2,
          3,
          1,
          0
        ],
        "output": [
          7,
          6,
          10,
          5,
          7,
          6,
          6
        ]
      },
      {
        "input": [
          3,
          6,
          0,
          9,
          6,
          7,
          8,
          9
        ],
        "output": [
          3,
          7,
          2,
          12,
          10,
          12,
          14,
          16
        ]
      },
      {
        "input": [
          6,
          8,
          0,
          0,
          9,
          2,
          8,
          9
        ],
        "output": [
          6,
          9,
          2,
          3,
          13,
          7,
          14,
          16
        ]
      }
    ]
  },
  {
    "id": "c209",
    "difficulty": 212,
    "function": "def c209(x):\n    # elements in ascending order, insert sum of smallest and largest element at index 3\n    x = sorted(x)\n    x.insert(3, x[0] + x[-1])\n    return x\n\n",
    "data": {
      "input": [
        15,
        22,
        14,
        24,
        24,
        30,
        8
      ],
      "output": [
        8,
        14,
        15,
        38,
        22,
        24,
        24,
        30
      ]
    },
    "demos": [
      {
        "input": [
          6,
          4,
          18,
          17,
          7,
          30,
          6,
          28
        ],
        "output": [
          4,
          6,
          6,
          34,
          7,
          17,
          18,
          28,
          30
        ]
      },
      {
        "input": [
          11,
          11,
          12,
          21,
          14,
          19,
          25
        ],
        "output": [
          11,
          11,
          12,
          36,
          14,
          19,
          21,
          25
        ]
      },
      {
        "input": [
          22,
          7,
          17,
          16,
          14
        ],
        "output": [
          7,
          14,
          16,
          29,
          17,
          22
        ]
      }
    ]
  },
  {
    "id": "c211",
    "difficulty": 104,
    "function": "def c211(x):\n    # reverse input, insert fouth element and fifth element so they are fourth and third from the end respectively\n    x = x[::-1]\n    x.insert(-3, x[3])\n    x.insert(-4, x[4])\n    return x\n\n",
    "data": {
      "input": [
        9,
        64,
        95,
        86,
        40,
        36
      ],
      "output": [
        36,
        40,
        86,
        95,
        95,
        95,
        64,
        9
      ]
    },
    "demos": [
      {
        "input": [
          7,
          37,
          92,
          49,
          91,
          80
        ],
        "output": [
          80,
          91,
          49,
          92,
          92,
          92,
          37,
          7
        ]
      },
      {
        "input": [
          3,
          10,
          63,
          61,
          18,
          63,
          85,
          77
        ],
        "output": [
          77,
          85,
          63,
          18,
          61,
          61,
          18,
          63,
          10,
          3
        ]
      },
      {
        "input": [
          81,
          43,
          23,
          99,
          24,
          10
        ],
        "output": [
          10,
          24,
          99,
          23,
          23,
          23,
          43,
          81
        ]
      }
    ]
  },
  {
    "id": "c102",
    "difficulty": 0,
    "function": "def c102(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        31,
        17,
        96,
        96,
        28,
        75,
        9,
        70
      ],
      "output": [
        31,
        17,
        96,
        96,
        28,
        75,
        9,
        70
      ]
    },
    "demos": [
      {
        "input": [
          8,
          60,
          62,
          53,
          40,
          9,
          57,
          12
        ],
        "output": [
          8,
          60,
          62,
          53,
          40,
          9,
          57,
          12
        ]
      },
      {
        "input": [
          74,
          71,
          64,
          97,
          41,
          34,
          78,
          94
        ],
        "output": [
          74,
          71,
          64,
          97,
          41,
          34,
          78,
          94
        ]
      },
      {
        "input": [
          64,
          47,
          44,
          37,
          37,
          91
        ],
        "output": [
          64,
          47,
          44,
          37,
          37,
          91
        ]
      }
    ]
  },
  {
    "id": "c170",
    "difficulty": 1,
    "function": "def c170(x):\n    # remove all but the first and last element\n    return [x[0], x[-1]]\n    \n",
    "data": {
      "input": [
        61,
        83,
        22
      ],
      "output": [
        61,
        22
      ]
    },
    "demos": [
      {
        "input": [
          62,
          36,
          14,
          42,
          30
        ],
        "output": [
          62,
          30
        ]
      },
      {
        "input": [
          1,
          7,
          49,
          86,
          62
        ],
        "output": [
          1,
          62
        ]
      },
      {
        "input": [
          5,
          78,
          43,
          17,
          16,
          86
        ],
        "output": [
          5,
          86
        ]
      }
    ]
  },
  {
    "id": "c121",
    "difficulty": 2,
    "function": "def c121(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        88,
        34,
        84,
        95,
        76
      ],
      "output": [
        76
      ]
    },
    "demos": [
      {
        "input": [
          34,
          83,
          35,
          53,
          48,
          95
        ],
        "output": [
          95
        ]
      },
      {
        "input": [
          90,
          41,
          79,
          66
        ],
        "output": [
          66
        ]
      },
      {
        "input": [
          50,
          64,
          91,
          69
        ],
        "output": [
          69
        ]
      }
    ]
  },
  {
    "id": "c045",
    "difficulty": 3,
    "function": "def c045(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        27,
        11,
        37,
        4
      ],
      "output": [
        27,
        11,
        37,
        4
      ]
    },
    "demos": [
      {
        "input": [
          45,
          81,
          83,
          19,
          82
        ],
        "output": [
          45,
          81,
          83,
          19,
          82
        ]
      },
      {
        "input": [
          21,
          87,
          87,
          10,
          71
        ],
        "output": [
          21,
          87,
          87,
          10,
          71
        ]
      },
      {
        "input": [
          47,
          51,
          74,
          95
        ],
        "output": [
          47,
          51,
          74,
          95
        ]
      }
    ]
  },
  {
    "id": "c072",
    "difficulty": 4,
    "function": "def c072(x):\n    # repeat every element twice\n    return [i for i in x for _ in (0, 1)]\n\n",
    "data": {
      "input": [
        81,
        7,
        90
      ],
      "output": [
        81,
        81,
        7,
        7,
        90,
        90
      ]
    },
    "demos": [
      {
        "input": [
          55,
          6,
          85,
          93,
          86,
          26,
          86
        ],
        "output": [
          55,
          55,
          6,
          6,
          85,
          85,
          93,
          93,
          86,
          86,
          26,
          26,
          86,
          86
        ]
      },
      {
        "input": [
          39,
          43,
          73,
          58,
          52,
          28
        ],
        "output": [
          39,
          39,
          43,
          43,
          73,
          73,
          58,
          58,
          52,
          52,
          28,
          28
        ]
      },
      {
        "input": [
          83,
          27,
          35
        ],
        "output": [
          83,
          83,
          27,
          27,
          35,
          35
        ]
      }
    ]
  },
  {
    "id": "c151",
    "difficulty": 5,
    "function": "def c151(x):\n    # repeat each element, M, M times, in order of appearance\n    return [i for i in x for _ in range(i)]\n\n",
    "data": {
      "input": [
        3,
        4,
        1
      ],
      "output": [
        3,
        3,
        3,
        4,
        4,
        4,
        4,
        1
      ]
    },
    "demos": [
      {
        "input": [
          5,
          0,
          0,
          4,
          0
        ],
        "output": [
          5,
          5,
          5,
          5,
          5,
          4,
          4,
          4,
          4
        ]
      },
      {
        "input": [
          5,
          3,
          1
        ],
        "output": [
          5,
          5,
          5,
          5,
          5,
          3,
          3,
          3,
          1
        ]
      },
      {
        "input": [
          2,
          4,
          1,
          0
        ],
        "output": [
          2,
          2,
          4,
          4,
          4,
          4,
          1
        ]
      }
    ]
  },
  {
    "id": "c080",
    "difficulty": 6,
    "function": "def c080(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        44,
        46,
        50,
        13,
        69
      ],
      "output": [
        69,
        13,
        50,
        46,
        44
      ]
    },
    "demos": [
      {
        "input": [
          79,
          1,
          40,
          75,
          19,
          18,
          89,
          97
        ],
        "output": [
          97,
          89,
          18,
          19,
          75,
          40,
          1,
          79
        ]
      },
      {
        "input": [
          11,
          73,
          39
        ],
        "output": [
          39,
          73,
          11
        ]
      },
      {
        "input": [
          25,
          4,
          25,
          9,
          32,
          69,
          12
        ],
        "output": [
          12,
          69,
          32,
          9,
          25,
          4,
          25
        ]
      }
    ]
  },
  {
    "id": "c061",
    "difficulty": 7,
    "function": "def c061(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        60,
        14,
        63
      ],
      "output": [
        63
      ]
    },
    "demos": [
      {
        "input": [
          87,
          69,
          68,
          75,
          79,
          71,
          4
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          20,
          93,
          26
        ],
        "output": [
          26
        ]
      },
      {
        "input": [
          1,
          15,
          42,
          92,
          95,
          7,
          50,
          31
        ],
        "output": [
          31
        ]
      }
    ]
  },
  {
    "id": "c189",
    "difficulty": 8,
    "function": "def c189(x):\n    # count from the smallest element to the largest element\n    return list(range(min(x), max(x)+1))\n\n",
    "data": {
      "input": [
        88,
        91,
        92
      ],
      "output": [
        88,
        89,
        90,
        91,
        92
      ]
    },
    "demos": [
      {
        "input": [
          52,
          51,
          53
        ],
        "output": [
          51,
          52,
          53
        ]
      },
      {
        "input": [
          31,
          30,
          27
        ],
        "output": [
          27,
          28,
          29,
          30,
          31
        ]
      },
      {
        "input": [
          19,
          19,
          14
        ],
        "output": [
          14,
          15,
          16,
          17,
          18,
          19
        ]
      }
    ]
  },
  {
    "id": "c050",
    "difficulty": 9,
    "function": "def c050(x):\n    # prepend first element to the list\n    return [x[0]] + x\n\n",
    "data": {
      "input": [
        14,
        82,
        26,
        18,
        59,
        40
      ],
      "output": [
        14,
        14,
        82,
        26,
        18,
        59,
        40
      ]
    },
    "demos": [
      {
        "input": [
          27,
          91,
          85,
          97,
          33,
          47
        ],
        "output": [
          27,
          27,
          91,
          85,
          97,
          33,
          47
        ]
      },
      {
        "input": [
          8,
          75,
          63,
          61,
          15,
          38,
          45
        ],
        "output": [
          8,
          8,
          75,
          63,
          61,
          15,
          38,
          45
        ]
      },
      {
        "input": [
          84,
          51,
          61
        ],
        "output": [
          84,
          84,
          51,
          61
        ]
      }
    ]
  },
  {
    "id": "c048",
    "difficulty": 10,
    "function": "def c048(x):\n    # remove all but the first element\n    return [x[0]]\n    \n",
    "data": {
      "input": [
        81,
        69,
        21,
        8,
        95,
        46,
        59
      ],
      "output": [
        81
      ]
    },
    "demos": [
      {
        "input": [
          46,
          90,
          75,
          70,
          49,
          59
        ],
        "output": [
          46
        ]
      },
      {
        "input": [
          78,
          83,
          56,
          89
        ],
        "output": [
          78
        ]
      },
      {
        "input": [
          27,
          98,
          67
        ],
        "output": [
          27
        ]
      }
    ]
  },
  {
    "id": "c147",
    "difficulty": 11,
    "function": "def c147(x):\n    # each element, followed by its index\n    res = []\n    for i, v in enumerate(x):\n        res.append(v)\n        res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        51,
        31,
        15,
        94,
        84,
        48,
        38
      ],
      "output": [
        51,
        0,
        31,
        1,
        15,
        2,
        94,
        3,
        84,
        4,
        48,
        5,
        38,
        6
      ]
    },
    "demos": [
      {
        "input": [
          0,
          77,
          20,
          39
        ],
        "output": [
          0,
          0,
          77,
          1,
          20,
          2,
          39,
          3
        ]
      },
      {
        "input": [
          54,
          0,
          20,
          92,
          69,
          20,
          40
        ],
        "output": [
          54,
          0,
          0,
          1,
          20,
          2,
          92,
          3,
          69,
          4,
          20,
          5,
          40,
          6
        ]
      },
      {
        "input": [
          83,
          57,
          25
        ],
        "output": [
          83,
          0,
          57,
          1,
          25,
          2
        ]
      }
    ]
  },
  {
    "id": "c120",
    "difficulty": 12,
    "function": "def c120(x):\n    # remove all but the first element\n    return [x[0]]\n\n",
    "data": {
      "input": [
        76,
        35,
        87,
        26,
        28,
        22
      ],
      "output": [
        76
      ]
    },
    "demos": [
      {
        "input": [
          77,
          0,
          22,
          31,
          92,
          70
        ],
        "output": [
          77
        ]
      },
      {
        "input": [
          12,
          92,
          76,
          3,
          98
        ],
        "output": [
          12
        ]
      },
      {
        "input": [
          53,
          59,
          59,
          17
        ],
        "output": [
          53
        ]
      }
    ]
  },
  {
    "id": "c127",
    "difficulty": 13,
    "function": "def c127(x):\n    # remove last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        51,
        23,
        14,
        62,
        74,
        2
      ],
      "output": [
        51,
        23,
        14,
        62,
        74
      ]
    },
    "demos": [
      {
        "input": [
          42,
          31,
          23,
          36,
          70
        ],
        "output": [
          42,
          31,
          23,
          36
        ]
      },
      {
        "input": [
          54,
          44,
          41
        ],
        "output": [
          54,
          44
        ]
      },
      {
        "input": [
          8,
          73,
          9,
          81
        ],
        "output": [
          8,
          73,
          9
        ]
      }
    ]
  },
  {
    "id": "c100",
    "difficulty": 14,
    "function": "def c100(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        96,
        33,
        78,
        33
      ],
      "output": [
        33,
        78,
        33,
        96
      ]
    },
    "demos": [
      {
        "input": [
          74,
          94,
          35,
          56
        ],
        "output": [
          56,
          35,
          94,
          74
        ]
      },
      {
        "input": [
          14,
          7,
          74
        ],
        "output": [
          74,
          7,
          14
        ]
      },
      {
        "input": [
          96,
          40,
          21
        ],
        "output": [
          21,
          40,
          96
        ]
      }
    ]
  },
  {
    "id": "c145",
    "difficulty": 15,
    "function": "def c145(x):\n    # replace every element with the first element\n    return [x[0]] * len(x)\n\n",
    "data": {
      "input": [
        74,
        33,
        3,
        87,
        33
      ],
      "output": [
        74,
        74,
        74,
        74,
        74
      ]
    },
    "demos": [
      {
        "input": [
          10,
          99,
          85,
          7,
          59
        ],
        "output": [
          10,
          10,
          10,
          10,
          10
        ]
      },
      {
        "input": [
          41,
          97,
          22,
          95,
          46,
          47
        ],
        "output": [
          41,
          41,
          41,
          41,
          41,
          41
        ]
      },
      {
        "input": [
          98,
          6,
          92,
          41,
          90,
          45,
          43
        ],
        "output": [
          98,
          98,
          98,
          98,
          98,
          98,
          98
        ]
      }
    ]
  },
  {
    "id": "c079",
    "difficulty": 16,
    "function": "def c079(x):\n    # sum of the list\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        7,
        17,
        12
      ],
      "output": [
        36
      ]
    },
    "demos": [
      {
        "input": [
          17,
          15,
          14,
          15,
          5,
          1
        ],
        "output": [
          67
        ]
      },
      {
        "input": [
          8,
          15,
          20,
          4
        ],
        "output": [
          47
        ]
      },
      {
        "input": [
          5,
          6,
          13
        ],
        "output": [
          24
        ]
      }
    ]
  },
  {
    "id": "c043",
    "difficulty": 17,
    "function": "def c043(x):\n    return [8, 2, 7, 0, 3]\n\n",
    "data": {
      "input": [
        13,
        95,
        76
      ],
      "output": [
        8,
        2,
        7,
        0,
        3
      ]
    },
    "demos": [
      {
        "input": [
          99,
          1,
          49,
          90,
          40,
          75
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          68,
          24,
          54
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          82,
          56,
          36,
          48,
          49,
          71,
          6
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      }
    ]
  },
  {
    "id": "c038",
    "difficulty": 18,
    "function": "def c038(x):\n    # append 9\n    return x + [9]\n\n",
    "data": {
      "input": [
        96,
        58,
        44,
        73,
        5,
        56,
        77
      ],
      "output": [
        96,
        58,
        44,
        73,
        5,
        56,
        77,
        9
      ]
    },
    "demos": [
      {
        "input": [
          82,
          39,
          37,
          69,
          73,
          73
        ],
        "output": [
          82,
          39,
          37,
          69,
          73,
          73,
          9
        ]
      },
      {
        "input": [
          71,
          88,
          89,
          21
        ],
        "output": [
          71,
          88,
          89,
          21,
          9
        ]
      },
      {
        "input": [
          69,
          64,
          55,
          93,
          80,
          14
        ],
        "output": [
          69,
          64,
          55,
          93,
          80,
          14,
          9
        ]
      }
    ]
  },
  {
    "id": "c042",
    "difficulty": 19,
    "function": "def c042(x):\n    return [5, 2]\n\n",
    "data": {
      "input": [
        32,
        37,
        88
      ],
      "output": [
        5,
        2
      ]
    },
    "demos": [
      {
        "input": [
          90,
          56,
          60,
          10
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          80,
          86,
          89,
          95
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          32,
          47,
          64,
          38
        ],
        "output": [
          5,
          2
        ]
      }
    ]
  },
  {
    "id": "c223",
    "difficulty": 20,
    "function": "def c223(x):\n    # swap the digits of each element\n    return [int(str(i)[::-1]) for i in x]\n\n",
    "data": {
      "input": [
        40,
        39,
        4,
        92,
        86,
        47,
        78
      ],
      "output": [
        4,
        93,
        4,
        29,
        68,
        74,
        87
      ]
    },
    "demos": [
      {
        "input": [
          70,
          14,
          44,
          15
        ],
        "output": [
          7,
          41,
          44,
          51
        ]
      },
      {
        "input": [
          83,
          8,
          4,
          97,
          59,
          82
        ],
        "output": [
          38,
          8,
          4,
          79,
          95,
          28
        ]
      },
      {
        "input": [
          97,
          7,
          93
        ],
        "output": [
          79,
          7,
          39
        ]
      }
    ]
  },
  {
    "id": "c137",
    "difficulty": 21,
    "function": "def c137(x):\n    # remove all 3\n    return [i for i in x if i != 3]\n\n",
    "data": {
      "input": [
        3,
        49,
        74,
        33,
        3
      ],
      "output": [
        49,
        74,
        33
      ]
    },
    "demos": [
      {
        "input": [
          64,
          78,
          70,
          65,
          69,
          10,
          3
        ],
        "output": [
          64,
          78,
          70,
          65,
          69,
          10
        ]
      },
      {
        "input": [
          3,
          6,
          5,
          9,
          37,
          16
        ],
        "output": [
          6,
          5,
          9,
          37,
          16
        ]
      },
      {
        "input": [
          86,
          93,
          48,
          3,
          23,
          64,
          44
        ],
        "output": [
          86,
          93,
          48,
          23,
          64,
          44
        ]
      }
    ]
  },
  {
    "id": "c238",
    "difficulty": 22,
    "function": "def c238(x):\n    # keep only elements that appear exactly once\n    return [i for i in x if x.count(i) == 1]\n\n",
    "data": {
      "input": [
        11,
        5,
        4,
        1,
        5,
        2,
        2,
        2
      ],
      "output": [
        11,
        4,
        1
      ]
    },
    "demos": [
      {
        "input": [
          8,
          0,
          5,
          12,
          0,
          2
        ],
        "output": [
          8,
          5,
          12,
          2
        ]
      },
      {
        "input": [
          3,
          3,
          3,
          4,
          5,
          6,
          3,
          3
        ],
        "output": [
          4,
          5,
          6
        ]
      },
      {
        "input": [
          9,
          9,
          6,
          0,
          13,
          12,
          12,
          12
        ],
        "output": [
          6,
          0,
          13
        ]
      }
    ]
  },
  {
    "id": "c108",
    "difficulty": 23,
    "function": "def c108(x):\n    # sum of elements\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        18,
        14,
        14,
        5,
        4,
        16
      ],
      "output": [
        71
      ]
    },
    "demos": [
      {
        "input": [
          4,
          5,
          1,
          19,
          7
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          17,
          2,
          13
        ],
        "output": [
          32
        ]
      },
      {
        "input": [
          13,
          16,
          9,
          16,
          16,
          5,
          19
        ],
        "output": [
          94
        ]
      }
    ]
  },
  {
    "id": "c126",
    "difficulty": 24,
    "function": "def c126(x):\n    # remove first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        46,
        61,
        48
      ],
      "output": [
        61,
        48
      ]
    },
    "demos": [
      {
        "input": [
          84,
          19,
          27
        ],
        "output": [
          19,
          27
        ]
      },
      {
        "input": [
          25,
          50,
          99,
          85
        ],
        "output": [
          50,
          99,
          85
        ]
      },
      {
        "input": [
          3,
          31,
          40,
          45,
          9,
          4
        ],
        "output": [
          31,
          40,
          45,
          9,
          4
        ]
      }
    ]
  },
  {
    "id": "c187",
    "difficulty": 25,
    "function": "def c187(x):\n    # concatenate input with itself, separated by 0\n    return x + [0] + x\n\n",
    "data": {
      "input": [
        6,
        34,
        82,
        84,
        66
      ],
      "output": [
        6,
        34,
        82,
        84,
        66,
        0,
        6,
        34,
        82,
        84,
        66
      ]
    },
    "demos": [
      {
        "input": [
          88,
          99,
          62,
          73
        ],
        "output": [
          88,
          99,
          62,
          73,
          0,
          88,
          99,
          62,
          73
        ]
      },
      {
        "input": [
          99,
          2,
          91,
          93
        ],
        "output": [
          99,
          2,
          91,
          93,
          0,
          99,
          2,
          91,
          93
        ]
      },
      {
        "input": [
          30,
          52,
          46,
          11
        ],
        "output": [
          30,
          52,
          46,
          11,
          0,
          30,
          52,
          46,
          11
        ]
      }
    ]
  },
  {
    "id": "c022",
    "difficulty": 26,
    "function": "def c022(x):\n    # insert a 5 as element 1\n    return x[:1] + [5] + x[1:]\n\n",
    "data": {
      "input": [
        47,
        24,
        78,
        77,
        77
      ],
      "output": [
        47,
        5,
        24,
        78,
        77,
        77
      ]
    },
    "demos": [
      {
        "input": [
          93,
          76,
          74,
          49,
          13,
          43
        ],
        "output": [
          93,
          5,
          76,
          74,
          49,
          13,
          43
        ]
      },
      {
        "input": [
          64,
          11,
          53,
          74,
          30,
          38
        ],
        "output": [
          64,
          5,
          11,
          53,
          74,
          30,
          38
        ]
      },
      {
        "input": [
          1,
          86,
          89
        ],
        "output": [
          1,
          5,
          86,
          89
        ]
      }
    ]
  },
  {
    "id": "c212",
    "difficulty": 27,
    "function": "def c212(x):\n    # insert 3 at index 2, 3 times\n    return x[:3] + [3,3,3] + x[3:]\n\n",
    "data": {
      "input": [
        18,
        95,
        5,
        59,
        20,
        56
      ],
      "output": [
        18,
        95,
        5,
        3,
        3,
        3,
        59,
        20,
        56
      ]
    },
    "demos": [
      {
        "input": [
          10,
          45,
          74,
          95,
          43,
          84
        ],
        "output": [
          10,
          45,
          74,
          3,
          3,
          3,
          95,
          43,
          84
        ]
      },
      {
        "input": [
          93,
          96,
          8,
          35
        ],
        "output": [
          93,
          96,
          8,
          3,
          3,
          3,
          35
        ]
      },
      {
        "input": [
          63,
          95,
          52,
          96,
          38
        ],
        "output": [
          63,
          95,
          52,
          3,
          3,
          3,
          96,
          38
        ]
      }
    ]
  },
  {
    "id": "c101",
    "difficulty": 28,
    "function": "def c101(x):\n    return [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]\n\n",
    "data": {
      "input": [
        99,
        59,
        51,
        10,
        16
      ],
      "output": [
        11,
        19,
        24,
        33,
        42,
        5,
        82,
        0,
        64,
        9
      ]
    },
    "demos": [
      {
        "input": [
          64,
          74,
          9,
          23,
          50
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          66,
          46,
          75,
          72,
          39,
          90
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          11,
          37,
          44,
          5,
          43
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      }
    ]
  },
  {
    "id": "c021",
    "difficulty": 29,
    "function": "def c021(x):\n    # insert 8 as element 1\n    return x[:1] + [8] + x[1:]\n\n",
    "data": {
      "input": [
        97,
        89,
        41,
        36,
        47
      ],
      "output": [
        97,
        8,
        89,
        41,
        36,
        47
      ]
    },
    "demos": [
      {
        "input": [
          43,
          43,
          31,
          6,
          42,
          6
        ],
        "output": [
          43,
          8,
          43,
          31,
          6,
          42,
          6
        ]
      },
      {
        "input": [
          4,
          75,
          23,
          39,
          21,
          64,
          38
        ],
        "output": [
          4,
          8,
          75,
          23,
          39,
          21,
          64,
          38
        ]
      },
      {
        "input": [
          26,
          67,
          29,
          61,
          18,
          15,
          70
        ],
        "output": [
          26,
          8,
          67,
          29,
          61,
          18,
          15,
          70
        ]
      }
    ]
  },
  {
    "id": "c105",
    "difficulty": 30,
    "function": "def c105(x):\n    # concatenate all but the last element with all but the first element\n    return x[:-1] + x[1:]\n\n",
    "data": {
      "input": [
        81,
        47,
        20,
        38,
        66,
        32
      ],
      "output": [
        81,
        47,
        20,
        38,
        66,
        47,
        20,
        38,
        66,
        32
      ]
    },
    "demos": [
      {
        "input": [
          2,
          49,
          69,
          95,
          95
        ],
        "output": [
          2,
          49,
          69,
          95,
          49,
          69,
          95,
          95
        ]
      },
      {
        "input": [
          94,
          45,
          42,
          36,
          33
        ],
        "output": [
          94,
          45,
          42,
          36,
          45,
          42,
          36,
          33
        ]
      },
      {
        "input": [
          49,
          3,
          22
        ],
        "output": [
          49,
          3,
          3,
          22
        ]
      }
    ]
  },
  {
    "id": "c041",
    "difficulty": 31,
    "function": "def c041(x):\n    return [9]\n\n",
    "data": {
      "input": [
        93,
        19,
        31,
        4,
        16,
        32
      ],
      "output": [
        9
      ]
    },
    "demos": [
      {
        "input": [
          78,
          70,
          91
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          59,
          55,
          2,
          98,
          44,
          64,
          3
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          13,
          66,
          81,
          4,
          55
        ],
        "output": [
          9
        ]
      }
    ]
  },
  {
    "id": "c070",
    "difficulty": 32,
    "function": "def c070(x):\n    # concatenate the input\n    return x + x\n\n",
    "data": {
      "input": [
        55,
        10,
        40,
        51
      ],
      "output": [
        55,
        10,
        40,
        51,
        55,
        10,
        40,
        51
      ]
    },
    "demos": [
      {
        "input": [
          62,
          26,
          22
        ],
        "output": [
          62,
          26,
          22,
          62,
          26,
          22
        ]
      },
      {
        "input": [
          26,
          3,
          14,
          57,
          3
        ],
        "output": [
          26,
          3,
          14,
          57,
          3,
          26,
          3,
          14,
          57,
          3
        ]
      },
      {
        "input": [
          74,
          73,
          75,
          17,
          35
        ],
        "output": [
          74,
          73,
          75,
          17,
          35,
          74,
          73,
          75,
          17,
          35
        ]
      }
    ]
  },
  {
    "id": "c052",
    "difficulty": 33,
    "function": "def c052(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        68,
        11,
        65,
        32
      ],
      "output": [
        68,
        68,
        68,
        68,
        68,
        68,
        68
      ]
    },
    "demos": [
      {
        "input": [
          62,
          78,
          20,
          43
        ],
        "output": [
          62,
          62,
          62,
          62,
          62,
          62,
          62
        ]
      },
      {
        "input": [
          40,
          87,
          26,
          46
        ],
        "output": [
          40,
          40,
          40,
          40,
          40,
          40,
          40
        ]
      },
      {
        "input": [
          63,
          13,
          8
        ],
        "output": [
          63,
          63,
          63,
          63,
          63,
          63,
          63
        ]
      }
    ]
  },
  {
    "id": "c044",
    "difficulty": 34,
    "function": "def c044(x):\n    return [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]\n\n",
    "data": {
      "input": [
        59,
        78,
        73,
        74,
        51
      ],
      "output": [
        1,
        9,
        4,
        3,
        2,
        5,
        8,
        0,
        4,
        9
      ]
    },
    "demos": [
      {
        "input": [
          45,
          49,
          8,
          25
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          4,
          67,
          82,
          38,
          41
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          14,
          20,
          15,
          14,
          54,
          27,
          82
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      }
    ]
  },
  {
    "id": "c190",
    "difficulty": 35,
    "function": "def c190(x):\n    # count by 2 from the first element to the last element\n    if x[0] < x[-1]:\n        return list(range(x[0], x[-1]+1, 2))\n    else:\n        return list(range(x[0], x[-1]-1, -2))\n\n",
    "data": {
      "input": [
        38,
        53,
        21
      ],
      "output": [
        38,
        36,
        34,
        32,
        30,
        28,
        26,
        24,
        22
      ]
    },
    "demos": [
      {
        "input": [
          73,
          9,
          77,
          79,
          80
        ],
        "output": [
          73,
          75,
          77,
          79
        ]
      },
      {
        "input": [
          87,
          52,
          88,
          10,
          11,
          11,
          91
        ],
        "output": [
          87,
          89,
          91
        ]
      },
      {
        "input": [
          45,
          23,
          29
        ],
        "output": [
          45,
          43,
          41,
          39,
          37,
          35,
          33,
          31,
          29
        ]
      }
    ]
  },
  {
    "id": "c037",
    "difficulty": 36,
    "function": "def c037(x):\n    # append 3\n    return x + [3]\n\n",
    "data": {
      "input": [
        43,
        97,
        96,
        23,
        79
      ],
      "output": [
        43,
        97,
        96,
        23,
        79,
        3
      ]
    },
    "demos": [
      {
        "input": [
          23,
          65,
          77
        ],
        "output": [
          23,
          65,
          77,
          3
        ]
      },
      {
        "input": [
          16,
          0,
          96,
          96,
          96,
          21
        ],
        "output": [
          16,
          0,
          96,
          96,
          96,
          21,
          3
        ]
      },
      {
        "input": [
          53,
          79,
          15,
          81,
          3
        ],
        "output": [
          53,
          79,
          15,
          81,
          3,
          3
        ]
      }
    ]
  },
  {
    "id": "c222",
    "difficulty": 37,
    "function": "def c222(x):\n    # remove each element with the input length\n    return [len(x) for _ in x]\n\n",
    "data": {
      "input": [
        38,
        49,
        32,
        25,
        74
      ],
      "output": [
        5,
        5,
        5,
        5,
        5
      ]
    },
    "demos": [
      {
        "input": [
          27,
          55,
          72,
          20,
          73,
          94,
          49
        ],
        "output": [
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ]
      },
      {
        "input": [
          86,
          8,
          13
        ],
        "output": [
          3,
          3,
          3
        ]
      },
      {
        "input": [
          82,
          83,
          70,
          24,
          31,
          30
        ],
        "output": [
          6,
          6,
          6,
          6,
          6,
          6
        ]
      }
    ]
  },
  {
    "id": "c107",
    "difficulty": 38,
    "function": "def c107(x):\n    # unique elements, in order of appearance\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        75,
        69,
        7,
        29,
        75,
        75,
        69
      ],
      "output": [
        75,
        69,
        7,
        29
      ]
    },
    "demos": [
      {
        "input": [
          47,
          79,
          61,
          12,
          85,
          79
        ],
        "output": [
          47,
          79,
          61,
          12,
          85
        ]
      },
      {
        "input": [
          40,
          85,
          63,
          44,
          63,
          40,
          63
        ],
        "output": [
          40,
          85,
          63,
          44
        ]
      },
      {
        "input": [
          79,
          63,
          63,
          37
        ],
        "output": [
          79,
          63,
          37
        ]
      }
    ]
  },
  {
    "id": "c011",
    "difficulty": 39,
    "function": "def c011(x):\n    # [1:4] of the input\n    return x[1:4]\n\n",
    "data": {
      "input": [
        97,
        38,
        53,
        82,
        46,
        58,
        42
      ],
      "output": [
        38,
        53,
        82
      ]
    },
    "demos": [
      {
        "input": [
          47,
          21,
          93,
          93,
          59,
          35
        ],
        "output": [
          21,
          93,
          93
        ]
      },
      {
        "input": [
          80,
          86,
          99,
          39,
          89
        ],
        "output": [
          86,
          99,
          39
        ]
      },
      {
        "input": [
          52,
          49,
          88,
          98,
          76,
          46,
          25
        ],
        "output": [
          49,
          88,
          98
        ]
      }
    ]
  },
  {
    "id": "c104",
    "difficulty": 40,
    "function": "def c104(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        26,
        27,
        79,
        0,
        79,
        14
      ],
      "output": [
        79
      ]
    },
    "demos": [
      {
        "input": [
          21,
          56,
          63,
          86,
          47,
          2,
          50
        ],
        "output": [
          86
        ]
      },
      {
        "input": [
          56,
          52,
          61
        ],
        "output": [
          61
        ]
      },
      {
        "input": [
          56,
          62,
          33,
          65
        ],
        "output": [
          65
        ]
      }
    ]
  },
  {
    "id": "c192",
    "difficulty": 41,
    "function": "def c192(x):\n    # replace each element, M, with its tens digit, if no tens digit, replace with 0\n    return [int(str(i)[-2]) if len(str(i)) > 1 else 0 for i in x]\n\n",
    "data": {
      "input": [
        44,
        5,
        16,
        80,
        99,
        40
      ],
      "output": [
        4,
        0,
        1,
        8,
        9,
        4
      ]
    },
    "demos": [
      {
        "input": [
          67,
          45,
          71,
          12,
          46
        ],
        "output": [
          6,
          4,
          7,
          1,
          4
        ]
      },
      {
        "input": [
          16,
          66,
          90,
          23
        ],
        "output": [
          1,
          6,
          9,
          2
        ]
      },
      {
        "input": [
          47,
          54,
          91,
          82
        ],
        "output": [
          4,
          5,
          9,
          8
        ]
      }
    ]
  },
  {
    "id": "c182",
    "difficulty": 42,
    "function": "def c182(x):\n    # keep every third element\n    return x[::3]\n\n",
    "data": {
      "input": [
        0,
        45,
        36,
        68,
        53,
        97,
        69,
        30,
        23
      ],
      "output": [
        0,
        68,
        69
      ]
    },
    "demos": [
      {
        "input": [
          64,
          42,
          67,
          55,
          77,
          21,
          10,
          36
        ],
        "output": [
          64,
          55,
          10
        ]
      },
      {
        "input": [
          25,
          27,
          53,
          56,
          80,
          2
        ],
        "output": [
          25,
          56
        ]
      },
      {
        "input": [
          15,
          30,
          30,
          54,
          41,
          15,
          74,
          48
        ],
        "output": [
          15,
          54,
          74
        ]
      }
    ]
  },
  {
    "id": "c006",
    "difficulty": 43,
    "function": "def c006(x):\n    # the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        90,
        26,
        74,
        85,
        84
      ],
      "output": [
        90,
        26
      ]
    },
    "demos": [
      {
        "input": [
          5,
          90,
          58
        ],
        "output": [
          5,
          90
        ]
      },
      {
        "input": [
          31,
          95,
          67,
          66,
          93,
          69
        ],
        "output": [
          31,
          95
        ]
      },
      {
        "input": [
          24,
          46,
          44,
          23,
          98,
          38,
          16
        ],
        "output": [
          24,
          46
        ]
      }
    ]
  },
  {
    "id": "c046",
    "difficulty": 44,
    "function": "def c046(x):\n    # prepend 7\n    return [7] + x\n\n",
    "data": {
      "input": [
        99,
        67,
        84,
        29,
        69
      ],
      "output": [
        7,
        99,
        67,
        84,
        29,
        69
      ]
    },
    "demos": [
      {
        "input": [
          13,
          13,
          63,
          51
        ],
        "output": [
          7,
          13,
          13,
          63,
          51
        ]
      },
      {
        "input": [
          85,
          40,
          18,
          58,
          89,
          42
        ],
        "output": [
          7,
          85,
          40,
          18,
          58,
          89,
          42
        ]
      },
      {
        "input": [
          83,
          6,
          59,
          62,
          28
        ],
        "output": [
          7,
          83,
          6,
          59,
          62,
          28
        ]
      }
    ]
  },
  {
    "id": "c106",
    "difficulty": 45,
    "function": "def c106(x):\n    # elements in ascending order\n    return sorted(x)\n\n",
    "data": {
      "input": [
        79,
        35,
        20,
        61,
        65,
        69,
        93
      ],
      "output": [
        20,
        35,
        61,
        65,
        69,
        79,
        93
      ]
    },
    "demos": [
      {
        "input": [
          71,
          31,
          57
        ],
        "output": [
          31,
          57,
          71
        ]
      },
      {
        "input": [
          43,
          57,
          42,
          90
        ],
        "output": [
          42,
          43,
          57,
          90
        ]
      },
      {
        "input": [
          46,
          31,
          30,
          65,
          59,
          82
        ],
        "output": [
          30,
          31,
          46,
          59,
          65,
          82
        ]
      }
    ]
  },
  {
    "id": "c114",
    "difficulty": 46,
    "function": "def c114(x):\n    # prepend the last element\n    return [x[-1]] + x\n\n",
    "data": {
      "input": [
        49,
        20,
        18
      ],
      "output": [
        18,
        49,
        20,
        18
      ]
    },
    "demos": [
      {
        "input": [
          90,
          63,
          15,
          92,
          29,
          91,
          79
        ],
        "output": [
          79,
          90,
          63,
          15,
          92,
          29,
          91,
          79
        ]
      },
      {
        "input": [
          70,
          63,
          40,
          3
        ],
        "output": [
          3,
          70,
          63,
          40,
          3
        ]
      },
      {
        "input": [
          85,
          90,
          55,
          62
        ],
        "output": [
          62,
          85,
          90,
          55,
          62
        ]
      }
    ]
  },
  {
    "id": "c093",
    "difficulty": 47,
    "function": "def c093(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        55,
        42,
        3
      ],
      "output": [
        55,
        55,
        55,
        55,
        55,
        55,
        55
      ]
    },
    "demos": [
      {
        "input": [
          89,
          26,
          75,
          91
        ],
        "output": [
          89,
          89,
          89,
          89,
          89,
          89,
          89
        ]
      },
      {
        "input": [
          89,
          53,
          75,
          64
        ],
        "output": [
          89,
          89,
          89,
          89,
          89,
          89,
          89
        ]
      },
      {
        "input": [
          19,
          53,
          62,
          49,
          56
        ],
        "output": [
          19,
          19,
          19,
          19,
          19,
          19,
          19
        ]
      }
    ]
  },
  {
    "id": "c195",
    "difficulty": 48,
    "function": "def c195(x):\n    # element 1, followed by 23, 68, 42, 99, 71, followed by last element\n    return [x[0], 23, 68, 42, 99, 71, x[-1]]\n\n",
    "data": {
      "input": [
        69,
        7,
        64,
        3
      ],
      "output": [
        69,
        23,
        68,
        42,
        99,
        71,
        3
      ]
    },
    "demos": [
      {
        "input": [
          38,
          42,
          28
        ],
        "output": [
          38,
          23,
          68,
          42,
          99,
          71,
          28
        ]
      },
      {
        "input": [
          6,
          71,
          76,
          16,
          7
        ],
        "output": [
          6,
          23,
          68,
          42,
          99,
          71,
          7
        ]
      },
      {
        "input": [
          65,
          32,
          62,
          22,
          7,
          68
        ],
        "output": [
          65,
          23,
          68,
          42,
          99,
          71,
          68
        ]
      }
    ]
  },
  {
    "id": "c196",
    "difficulty": 49,
    "function": "def c196(x):\n    # concatenate 17, 38, 82 input 1 55 27\n    return [17, 38, 82] + x + [1, 55, 27]\n\n",
    "data": {
      "input": [
        66,
        34,
        86,
        2,
        91,
        41
      ],
      "output": [
        17,
        38,
        82,
        66,
        34,
        86,
        2,
        91,
        41,
        1,
        55,
        27
      ]
    },
    "demos": [
      {
        "input": [
          3,
          44,
          13,
          90,
          5
        ],
        "output": [
          17,
          38,
          82,
          3,
          44,
          13,
          90,
          5,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          39,
          17
        ],
        "output": [
          17,
          38,
          82,
          39,
          17,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          31,
          6,
          93,
          95,
          10
        ],
        "output": [
          17,
          38,
          82,
          31,
          6,
          93,
          95,
          10,
          1,
          55,
          27
        ]
      }
    ]
  },
  {
    "id": "c095",
    "difficulty": 50,
    "function": "def c095(x):\n    # remove the first element and the last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        99,
        42,
        82,
        16,
        70
      ],
      "output": [
        42,
        82,
        16
      ]
    },
    "demos": [
      {
        "input": [
          28,
          21,
          64,
          79,
          73,
          40
        ],
        "output": [
          21,
          64,
          79,
          73
        ]
      },
      {
        "input": [
          0,
          29,
          86,
          62,
          55,
          74
        ],
        "output": [
          29,
          86,
          62,
          55
        ]
      },
      {
        "input": [
          17,
          32,
          91,
          22,
          44
        ],
        "output": [
          32,
          91,
          22
        ]
      }
    ]
  },
  {
    "id": "c016",
    "difficulty": 51,
    "function": "def c016(x):\n    # replace element 1 with 8\n    return [8] + x[1:]\n\n",
    "data": {
      "input": [
        44,
        25,
        88,
        89,
        8
      ],
      "output": [
        8,
        25,
        88,
        89,
        8
      ]
    },
    "demos": [
      {
        "input": [
          2,
          98,
          53
        ],
        "output": [
          8,
          98,
          53
        ]
      },
      {
        "input": [
          95,
          64,
          58,
          39,
          96,
          26
        ],
        "output": [
          8,
          64,
          58,
          39,
          96,
          26
        ]
      },
      {
        "input": [
          43,
          6,
          63,
          72,
          10
        ],
        "output": [
          8,
          6,
          63,
          72,
          10
        ]
      }
    ]
  },
  {
    "id": "c224",
    "difficulty": 52,
    "function": "def c224(x):\n    # reverse the list, then take every other element starting from the second element, then take every other element starting from the first element\n    return x[::-2] + x[(len(x) % 2)::2]\n\n",
    "data": {
      "input": [
        85,
        10,
        38,
        59
      ],
      "output": [
        59,
        10,
        85,
        38
      ]
    },
    "demos": [
      {
        "input": [
          72,
          8,
          16
        ],
        "output": [
          16,
          72,
          8
        ]
      },
      {
        "input": [
          43,
          28,
          8,
          25,
          8,
          16
        ],
        "output": [
          16,
          25,
          28,
          43,
          8,
          8
        ]
      },
      {
        "input": [
          43,
          15,
          35,
          6,
          39,
          56
        ],
        "output": [
          56,
          6,
          15,
          43,
          35,
          39
        ]
      }
    ]
  },
  {
    "id": "c116",
    "difficulty": 53,
    "function": "def c116(x):\n    # reflect the input on itself\n    return x[::-1] + x[1:]\n\n",
    "data": {
      "input": [
        94,
        7,
        77,
        71,
        37,
        50
      ],
      "output": [
        50,
        37,
        71,
        77,
        7,
        94,
        7,
        77,
        71,
        37,
        50
      ]
    },
    "demos": [
      {
        "input": [
          21,
          19,
          71,
          96,
          38
        ],
        "output": [
          38,
          96,
          71,
          19,
          21,
          19,
          71,
          96,
          38
        ]
      },
      {
        "input": [
          42,
          19,
          57,
          65,
          91,
          42
        ],
        "output": [
          42,
          91,
          65,
          57,
          19,
          42,
          19,
          57,
          65,
          91,
          42
        ]
      },
      {
        "input": [
          99,
          41,
          48,
          64,
          34,
          53
        ],
        "output": [
          53,
          34,
          64,
          48,
          41,
          99,
          41,
          48,
          64,
          34,
          53
        ]
      }
    ]
  },
  {
    "id": "c140",
    "difficulty": 54,
    "function": "def c140(x):\n    # replace element 1 with 9\n    return x[:1] + [9] + x[2:]\n\n",
    "data": {
      "input": [
        87,
        96,
        8,
        87,
        18,
        66,
        8
      ],
      "output": [
        87,
        9,
        8,
        87,
        18,
        66,
        8
      ]
    },
    "demos": [
      {
        "input": [
          65,
          89,
          82,
          34,
          53,
          99
        ],
        "output": [
          65,
          9,
          82,
          34,
          53,
          99
        ]
      },
      {
        "input": [
          46,
          51,
          75,
          2,
          29
        ],
        "output": [
          46,
          9,
          75,
          2,
          29
        ]
      },
      {
        "input": [
          23,
          84,
          64,
          35,
          16,
          17,
          88
        ],
        "output": [
          23,
          9,
          64,
          35,
          16,
          17,
          88
        ]
      }
    ]
  },
  {
    "id": "c049",
    "difficulty": 55,
    "function": "def c049(x):\n    # remove the first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        83,
        1,
        42,
        23,
        24,
        23,
        69
      ],
      "output": [
        1,
        42,
        23,
        24,
        23,
        69
      ]
    },
    "demos": [
      {
        "input": [
          90,
          21,
          43
        ],
        "output": [
          21,
          43
        ]
      },
      {
        "input": [
          82,
          29,
          97,
          81,
          28,
          79,
          0
        ],
        "output": [
          29,
          97,
          81,
          28,
          79,
          0
        ]
      },
      {
        "input": [
          88,
          85,
          27,
          44,
          95
        ],
        "output": [
          85,
          27,
          44,
          95
        ]
      }
    ]
  },
  {
    "id": "c071",
    "difficulty": 56,
    "function": "def c071(x):\n    # add 2 to each element\n    return [i+2 for i in x]\n\n",
    "data": {
      "input": [
        54,
        28,
        59,
        6
      ],
      "output": [
        56,
        30,
        61,
        8
      ]
    },
    "demos": [
      {
        "input": [
          94,
          49,
          25,
          6,
          47
        ],
        "output": [
          96,
          51,
          27,
          8,
          49
        ]
      },
      {
        "input": [
          63,
          72,
          0,
          68,
          96,
          37
        ],
        "output": [
          65,
          74,
          2,
          70,
          98,
          39
        ]
      },
      {
        "input": [
          5,
          52,
          42,
          31
        ],
        "output": [
          7,
          54,
          44,
          33
        ]
      }
    ]
  },
  {
    "id": "c161",
    "difficulty": 57,
    "function": "def c161(x):\n    # replace each element, M, with M + the input length - M index\n    return [i + len(x) - j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        51,
        67,
        3,
        2,
        5,
        91
      ],
      "output": [
        57,
        72,
        7,
        5,
        7,
        92
      ]
    },
    "demos": [
      {
        "input": [
          25,
          68,
          70,
          94,
          96,
          4,
          52
        ],
        "output": [
          32,
          74,
          75,
          98,
          99,
          6,
          53
        ]
      },
      {
        "input": [
          99,
          2,
          16,
          76,
          2,
          6
        ],
        "output": [
          105,
          7,
          20,
          79,
          4,
          7
        ]
      },
      {
        "input": [
          46,
          42,
          1,
          70
        ],
        "output": [
          50,
          45,
          3,
          71
        ]
      }
    ]
  },
  {
    "id": "c068",
    "difficulty": 58,
    "function": "def c068(x):\n    # concatenate the input with 7, 3, 8, 4, 3\n    return x + [7, 3, 8, 4, 3]\n\n",
    "data": {
      "input": [
        26,
        92,
        27
      ],
      "output": [
        26,
        92,
        27,
        7,
        3,
        8,
        4,
        3
      ]
    },
    "demos": [
      {
        "input": [
          21,
          96,
          37,
          36,
          96
        ],
        "output": [
          21,
          96,
          37,
          36,
          96,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          27,
          40,
          25,
          0,
          69
        ],
        "output": [
          27,
          40,
          25,
          0,
          69,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          3,
          19,
          88,
          66
        ],
        "output": [
          3,
          19,
          88,
          66,
          7,
          3,
          8,
          4,
          3
        ]
      }
    ]
  },
  {
    "id": "c103",
    "difficulty": 59,
    "function": "def c103(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        23,
        98,
        12
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          71,
          20,
          60,
          4,
          9,
          40
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          77,
          48,
          68,
          47,
          91
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          30,
          59,
          55,
          13,
          71
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c001",
    "difficulty": 60,
    "function": "def c001(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        43,
        84,
        82
      ],
      "output": [
        82
      ]
    },
    "demos": [
      {
        "input": [
          25,
          81,
          62,
          89,
          14,
          80
        ],
        "output": [
          62
        ]
      },
      {
        "input": [
          90,
          30,
          46,
          80
        ],
        "output": [
          46
        ]
      },
      {
        "input": [
          79,
          96,
          87,
          44
        ],
        "output": [
          87
        ]
      }
    ]
  },
  {
    "id": "c090",
    "difficulty": 61,
    "function": "def c090(x):\n    return [18, 42, 77, 20, 36]\n\n",
    "data": {
      "input": [
        72,
        21,
        76,
        75
      ],
      "output": [
        18,
        42,
        77,
        20,
        36
      ]
    },
    "demos": [
      {
        "input": [
          47,
          56,
          79
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          68,
          89,
          93,
          82
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          44,
          6,
          14,
          93
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      }
    ]
  },
  {
    "id": "c097",
    "difficulty": 62,
    "function": "def c097(x):\n    # concatenate 11, 21, 43 input 7 89 0\n    return [11, 21, 43] + x + [7, 89, 0]\n\n",
    "data": {
      "input": [
        20,
        63,
        97,
        66,
        52
      ],
      "output": [
        11,
        21,
        43,
        20,
        63,
        97,
        66,
        52,
        7,
        89,
        0
      ]
    },
    "demos": [
      {
        "input": [
          65,
          67,
          77
        ],
        "output": [
          11,
          21,
          43,
          65,
          67,
          77,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          88,
          39,
          97,
          70,
          46
        ],
        "output": [
          11,
          21,
          43,
          88,
          39,
          97,
          70,
          46,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          44,
          18,
          83,
          12,
          48
        ],
        "output": [
          11,
          21,
          43,
          44,
          18,
          83,
          12,
          48,
          7,
          89,
          0
        ]
      }
    ]
  },
  {
    "id": "c142",
    "difficulty": 63,
    "function": "def c142(x):\n    # every digit in order of appearance\n    res = []\n    for i in x:\n        for j in str(i):\n            res.append(int(j))\n    return res\n\n",
    "data": {
      "input": [
        2,
        27,
        41,
        94,
        8,
        10,
        2
      ],
      "output": [
        2,
        2,
        7,
        4,
        1,
        9,
        4,
        8,
        1,
        0,
        2
      ]
    },
    "demos": [
      {
        "input": [
          38,
          9,
          43,
          38,
          56,
          49
        ],
        "output": [
          3,
          8,
          9,
          4,
          3,
          3,
          8,
          5,
          6,
          4,
          9
        ]
      },
      {
        "input": [
          40,
          0,
          81,
          35,
          79,
          70
        ],
        "output": [
          4,
          0,
          0,
          8,
          1,
          3,
          5,
          7,
          9,
          7,
          0
        ]
      },
      {
        "input": [
          9,
          84,
          51,
          55
        ],
        "output": [
          9,
          8,
          4,
          5,
          1,
          5,
          5
        ]
      }
    ]
  },
  {
    "id": "c091",
    "difficulty": 64,
    "function": "def c091(x):\n    return [81, 99, 41, 23, 22, 75, 68, 30]\n\n",
    "data": {
      "input": [
        21,
        73,
        31,
        68
      ],
      "output": [
        81,
        99,
        41,
        23,
        22,
        75,
        68,
        30
      ]
    },
    "demos": [
      {
        "input": [
          20,
          26,
          29,
          88
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          98,
          67,
          41
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          89,
          39,
          6,
          99
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      }
    ]
  },
  {
    "id": "c034",
    "difficulty": 65,
    "function": "def c034(x):\n    # swap element 1 and element 2\n    x[0], x[1] = x[1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        62,
        3,
        83,
        39,
        75,
        58
      ],
      "output": [
        3,
        62,
        83,
        39,
        75,
        58
      ]
    },
    "demos": [
      {
        "input": [
          84,
          31,
          59,
          68,
          6,
          4,
          15
        ],
        "output": [
          31,
          84,
          59,
          68,
          6,
          4,
          15
        ]
      },
      {
        "input": [
          27,
          74,
          5,
          67
        ],
        "output": [
          74,
          27,
          5,
          67
        ]
      },
      {
        "input": [
          1,
          85,
          30,
          2,
          47,
          14,
          37
        ],
        "output": [
          85,
          1,
          30,
          2,
          47,
          14,
          37
        ]
      }
    ]
  },
  {
    "id": "c244",
    "difficulty": 66,
    "function": "def c244(x):\n    # number of 3s\n    return [x.count(3)]\n\n",
    "data": {
      "input": [
        3,
        43,
        3,
        2,
        20,
        3,
        62
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          3,
          15,
          56,
          30,
          75,
          3
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          45,
          3,
          3,
          85,
          93,
          66
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          21,
          67,
          25,
          34,
          2
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c171",
    "difficulty": 67,
    "function": "def c171(x):\n    # cumulative sum\n    res = []\n    s = 0\n    for i in x:\n        s += i\n        res.append(s)\n    return res\n\n",
    "data": {
      "input": [
        20,
        18,
        12,
        2,
        2,
        4,
        8
      ],
      "output": [
        20,
        38,
        50,
        52,
        54,
        58,
        66
      ]
    },
    "demos": [
      {
        "input": [
          6,
          7,
          3
        ],
        "output": [
          6,
          13,
          16
        ]
      },
      {
        "input": [
          18,
          16,
          15,
          10,
          8,
          0
        ],
        "output": [
          18,
          34,
          49,
          59,
          67,
          67
        ]
      },
      {
        "input": [
          10,
          20,
          8
        ],
        "output": [
          10,
          30,
          38
        ]
      }
    ]
  },
  {
    "id": "c172",
    "difficulty": 68,
    "function": "def c172(x):\n    # cumulative product\n    res = []\n    p = 1\n    for i in x:\n        p *= i\n        res.append(p)\n    return res\n\n",
    "data": {
      "input": [
        6,
        9,
        0
      ],
      "output": [
        6,
        54,
        0
      ]
    },
    "demos": [
      {
        "input": [
          1,
          3,
          4,
          4,
          10
        ],
        "output": [
          1,
          3,
          12,
          48,
          480
        ]
      },
      {
        "input": [
          3,
          4,
          6,
          7,
          5,
          2
        ],
        "output": [
          3,
          12,
          72,
          504,
          2520,
          5040
        ]
      },
      {
        "input": [
          9,
          4,
          3,
          2
        ],
        "output": [
          9,
          36,
          108,
          216
        ]
      }
    ]
  },
  {
    "id": "c062",
    "difficulty": 69,
    "function": "def c062(x):\n    # remove the last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        67,
        99,
        69,
        68,
        8,
        41,
        35
      ],
      "output": [
        67,
        99,
        69,
        68,
        8,
        41
      ]
    },
    "demos": [
      {
        "input": [
          21,
          12,
          18,
          25,
          73,
          65
        ],
        "output": [
          21,
          12,
          18,
          25,
          73
        ]
      },
      {
        "input": [
          61,
          50,
          81
        ],
        "output": [
          61,
          50
        ]
      },
      {
        "input": [
          52,
          70,
          78,
          30,
          11
        ],
        "output": [
          52,
          70,
          78,
          30
        ]
      }
    ]
  },
  {
    "id": "c096",
    "difficulty": 70,
    "function": "def c096(x):\n    # prepend 98 and append 37\n    return [98] + x + [37]\n\n",
    "data": {
      "input": [
        15,
        68,
        97,
        86,
        20,
        65,
        86
      ],
      "output": [
        98,
        15,
        68,
        97,
        86,
        20,
        65,
        86,
        37
      ]
    },
    "demos": [
      {
        "input": [
          21,
          73,
          24,
          30,
          8
        ],
        "output": [
          98,
          21,
          73,
          24,
          30,
          8,
          37
        ]
      },
      {
        "input": [
          5,
          76,
          97
        ],
        "output": [
          98,
          5,
          76,
          97,
          37
        ]
      },
      {
        "input": [
          41,
          89,
          98
        ],
        "output": [
          98,
          41,
          89,
          98,
          37
        ]
      }
    ]
  },
  {
    "id": "c081",
    "difficulty": 71,
    "function": "def c081(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        88,
        77,
        0,
        30,
        52,
        59,
        8
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          29,
          46,
          38
        ],
        "output": [
          38
        ]
      },
      {
        "input": [
          84,
          48,
          45,
          35,
          55,
          10
        ],
        "output": [
          45
        ]
      },
      {
        "input": [
          77,
          36,
          71,
          90
        ],
        "output": [
          71
        ]
      }
    ]
  },
  {
    "id": "c109",
    "difficulty": 72,
    "function": "def c109(x):\n    # product of elements\n    p = 1\n    for i in x:\n        p *= i\n    return [p]\n\n",
    "data": {
      "input": [
        5,
        7,
        2,
        4,
        0
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          3,
          1,
          4,
          3
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          8,
          0,
          10,
          3
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          10,
          1,
          0,
          4
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c002",
    "difficulty": 73,
    "function": "def c002(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        48,
        8,
        60
      ],
      "output": [
        60
      ]
    },
    "demos": [
      {
        "input": [
          90,
          47,
          60,
          12
        ],
        "output": [
          60
        ]
      },
      {
        "input": [
          54,
          25,
          35,
          78
        ],
        "output": [
          35
        ]
      },
      {
        "input": [
          24,
          92,
          75,
          98,
          48,
          80
        ],
        "output": [
          75
        ]
      }
    ]
  },
  {
    "id": "c132",
    "difficulty": 74,
    "function": "def c132(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        62,
        60,
        66,
        40
      ],
      "output": [
        62,
        60,
        40
      ]
    },
    "demos": [
      {
        "input": [
          85,
          93,
          27,
          80,
          50,
          22,
          85
        ],
        "output": [
          85,
          93,
          80,
          50,
          22,
          85
        ]
      },
      {
        "input": [
          55,
          96,
          27,
          20
        ],
        "output": [
          55,
          96,
          20
        ]
      },
      {
        "input": [
          71,
          30,
          19,
          37,
          13,
          91
        ],
        "output": [
          71,
          30,
          37,
          13,
          91
        ]
      }
    ]
  },
  {
    "id": "c153",
    "difficulty": 75,
    "function": "def c153(x):\n    # each unique element followed by its number of occurrences\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    out = []\n    for k, v in res.items():\n        out.append(k)\n        out.append(v)\n    return out\n\n",
    "data": {
      "input": [
        95,
        24,
        17,
        17,
        61
      ],
      "output": [
        95,
        1,
        24,
        1,
        17,
        2,
        61,
        1
      ]
    },
    "demos": [
      {
        "input": [
          32,
          34,
          34,
          37,
          32,
          73,
          3,
          32
        ],
        "output": [
          32,
          3,
          34,
          2,
          37,
          1,
          73,
          1,
          3,
          1
        ]
      },
      {
        "input": [
          82,
          82,
          82,
          41,
          41,
          65,
          67
        ],
        "output": [
          82,
          3,
          41,
          2,
          65,
          1,
          67,
          1
        ]
      },
      {
        "input": [
          88,
          52,
          36,
          23,
          49,
          36,
          52,
          23
        ],
        "output": [
          88,
          1,
          52,
          2,
          36,
          2,
          23,
          2,
          49,
          1
        ]
      }
    ]
  },
  {
    "id": "c051",
    "difficulty": 76,
    "function": "def c051(x):\n    # prepend first element 4 times\n    return [x[0]] * 4 + x\n\n",
    "data": {
      "input": [
        84,
        32,
        8,
        23,
        43,
        14,
        3
      ],
      "output": [
        84,
        84,
        84,
        84,
        84,
        32,
        8,
        23,
        43,
        14,
        3
      ]
    },
    "demos": [
      {
        "input": [
          86,
          9,
          92,
          16,
          2
        ],
        "output": [
          86,
          86,
          86,
          86,
          86,
          9,
          92,
          16,
          2
        ]
      },
      {
        "input": [
          3,
          45,
          78
        ],
        "output": [
          3,
          3,
          3,
          3,
          3,
          45,
          78
        ]
      },
      {
        "input": [
          15,
          27,
          40,
          81,
          70
        ],
        "output": [
          15,
          15,
          15,
          15,
          15,
          27,
          40,
          81,
          70
        ]
      }
    ]
  },
  {
    "id": "c225",
    "difficulty": 77,
    "function": "def c225(x):\n    # remove first and last two elements\n    return x[2:-2]\n\n",
    "data": {
      "input": [
        56,
        56,
        68,
        80,
        65,
        86,
        41,
        44
      ],
      "output": [
        68,
        80,
        65,
        86
      ]
    },
    "demos": [
      {
        "input": [
          65,
          22,
          25,
          11,
          86,
          33,
          96,
          5
        ],
        "output": [
          25,
          11,
          86,
          33
        ]
      },
      {
        "input": [
          37,
          33,
          53,
          55,
          45,
          17
        ],
        "output": [
          53,
          55
        ]
      },
      {
        "input": [
          65,
          86,
          82,
          57,
          48,
          18,
          5
        ],
        "output": [
          82,
          57,
          48
        ]
      }
    ]
  },
  {
    "id": "c067",
    "difficulty": 78,
    "function": "def c067(x):\n    # swap the first and last element\n    x[0], x[-1] = x[-1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        33,
        78,
        87,
        34,
        83
      ],
      "output": [
        83,
        78,
        87,
        34,
        33
      ]
    },
    "demos": [
      {
        "input": [
          20,
          37,
          59,
          72,
          45
        ],
        "output": [
          45,
          37,
          59,
          72,
          20
        ]
      },
      {
        "input": [
          94,
          85,
          43,
          21,
          43,
          37
        ],
        "output": [
          37,
          85,
          43,
          21,
          43,
          94
        ]
      },
      {
        "input": [
          0,
          74,
          90
        ],
        "output": [
          90,
          74,
          0
        ]
      }
    ]
  },
  {
    "id": "c112",
    "difficulty": 79,
    "function": "def c112(x):\n    # count from 1 to the last element\n    return list(range(1, x[-1]+1))\n\n",
    "data": {
      "input": [
        58,
        25,
        12,
        85,
        9
      ],
      "output": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ]
    },
    "demos": [
      {
        "input": [
          16,
          57,
          26,
          14,
          33,
          13
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ]
      },
      {
        "input": [
          12,
          59,
          96,
          45,
          58,
          85,
          10
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          69,
          87,
          41,
          97,
          74,
          3
        ],
        "output": [
          1,
          2,
          3
        ]
      }
    ]
  },
  {
    "id": "c030",
    "difficulty": 80,
    "function": "def c030(x):\n    # remove the last 2 elements\n    return x[:-2]\n\n",
    "data": {
      "input": [
        51,
        75,
        75,
        87,
        93
      ],
      "output": [
        51,
        75,
        75
      ]
    },
    "demos": [
      {
        "input": [
          54,
          60,
          21
        ],
        "output": [
          54
        ]
      },
      {
        "input": [
          62,
          91,
          74,
          28,
          66
        ],
        "output": [
          62,
          91,
          74
        ]
      },
      {
        "input": [
          77,
          26,
          74,
          48,
          45,
          73
        ],
        "output": [
          77,
          26,
          74,
          48
        ]
      }
    ]
  },
  {
    "id": "c149",
    "difficulty": 81,
    "function": "def c149(x):\n    # replace each element, M with M * first element; remove the first element\n    return [i*x[0] for i in x[1:]]\n\n",
    "data": {
      "input": [
        20,
        12,
        6,
        5,
        0,
        20,
        3
      ],
      "output": [
        240,
        120,
        100,
        0,
        400,
        60
      ]
    },
    "demos": [
      {
        "input": [
          18,
          8,
          8
        ],
        "output": [
          144,
          144
        ]
      },
      {
        "input": [
          4,
          18,
          13,
          11,
          16
        ],
        "output": [
          72,
          52,
          44,
          64
        ]
      },
      {
        "input": [
          18,
          16,
          18,
          18,
          20,
          10
        ],
        "output": [
          288,
          324,
          324,
          360,
          180
        ]
      }
    ]
  },
  {
    "id": "c148",
    "difficulty": 82,
    "function": "def c148(x):\n    # count from 1 to each element\n    res = []\n    for i in x:\n        res += list(range(1, i+1))\n    return res\n\n",
    "data": {
      "input": [
        3,
        1,
        3,
        5
      ],
      "output": [
        1,
        2,
        3,
        1,
        1,
        2,
        3,
        1,
        2,
        3,
        4,
        5
      ]
    },
    "demos": [
      {
        "input": [
          0,
          5,
          4,
          2,
          2,
          2
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          1,
          2,
          3,
          4,
          1,
          2,
          1,
          2,
          1,
          2
        ]
      },
      {
        "input": [
          4,
          2,
          4
        ],
        "output": [
          1,
          2,
          3,
          4,
          1,
          2,
          1,
          2,
          3,
          4
        ]
      },
      {
        "input": [
          3,
          4,
          3,
          4
        ],
        "output": [
          1,
          2,
          3,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          1,
          2,
          3,
          4
        ]
      }
    ]
  },
  {
    "id": "c017",
    "difficulty": 83,
    "function": "def c017(x):\n    # replace x[1] with 8\n    x[1] = 8\n    return x\n\n",
    "data": {
      "input": [
        56,
        37,
        39,
        42,
        39
      ],
      "output": [
        56,
        8,
        39,
        42,
        39
      ]
    },
    "demos": [
      {
        "input": [
          37,
          91,
          17,
          95,
          83,
          42
        ],
        "output": [
          37,
          8,
          17,
          95,
          83,
          42
        ]
      },
      {
        "input": [
          53,
          63,
          0,
          93,
          27,
          14
        ],
        "output": [
          53,
          8,
          0,
          93,
          27,
          14
        ]
      },
      {
        "input": [
          88,
          16,
          60
        ],
        "output": [
          88,
          8,
          60
        ]
      }
    ]
  },
  {
    "id": "c092",
    "difficulty": 84,
    "function": "def c092(x):\n    # concatenate 92, 63, 34, 18, 55\n    return x + [92, 63, 34, 18, 55]\n\n",
    "data": {
      "input": [
        80,
        85,
        89,
        97,
        5,
        90
      ],
      "output": [
        80,
        85,
        89,
        97,
        5,
        90,
        92,
        63,
        34,
        18,
        55
      ]
    },
    "demos": [
      {
        "input": [
          64,
          80,
          42,
          37,
          90
        ],
        "output": [
          64,
          80,
          42,
          37,
          90,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          21,
          97,
          54,
          9
        ],
        "output": [
          21,
          97,
          54,
          9,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          25,
          59,
          11,
          66,
          52
        ],
        "output": [
          25,
          59,
          11,
          66,
          52,
          92,
          63,
          34,
          18,
          55
        ]
      }
    ]
  },
  {
    "id": "c077",
    "difficulty": 85,
    "function": "def c077(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        56,
        84,
        52,
        95,
        34,
        49
      ],
      "output": [
        6
      ]
    },
    "demos": [
      {
        "input": [
          72,
          57,
          4,
          33,
          7
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          92,
          19,
          41,
          76,
          70,
          35
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          34,
          62,
          35,
          90,
          53,
          28,
          95
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c248",
    "difficulty": 87,
    "function": "def c248(x):\n    # elements after the first 0\n    return x[x.index(0)+1:]\n\n",
    "data": {
      "input": [
        20,
        89,
        0,
        53,
        73
      ],
      "output": [
        53,
        73
      ]
    },
    "demos": [
      {
        "input": [
          90,
          39,
          51,
          0,
          93,
          84,
          82
        ],
        "output": [
          93,
          84,
          82
        ]
      },
      {
        "input": [
          57,
          82,
          0,
          77,
          16,
          11
        ],
        "output": [
          77,
          16,
          11
        ]
      },
      {
        "input": [
          0,
          73,
          55,
          22,
          59,
          9
        ],
        "output": [
          73,
          55,
          22,
          59,
          9
        ]
      }
    ]
  },
  {
    "id": "c199",
    "difficulty": 88,
    "function": "def c199(x):\n    # elements in ascending order, each preceded by its rank\n    res = []\n    for i, v in enumerate(sorted(x)):\n        res.append(i+1)\n        res.append(v)\n    return res\n\n",
    "data": {
      "input": [
        97,
        92,
        1
      ],
      "output": [
        1,
        1,
        2,
        92,
        3,
        97
      ]
    },
    "demos": [
      {
        "input": [
          52,
          20,
          77,
          62,
          7
        ],
        "output": [
          1,
          7,
          2,
          20,
          3,
          52,
          4,
          62,
          5,
          77
        ]
      },
      {
        "input": [
          18,
          69,
          97,
          44,
          12,
          71
        ],
        "output": [
          1,
          12,
          2,
          18,
          3,
          44,
          4,
          69,
          5,
          71,
          6,
          97
        ]
      },
      {
        "input": [
          55,
          58,
          18,
          51,
          42,
          83,
          66
        ],
        "output": [
          1,
          18,
          2,
          42,
          3,
          51,
          4,
          55,
          5,
          58,
          6,
          66,
          7,
          83
        ]
      }
    ]
  },
  {
    "id": "c007",
    "difficulty": 89,
    "function": "def c007(x):\n    # remove all but the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        96,
        96,
        58
      ],
      "output": [
        96,
        96
      ]
    },
    "demos": [
      {
        "input": [
          64,
          44,
          27,
          15,
          74,
          2
        ],
        "output": [
          64,
          44
        ]
      },
      {
        "input": [
          57,
          79,
          49,
          45,
          68
        ],
        "output": [
          57,
          79
        ]
      },
      {
        "input": [
          71,
          89,
          15
        ],
        "output": [
          71,
          89
        ]
      }
    ]
  },
  {
    "id": "c176",
    "difficulty": 90,
    "function": "def c176(x):\n    # sum of each consecutive pair of elements\n    return [x[i] + x[i+1] for i in range(0, len(x)-1)]\n\n",
    "data": {
      "input": [
        68,
        90,
        69,
        99,
        11,
        36,
        72
      ],
      "output": [
        158,
        159,
        168,
        110,
        47,
        108
      ]
    },
    "demos": [
      {
        "input": [
          47,
          67,
          78,
          32,
          34,
          89
        ],
        "output": [
          114,
          145,
          110,
          66,
          123
        ]
      },
      {
        "input": [
          31,
          17,
          60,
          15,
          42
        ],
        "output": [
          48,
          77,
          75,
          57
        ]
      },
      {
        "input": [
          2,
          79,
          0
        ],
        "output": [
          81,
          79
        ]
      }
    ]
  },
  {
    "id": "c066",
    "difficulty": 91,
    "function": "def c066(x):\n    # left rotate the list by 1\n    return x[1:] + x[:1]\n\n",
    "data": {
      "input": [
        46,
        45,
        18,
        30
      ],
      "output": [
        45,
        18,
        30,
        46
      ]
    },
    "demos": [
      {
        "input": [
          47,
          83,
          43
        ],
        "output": [
          83,
          43,
          47
        ]
      },
      {
        "input": [
          13,
          34,
          56,
          6,
          23
        ],
        "output": [
          34,
          56,
          6,
          23,
          13
        ]
      },
      {
        "input": [
          44,
          90,
          78,
          42
        ],
        "output": [
          90,
          78,
          42,
          44
        ]
      }
    ]
  },
  {
    "id": "c053",
    "difficulty": 92,
    "function": "def c053(x):\n    # replace x[1] with x[0]\n    x[1] = x[0]\n    return x\n\n",
    "data": {
      "input": [
        76,
        99,
        83,
        39,
        86,
        18,
        3
      ],
      "output": [
        76,
        76,
        83,
        39,
        86,
        18,
        3
      ]
    },
    "demos": [
      {
        "input": [
          95,
          52,
          6
        ],
        "output": [
          95,
          95,
          6
        ]
      },
      {
        "input": [
          25,
          59,
          63,
          38,
          42,
          31
        ],
        "output": [
          25,
          25,
          63,
          38,
          42,
          31
        ]
      },
      {
        "input": [
          99,
          66,
          45,
          12,
          55
        ],
        "output": [
          99,
          99,
          45,
          12,
          55
        ]
      }
    ]
  },
  {
    "id": "c047",
    "difficulty": 93,
    "function": "def c047(x):\n    # concatenate 9, 6, 3, 8, 5\n    return [9, 6, 3, 8, 5] + x\n\n",
    "data": {
      "input": [
        7,
        81,
        22,
        1
      ],
      "output": [
        9,
        6,
        3,
        8,
        5,
        7,
        81,
        22,
        1
      ]
    },
    "demos": [
      {
        "input": [
          42,
          71,
          14,
          96
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          42,
          71,
          14,
          96
        ]
      },
      {
        "input": [
          81,
          49,
          59,
          20,
          60,
          24,
          89
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          81,
          49,
          59,
          20,
          60,
          24,
          89
        ]
      },
      {
        "input": [
          27,
          30,
          72,
          58,
          8,
          7
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          27,
          30,
          72,
          58,
          8,
          7
        ]
      }
    ]
  },
  {
    "id": "c064",
    "difficulty": 94,
    "function": "def c064(x):\n    # remove the first and last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        62,
        69,
        40
      ],
      "output": [
        69
      ]
    },
    "demos": [
      {
        "input": [
          80,
          86,
          38
        ],
        "output": [
          86
        ]
      },
      {
        "input": [
          48,
          15,
          83,
          54
        ],
        "output": [
          15,
          83
        ]
      },
      {
        "input": [
          26,
          63,
          69,
          42
        ],
        "output": [
          63,
          69
        ]
      }
    ]
  },
  {
    "id": "c078",
    "difficulty": 95,
    "function": "def c078(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        70,
        80,
        17,
        86,
        70,
        87,
        84
      ],
      "output": [
        87
      ]
    },
    "demos": [
      {
        "input": [
          99,
          25,
          48,
          93,
          41
        ],
        "output": [
          99
        ]
      },
      {
        "input": [
          60,
          24,
          57,
          34,
          61,
          26
        ],
        "output": [
          61
        ]
      },
      {
        "input": [
          16,
          21,
          44,
          14,
          8,
          20
        ],
        "output": [
          44
        ]
      }
    ]
  },
  {
    "id": "c119",
    "difficulty": 96,
    "function": "def c119(x):\n    # make the list begin and ends with 8\n    if x[0] != 8:\n        x = [8] + x\n    if x[-1] != 8:\n        x = x + [8]\n    return x\n\n",
    "data": {
      "input": [
        86,
        30,
        59,
        26,
        42,
        63
      ],
      "output": [
        8,
        86,
        30,
        59,
        26,
        42,
        63,
        8
      ]
    },
    "demos": [
      {
        "input": [
          57,
          9,
          66,
          99,
          25
        ],
        "output": [
          8,
          57,
          9,
          66,
          99,
          25,
          8
        ]
      },
      {
        "input": [
          62,
          0,
          11,
          71,
          18,
          99
        ],
        "output": [
          8,
          62,
          0,
          11,
          71,
          18,
          99,
          8
        ]
      },
      {
        "input": [
          2,
          72,
          93,
          1
        ],
        "output": [
          8,
          2,
          72,
          93,
          1,
          8
        ]
      }
    ]
  },
  {
    "id": "c135",
    "difficulty": 97,
    "function": "def c135(x):\n    # remove the first 7\n    x.remove(7)\n    return x\n\n",
    "data": {
      "input": [
        1,
        8,
        6,
        3,
        7
      ],
      "output": [
        1,
        8,
        6,
        3
      ]
    },
    "demos": [
      {
        "input": [
          4,
          7,
          7,
          8,
          1,
          7,
          5,
          2
        ],
        "output": [
          4,
          7,
          8,
          1,
          7,
          5,
          2
        ]
      },
      {
        "input": [
          7,
          5,
          6,
          9,
          7,
          9,
          6
        ],
        "output": [
          5,
          6,
          9,
          7,
          9,
          6
        ]
      },
      {
        "input": [
          8,
          1,
          5,
          5,
          7
        ],
        "output": [
          8,
          1,
          5,
          5
        ]
      }
    ]
  },
  {
    "id": "c198",
    "difficulty": 98,
    "function": "def c198(x):\n    # unique elements in descending order\n    res = set(x)\n    return sorted(res, reverse=True)\n\n",
    "data": {
      "input": [
        56,
        10,
        70,
        78,
        56
      ],
      "output": [
        78,
        70,
        56,
        10
      ]
    },
    "demos": [
      {
        "input": [
          35,
          27,
          88,
          85,
          85,
          88
        ],
        "output": [
          88,
          85,
          35,
          27
        ]
      },
      {
        "input": [
          67,
          91,
          92,
          84,
          92,
          48,
          23,
          60
        ],
        "output": [
          92,
          91,
          84,
          67,
          60,
          48,
          23
        ]
      },
      {
        "input": [
          28,
          27,
          28,
          28,
          53,
          73
        ],
        "output": [
          73,
          53,
          28,
          27
        ]
      }
    ]
  },
  {
    "id": "c219",
    "difficulty": 99,
    "function": "def c219(x):\n    # keep only every other element\n    return x[::2]\n\n",
    "data": {
      "input": [
        38,
        45,
        43,
        15
      ],
      "output": [
        38,
        43
      ]
    },
    "demos": [
      {
        "input": [
          63,
          91,
          5,
          50,
          65,
          74,
          27,
          54,
          5
        ],
        "output": [
          63,
          5,
          65,
          27,
          5
        ]
      },
      {
        "input": [
          84,
          94,
          88,
          6,
          35,
          62,
          64,
          25,
          28
        ],
        "output": [
          84,
          88,
          35,
          64,
          28
        ]
      },
      {
        "input": [
          21,
          97,
          50,
          18,
          28,
          44
        ],
        "output": [
          21,
          50,
          28
        ]
      }
    ]
  },
  {
    "id": "c075",
    "difficulty": 100,
    "function": "def c075(x):\n    # remove even index\n    return x[1::2]\n\n",
    "data": {
      "input": [
        34,
        57,
        38,
        47
      ],
      "output": [
        57,
        47
      ]
    },
    "demos": [
      {
        "input": [
          39,
          32,
          68,
          0,
          33,
          75
        ],
        "output": [
          32,
          0,
          75
        ]
      },
      {
        "input": [
          31,
          83,
          54,
          81,
          71
        ],
        "output": [
          83,
          81
        ]
      },
      {
        "input": [
          69,
          81,
          99,
          29,
          20,
          23,
          87
        ],
        "output": [
          81,
          29,
          23
        ]
      }
    ]
  },
  {
    "id": "c177",
    "difficulty": 101,
    "function": "def c177(x):\n    # interleave the input and the reversed input\n    return [i for pair in zip(x, x[::-1]) for i in pair]\n\n",
    "data": {
      "input": [
        89,
        50,
        38,
        76,
        36,
        62,
        2
      ],
      "output": [
        89,
        2,
        50,
        62,
        38,
        36,
        76,
        76,
        36,
        38,
        62,
        50,
        2,
        89
      ]
    },
    "demos": [
      {
        "input": [
          41,
          21,
          13,
          22,
          81,
          81
        ],
        "output": [
          41,
          81,
          21,
          81,
          13,
          22,
          22,
          13,
          81,
          21,
          81,
          41
        ]
      },
      {
        "input": [
          58,
          23,
          6,
          43,
          93,
          7,
          1
        ],
        "output": [
          58,
          1,
          23,
          7,
          6,
          93,
          43,
          43,
          93,
          6,
          7,
          23,
          1,
          58
        ]
      },
      {
        "input": [
          52,
          23,
          42,
          65,
          99,
          15
        ],
        "output": [
          52,
          15,
          23,
          99,
          42,
          65,
          65,
          42,
          99,
          23,
          15,
          52
        ]
      }
    ]
  },
  {
    "id": "c025",
    "difficulty": 102,
    "function": "def c025(x):\n    # remove element 1\n    return x[:1] + x[2:]\n\n",
    "data": {
      "input": [
        1,
        38,
        42,
        3,
        56,
        46,
        42
      ],
      "output": [
        1,
        42,
        3,
        56,
        46,
        42
      ]
    },
    "demos": [
      {
        "input": [
          32,
          80,
          30,
          12
        ],
        "output": [
          32,
          30,
          12
        ]
      },
      {
        "input": [
          24,
          95,
          59,
          82,
          28,
          68,
          54
        ],
        "output": [
          24,
          59,
          82,
          28,
          68,
          54
        ]
      },
      {
        "input": [
          68,
          72,
          83,
          9,
          16
        ],
        "output": [
          68,
          83,
          9,
          16
        ]
      }
    ]
  },
  {
    "id": "c125",
    "difficulty": 103,
    "function": "def c125(x):\n    # keep only elements whose tens digit equals the tens digit of the first element\n    return [i for i in x if len(str(i)) > 1 and str(i)[-2] == str(x[0])[-2]]\n\n",
    "data": {
      "input": [
        25,
        27,
        47,
        84,
        26,
        29,
        47,
        1
      ],
      "output": [
        25,
        27,
        26,
        29
      ]
    },
    "demos": [
      {
        "input": [
          94,
          20,
          61,
          94,
          83,
          101,
          98,
          102,
          71
        ],
        "output": [
          94,
          94,
          98
        ]
      },
      {
        "input": [
          87,
          61,
          95,
          4,
          45
        ],
        "output": [
          87
        ]
      },
      {
        "input": [
          93,
          97,
          34,
          74,
          31,
          84,
          68
        ],
        "output": [
          93,
          97
        ]
      }
    ]
  },
  {
    "id": "c087",
    "difficulty": 105,
    "function": "def c087(x):\n    # swap second and third element\n    x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        99,
        15,
        25,
        25,
        29,
        94
      ],
      "output": [
        99,
        25,
        15,
        25,
        29,
        94
      ]
    },
    "demos": [
      {
        "input": [
          65,
          79,
          23
        ],
        "output": [
          65,
          23,
          79
        ]
      },
      {
        "input": [
          37,
          44,
          19,
          71
        ],
        "output": [
          37,
          19,
          44,
          71
        ]
      },
      {
        "input": [
          91,
          90,
          59,
          76
        ],
        "output": [
          91,
          59,
          90,
          76
        ]
      }
    ]
  },
  {
    "id": "c013",
    "difficulty": 106,
    "function": "def c013(x):\n    # element 2 through 6\n    return x[2:6]\n\n",
    "data": {
      "input": [
        16,
        19,
        25,
        27,
        52,
        89
      ],
      "output": [
        25,
        27,
        52,
        89
      ]
    },
    "demos": [
      {
        "input": [
          83,
          26,
          43,
          97,
          86,
          91,
          25,
          74,
          47
        ],
        "output": [
          43,
          97,
          86,
          91
        ]
      },
      {
        "input": [
          44,
          58,
          86,
          17,
          82,
          28,
          26
        ],
        "output": [
          86,
          17,
          82,
          28
        ]
      },
      {
        "input": [
          65,
          93,
          15,
          18,
          25,
          39,
          5,
          92
        ],
        "output": [
          15,
          18,
          25,
          39
        ]
      }
    ]
  },
  {
    "id": "c069",
    "difficulty": 107,
    "function": "def c069(x):\n    # 9,3,4,0, input, 7,2,9,1\n    return [9,3,4,0] + x + [7,2,9,1]\n\n",
    "data": {
      "input": [
        16,
        98,
        84,
        58
      ],
      "output": [
        9,
        3,
        4,
        0,
        16,
        98,
        84,
        58,
        7,
        2,
        9,
        1
      ]
    },
    "demos": [
      {
        "input": [
          12,
          42,
          69,
          41,
          42
        ],
        "output": [
          9,
          3,
          4,
          0,
          12,
          42,
          69,
          41,
          42,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          65,
          20,
          68
        ],
        "output": [
          9,
          3,
          4,
          0,
          65,
          20,
          68,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          64,
          12,
          98
        ],
        "output": [
          9,
          3,
          4,
          0,
          64,
          12,
          98,
          7,
          2,
          9,
          1
        ]
      }
    ]
  },
  {
    "id": "c117",
    "difficulty": 108,
    "function": "def c117(x):\n    # left rotate by 3\n    return x[3:] + x[:3]\n\n",
    "data": {
      "input": [
        27,
        26,
        47,
        73,
        9,
        26
      ],
      "output": [
        73,
        9,
        26,
        27,
        26,
        47
      ]
    },
    "demos": [
      {
        "input": [
          83,
          52,
          86,
          34
        ],
        "output": [
          34,
          83,
          52,
          86
        ]
      },
      {
        "input": [
          71,
          89,
          92,
          10,
          70
        ],
        "output": [
          10,
          70,
          71,
          89,
          92
        ]
      },
      {
        "input": [
          95,
          45,
          70,
          19
        ],
        "output": [
          19,
          95,
          45,
          70
        ]
      }
    ]
  },
  {
    "id": "c228",
    "difficulty": 109,
    "function": "def c228(x):\n    # replace each element with the number of occurrences of that element so far\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        81,
        81,
        81,
        24,
        13
      ],
      "output": [
        1,
        2,
        3,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          49,
          68,
          92,
          22,
          93,
          65,
          93,
          34,
          80
        ],
        "output": [
          1,
          1,
          1,
          1,
          1,
          1,
          2,
          1,
          1
        ]
      },
      {
        "input": [
          60,
          45,
          38,
          9,
          6,
          38
        ],
        "output": [
          1,
          1,
          1,
          1,
          1,
          2
        ]
      },
      {
        "input": [
          21,
          20,
          64,
          65,
          21,
          20
        ],
        "output": [
          1,
          1,
          1,
          1,
          2,
          2
        ]
      }
    ]
  },
  {
    "id": "c197",
    "difficulty": 110,
    "function": "def c197(x):\n    # replace each element with the number of occurrences of that element\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in x:\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        60,
        26,
        51,
        32,
        53,
        39,
        39
      ],
      "output": [
        1,
        1,
        1,
        1,
        1,
        2,
        2
      ]
    },
    "demos": [
      {
        "input": [
          87,
          26,
          76,
          50,
          87,
          15,
          67,
          15
        ],
        "output": [
          2,
          1,
          1,
          1,
          2,
          2,
          1,
          2
        ]
      },
      {
        "input": [
          60,
          25,
          3,
          62,
          39,
          60,
          39
        ],
        "output": [
          2,
          1,
          1,
          1,
          2,
          2,
          2
        ]
      },
      {
        "input": [
          40,
          60,
          60,
          84,
          67,
          40
        ],
        "output": [
          2,
          2,
          2,
          1,
          1,
          2
        ]
      }
    ]
  },
  {
    "id": "c065",
    "difficulty": 111,
    "function": "def c065(x):\n    # prepend 9 and append 7\n    return [9] + x + [7]\n\n",
    "data": {
      "input": [
        33,
        44,
        10,
        50,
        79
      ],
      "output": [
        9,
        33,
        44,
        10,
        50,
        79,
        7
      ]
    },
    "demos": [
      {
        "input": [
          6,
          38,
          79,
          36,
          31,
          58
        ],
        "output": [
          9,
          6,
          38,
          79,
          36,
          31,
          58,
          7
        ]
      },
      {
        "input": [
          66,
          92,
          35,
          11,
          52
        ],
        "output": [
          9,
          66,
          92,
          35,
          11,
          52,
          7
        ]
      },
      {
        "input": [
          54,
          2,
          85
        ],
        "output": [
          9,
          54,
          2,
          85,
          7
        ]
      }
    ]
  },
  {
    "id": "c156",
    "difficulty": 112,
    "function": "def c156(x):\n    # reverse the input and add each element to its new index\n    x = x[::-1]\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        66,
        10,
        94,
        92,
        73,
        10
      ],
      "output": [
        10,
        74,
        94,
        97,
        14,
        71
      ]
    },
    "demos": [
      {
        "input": [
          72,
          80,
          14,
          76,
          76,
          33
        ],
        "output": [
          33,
          77,
          78,
          17,
          84,
          77
        ]
      },
      {
        "input": [
          80,
          61,
          21,
          56
        ],
        "output": [
          56,
          22,
          63,
          83
        ]
      },
      {
        "input": [
          71,
          32,
          99,
          42
        ],
        "output": [
          42,
          100,
          34,
          74
        ]
      }
    ]
  },
  {
    "id": "c110",
    "difficulty": 113,
    "function": "def c110(x):\n    # three largest elements in descending order\n    return sorted(x, reverse=True)[:3]\n\n",
    "data": {
      "input": [
        42,
        22,
        29,
        19,
        81,
        97,
        5
      ],
      "output": [
        97,
        81,
        42
      ]
    },
    "demos": [
      {
        "input": [
          94,
          29,
          52
        ],
        "output": [
          94,
          52,
          29
        ]
      },
      {
        "input": [
          32,
          40,
          39,
          57,
          48,
          96
        ],
        "output": [
          96,
          57,
          48
        ]
      },
      {
        "input": [
          25,
          67,
          78,
          51,
          92,
          6,
          91
        ],
        "output": [
          92,
          91,
          78
        ]
      }
    ]
  },
  {
    "id": "c233",
    "difficulty": 114,
    "function": "def c233(x):\n    # number of occurrences of each unique element, in order of appearance\n    numbers = []\n    res = []\n    for i in x:\n        if i not in numbers:\n            numbers.append(i)\n            res.append(x.count(i))\n    return res\n\n",
    "data": {
      "input": [
        4,
        6,
        4,
        7,
        2
      ],
      "output": [
        2,
        1,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          3,
          6,
          4,
          8,
          3,
          6
        ],
        "output": [
          2,
          2,
          1,
          1
        ]
      },
      {
        "input": [
          0,
          3,
          1,
          3,
          0,
          2,
          1,
          10
        ],
        "output": [
          2,
          2,
          2,
          1,
          1
        ]
      },
      {
        "input": [
          0,
          5,
          2,
          9,
          10,
          0,
          1,
          10
        ],
        "output": [
          2,
          1,
          1,
          1,
          2,
          1
        ]
      }
    ]
  },
  {
    "id": "c003",
    "difficulty": 115,
    "function": "def c003(x):\n    # remove all but seventh element\n    return [x[6]]\n\n",
    "data": {
      "input": [
        25,
        91,
        15,
        16,
        65,
        80,
        84,
        60,
        15
      ],
      "output": [
        84
      ]
    },
    "demos": [
      {
        "input": [
          94,
          58,
          46,
          63,
          73,
          66,
          83,
          60
        ],
        "output": [
          83
        ]
      },
      {
        "input": [
          58,
          52,
          38,
          19,
          11,
          26,
          12,
          61
        ],
        "output": [
          12
        ]
      },
      {
        "input": [
          35,
          65,
          26,
          21,
          94,
          38,
          57,
          41,
          84,
          67
        ],
        "output": [
          57
        ]
      }
    ]
  },
  {
    "id": "c230",
    "difficulty": 116,
    "function": "def c230(x):\n    # count by 2 from the smallest element to the largest element\n    return list(range(min(x), max(x)+1, 2))\n\n",
    "data": {
      "input": [
        49,
        45,
        37,
        52
      ],
      "output": [
        37,
        39,
        41,
        43,
        45,
        47,
        49,
        51
      ]
    },
    "demos": [
      {
        "input": [
          61,
          61,
          77
        ],
        "output": [
          61,
          63,
          65,
          67,
          69,
          71,
          73,
          75,
          77
        ]
      },
      {
        "input": [
          79,
          84,
          73
        ],
        "output": [
          73,
          75,
          77,
          79,
          81,
          83
        ]
      },
      {
        "input": [
          69,
          88,
          71
        ],
        "output": [
          69,
          71,
          73,
          75,
          77,
          79,
          81,
          83,
          85,
          87
        ]
      }
    ]
  },
  {
    "id": "c122",
    "difficulty": 117,
    "function": "def c122(x):\n    # remove all but penultimate element\n    return [x[-2]]\n\n",
    "data": {
      "input": [
        22,
        35,
        52,
        55
      ],
      "output": [
        52
      ]
    },
    "demos": [
      {
        "input": [
          61,
          61,
          37,
          71,
          17,
          16,
          61
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          37,
          15,
          60,
          70,
          41,
          56,
          2
        ],
        "output": [
          56
        ]
      },
      {
        "input": [
          92,
          53,
          6,
          68,
          18,
          79,
          88
        ],
        "output": [
          79
        ]
      }
    ]
  },
  {
    "id": "c020",
    "difficulty": 118,
    "function": "def c020(x):\n    # replace the first element with the last element\n    x[0] = x[-1]\n    return x\n\n",
    "data": {
      "input": [
        90,
        2,
        90,
        79,
        18,
        13,
        93
      ],
      "output": [
        93,
        2,
        90,
        79,
        18,
        13,
        93
      ]
    },
    "demos": [
      {
        "input": [
          64,
          81,
          1,
          11
        ],
        "output": [
          11,
          81,
          1,
          11
        ]
      },
      {
        "input": [
          85,
          3,
          92,
          53,
          74,
          46
        ],
        "output": [
          46,
          3,
          92,
          53,
          74,
          46
        ]
      },
      {
        "input": [
          81,
          43,
          72,
          58,
          32,
          13,
          56
        ],
        "output": [
          56,
          43,
          72,
          58,
          32,
          13,
          56
        ]
      }
    ]
  },
  {
    "id": "c235",
    "difficulty": 119,
    "function": "def c235(x):\n    # count up and down between elements\n    res = []\n    for i in range(len(x)-1):\n        if x[i] < x[i+1]:\n            res += list(range(x[i], x[i+1]+1))\n        else:\n            res += list(range(x[i], x[i+1]-1, -1))\n    return res\n\n",
    "data": {
      "input": [
        41,
        43,
        44
      ],
      "output": [
        41,
        42,
        43,
        43,
        44
      ]
    },
    "demos": [
      {
        "input": [
          65,
          67,
          70
        ],
        "output": [
          65,
          66,
          67,
          67,
          68,
          69,
          70
        ]
      },
      {
        "input": [
          66,
          65,
          66
        ],
        "output": [
          66,
          65,
          65,
          66
        ]
      },
      {
        "input": [
          9,
          13,
          14
        ],
        "output": [
          9,
          10,
          11,
          12,
          13,
          13,
          14
        ]
      }
    ]
  },
  {
    "id": "c157",
    "difficulty": 120,
    "function": "def c157(x):\n    # each element followed by 0 if even, 1 if odd\n    res = []\n    for i in x:\n        res.append(i)\n        res.append(i % 2)\n    return res\n\n",
    "data": {
      "input": [
        91,
        39,
        77,
        6,
        60,
        55
      ],
      "output": [
        91,
        1,
        39,
        1,
        77,
        1,
        6,
        0,
        60,
        0,
        55,
        1
      ]
    },
    "demos": [
      {
        "input": [
          41,
          42,
          56,
          95,
          3
        ],
        "output": [
          41,
          1,
          42,
          0,
          56,
          0,
          95,
          1,
          3,
          1
        ]
      },
      {
        "input": [
          60,
          9,
          51,
          96,
          59,
          29,
          45
        ],
        "output": [
          60,
          0,
          9,
          1,
          51,
          1,
          96,
          0,
          59,
          1,
          29,
          1,
          45,
          1
        ]
      },
      {
        "input": [
          27,
          80,
          22,
          81
        ],
        "output": [
          27,
          1,
          80,
          0,
          22,
          0,
          81,
          1
        ]
      }
    ]
  },
  {
    "id": "c185",
    "difficulty": 121,
    "function": "def c185(x):\n    # replace the sublist between the first and last with its sum\n    return x[:1] + [sum(x[1:-1])] + x[-1:]\n\n",
    "data": {
      "input": [
        5,
        17,
        12,
        7,
        20,
        11
      ],
      "output": [
        5,
        56,
        11
      ]
    },
    "demos": [
      {
        "input": [
          2,
          16,
          5
        ],
        "output": [
          2,
          16,
          5
        ]
      },
      {
        "input": [
          3,
          0,
          3,
          12
        ],
        "output": [
          3,
          3,
          12
        ]
      },
      {
        "input": [
          13,
          8,
          11,
          16
        ],
        "output": [
          13,
          19,
          16
        ]
      }
    ]
  },
  {
    "id": "c213",
    "difficulty": 122,
    "function": "def c213(x):\n    # three smallest elements in ascending order\n    return sorted(x)[:3]\n\n",
    "data": {
      "input": [
        22,
        93,
        92,
        97,
        55,
        39
      ],
      "output": [
        22,
        39,
        55
      ]
    },
    "demos": [
      {
        "input": [
          99,
          11,
          86,
          51,
          85
        ],
        "output": [
          11,
          51,
          85
        ]
      },
      {
        "input": [
          4,
          15,
          14,
          65
        ],
        "output": [
          4,
          14,
          15
        ]
      },
      {
        "input": [
          43,
          86,
          38
        ],
        "output": [
          38,
          43,
          86
        ]
      }
    ]
  },
  {
    "id": "c184",
    "difficulty": 123,
    "function": "def c184(x):\n    # keep only odd elements with an even index\n    return [i for i in x if i % 2 == 1 and x.index(i) % 2 == 0]\n\n",
    "data": {
      "input": [
        45,
        4,
        18,
        72,
        80,
        63,
        85,
        6
      ],
      "output": [
        45,
        85
      ]
    },
    "demos": [
      {
        "input": [
          55,
          15,
          17,
          79,
          47,
          75,
          40
        ],
        "output": [
          55,
          17,
          47
        ]
      },
      {
        "input": [
          3,
          55,
          61,
          83,
          80,
          27,
          18
        ],
        "output": [
          3,
          61
        ]
      },
      {
        "input": [
          22,
          39,
          92,
          54,
          81,
          40,
          78,
          74,
          37,
          86
        ],
        "output": [
          81,
          37
        ]
      }
    ]
  },
  {
    "id": "c155",
    "difficulty": 124,
    "function": "def c155(x):\n    # multiply each element by its index\n    return [i*j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        9,
        14,
        32,
        68
      ],
      "output": [
        0,
        14,
        64,
        204
      ]
    },
    "demos": [
      {
        "input": [
          4,
          9,
          19,
          86,
          53
        ],
        "output": [
          0,
          9,
          38,
          258,
          212
        ]
      },
      {
        "input": [
          83,
          5,
          40
        ],
        "output": [
          0,
          5,
          80
        ]
      },
      {
        "input": [
          20,
          31,
          11
        ],
        "output": [
          0,
          31,
          22
        ]
      }
    ]
  },
  {
    "id": "c082",
    "difficulty": 125,
    "function": "def c082(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        57,
        40,
        16,
        3,
        19,
        0,
        63
      ],
      "output": [
        16
      ]
    },
    "demos": [
      {
        "input": [
          48,
          90,
          36
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          93,
          47,
          98,
          10,
          95,
          95,
          14
        ],
        "output": [
          98
        ]
      },
      {
        "input": [
          69,
          50,
          42,
          96
        ],
        "output": [
          42
        ]
      }
    ]
  },
  {
    "id": "c231",
    "difficulty": 126,
    "function": "def c231(x):\n    # the number of occurrences of each unique element in ascending order\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    return sorted(res.values())\n\n",
    "data": {
      "input": [
        6,
        6,
        10,
        5,
        5,
        5,
        6,
        5,
        10
      ],
      "output": [
        2,
        3,
        4
      ]
    },
    "demos": [
      {
        "input": [
          6,
          5,
          7,
          9,
          8,
          5,
          6,
          7,
          3,
          5
        ],
        "output": [
          1,
          1,
          1,
          2,
          2,
          3
        ]
      },
      {
        "input": [
          9,
          1,
          10,
          9,
          10,
          10,
          10,
          8,
          10
        ],
        "output": [
          1,
          1,
          2,
          5
        ]
      },
      {
        "input": [
          9,
          5,
          9,
          4,
          5,
          1,
          5,
          5,
          4,
          5,
          5
        ],
        "output": [
          1,
          2,
          2,
          6
        ]
      }
    ]
  },
  {
    "id": "c099",
    "difficulty": 127,
    "function": "def c099(x):\n    # remove the lower half of the list\n    median = sorted(x)[len(x)//2]\n    return [i for i in x if i >= median]\n\n",
    "data": {
      "input": [
        67,
        53,
        38,
        24,
        77,
        38
      ],
      "output": [
        67,
        53,
        77
      ]
    },
    "demos": [
      {
        "input": [
          97,
          22,
          73,
          90,
          7,
          72,
          4,
          44,
          48
        ],
        "output": [
          97,
          73,
          90,
          72,
          48
        ]
      },
      {
        "input": [
          11,
          10,
          54,
          45,
          85,
          46,
          7
        ],
        "output": [
          54,
          45,
          85,
          46
        ]
      },
      {
        "input": [
          32,
          12,
          29,
          17,
          48
        ],
        "output": [
          32,
          29,
          48
        ]
      }
    ]
  },
  {
    "id": "c247",
    "difficulty": 128,
    "function": "def c247(x):\n    # elements before the first 0\n    return x[:x.index(0)]\n\n",
    "data": {
      "input": [
        68,
        90,
        94,
        0,
        6,
        0,
        93
      ],
      "output": [
        68,
        90,
        94
      ]
    },
    "demos": [
      {
        "input": [
          5,
          0,
          11,
          0,
          85,
          0,
          0,
          66
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          69,
          49,
          53,
          0,
          96,
          0
        ],
        "output": [
          69,
          49,
          53
        ]
      },
      {
        "input": [
          62,
          44,
          0,
          0,
          13,
          72,
          26,
          99,
          0
        ],
        "output": [
          62,
          44
        ]
      }
    ]
  },
  {
    "id": "c008",
    "difficulty": 129,
    "function": "def c008(x):\n    # the first 5 elements\n    return x[:5]\n\n",
    "data": {
      "input": [
        52,
        63,
        14,
        91,
        96,
        83
      ],
      "output": [
        52,
        63,
        14,
        91,
        96
      ]
    },
    "demos": [
      {
        "input": [
          14,
          29,
          76,
          13,
          61
        ],
        "output": [
          14,
          29,
          76,
          13,
          61
        ]
      },
      {
        "input": [
          79,
          55,
          76,
          90,
          63,
          89,
          72,
          59
        ],
        "output": [
          79,
          55,
          76,
          90,
          63
        ]
      },
      {
        "input": [
          18,
          86,
          64,
          33,
          88,
          80,
          13,
          57
        ],
        "output": [
          18,
          86,
          64,
          33,
          88
        ]
      }
    ]
  },
  {
    "id": "c055",
    "difficulty": 130,
    "function": "def c055(x):\n    # swap x[0], x[2] and x[1], x[3]\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        29,
        74,
        40,
        78
      ],
      "output": [
        40,
        78,
        29,
        74
      ]
    },
    "demos": [
      {
        "input": [
          99,
          9,
          82,
          78,
          5
        ],
        "output": [
          82,
          78,
          99,
          9,
          5
        ]
      },
      {
        "input": [
          77,
          84,
          60,
          37,
          0
        ],
        "output": [
          60,
          37,
          77,
          84,
          0
        ]
      },
      {
        "input": [
          94,
          3,
          94,
          55
        ],
        "output": [
          94,
          55,
          94,
          3
        ]
      }
    ]
  },
  {
    "id": "c029",
    "difficulty": 131,
    "function": "def c029(x):\n    # remove the first 2 elements\n    return x[2:]\n\n",
    "data": {
      "input": [
        88,
        10,
        62,
        25
      ],
      "output": [
        62,
        25
      ]
    },
    "demos": [
      {
        "input": [
          57,
          35,
          32,
          31,
          50
        ],
        "output": [
          32,
          31,
          50
        ]
      },
      {
        "input": [
          3,
          91,
          95,
          26,
          26,
          8,
          7
        ],
        "output": [
          95,
          26,
          26,
          8,
          7
        ]
      },
      {
        "input": [
          17,
          9,
          23,
          42
        ],
        "output": [
          23,
          42
        ]
      }
    ]
  },
  {
    "id": "c168",
    "difficulty": 132,
    "function": "def c168(x):\n    # count from 1 to 10, skipping the length of the input\n    return [i for i in range(1, 11) if i != len(x)]\n\n",
    "data": {
      "input": [
        2,
        62,
        33
      ],
      "output": [
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ]
    },
    "demos": [
      {
        "input": [
          89,
          58,
          25,
          49,
          5
        ],
        "output": [
          1,
          2,
          3,
          4,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          40,
          76,
          24,
          64
        ],
        "output": [
          1,
          2,
          3,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          46,
          92,
          52,
          48,
          0,
          34
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          7,
          8,
          9,
          10
        ]
      }
    ]
  },
  {
    "id": "c009",
    "difficulty": 133,
    "function": "def c009(x):\n    # remove all but the first 3 elements\n    return x[:3]\n\n",
    "data": {
      "input": [
        78,
        46,
        99,
        82
      ],
      "output": [
        78,
        46,
        99
      ]
    },
    "demos": [
      {
        "input": [
          18,
          32,
          64,
          76,
          95
        ],
        "output": [
          18,
          32,
          64
        ]
      },
      {
        "input": [
          43,
          31,
          20,
          28,
          28,
          95,
          94
        ],
        "output": [
          43,
          31,
          20
        ]
      },
      {
        "input": [
          18,
          33,
          42,
          80,
          40,
          84,
          63
        ],
        "output": [
          18,
          33,
          42
        ]
      }
    ]
  },
  {
    "id": "c133",
    "difficulty": 134,
    "function": "def c133(x):\n    # remove elements 1 through 4\n    return x[:1] + x[5:]\n\n",
    "data": {
      "input": [
        90,
        60,
        50,
        79,
        87,
        15,
        91,
        37
      ],
      "output": [
        90,
        15,
        91,
        37
      ]
    },
    "demos": [
      {
        "input": [
          2,
          71,
          94,
          62,
          16,
          52,
          16
        ],
        "output": [
          2,
          52,
          16
        ]
      },
      {
        "input": [
          63,
          7,
          11,
          62,
          32,
          52,
          41,
          4
        ],
        "output": [
          63,
          52,
          41,
          4
        ]
      },
      {
        "input": [
          47,
          24,
          32,
          26,
          64,
          31
        ],
        "output": [
          47,
          31
        ]
      }
    ]
  },
  {
    "id": "c146",
    "difficulty": 135,
    "function": "def c146(x):\n    # absolute difference between each consecutive pair of elements\n    return [abs(x[i] - x[i+1]) for i in range(len(x)-1)]\n\n",
    "data": {
      "input": [
        24,
        82,
        87,
        6,
        80
      ],
      "output": [
        58,
        5,
        81,
        74
      ]
    },
    "demos": [
      {
        "input": [
          64,
          41,
          72,
          43,
          84,
          36,
          51
        ],
        "output": [
          23,
          31,
          29,
          41,
          48,
          15
        ]
      },
      {
        "input": [
          12,
          50,
          92,
          94,
          72,
          10,
          63,
          12,
          48
        ],
        "output": [
          38,
          42,
          2,
          22,
          62,
          53,
          51,
          36
        ]
      },
      {
        "input": [
          8,
          59,
          9,
          22,
          68,
          95,
          42,
          0
        ],
        "output": [
          51,
          50,
          13,
          46,
          27,
          53,
          42
        ]
      }
    ]
  },
  {
    "id": "c004",
    "difficulty": 136,
    "function": "def c004(x):\n    # remove all but element 3\n    return [x[2]]\n\n",
    "data": {
      "input": [
        65,
        68,
        17,
        36,
        52
      ],
      "output": [
        17
      ]
    },
    "demos": [
      {
        "input": [
          54,
          36,
          76
        ],
        "output": [
          76
        ]
      },
      {
        "input": [
          95,
          90,
          97,
          10,
          40,
          35,
          2
        ],
        "output": [
          97
        ]
      },
      {
        "input": [
          3,
          56,
          82,
          27,
          52,
          90
        ],
        "output": [
          82
        ]
      }
    ]
  },
  {
    "id": "c240",
    "difficulty": 137,
    "function": "def c240(x):\n    # number of elements equal to the input length\n    return [x.count(len(x))]\n\n",
    "data": {
      "input": [
        8,
        80,
        8,
        20,
        8,
        39,
        33,
        8
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          8,
          11,
          86,
          87,
          21,
          47,
          8,
          8
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          13,
          6,
          6,
          90,
          35,
          94
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          71,
          3,
          8,
          96,
          8,
          8,
          92,
          77
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c239",
    "difficulty": 138,
    "function": "def c239(x):\n    # number of repetitions in the input\n    res = {}\n    out = 0\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out += 1\n    return [out]\n\n",
    "data": {
      "input": [
        7,
        5,
        5,
        9,
        9,
        3,
        9,
        1,
        3,
        2,
        2
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          1,
          1,
          2,
          3,
          2,
          8,
          8
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          5,
          5,
          4,
          5,
          5,
          5
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          7,
          5,
          7,
          8,
          7,
          8,
          6
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c246",
    "difficulty": 139,
    "function": "def c246(x):\n    # number of unique elements\n    return [len(set(x))]\n\n",
    "data": {
      "input": [
        24,
        46,
        68,
        24,
        24,
        68,
        89,
        24,
        29,
        24
      ],
      "output": [
        5
      ]
    },
    "demos": [
      {
        "input": [
          36,
          14,
          84,
          76,
          84,
          53,
          36,
          85,
          93,
          53
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          70,
          55,
          92,
          96,
          96,
          99,
          70,
          96,
          70,
          7
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          2,
          55,
          32,
          27,
          46,
          32,
          11,
          32
        ],
        "output": [
          6
        ]
      }
    ]
  },
  {
    "id": "c138",
    "difficulty": 140,
    "function": "def c138(x):\n    # remove all occurrences of the first element\n    return [i for i in x if i != x[0]]\n\n",
    "data": {
      "input": [
        12,
        6,
        6,
        16,
        6,
        0,
        6,
        33,
        41
      ],
      "output": [
        6,
        6,
        16,
        6,
        0,
        6,
        33,
        41
      ]
    },
    "demos": [
      {
        "input": [
          55,
          90,
          81,
          59
        ],
        "output": [
          90,
          81,
          59
        ]
      },
      {
        "input": [
          92,
          10,
          1,
          63,
          92,
          56,
          39,
          40,
          92
        ],
        "output": [
          10,
          1,
          63,
          56,
          39,
          40
        ]
      },
      {
        "input": [
          44,
          83,
          84,
          68
        ],
        "output": [
          83,
          84,
          68
        ]
      }
    ]
  },
  {
    "id": "c018",
    "difficulty": 141,
    "function": "def c018(x):\n    # replace element 1 with 9\n    x[1] = 9\n    return x\n\n",
    "data": {
      "input": [
        1,
        22,
        55,
        73,
        24,
        82,
        93
      ],
      "output": [
        1,
        9,
        55,
        73,
        24,
        82,
        93
      ]
    },
    "demos": [
      {
        "input": [
          94,
          60,
          78
        ],
        "output": [
          94,
          9,
          78
        ]
      },
      {
        "input": [
          58,
          86,
          50,
          65,
          8
        ],
        "output": [
          58,
          9,
          50,
          65,
          8
        ]
      },
      {
        "input": [
          95,
          69,
          12
        ],
        "output": [
          95,
          9,
          12
        ]
      }
    ]
  },
  {
    "id": "c012",
    "difficulty": 142,
    "function": "def c012(x):\n    # remove all but elements 1 through 3\n    return x[1:4]\n\n",
    "data": {
      "input": [
        10,
        18,
        12,
        79,
        13
      ],
      "output": [
        18,
        12,
        79
      ]
    },
    "demos": [
      {
        "input": [
          61,
          91,
          85,
          68,
          44
        ],
        "output": [
          91,
          85,
          68
        ]
      },
      {
        "input": [
          23,
          67,
          39,
          64,
          97
        ],
        "output": [
          67,
          39,
          64
        ]
      },
      {
        "input": [
          23,
          7,
          3,
          36,
          9,
          66,
          90
        ],
        "output": [
          7,
          3,
          36
        ]
      }
    ]
  },
  {
    "id": "c232",
    "difficulty": 143,
    "function": "def c232(x):\n    # mean of the list, rounded to the nearest integer\n    return [round(sum(x)/len(x))]\n\n",
    "data": {
      "input": [
        89,
        43,
        58,
        43,
        81,
        48
      ],
      "output": [
        60
      ]
    },
    "demos": [
      {
        "input": [
          49,
          35,
          61,
          83
        ],
        "output": [
          57
        ]
      },
      {
        "input": [
          17,
          90,
          3,
          1,
          47,
          41
        ],
        "output": [
          33
        ]
      },
      {
        "input": [
          57,
          76,
          78
        ],
        "output": [
          70
        ]
      }
    ]
  },
  {
    "id": "c094",
    "difficulty": 144,
    "function": "def c094(x):\n    # swap 0,2 and 1,3\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        28,
        38,
        68,
        37,
        14,
        21
      ],
      "output": [
        68,
        37,
        28,
        38,
        14,
        21
      ]
    },
    "demos": [
      {
        "input": [
          37,
          61,
          10,
          69,
          27,
          76,
          99
        ],
        "output": [
          10,
          69,
          37,
          61,
          27,
          76,
          99
        ]
      },
      {
        "input": [
          87,
          62,
          36,
          84,
          49,
          86,
          19
        ],
        "output": [
          36,
          84,
          87,
          62,
          49,
          86,
          19
        ]
      },
      {
        "input": [
          14,
          25,
          4,
          6,
          48,
          36,
          61
        ],
        "output": [
          4,
          6,
          14,
          25,
          48,
          36,
          61
        ]
      }
    ]
  },
  {
    "id": "c086",
    "difficulty": 145,
    "function": "def c086(x):\n    # swap elements 0 and 3\n    x[0], x[3] = x[3], x[0]\n    return x\n\n",
    "data": {
      "input": [
        96,
        39,
        53,
        68,
        95,
        71
      ],
      "output": [
        68,
        39,
        53,
        96,
        95,
        71
      ]
    },
    "demos": [
      {
        "input": [
          73,
          9,
          25,
          73,
          30,
          20
        ],
        "output": [
          73,
          9,
          25,
          73,
          30,
          20
        ]
      },
      {
        "input": [
          79,
          35,
          60,
          67,
          80,
          67,
          31
        ],
        "output": [
          67,
          35,
          60,
          79,
          80,
          67,
          31
        ]
      },
      {
        "input": [
          77,
          70,
          92,
          47,
          39,
          25,
          99
        ],
        "output": [
          47,
          70,
          92,
          77,
          39,
          25,
          99
        ]
      }
    ]
  },
  {
    "id": "c193",
    "difficulty": 146,
    "function": "def c193(x):\n    # remove the smallest element and the largest element, output in ascending order\n    return sorted(x[1:-1])\n\n",
    "data": {
      "input": [
        25,
        55,
        49,
        34,
        23,
        25,
        99
      ],
      "output": [
        23,
        25,
        34,
        49,
        55
      ]
    },
    "demos": [
      {
        "input": [
          87,
          65,
          99,
          45,
          60,
          59,
          27
        ],
        "output": [
          45,
          59,
          60,
          65,
          99
        ]
      },
      {
        "input": [
          13,
          97,
          48,
          59,
          97
        ],
        "output": [
          48,
          59,
          97
        ]
      },
      {
        "input": [
          12,
          82,
          41,
          71,
          36,
          58,
          72
        ],
        "output": [
          36,
          41,
          58,
          71,
          82
        ]
      }
    ]
  },
  {
    "id": "c056",
    "difficulty": 147,
    "function": "def c056(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        71,
        50,
        3,
        66,
        26,
        8
      ],
      "output": [
        71,
        50,
        66,
        26,
        8
      ]
    },
    "demos": [
      {
        "input": [
          13,
          27,
          94,
          83,
          10
        ],
        "output": [
          13,
          27,
          83,
          10
        ]
      },
      {
        "input": [
          97,
          47,
          11,
          85,
          99,
          20
        ],
        "output": [
          97,
          47,
          85,
          99,
          20
        ]
      },
      {
        "input": [
          14,
          43,
          81,
          60,
          35
        ],
        "output": [
          14,
          43,
          60,
          35
        ]
      }
    ]
  },
  {
    "id": "c028",
    "difficulty": 148,
    "function": "def c028(x):\n    # remove element 1 if element 0 > element 1, else remove element 2\n    if x[0] > x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        38,
        78,
        96,
        46
      ],
      "output": [
        38,
        78,
        46
      ]
    },
    "demos": [
      {
        "input": [
          5,
          36,
          30,
          27,
          80
        ],
        "output": [
          5,
          36,
          27,
          80
        ]
      },
      {
        "input": [
          5,
          77,
          74,
          57,
          92,
          39,
          25
        ],
        "output": [
          5,
          77,
          57,
          92,
          39,
          25
        ]
      },
      {
        "input": [
          2,
          11,
          29,
          21,
          48,
          32
        ],
        "output": [
          2,
          11,
          21,
          48,
          32
        ]
      }
    ]
  },
  {
    "id": "c220",
    "difficulty": 149,
    "function": "def c220(x):\n    # if input length is even, double each element, else triple each element\n    if len(x) % 2 == 0:\n        return [i*2 for i in x]\n    else:\n        return [i*3 for i in x]\n\n",
    "data": {
      "input": [
        16,
        65,
        99,
        95,
        90,
        17
      ],
      "output": [
        32,
        130,
        198,
        190,
        180,
        34
      ]
    },
    "demos": [
      {
        "input": [
          13,
          30,
          62,
          75,
          56
        ],
        "output": [
          39,
          90,
          186,
          225,
          168
        ]
      },
      {
        "input": [
          50,
          77,
          31,
          41,
          99,
          49
        ],
        "output": [
          100,
          154,
          62,
          82,
          198,
          98
        ]
      },
      {
        "input": [
          29,
          44,
          43,
          81,
          11,
          88,
          98
        ],
        "output": [
          87,
          132,
          129,
          243,
          33,
          264,
          294
        ]
      }
    ]
  },
  {
    "id": "c241",
    "difficulty": 150,
    "function": "def c241(x):\n    # number of even elements\n    return [len([i for i in x if i % 2 == 0])]\n\n",
    "data": {
      "input": [
        65,
        56,
        50,
        56,
        53
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          30,
          3,
          9,
          51
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          50,
          26,
          12,
          7,
          1
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          3,
          93,
          1,
          84
        ],
        "output": [
          1
        ]
      }
    ]
  },
  {
    "id": "c060",
    "difficulty": 151,
    "function": "def c060(x):\n    # element 2,1,0,3,4,6 remove the rest\n    return [x[2], x[1], x[0], x[3], x[4], x[6]]\n\n",
    "data": {
      "input": [
        60,
        72,
        26,
        35,
        62,
        74,
        85,
        48,
        80
      ],
      "output": [
        26,
        72,
        60,
        35,
        62,
        85
      ]
    },
    "demos": [
      {
        "input": [
          83,
          29,
          27,
          93,
          47,
          38,
          80,
          24,
          81
        ],
        "output": [
          27,
          29,
          83,
          93,
          47,
          80
        ]
      },
      {
        "input": [
          56,
          59,
          48,
          74,
          8,
          88,
          58,
          86,
          36,
          36
        ],
        "output": [
          48,
          59,
          56,
          74,
          8,
          58
        ]
      },
      {
        "input": [
          47,
          11,
          94,
          9,
          69,
          44,
          15,
          94
        ],
        "output": [
          94,
          11,
          47,
          9,
          69,
          15
        ]
      }
    ]
  },
  {
    "id": "c169",
    "difficulty": 152,
    "function": "def c169(x):\n    # second largest element\n    return [sorted(x)[-2]]\n\n",
    "data": {
      "input": [
        25,
        50,
        57,
        68,
        68
      ],
      "output": [
        68
      ]
    },
    "demos": [
      {
        "input": [
          46,
          80,
          82,
          85,
          17,
          6
        ],
        "output": [
          82
        ]
      },
      {
        "input": [
          93,
          44,
          74,
          38
        ],
        "output": [
          74
        ]
      },
      {
        "input": [
          59,
          95,
          9,
          65
        ],
        "output": [
          65
        ]
      }
    ]
  },
  {
    "id": "c057",
    "difficulty": 153,
    "function": "def c057(x):\n    # insert a 4 as element 2\n    return x[:2] + [4] + x[2:]\n\n",
    "data": {
      "input": [
        26,
        32,
        18,
        24,
        18,
        21
      ],
      "output": [
        26,
        32,
        4,
        18,
        24,
        18,
        21
      ]
    },
    "demos": [
      {
        "input": [
          5,
          64,
          37,
          22,
          6,
          49
        ],
        "output": [
          5,
          64,
          4,
          37,
          22,
          6,
          49
        ]
      },
      {
        "input": [
          10,
          71,
          98,
          45,
          1,
          9,
          1
        ],
        "output": [
          10,
          71,
          4,
          98,
          45,
          1,
          9,
          1
        ]
      },
      {
        "input": [
          79,
          39,
          74,
          66
        ],
        "output": [
          79,
          39,
          4,
          74,
          66
        ]
      }
    ]
  },
  {
    "id": "c150",
    "difficulty": 154,
    "function": "def c150(x):\n    # count from first element to each element if the element is greater than the first element\n    res = []\n    for i in x:\n        if i > x[0]:\n            res += list(range(x[0], i+1))\n        else:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        89,
        50,
        91,
        75
      ],
      "output": [
        89,
        50,
        89,
        90,
        91,
        75
      ]
    },
    "demos": [
      {
        "input": [
          24,
          26,
          27,
          4
        ],
        "output": [
          24,
          24,
          25,
          26,
          24,
          25,
          26,
          27,
          4
        ]
      },
      {
        "input": [
          1,
          2,
          3,
          4,
          5
        ],
        "output": [
          1,
          1,
          2,
          1,
          2,
          3,
          1,
          2,
          3,
          4,
          1,
          2,
          3,
          4,
          5
        ]
      },
      {
        "input": [
          37,
          20,
          47,
          8,
          5
        ],
        "output": [
          37,
          20,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          8,
          5
        ]
      }
    ]
  },
  {
    "id": "c033",
    "difficulty": 155,
    "function": "def c033(x):\n    # swap element 0 and 2\n    x[0], x[2] = x[2], x[0]\n    return x\n\n",
    "data": {
      "input": [
        82,
        7,
        38,
        19,
        65
      ],
      "output": [
        38,
        7,
        82,
        19,
        65
      ]
    },
    "demos": [
      {
        "input": [
          28,
          66,
          56,
          68,
          88,
          90,
          0
        ],
        "output": [
          56,
          66,
          28,
          68,
          88,
          90,
          0
        ]
      },
      {
        "input": [
          42,
          97,
          46,
          24
        ],
        "output": [
          46,
          97,
          42,
          24
        ]
      },
      {
        "input": [
          60,
          16,
          36,
          11,
          35,
          70
        ],
        "output": [
          36,
          16,
          60,
          11,
          35,
          70
        ]
      }
    ]
  },
  {
    "id": "c218",
    "difficulty": 156,
    "function": "def c218(x):\n    # keep only second element and following equal to the first element\n    return [x[1]] + [i for i in x[2:] if i == x[0]]\n\n",
    "data": {
      "input": [
        36,
        36,
        61,
        79,
        13,
        39,
        92,
        37
      ],
      "output": [
        36
      ]
    },
    "demos": [
      {
        "input": [
          65,
          16,
          65,
          65,
          65,
          6,
          13,
          99,
          32,
          25
        ],
        "output": [
          16,
          65,
          65,
          65
        ]
      },
      {
        "input": [
          20,
          84,
          13,
          20,
          69
        ],
        "output": [
          84,
          20
        ]
      },
      {
        "input": [
          5,
          91,
          53,
          74,
          25,
          13,
          5,
          2
        ],
        "output": [
          91,
          5
        ]
      }
    ]
  },
  {
    "id": "c136",
    "difficulty": 158,
    "function": "def c136(x):\n    # remove the first occurrence of the largest element, keep the rest\n    x.remove(max(x))\n    return x\n\n",
    "data": {
      "input": [
        16,
        44,
        8,
        59,
        63,
        63
      ],
      "output": [
        16,
        44,
        8,
        59,
        63
      ]
    },
    "demos": [
      {
        "input": [
          81,
          66,
          77,
          41,
          67,
          14
        ],
        "output": [
          66,
          77,
          41,
          67,
          14
        ]
      },
      {
        "input": [
          83,
          83,
          21,
          33,
          43,
          12
        ],
        "output": [
          83,
          21,
          33,
          43,
          12
        ]
      },
      {
        "input": [
          50,
          87,
          48,
          96,
          0,
          38
        ],
        "output": [
          50,
          87,
          48,
          0,
          38
        ]
      }
    ]
  },
  {
    "id": "c083",
    "difficulty": 159,
    "function": "def c083(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        88,
        8,
        42,
        6,
        55,
        8,
        50,
        82
      ],
      "output": [
        50
      ]
    },
    "demos": [
      {
        "input": [
          34,
          10,
          17,
          59,
          99,
          43,
          27,
          23
        ],
        "output": [
          27
        ]
      },
      {
        "input": [
          60,
          71,
          27,
          24,
          49,
          59,
          78
        ],
        "output": [
          78
        ]
      },
      {
        "input": [
          59,
          53,
          7,
          79,
          52,
          1,
          78
        ],
        "output": [
          78
        ]
      }
    ]
  },
  {
    "id": "c019",
    "difficulty": 160,
    "function": "def c019(x):\n    # replace element 5 with a 3 if there is an element 5\n    if len(x) > 5:\n        x[4] = 3\n    return x\n\n",
    "data": {
      "input": [
        45,
        3,
        18,
        5,
        65,
        38
      ],
      "output": [
        45,
        3,
        18,
        5,
        3,
        38
      ]
    },
    "demos": [
      {
        "input": [
          19,
          39,
          44,
          75,
          11,
          50
        ],
        "output": [
          19,
          39,
          44,
          75,
          3,
          50
        ]
      },
      {
        "input": [
          57,
          52,
          74,
          57
        ],
        "output": [
          57,
          52,
          74,
          57
        ]
      },
      {
        "input": [
          95,
          87,
          8,
          21,
          52,
          82,
          90
        ],
        "output": [
          95,
          87,
          8,
          21,
          3,
          82,
          90
        ]
      }
    ]
  },
  {
    "id": "c203",
    "difficulty": 161,
    "function": "def c203(x):\n    # the first M positive multiples of the smallest element, M is the length of the input\n    return [min(x)*i for i in range(1, len(x)+1)]\n\n",
    "data": {
      "input": [
        23,
        1,
        15,
        9,
        21
      ],
      "output": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    "demos": [
      {
        "input": [
          6,
          22,
          21,
          10,
          15,
          19,
          9
        ],
        "output": [
          6,
          12,
          18,
          24,
          30,
          36,
          42
        ]
      },
      {
        "input": [
          6,
          23,
          13,
          25,
          17,
          3
        ],
        "output": [
          3,
          6,
          9,
          12,
          15,
          18
        ]
      },
      {
        "input": [
          4,
          18,
          3,
          4,
          16
        ],
        "output": [
          3,
          6,
          9,
          12,
          15
        ]
      }
    ]
  },
  {
    "id": "c115",
    "difficulty": 162,
    "function": "def c115(x):\n    # the unique elements, prepended and appended by their sum\n    res = list(set(x))\n    return [sum(res)] + res + [sum(res)]\n\n",
    "data": {
      "input": [
        25,
        15,
        15,
        25,
        18,
        27,
        22
      ],
      "output": [
        107,
        15,
        18,
        22,
        25,
        27,
        107
      ]
    },
    "demos": [
      {
        "input": [
          12,
          20,
          0,
          7
        ],
        "output": [
          39,
          0,
          12,
          20,
          7,
          39
        ]
      },
      {
        "input": [
          12,
          6,
          14,
          12,
          5,
          26,
          14
        ],
        "output": [
          63,
          5,
          6,
          12,
          14,
          26,
          63
        ]
      },
      {
        "input": [
          25,
          22,
          15,
          30
        ],
        "output": [
          92,
          25,
          30,
          22,
          15,
          92
        ]
      }
    ]
  },
  {
    "id": "c207",
    "difficulty": 163,
    "function": "def c207(x):\n    # element-wise sum of the input and the reverse of the input\n    return [i+j for i, j in zip(x, x[::-1])]\n\n",
    "data": {
      "input": [
        3,
        1,
        44,
        15,
        47
      ],
      "output": [
        50,
        16,
        88,
        16,
        50
      ]
    },
    "demos": [
      {
        "input": [
          46,
          48,
          42,
          26,
          46
        ],
        "output": [
          92,
          74,
          84,
          74,
          92
        ]
      },
      {
        "input": [
          10,
          13,
          2,
          24,
          22,
          39,
          29
        ],
        "output": [
          39,
          52,
          24,
          48,
          24,
          52,
          39
        ]
      },
      {
        "input": [
          9,
          45,
          10,
          25,
          35,
          45
        ],
        "output": [
          54,
          80,
          35,
          35,
          80,
          54
        ]
      }
    ]
  },
  {
    "id": "c088",
    "difficulty": 164,
    "function": "def c088(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        89,
        67,
        67,
        65,
        64
      ],
      "output": [
        65,
        67,
        67,
        89,
        64
      ]
    },
    "demos": [
      {
        "input": [
          63,
          41,
          87,
          80,
          29,
          73,
          57
        ],
        "output": [
          63,
          87,
          41,
          80,
          29,
          73,
          57
        ]
      },
      {
        "input": [
          10,
          7,
          7,
          36,
          64,
          53
        ],
        "output": [
          36,
          7,
          7,
          10,
          64,
          53
        ]
      },
      {
        "input": [
          68,
          43,
          43,
          46,
          17,
          1
        ],
        "output": [
          46,
          43,
          43,
          68,
          17,
          1
        ]
      }
    ]
  },
  {
    "id": "c040",
    "difficulty": 165,
    "function": "def c040(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        17,
        20,
        14,
        19,
        26
      ],
      "output": [
        17,
        20,
        14,
        19,
        26
      ]
    },
    "demos": [
      {
        "input": [
          12,
          3,
          29,
          28,
          23,
          12
        ],
        "output": [
          12,
          3,
          29,
          28,
          23,
          12,
          3
        ]
      },
      {
        "input": [
          26,
          15,
          11,
          11,
          14,
          19,
          4
        ],
        "output": [
          26,
          15,
          11,
          11,
          14,
          19,
          4
        ]
      },
      {
        "input": [
          25,
          8,
          3,
          20,
          20
        ],
        "output": [
          25,
          8,
          3,
          20,
          20,
          3
        ]
      }
    ]
  },
  {
    "id": "c085",
    "difficulty": 166,
    "function": "def c085(x):\n    # remove all but element N, N=first element\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        4,
        43,
        0,
        21,
        3
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          3,
          32,
          24,
          8
        ],
        "output": [
          8
        ]
      },
      {
        "input": [
          6,
          18,
          14,
          25,
          10,
          28,
          19
        ],
        "output": [
          19
        ]
      },
      {
        "input": [
          2,
          28,
          4,
          7
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c111",
    "difficulty": 167,
    "function": "def c111(x):\n    # repeat the largest element N times, where N is the smallest element\n    return [max(x)] * min(x)\n\n",
    "data": {
      "input": [
        1,
        9,
        21,
        10,
        26,
        16,
        6
      ],
      "output": [
        26
      ]
    },
    "demos": [
      {
        "input": [
          30,
          6,
          2,
          8,
          2
        ],
        "output": [
          30,
          30
        ]
      },
      {
        "input": [
          5,
          5,
          14,
          18,
          9
        ],
        "output": [
          18,
          18,
          18,
          18,
          18
        ]
      },
      {
        "input": [
          16,
          14,
          3,
          27,
          26,
          9,
          14
        ],
        "output": [
          27,
          27,
          27
        ]
      }
    ]
  },
  {
    "id": "c073",
    "difficulty": 168,
    "function": "def c073(x):\n    # add the index to every element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        7,
        1,
        13,
        25,
        30,
        27,
        16
      ],
      "output": [
        7,
        2,
        15,
        28,
        34,
        32,
        22
      ]
    },
    "demos": [
      {
        "input": [
          23,
          37,
          41,
          14
        ],
        "output": [
          23,
          38,
          43,
          17
        ]
      },
      {
        "input": [
          12,
          34,
          28,
          49,
          30,
          41
        ],
        "output": [
          12,
          35,
          30,
          52,
          34,
          46
        ]
      },
      {
        "input": [
          5,
          29,
          42,
          0,
          26
        ],
        "output": [
          5,
          30,
          44,
          3,
          30
        ]
      }
    ]
  },
  {
    "id": "c027",
    "difficulty": 169,
    "function": "def c027(x):\n    # remove element 1 if element 0 = element 1, else remove element 2\n    if x[0] == x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        97,
        47,
        54,
        4,
        61
      ],
      "output": [
        97,
        47,
        4,
        61
      ]
    },
    "demos": [
      {
        "input": [
          11,
          11,
          43,
          85,
          73
        ],
        "output": [
          11,
          43,
          85,
          73
        ]
      },
      {
        "input": [
          91,
          91,
          80,
          90,
          85,
          77
        ],
        "output": [
          91,
          80,
          90,
          85,
          77
        ]
      },
      {
        "input": [
          22,
          22,
          59,
          60,
          42,
          44
        ],
        "output": [
          22,
          59,
          60,
          42,
          44
        ]
      }
    ]
  },
  {
    "id": "c234",
    "difficulty": 170,
    "function": "def c234(x):\n    # repetitions in order of first appearance\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out.append(i)\n    return out\n\n",
    "data": {
      "input": [
        27,
        95,
        27,
        95,
        64,
        44,
        38,
        27
      ],
      "output": [
        27,
        95
      ]
    },
    "demos": [
      {
        "input": [
          99,
          40,
          7,
          88,
          90,
          7,
          88
        ],
        "output": [
          7,
          88
        ]
      },
      {
        "input": [
          35,
          35,
          12,
          53,
          7,
          53,
          97,
          12,
          28
        ],
        "output": [
          35,
          12,
          53
        ]
      },
      {
        "input": [
          61,
          32,
          87,
          32,
          65,
          3,
          74,
          74,
          45
        ],
        "output": [
          32,
          74
        ]
      }
    ]
  },
  {
    "id": "c165",
    "difficulty": 171,
    "function": "def c165(x):\n    # reverse the input and keep only even elements\n    return [i for i in x[::-1] if i % 2 == 0]\n\n",
    "data": {
      "input": [
        14,
        93,
        41,
        77,
        55,
        7,
        87
      ],
      "output": [
        14
      ]
    },
    "demos": [
      {
        "input": [
          41,
          27,
          40,
          18,
          41,
          2,
          2,
          95
        ],
        "output": [
          2,
          2,
          18,
          40
        ]
      },
      {
        "input": [
          36,
          53,
          6,
          53,
          91,
          28,
          75,
          88
        ],
        "output": [
          88,
          28,
          6,
          36
        ]
      },
      {
        "input": [
          57,
          58,
          90,
          78,
          35,
          24
        ],
        "output": [
          24,
          78,
          90,
          58
        ]
      }
    ]
  },
  {
    "id": "c191",
    "difficulty": 172,
    "function": "def c191(x):\n    # repeat each element N times, where N is its tens digit\n    out = []\n    for i in x:\n        if len(str(i)) > 1:\n            out += [i] * int(str(i)[-2])\n    return out\n\n",
    "data": {
      "input": [
        27,
        19,
        14,
        38,
        21,
        32
      ],
      "output": [
        27,
        27,
        19,
        14,
        38,
        38,
        38,
        21,
        21,
        32,
        32,
        32
      ]
    },
    "demos": [
      {
        "input": [
          20,
          21,
          21,
          13
        ],
        "output": [
          20,
          20,
          21,
          21,
          21,
          21,
          13
        ]
      },
      {
        "input": [
          18,
          18,
          35,
          37,
          26
        ],
        "output": [
          18,
          18,
          35,
          35,
          35,
          37,
          37,
          37,
          26,
          26
        ]
      },
      {
        "input": [
          6,
          22,
          39,
          20,
          15,
          23
        ],
        "output": [
          22,
          22,
          39,
          39,
          39,
          20,
          20,
          15,
          23,
          23
        ]
      }
    ]
  },
  {
    "id": "c026",
    "difficulty": 173,
    "function": "def c026(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        62,
        38,
        91,
        25,
        17,
        62,
        53
      ],
      "output": [
        62,
        38,
        25,
        17,
        62,
        53
      ]
    },
    "demos": [
      {
        "input": [
          78,
          5,
          37,
          79,
          58
        ],
        "output": [
          78,
          5,
          79,
          58
        ]
      },
      {
        "input": [
          16,
          75,
          90,
          60
        ],
        "output": [
          16,
          75,
          60
        ]
      },
      {
        "input": [
          43,
          5,
          30,
          62,
          40,
          12,
          31
        ],
        "output": [
          43,
          5,
          62,
          40,
          12,
          31
        ]
      }
    ]
  },
  {
    "id": "c059",
    "difficulty": 174,
    "function": "def c059(x):\n    # swap element 2 and element 5\n    x[2], x[5] = x[5], x[2]\n    return x\n\n",
    "data": {
      "input": [
        28,
        8,
        34,
        14,
        13,
        37,
        13
      ],
      "output": [
        28,
        8,
        37,
        14,
        13,
        34,
        13
      ]
    },
    "demos": [
      {
        "input": [
          88,
          27,
          91,
          47,
          43,
          94,
          84,
          62
        ],
        "output": [
          88,
          27,
          94,
          47,
          43,
          91,
          84,
          62
        ]
      },
      {
        "input": [
          23,
          86,
          43,
          47,
          92,
          64,
          42,
          29
        ],
        "output": [
          23,
          86,
          64,
          47,
          92,
          43,
          42,
          29
        ]
      },
      {
        "input": [
          83,
          45,
          20,
          8,
          41,
          42,
          44
        ],
        "output": [
          83,
          45,
          42,
          8,
          41,
          20,
          44
        ]
      }
    ]
  },
  {
    "id": "c074",
    "difficulty": 175,
    "function": "def c074(x):\n    # remove every element whose value < 8\n    return [i for i in x if i >= 8]\n\n",
    "data": {
      "input": [
        4,
        16,
        24,
        25,
        25,
        11
      ],
      "output": [
        16,
        24,
        25,
        25,
        11
      ]
    },
    "demos": [
      {
        "input": [
          23,
          15,
          17,
          8,
          5
        ],
        "output": [
          23,
          15,
          17,
          8
        ]
      },
      {
        "input": [
          7,
          1,
          21,
          16,
          21,
          9,
          14
        ],
        "output": [
          21,
          16,
          21,
          9,
          14
        ]
      },
      {
        "input": [
          11,
          7,
          14,
          15,
          23
        ],
        "output": [
          11,
          14,
          15,
          23
        ]
      }
    ]
  },
  {
    "id": "c173",
    "difficulty": 176,
    "function": "def c173(x):\n    # replace element N with the largest element in element 0 through N\n    for i in range(len(x)):\n        x[i] = max(x[:i+1])\n    return x\n\n",
    "data": {
      "input": [
        0,
        48,
        9,
        14,
        43,
        1,
        1
      ],
      "output": [
        0,
        48,
        48,
        48,
        48,
        48,
        48
      ]
    },
    "demos": [
      {
        "input": [
          9,
          33,
          33,
          59,
          68,
          36,
          20,
          63
        ],
        "output": [
          9,
          33,
          33,
          59,
          68,
          68,
          68,
          68
        ]
      },
      {
        "input": [
          18,
          97,
          68,
          85,
          47
        ],
        "output": [
          18,
          97,
          97,
          97,
          97
        ]
      },
      {
        "input": [
          80,
          28,
          68,
          99,
          73
        ],
        "output": [
          80,
          80,
          80,
          99,
          99
        ]
      }
    ]
  },
  {
    "id": "c175",
    "difficulty": 177,
    "function": "def c175(x):\n    # keep only elements larger than any preceding element\n    res = [x[0]]\n    for i in x[1:]:\n        if i > res[-1]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        25,
        44,
        0,
        36,
        31
      ],
      "output": [
        25,
        44
      ]
    },
    "demos": [
      {
        "input": [
          63,
          74,
          48,
          91,
          25,
          9,
          91,
          69
        ],
        "output": [
          63,
          74,
          91
        ]
      },
      {
        "input": [
          46,
          79,
          72,
          83,
          41,
          49,
          47
        ],
        "output": [
          46,
          79,
          83
        ]
      },
      {
        "input": [
          18,
          12,
          36,
          44,
          88
        ],
        "output": [
          18,
          36,
          44,
          88
        ]
      }
    ]
  },
  {
    "id": "c204",
    "difficulty": 178,
    "function": "def c204(x):\n    # keep only elements followed by 0\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] == 0:\n            res.append(x[i])\n    return res\n\n",
    "data": {
      "input": [
        26,
        21,
        0,
        0,
        5,
        0,
        24,
        30,
        24,
        15
      ],
      "output": [
        21,
        0,
        5
      ]
    },
    "demos": [
      {
        "input": [
          26,
          22,
          4,
          29,
          22,
          27,
          0
        ],
        "output": [
          27
        ]
      },
      {
        "input": [
          29,
          26,
          29,
          3,
          28,
          18,
          24,
          0
        ],
        "output": [
          24
        ]
      },
      {
        "input": [
          2,
          25,
          13,
          12,
          3,
          24,
          22
        ],
        "output": []
      }
    ]
  },
  {
    "id": "c031",
    "difficulty": 179,
    "function": "def c031(x):\n    # remove whichever are equal, the first 2 elements or the last 2 elements\n    if x[0] == x[1]:\n        return x[2:]\n    elif x[-1] == x[-2]:\n        return x[:-2]\n    return x\n\n",
    "data": {
      "input": [
        80,
        56,
        60,
        55,
        52,
        59,
        59
      ],
      "output": [
        80,
        56,
        60,
        55,
        52
      ]
    },
    "demos": [
      {
        "input": [
          64,
          15,
          97,
          42,
          18,
          47,
          68,
          68
        ],
        "output": [
          64,
          15,
          97,
          42,
          18,
          47
        ]
      },
      {
        "input": [
          28,
          69,
          12,
          92,
          3,
          3
        ],
        "output": [
          28,
          69,
          12,
          92
        ]
      },
      {
        "input": [
          25,
          25,
          25,
          20,
          55,
          76,
          37
        ],
        "output": [
          25,
          20,
          55,
          76,
          37
        ]
      }
    ]
  },
  {
    "id": "c236",
    "difficulty": 180,
    "function": "def c236(x):\n    # even elements divided by 2\n    return [i//2 for i in x if i % 2 == 0]\n\n",
    "data": {
      "input": [
        89,
        59,
        96,
        6,
        26,
        26,
        96
      ],
      "output": [
        48,
        3,
        13,
        13,
        48
      ]
    },
    "demos": [
      {
        "input": [
          17,
          6,
          50,
          60,
          89,
          38
        ],
        "output": [
          3,
          25,
          30,
          19
        ]
      },
      {
        "input": [
          20,
          60,
          63,
          89,
          71,
          99,
          7,
          48,
          17,
          29
        ],
        "output": [
          10,
          30,
          24
        ]
      },
      {
        "input": [
          13,
          93,
          35,
          44,
          29,
          84,
          67,
          66,
          55
        ],
        "output": [
          22,
          42,
          33
        ]
      }
    ]
  },
  {
    "id": "c054",
    "difficulty": 181,
    "function": "def c054(x):\n    # replace element 0 and 1 with element 2\n    x[0] = x[2]\n    x[1] = x[2]\n    return x\n\n",
    "data": {
      "input": [
        89,
        10,
        83,
        28,
        65,
        89,
        71
      ],
      "output": [
        83,
        83,
        83,
        28,
        65,
        89,
        71
      ]
    },
    "demos": [
      {
        "input": [
          23,
          91,
          49,
          32
        ],
        "output": [
          49,
          49,
          49,
          32
        ]
      },
      {
        "input": [
          36,
          57,
          67,
          31,
          49
        ],
        "output": [
          67,
          67,
          67,
          31,
          49
        ]
      },
      {
        "input": [
          8,
          54,
          28,
          74,
          61
        ],
        "output": [
          28,
          28,
          28,
          74,
          61
        ]
      }
    ]
  },
  {
    "id": "c227",
    "difficulty": 182,
    "function": "def c227(x):\n    # interleave the input and reversed input, keep only unique elements in order of appearance\n    res = []\n    mid = len(x) // 2\n    for i in range(mid):\n        if x[i] not in res:\n            res.append(x[i])\n        if x[-i-1] not in res:\n            res.append(x[-i-1])\n    if len(x) % 2 == 1 and x[mid] not in res:\n        res.append(x[mid])\n    return res\n\n",
    "data": {
      "input": [
        69,
        76,
        45,
        85,
        80,
        74,
        0,
        22
      ],
      "output": [
        69,
        22,
        76,
        0,
        45,
        74,
        85,
        80
      ]
    },
    "demos": [
      {
        "input": [
          62,
          22,
          3,
          32,
          28
        ],
        "output": [
          62,
          28,
          22,
          32,
          3
        ]
      },
      {
        "input": [
          21,
          68,
          16,
          28,
          85,
          73
        ],
        "output": [
          21,
          73,
          68,
          85,
          16,
          28
        ]
      },
      {
        "input": [
          25,
          8,
          25,
          25,
          25,
          99,
          4
        ],
        "output": [
          25,
          4,
          8,
          99
        ]
      }
    ]
  },
  {
    "id": "c024",
    "difficulty": 183,
    "function": "def c024(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        9,
        1,
        15,
        5
      ],
      "output": [
        9,
        8,
        1,
        15,
        5
      ]
    },
    "demos": [
      {
        "input": [
          3,
          3,
          7,
          14,
          3,
          3,
          17
        ],
        "output": [
          3,
          5,
          3,
          7,
          14,
          3,
          3,
          17
        ]
      },
      {
        "input": [
          11,
          4,
          14,
          2,
          2,
          4
        ],
        "output": [
          11,
          8,
          4,
          14,
          2,
          2,
          4
        ]
      },
      {
        "input": [
          9,
          11,
          5,
          20,
          7,
          20
        ],
        "output": [
          9,
          8,
          11,
          5,
          20,
          7,
          20
        ]
      }
    ]
  },
  {
    "id": "c200",
    "difficulty": 184,
    "function": "def c200(x):\n    # tens digits of the elements in ascending order\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append(int(str(i)[-2]))\n        else:\n            res.append(0)\n    return sorted(res)\n\n",
    "data": {
      "input": [
        82,
        16,
        16,
        79,
        85,
        41,
        88
      ],
      "output": [
        1,
        1,
        4,
        7,
        8,
        8,
        8
      ]
    },
    "demos": [
      {
        "input": [
          9,
          90,
          37,
          23,
          74,
          94
        ],
        "output": [
          0,
          2,
          3,
          7,
          9,
          9
        ]
      },
      {
        "input": [
          0,
          49,
          62,
          97,
          45
        ],
        "output": [
          0,
          4,
          4,
          6,
          9
        ]
      },
      {
        "input": [
          6,
          87,
          76,
          88,
          23,
          21
        ],
        "output": [
          0,
          2,
          2,
          7,
          8,
          8
        ]
      }
    ]
  },
  {
    "id": "c010",
    "difficulty": 185,
    "function": "def c010(x):\n    # elements 1 through N + 1, N is the first element\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        6,
        1,
        10,
        6,
        17,
        1
      ],
      "output": [
        1,
        10,
        6,
        17,
        1
      ]
    },
    "demos": [
      {
        "input": [
          5,
          3,
          13,
          11,
          5
        ],
        "output": [
          3,
          13,
          11,
          5
        ]
      },
      {
        "input": [
          5,
          11,
          20,
          13,
          5,
          4,
          13,
          12
        ],
        "output": [
          11,
          20,
          13,
          5,
          4
        ]
      },
      {
        "input": [
          1,
          10,
          17,
          14,
          8
        ],
        "output": [
          10
        ]
      }
    ]
  },
  {
    "id": "c123",
    "difficulty": 186,
    "function": "def c123(x):\n    # remove all but element N, N is the last element\n    return [x[x[-1]]]\n\n",
    "data": {
      "input": [
        18,
        11,
        19,
        7,
        1
      ],
      "output": [
        11
      ]
    },
    "demos": [
      {
        "input": [
          9,
          8,
          20,
          13,
          3
        ],
        "output": [
          13
        ]
      },
      {
        "input": [
          8,
          8,
          16,
          6,
          3,
          1,
          20,
          5
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          2,
          3,
          16,
          16,
          1
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c023",
    "difficulty": 187,
    "function": "def c023(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        0,
        17,
        4,
        13,
        4,
        13,
        20,
        17
      ],
      "output": [
        0,
        5,
        17,
        4,
        13,
        4,
        13,
        20,
        17
      ]
    },
    "demos": [
      {
        "input": [
          18,
          10,
          8,
          9,
          20,
          4
        ],
        "output": [
          18,
          8,
          10,
          8,
          9,
          20,
          4
        ]
      },
      {
        "input": [
          20,
          3,
          18,
          14
        ],
        "output": [
          20,
          8,
          3,
          18,
          14
        ]
      },
      {
        "input": [
          9,
          5,
          9,
          6,
          17,
          6
        ],
        "output": [
          9,
          8,
          5,
          9,
          6,
          17,
          6
        ]
      }
    ]
  },
  {
    "id": "c194",
    "difficulty": 188,
    "function": "def c194(x):\n    # reverse the input; prepend and append the length of the input\n    return [len(x)] + x[::-1] + [len(x)]\n\n",
    "data": {
      "input": [
        5,
        0,
        14,
        1,
        2,
        8,
        2
      ],
      "output": [
        7,
        2,
        8,
        2,
        1,
        14,
        0,
        5,
        7
      ]
    },
    "demos": [
      {
        "input": [
          8,
          7,
          3,
          11,
          10,
          19,
          0
        ],
        "output": [
          7,
          0,
          19,
          10,
          11,
          3,
          7,
          8,
          7
        ]
      },
      {
        "input": [
          19,
          19,
          13,
          3,
          13,
          15,
          1
        ],
        "output": [
          7,
          1,
          15,
          13,
          3,
          13,
          19,
          19,
          7
        ]
      },
      {
        "input": [
          4,
          11,
          12,
          9,
          14
        ],
        "output": [
          5,
          14,
          9,
          12,
          11,
          4,
          5
        ]
      }
    ]
  },
  {
    "id": "c245",
    "difficulty": 189,
    "function": "def c245(x):\n    # number of times element 0 appears in the following elements\n    return [x[1:].count(x[0])]\n\n",
    "data": {
      "input": [
        9,
        9,
        11,
        20,
        13,
        5,
        18,
        9
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          0,
          0,
          6,
          20,
          7,
          8
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          12,
          2,
          12,
          4,
          2,
          12,
          19
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          18,
          18,
          3,
          18,
          2,
          18
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c032",
    "difficulty": 190,
    "function": "def c032(x):\n    # remove first 2 elements if element 0 > last element, else remove last 2 elements\n    if x[0] > x[-1]:\n        return x[2:]\n    else:\n        return x[:-2]\n    \n",
    "data": {
      "input": [
        55,
        29,
        20,
        8,
        99,
        87,
        14
      ],
      "output": [
        20,
        8,
        99,
        87,
        14
      ]
    },
    "demos": [
      {
        "input": [
          5,
          74,
          66,
          31,
          71,
          1
        ],
        "output": [
          66,
          31,
          71,
          1
        ]
      },
      {
        "input": [
          44,
          15,
          83,
          59,
          20
        ],
        "output": [
          83,
          59,
          20
        ]
      },
      {
        "input": [
          64,
          47,
          80,
          55,
          9
        ],
        "output": [
          80,
          55,
          9
        ]
      }
    ]
  },
  {
    "id": "c058",
    "difficulty": 191,
    "function": "def c058(x):\n    # remove the first 5 elements\n    return x[5:]\n\n",
    "data": {
      "input": [
        90,
        33,
        9,
        34,
        19
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          26,
          26,
          39,
          48,
          92,
          8
        ],
        "output": [
          8
        ]
      },
      {
        "input": [
          53,
          37,
          21,
          70,
          91,
          48,
          38,
          26
        ],
        "output": [
          48,
          38,
          26
        ]
      },
      {
        "input": [
          74,
          58,
          81,
          38
        ],
        "output": []
      }
    ]
  },
  {
    "id": "c174",
    "difficulty": 192,
    "function": "def c174(x):\n    # keep the first M elements, where M is the number of unique elements\n    return x[:len(set(x))]\n\n",
    "data": {
      "input": [
        40,
        82,
        8,
        65,
        65,
        47,
        32
      ],
      "output": [
        40,
        82,
        8,
        65,
        65,
        47
      ]
    },
    "demos": [
      {
        "input": [
          33,
          94,
          71,
          50,
          54,
          33,
          71,
          33,
          42,
          71
        ],
        "output": [
          33,
          94,
          71,
          50,
          54,
          33
        ]
      },
      {
        "input": [
          84,
          87,
          69,
          19,
          13
        ],
        "output": [
          84,
          87,
          69,
          19,
          13
        ]
      },
      {
        "input": [
          35,
          57,
          4,
          55,
          20
        ],
        "output": [
          35,
          57,
          4,
          55,
          20
        ]
      }
    ]
  },
  {
    "id": "c229",
    "difficulty": 193,
    "function": "def c229(x):\n    # keep only first N elements of the reversed input, N is the first element\n    length = x[0]\n    return x[::-1][:length]\n\n",
    "data": {
      "input": [
        6,
        22,
        97,
        11,
        29,
        41
      ],
      "output": [
        41,
        29,
        11,
        97,
        22,
        6
      ]
    },
    "demos": [
      {
        "input": [
          1,
          24,
          73,
          74,
          85,
          18,
          40
        ],
        "output": [
          40
        ]
      },
      {
        "input": [
          5,
          62,
          58,
          29,
          43,
          99,
          48,
          33
        ],
        "output": [
          33,
          48,
          99,
          43,
          29
        ]
      },
      {
        "input": [
          2,
          50,
          69,
          41,
          78
        ],
        "output": [
          78,
          41
        ]
      }
    ]
  },
  {
    "id": "c162",
    "difficulty": 194,
    "function": "def c162(x):\n    # replace each element M with 3 * M + 7\n    return [3*i+7 for i in x]\n\n",
    "data": {
      "input": [
        9,
        6,
        15,
        17,
        17,
        23,
        22
      ],
      "output": [
        34,
        25,
        52,
        58,
        58,
        76,
        73
      ]
    },
    "demos": [
      {
        "input": [
          2,
          22,
          7,
          3,
          12,
          0
        ],
        "output": [
          13,
          73,
          28,
          16,
          43,
          7
        ]
      },
      {
        "input": [
          7,
          18,
          22,
          21,
          15
        ],
        "output": [
          28,
          61,
          73,
          70,
          52
        ]
      },
      {
        "input": [
          18,
          0,
          6,
          28,
          8,
          28,
          22
        ],
        "output": [
          61,
          7,
          25,
          91,
          31,
          91,
          73
        ]
      }
    ]
  },
  {
    "id": "c039",
    "difficulty": 195,
    "function": "def c039(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        49,
        6,
        39,
        12,
        10,
        9,
        42
      ],
      "output": [
        49,
        6,
        39,
        12,
        10,
        9,
        42,
        9
      ]
    },
    "demos": [
      {
        "input": [
          22,
          19,
          11,
          43,
          15,
          38,
          42,
          14
        ],
        "output": [
          22,
          19,
          11,
          43,
          15,
          38,
          42,
          14
        ]
      },
      {
        "input": [
          3,
          40,
          20,
          43,
          23,
          10
        ],
        "output": [
          3,
          40,
          20,
          43,
          23,
          10,
          3
        ]
      },
      {
        "input": [
          18,
          1,
          4,
          43,
          37,
          46
        ],
        "output": [
          18,
          1,
          4,
          43,
          37,
          46
        ]
      }
    ]
  },
  {
    "id": "c181",
    "difficulty": 196,
    "function": "def c181(x):\n    # reverse the order of elements with even index\n    return [x[i] if i % 2 == 1 else x[-i-1] for i in range(len(x))]\n\n",
    "data": {
      "input": [
        97,
        61,
        13,
        56,
        18,
        55,
        37,
        55
      ],
      "output": [
        55,
        61,
        55,
        56,
        56,
        55,
        61,
        55
      ]
    },
    "demos": [
      {
        "input": [
          15,
          21,
          18,
          82,
          9,
          5,
          35,
          70
        ],
        "output": [
          70,
          21,
          5,
          82,
          82,
          5,
          21,
          70
        ]
      },
      {
        "input": [
          72,
          89,
          31,
          64,
          73,
          81,
          49
        ],
        "output": [
          49,
          89,
          73,
          64,
          31,
          81,
          72
        ]
      },
      {
        "input": [
          25,
          17,
          3,
          76,
          23,
          43,
          71,
          10
        ],
        "output": [
          10,
          17,
          43,
          76,
          76,
          43,
          17,
          10
        ]
      }
    ]
  },
  {
    "id": "c163",
    "difficulty": 197,
    "function": "def c163(x):\n    # replace each element M with 2 * M - 10\n    return [2*i-10 for i in x]\n\n",
    "data": {
      "input": [
        10,
        83,
        65,
        63,
        97,
        85,
        71
      ],
      "output": [
        10,
        156,
        120,
        116,
        184,
        160,
        132
      ]
    },
    "demos": [
      {
        "input": [
          26,
          90,
          30,
          77,
          43,
          32,
          98,
          12
        ],
        "output": [
          42,
          170,
          50,
          144,
          76,
          54,
          186,
          14
        ]
      },
      {
        "input": [
          35,
          64,
          35,
          55,
          91,
          26,
          95,
          94
        ],
        "output": [
          60,
          118,
          60,
          100,
          172,
          42,
          180,
          178
        ]
      },
      {
        "input": [
          87,
          55,
          54,
          24,
          77,
          55,
          46,
          87
        ],
        "output": [
          164,
          100,
          98,
          38,
          144,
          100,
          82,
          164
        ]
      }
    ]
  },
  {
    "id": "c154",
    "difficulty": 198,
    "function": "def c154(x):\n    # triple each even element\n    return [i*3 if i % 2 == 0 else i for i in x]\n\n",
    "data": {
      "input": [
        5,
        23,
        20,
        0,
        2,
        14,
        29,
        18
      ],
      "output": [
        5,
        23,
        60,
        0,
        6,
        42,
        29,
        54
      ]
    },
    "demos": [
      {
        "input": [
          5,
          0,
          30,
          24,
          29
        ],
        "output": [
          5,
          0,
          90,
          72,
          29
        ]
      },
      {
        "input": [
          23,
          15,
          9,
          8,
          11,
          26,
          31,
          3
        ],
        "output": [
          23,
          15,
          9,
          24,
          11,
          78,
          31,
          3
        ]
      },
      {
        "input": [
          1,
          15,
          28,
          1,
          18,
          14,
          1,
          32
        ],
        "output": [
          1,
          15,
          84,
          1,
          54,
          42,
          1,
          96
        ]
      }
    ]
  },
  {
    "id": "c166",
    "difficulty": 199,
    "function": "def c166(x):\n    # unique elements in ascending order by the sum of their digits\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = sum(map(int, str(i)))\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        3,
        39,
        97,
        48,
        39
      ],
      "output": [
        3,
        39,
        48,
        97
      ]
    },
    "demos": [
      {
        "input": [
          54,
          63,
          47,
          5,
          57
        ],
        "output": [
          5,
          54,
          63,
          47,
          57
        ]
      },
      {
        "input": [
          92,
          26,
          12,
          45,
          12,
          80,
          10,
          91
        ],
        "output": [
          10,
          12,
          26,
          80,
          45,
          91,
          92
        ]
      },
      {
        "input": [
          6,
          7,
          23,
          23,
          72,
          54
        ],
        "output": [
          23,
          6,
          7,
          72,
          54
        ]
      }
    ]
  },
  {
    "id": "c084",
    "difficulty": 200,
    "function": "def c084(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        31,
        37,
        67,
        17,
        3,
        34,
        80,
        95,
        65
      ],
      "output": [
        80
      ]
    },
    "demos": [
      {
        "input": [
          53,
          56,
          61,
          50,
          79,
          30,
          19
        ],
        "output": [
          19
        ]
      },
      {
        "input": [
          38,
          98,
          84,
          16,
          20,
          26,
          16,
          90
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          57,
          72,
          74,
          56,
          66,
          20,
          94,
          96,
          36,
          75
        ],
        "output": [
          94
        ]
      }
    ]
  },
  {
    "id": "c249",
    "difficulty": 201,
    "function": "def c249(x):\n    # use 0s to delimit sublists, give the first element of each sublist\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            if sublist:\n                res.append(sublist[0])\n                sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res.append(sublist[0])\n    return res\n\n",
    "data": {
      "input": [
        4,
        46,
        99,
        0,
        11,
        41,
        34,
        99
      ],
      "output": [
        4,
        11
      ]
    },
    "demos": [
      {
        "input": [
          29,
          0,
          30,
          0,
          22,
          77,
          92,
          60,
          35,
          32,
          0,
          79
        ],
        "output": [
          29,
          30,
          22,
          79
        ]
      },
      {
        "input": [
          93,
          11,
          30,
          0,
          0,
          96,
          1,
          27,
          51
        ],
        "output": [
          93,
          96
        ]
      },
      {
        "input": [
          13,
          54,
          0,
          64,
          79,
          55,
          58,
          35,
          22
        ],
        "output": [
          13,
          64
        ]
      }
    ]
  },
  {
    "id": "c118",
    "difficulty": 202,
    "function": "def c118(x):\n    # left rotate by N elements, N is the last element\n    return x[x[-1]:] + x[:x[-1]]\n\n",
    "data": {
      "input": [
        3,
        41,
        55,
        32,
        45,
        6,
        4
      ],
      "output": [
        45,
        6,
        4,
        3,
        41,
        55,
        32
      ]
    },
    "demos": [
      {
        "input": [
          24,
          3,
          45,
          72,
          3,
          2
        ],
        "output": [
          45,
          72,
          3,
          2,
          24,
          3
        ]
      },
      {
        "input": [
          44,
          36,
          95,
          15,
          1,
          37,
          1
        ],
        "output": [
          36,
          95,
          15,
          1,
          37,
          1,
          44
        ]
      },
      {
        "input": [
          88,
          29,
          76,
          23,
          89,
          60,
          79,
          3
        ],
        "output": [
          23,
          89,
          60,
          79,
          3,
          88,
          29,
          76
        ]
      }
    ]
  },
  {
    "id": "c152",
    "difficulty": 203,
    "function": "def c152(x):\n    # replace each element with the product of its digits\n    res = []\n    for i in x:\n        if i < 10:\n            res.append(0)\n        else:\n            res.append(int(str(i)[0]) * int(str(i)[1]))\n    return res\n\n",
    "data": {
      "input": [
        70,
        35,
        1,
        63,
        53,
        36,
        64
      ],
      "output": [
        0,
        15,
        0,
        18,
        15,
        18,
        24
      ]
    },
    "demos": [
      {
        "input": [
          9,
          61,
          52,
          22,
          7,
          85,
          95
        ],
        "output": [
          0,
          6,
          10,
          4,
          0,
          40,
          45
        ]
      },
      {
        "input": [
          32,
          72,
          86,
          56,
          11,
          39,
          64,
          22
        ],
        "output": [
          6,
          14,
          48,
          30,
          1,
          27,
          24,
          4
        ]
      },
      {
        "input": [
          18,
          96,
          30,
          91,
          58,
          52
        ],
        "output": [
          8,
          54,
          0,
          9,
          40,
          10
        ]
      }
    ]
  },
  {
    "id": "c237",
    "difficulty": 204,
    "function": "def c237(x):\n    # cumulative sum of unique elements\n    res = []\n    s = 0\n    for i in x:\n        if i not in res:\n            res.append(i)\n    for i in range(len(res)):\n        s += res[i]\n        res[i] = s\n    return res\n\n",
    "data": {
      "input": [
        20,
        30,
        30,
        30,
        16
      ],
      "output": [
        20,
        50,
        66
      ]
    },
    "demos": [
      {
        "input": [
          6,
          25,
          7,
          25,
          25,
          15,
          18
        ],
        "output": [
          6,
          31,
          38,
          53,
          71
        ]
      },
      {
        "input": [
          28,
          16,
          7,
          7,
          19,
          3,
          15,
          24
        ],
        "output": [
          28,
          44,
          51,
          70,
          73,
          88,
          112
        ]
      },
      {
        "input": [
          16,
          3,
          14,
          30,
          14
        ],
        "output": [
          16,
          19,
          33,
          63
        ]
      }
    ]
  },
  {
    "id": "c243",
    "difficulty": 205,
    "function": "def c243(x):\n    # number of odd elements\n    return [len([i for i in x if i % 2 == 1])]\n\n",
    "data": {
      "input": [
        11,
        7,
        11,
        41,
        62,
        98,
        84
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          96,
          24,
          28,
          8,
          32,
          15
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          62,
          54,
          83,
          25,
          55,
          28
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          55,
          38,
          46,
          71,
          15,
          1,
          72
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c188",
    "difficulty": 206,
    "function": "def c188(x):\n    # replace each element with 1 if it is divisible by 3, else replace with 0\n    return [1 if i % 3 == 0 else 0 for i in x]\n\n",
    "data": {
      "input": [
        50,
        92,
        91,
        16,
        31,
        13,
        59
      ],
      "output": [
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]
    },
    "demos": [
      {
        "input": [
          80,
          31,
          72,
          8,
          89,
          76,
          12,
          4
        ],
        "output": [
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0
        ]
      },
      {
        "input": [
          91,
          77,
          34,
          75,
          59,
          8
        ],
        "output": [
          0,
          0,
          0,
          1,
          0,
          0
        ]
      },
      {
        "input": [
          91,
          91,
          26,
          69,
          83,
          82,
          19,
          55
        ],
        "output": [
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0
        ]
      }
    ]
  },
  {
    "id": "c139",
    "difficulty": 207,
    "function": "def c139(x):\n    # remove all occurrences of the smallest element and the largest element\n    min_val = min(x)\n    max_val = max(x)\n    return [i for i in x if i != min_val and i != max_val]\n\n",
    "data": {
      "input": [
        1,
        2,
        6,
        10,
        9,
        10
      ],
      "output": [
        2,
        6,
        9
      ]
    },
    "demos": [
      {
        "input": [
          9,
          9,
          3,
          8,
          9
        ],
        "output": [
          8
        ]
      },
      {
        "input": [
          8,
          4,
          4,
          1,
          2,
          7,
          2
        ],
        "output": [
          4,
          4,
          2,
          7,
          2
        ]
      },
      {
        "input": [
          5,
          10,
          5,
          4,
          4,
          3
        ],
        "output": [
          5,
          5,
          4,
          4
        ]
      }
    ]
  },
  {
    "id": "c036",
    "difficulty": 208,
    "function": "def c036(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        9,
        10,
        4,
        10,
        0,
        0,
        9
      ],
      "output": [
        9,
        0,
        4,
        10,
        10,
        0,
        9
      ]
    },
    "demos": [
      {
        "input": [
          6,
          3,
          8,
          10,
          0
        ],
        "output": [
          6,
          0,
          8,
          10,
          3
        ]
      },
      {
        "input": [
          10,
          2,
          9,
          0,
          10,
          8
        ],
        "output": [
          10,
          2,
          0,
          9,
          10,
          8
        ]
      },
      {
        "input": [
          3,
          8,
          9,
          9,
          1,
          1,
          9,
          3
        ],
        "output": [
          3,
          1,
          9,
          9,
          8,
          1,
          9,
          3
        ]
      }
    ]
  },
  {
    "id": "c201",
    "difficulty": 209,
    "function": "def c201(x):\n    # elements > first element, followed by elements < first element\n    return [i for i in x if i > x[0]] + [i for i in x if i < x[0]]\n\n",
    "data": {
      "input": [
        8,
        54,
        77,
        80,
        80,
        82,
        87,
        84
      ],
      "output": [
        54,
        77,
        80,
        80,
        82,
        87,
        84
      ]
    },
    "demos": [
      {
        "input": [
          41,
          2,
          35,
          68,
          68,
          86,
          20
        ],
        "output": [
          68,
          68,
          86,
          2,
          35,
          20
        ]
      },
      {
        "input": [
          95,
          16,
          26,
          87,
          2,
          8,
          45,
          21
        ],
        "output": [
          16,
          26,
          87,
          2,
          8,
          45,
          21
        ]
      },
      {
        "input": [
          75,
          88,
          86,
          10,
          74,
          79
        ],
        "output": [
          88,
          86,
          79,
          10,
          74
        ]
      }
    ]
  },
  {
    "id": "c217",
    "difficulty": 210,
    "function": "def c217(x):\n    # elements in ascending order by ones digit\n    return sorted(x, key=lambda i: i % 10)\n\n",
    "data": {
      "input": [
        28,
        98,
        32,
        31,
        82,
        2,
        74,
        54
      ],
      "output": [
        31,
        32,
        82,
        2,
        74,
        54,
        28,
        98
      ]
    },
    "demos": [
      {
        "input": [
          54,
          11,
          8,
          81,
          49,
          23,
          34,
          12
        ],
        "output": [
          11,
          81,
          12,
          23,
          54,
          34,
          8,
          49
        ]
      },
      {
        "input": [
          65,
          18,
          99,
          18,
          76,
          44,
          21,
          28
        ],
        "output": [
          21,
          44,
          65,
          76,
          18,
          18,
          28,
          99
        ]
      },
      {
        "input": [
          95,
          51,
          67,
          75,
          30
        ],
        "output": [
          30,
          51,
          95,
          75,
          67
        ]
      }
    ]
  },
  {
    "id": "c005",
    "difficulty": 211,
    "function": "def c005(x):\n    # remove all but element N + 1, N is the first element\n    return [x[x[0]+1]]\n\n",
    "data": {
      "input": [
        6,
        65,
        46,
        78,
        11,
        81,
        5,
        40
      ],
      "output": [
        40
      ]
    },
    "demos": [
      {
        "input": [
          0,
          4,
          39,
          22,
          49,
          22
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          0,
          16,
          46,
          77,
          34,
          93
        ],
        "output": [
          16
        ]
      },
      {
        "input": [
          4,
          10,
          29,
          3,
          72,
          7
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c063",
    "difficulty": 213,
    "function": "def c063(x):\n    # remove the first N + 1 elements, N is the first element\n    return x[x[0]+1:]\n\n",
    "data": {
      "input": [
        2,
        10,
        2,
        3,
        10
      ],
      "output": [
        3,
        10
      ]
    },
    "demos": [
      {
        "input": [
          2,
          6,
          8,
          4,
          3
        ],
        "output": [
          4,
          3
        ]
      },
      {
        "input": [
          0,
          10,
          10,
          5,
          3
        ],
        "output": [
          10,
          10,
          5,
          3
        ]
      },
      {
        "input": [
          3,
          1,
          10,
          0,
          8,
          3
        ],
        "output": [
          8,
          3
        ]
      }
    ]
  },
  {
    "id": "c141",
    "difficulty": 214,
    "function": "def c141(x):\n    # replace element M + 2 with N, M = element 0, N = element 1; remove elements 0 and 1\n    x[x[0]+2] = x[1]\n    return x[2:]\n\n",
    "data": {
      "input": [
        1,
        7,
        0,
        7,
        7
      ],
      "output": [
        0,
        7,
        7
      ]
    },
    "demos": [
      {
        "input": [
          2,
          4,
          0,
          10,
          2,
          3,
          6,
          9
        ],
        "output": [
          0,
          10,
          4,
          3,
          6,
          9
        ]
      },
      {
        "input": [
          0,
          6,
          0,
          0,
          4,
          8
        ],
        "output": [
          6,
          0,
          4,
          8
        ]
      },
      {
        "input": [
          3,
          1,
          6,
          2,
          2,
          0,
          8,
          7
        ],
        "output": [
          6,
          2,
          2,
          1,
          8,
          7
        ]
      }
    ]
  },
  {
    "id": "c089",
    "difficulty": 215,
    "function": "def c089(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        33,
        60,
        38,
        10,
        23,
        68,
        87,
        18
      ],
      "output": [
        33,
        60,
        10,
        38,
        23,
        68,
        87,
        18
      ]
    },
    "demos": [
      {
        "input": [
          29,
          77,
          19,
          47,
          84,
          61,
          77,
          58
        ],
        "output": [
          29,
          84,
          19,
          47,
          77,
          61,
          77,
          58
        ]
      },
      {
        "input": [
          86,
          87,
          13,
          44,
          75,
          57,
          2
        ],
        "output": [
          86,
          75,
          13,
          44,
          87,
          57,
          2
        ]
      },
      {
        "input": [
          40,
          75,
          77,
          29,
          21,
          84
        ],
        "output": [
          40,
          75,
          29,
          77,
          21,
          84
        ]
      }
    ]
  },
  {
    "id": "c124",
    "difficulty": 216,
    "function": "def c124(x):\n    # element M, M = element N, N = element 0\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        6,
        0,
        6,
        6,
        6,
        0,
        2,
        6,
        4
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          3,
          2,
          8,
          9,
          5,
          3,
          6,
          1,
          7,
          8
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          4,
          4,
          3,
          4,
          5,
          9,
          0,
          0,
          0,
          1
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          2,
          6,
          5,
          8,
          4,
          3,
          8,
          8,
          5,
          3
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c216",
    "difficulty": 217,
    "function": "def c216(x):\n    # elements in ascending order by tens digit\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append([i, int(str(i)[-2])])\n        else:\n            res.append([i, 0])\n    return [i[0] for i in sorted(res, key=lambda i: i[1])]\n\n",
    "data": {
      "input": [
        60,
        10,
        80,
        25,
        70,
        92,
        70,
        22
      ],
      "output": [
        10,
        25,
        22,
        60,
        70,
        70,
        80,
        92
      ]
    },
    "demos": [
      {
        "input": [
          61,
          8,
          27,
          30,
          57,
          97
        ],
        "output": [
          8,
          27,
          30,
          57,
          61,
          97
        ]
      },
      {
        "input": [
          1,
          98,
          43,
          0,
          91,
          37,
          14,
          62
        ],
        "output": [
          1,
          0,
          14,
          37,
          43,
          62,
          98,
          91
        ]
      },
      {
        "input": [
          77,
          49,
          20,
          41,
          39,
          93,
          46,
          47
        ],
        "output": [
          20,
          39,
          49,
          41,
          46,
          47,
          77,
          93
        ]
      }
    ]
  },
  {
    "id": "c143",
    "difficulty": 218,
    "function": "def c143(x):\n    # replace every occurrence of the largest element with the smallest element\n    max_val = max(x)\n    min_val = min(x)\n    return [min_val if i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        2,
        10,
        6,
        10,
        5
      ],
      "output": [
        2,
        2,
        6,
        2,
        5
      ]
    },
    "demos": [
      {
        "input": [
          7,
          9,
          1,
          0,
          9,
          6,
          7
        ],
        "output": [
          7,
          0,
          1,
          0,
          0,
          6,
          7
        ]
      },
      {
        "input": [
          2,
          4,
          10,
          5,
          0,
          2,
          7
        ],
        "output": [
          2,
          4,
          0,
          5,
          0,
          2,
          7
        ]
      },
      {
        "input": [
          6,
          10,
          7,
          5,
          8,
          7
        ],
        "output": [
          6,
          5,
          7,
          5,
          8,
          7
        ]
      }
    ]
  },
  {
    "id": "c215",
    "difficulty": 219,
    "function": "def c215(x):\n    # elements in ascending order by hundreds digit\n    res = {}\n    for i in x:\n        if len(str(i)) > 2:\n            res[i] = int(str(i)[-3])\n        else:\n            res[i] = 0\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        173,
        726,
        14,
        89,
        789
      ],
      "output": [
        14,
        89,
        173,
        726,
        789
      ]
    },
    "demos": [
      {
        "input": [
          408,
          51,
          815,
          332,
          458
        ],
        "output": [
          51,
          332,
          408,
          458,
          815
        ]
      },
      {
        "input": [
          936,
          371,
          23,
          381,
          268,
          651,
          441
        ],
        "output": [
          23,
          268,
          371,
          381,
          441,
          651,
          936
        ]
      },
      {
        "input": [
          883,
          330,
          98,
          22,
          793,
          767
        ],
        "output": [
          98,
          22,
          330,
          793,
          767,
          883
        ]
      }
    ]
  },
  {
    "id": "c144",
    "difficulty": 220,
    "function": "def c144(x):\n    # replace every occurrence of the largest or smallest element with their absolute difference\n    max_val = max(x)\n    min_val = min(x)\n    return [abs(min_val - max_val) if i == min_val or i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        2,
        12,
        75,
        45,
        63
      ],
      "output": [
        73,
        12,
        73,
        45,
        63
      ]
    },
    "demos": [
      {
        "input": [
          7,
          71,
          44
        ],
        "output": [
          64,
          64,
          44
        ]
      },
      {
        "input": [
          15,
          91,
          87,
          2,
          66
        ],
        "output": [
          15,
          89,
          87,
          89,
          66
        ]
      },
      {
        "input": [
          67,
          41,
          79
        ],
        "output": [
          67,
          38,
          38
        ]
      }
    ]
  },
  {
    "id": "c128",
    "difficulty": 221,
    "function": "def c128(x):\n    # elements in ascending order after removing elements 0,1,and 4\n    x = x[2:4] + x[5:]\n    return sorted(x)\n\n",
    "data": {
      "input": [
        37,
        24,
        33,
        34,
        64,
        39
      ],
      "output": [
        33,
        34,
        39
      ]
    },
    "demos": [
      {
        "input": [
          42,
          79,
          61,
          48,
          65
        ],
        "output": [
          48,
          61
        ]
      },
      {
        "input": [
          87,
          71,
          93,
          57,
          46
        ],
        "output": [
          57,
          93
        ]
      },
      {
        "input": [
          13,
          62,
          51,
          7,
          18,
          35
        ],
        "output": [
          7,
          35,
          51
        ]
      }
    ]
  },
  {
    "id": "c208",
    "difficulty": 222,
    "function": "def c208(x):\n    # keep only last N elements, N is the last element\n    return x[-x[-1]:]\n\n",
    "data": {
      "input": [
        0,
        9,
        5,
        9,
        6,
        2,
        5,
        0
      ],
      "output": [
        0,
        9,
        5,
        9,
        6,
        2,
        5,
        0
      ]
    },
    "demos": [
      {
        "input": [
          6,
          7,
          7,
          2,
          2,
          2,
          6,
          4
        ],
        "output": [
          2,
          2,
          6,
          4
        ]
      },
      {
        "input": [
          1,
          9,
          3,
          9,
          1,
          7,
          3
        ],
        "output": [
          1,
          7,
          3
        ]
      },
      {
        "input": [
          0,
          3,
          9,
          9,
          9,
          6,
          6
        ],
        "output": [
          3,
          9,
          9,
          9,
          6,
          6
        ]
      }
    ]
  },
  {
    "id": "c035",
    "difficulty": 223,
    "function": "def c035(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        0,
        8,
        8,
        7,
        7
      ],
      "output": [
        7,
        8,
        8,
        0,
        7
      ]
    },
    "demos": [
      {
        "input": [
          0,
          3,
          3,
          6,
          8,
          7
        ],
        "output": [
          6,
          3,
          3,
          0,
          8,
          7
        ]
      },
      {
        "input": [
          7,
          2,
          2,
          7,
          5
        ],
        "output": [
          7,
          2,
          2,
          7,
          5
        ]
      },
      {
        "input": [
          8,
          6,
          1,
          10,
          10,
          4,
          9,
          4
        ],
        "output": [
          8,
          1,
          6,
          10,
          10,
          4,
          9,
          4
        ]
      }
    ]
  },
  {
    "id": "c214",
    "difficulty": 224,
    "function": "def c214(x):\n    # remove elements 0 and N + 1, N is the first element\n    x = x[1:x[0]+1] + x[x[0]+2:]\n    return x\n\n",
    "data": {
      "input": [
        0,
        38,
        27,
        25,
        46,
        93
      ],
      "output": [
        27,
        25,
        46,
        93
      ]
    },
    "demos": [
      {
        "input": [
          0,
          78,
          43,
          14,
          61,
          28,
          69,
          63
        ],
        "output": [
          43,
          14,
          61,
          28,
          69,
          63
        ]
      },
      {
        "input": [
          0,
          74,
          52,
          12,
          0,
          28,
          74,
          31
        ],
        "output": [
          52,
          12,
          0,
          28,
          74,
          31
        ]
      },
      {
        "input": [
          2,
          25,
          67,
          96,
          70,
          37,
          89
        ],
        "output": [
          25,
          67,
          70,
          37,
          89
        ]
      }
    ]
  },
  {
    "id": "c130",
    "difficulty": 225,
    "function": "def c130(x):\n    # elements 1 through N + 1, N = element 0\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        0,
        22,
        53,
        13,
        4,
        59,
        91,
        31
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          5,
          31,
          85,
          44,
          12,
          6
        ],
        "output": [
          31,
          85,
          44,
          12,
          6
        ]
      },
      {
        "input": [
          1,
          55,
          71,
          91,
          56
        ],
        "output": [
          55
        ]
      },
      {
        "input": [
          1,
          89,
          5,
          11,
          90,
          70,
          19,
          69
        ],
        "output": [
          89
        ]
      }
    ]
  },
  {
    "id": "c159",
    "difficulty": 226,
    "function": "def c159(x):\n    # element N counts the number of occurrences of N, up to the largest element\n    out = []\n    for i, j in enumerate(range(max(x)+1)):\n        out.append(x.count(j))\n    return out\n\n",
    "data": {
      "input": [
        8,
        0,
        3,
        7,
        7,
        3
      ],
      "output": [
        1,
        0,
        0,
        2,
        0,
        0,
        0,
        2,
        1
      ]
    },
    "demos": [
      {
        "input": [
          7,
          2,
          5,
          3,
          3,
          4,
          6
        ],
        "output": [
          0,
          0,
          1,
          2,
          1,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          3,
          7,
          7,
          1,
          9,
          2
        ],
        "output": [
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          2,
          0,
          1
        ]
      },
      {
        "input": [
          9,
          6,
          8,
          5,
          9,
          2,
          1
        ],
        "output": [
          0,
          1,
          1,
          0,
          0,
          1,
          1,
          0,
          1,
          2
        ]
      }
    ]
  },
  {
    "id": "c205",
    "difficulty": 227,
    "function": "def c205(x):\n    # product of elements divisible by 4\n    res = 1\n    for i in x:\n        if i % 4 == 0:\n            res *= i\n    return [res]\n\n",
    "data": {
      "input": [
        6,
        20,
        9,
        3,
        13,
        10,
        5
      ],
      "output": [
        20
      ]
    },
    "demos": [
      {
        "input": [
          5,
          17,
          13,
          4,
          10,
          9,
          13
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          10,
          12,
          8,
          15,
          7,
          1
        ],
        "output": [
          96
        ]
      },
      {
        "input": [
          12,
          15,
          6,
          19,
          4,
          15
        ],
        "output": [
          48
        ]
      }
    ]
  },
  {
    "id": "c076",
    "difficulty": 228,
    "function": "def c076(x):\n    # the max, last, length, first, and min elements\n    return [max(x), x[-1], len(x), x[0], min(x)]\n\n",
    "data": {
      "input": [
        7,
        29,
        12,
        39,
        12,
        88
      ],
      "output": [
        88,
        88,
        6,
        7,
        7
      ]
    },
    "demos": [
      {
        "input": [
          63,
          61,
          89,
          50,
          74,
          20,
          87
        ],
        "output": [
          89,
          87,
          7,
          63,
          20
        ]
      },
      {
        "input": [
          41,
          64,
          45,
          95,
          37,
          55,
          65
        ],
        "output": [
          95,
          65,
          7,
          41,
          37
        ]
      },
      {
        "input": [
          85,
          59,
          59,
          30,
          57,
          13
        ],
        "output": [
          85,
          13,
          6,
          85,
          13
        ]
      }
    ]
  },
  {
    "id": "c250",
    "difficulty": 229,
    "function": "def c250(x):\n    # use 0s to delimit sublists, concatenate reversed sublists\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            res += sublist[::-1]\n            sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res += sublist[::-1]\n    return res\n\n",
    "data": {
      "input": [
        0,
        75,
        0,
        22,
        13,
        0,
        75,
        25,
        36
      ],
      "output": [
        75,
        13,
        22,
        36,
        25,
        75
      ]
    },
    "demos": [
      {
        "input": [
          72,
          42,
          26,
          14,
          57,
          16,
          0,
          35,
          8
        ],
        "output": [
          16,
          57,
          14,
          26,
          42,
          72,
          8,
          35
        ]
      },
      {
        "input": [
          73,
          86,
          0,
          34,
          73,
          0,
          72,
          3,
          0,
          54,
          46
        ],
        "output": [
          86,
          73,
          73,
          34,
          3,
          72,
          46,
          54
        ]
      },
      {
        "input": [
          0,
          73,
          22,
          34,
          19,
          24,
          95
        ],
        "output": [
          95,
          24,
          19,
          34,
          22,
          73
        ]
      }
    ]
  },
  {
    "id": "c186",
    "difficulty": 230,
    "function": "def c186(x):\n    # keep only elements greater than element 0\n    return [i for i in x if i > x[0]]\n\n",
    "data": {
      "input": [
        76,
        90,
        30,
        89,
        52,
        60,
        97
      ],
      "output": [
        90,
        89,
        97
      ]
    },
    "demos": [
      {
        "input": [
          30,
          35,
          30,
          4,
          66,
          67
        ],
        "output": [
          35,
          66,
          67
        ]
      },
      {
        "input": [
          25,
          43,
          10,
          40,
          90,
          34,
          16,
          85
        ],
        "output": [
          43,
          40,
          90,
          34,
          85
        ]
      },
      {
        "input": [
          68,
          36,
          1,
          91,
          32,
          11
        ],
        "output": [
          91
        ]
      }
    ]
  },
  {
    "id": "c242",
    "difficulty": 231,
    "function": "def c242(x):\n    # take the largest unique element, append the second largest unique element, prepend the third largest unique element, append the fourth largest unique element, and so on\n    unique = sorted(set(x), reverse=True)\n    res = [max(unique)]\n    unique.remove(max(unique))\n    for i in range(len(unique)):\n        if i % 2 == 0:\n            res.append(unique[i])\n        else:\n            res.insert(0, unique[i])\n    return res\n\n",
    "data": {
      "input": [
        5,
        1,
        6,
        7,
        0,
        8,
        9
      ],
      "output": [
        0,
        5,
        7,
        9,
        8,
        6,
        1
      ]
    },
    "demos": [
      {
        "input": [
          6,
          7,
          6,
          9,
          4,
          2
        ],
        "output": [
          2,
          6,
          9,
          7,
          4
        ]
      },
      {
        "input": [
          5,
          8,
          4,
          1,
          4,
          8,
          2
        ],
        "output": [
          1,
          4,
          8,
          5,
          2
        ]
      },
      {
        "input": [
          1,
          4,
          5,
          9,
          1,
          6,
          1,
          5
        ],
        "output": [
          1,
          5,
          9,
          6,
          4
        ]
      }
    ]
  },
  {
    "id": "c160",
    "difficulty": 232,
    "function": "def c160(x):\n    # replace each element with 99 - element\n    return [99-i for i in x]\n\n",
    "data": {
      "input": [
        0,
        65,
        84,
        86,
        45,
        10,
        96
      ],
      "output": [
        99,
        34,
        15,
        13,
        54,
        89,
        3
      ]
    },
    "demos": [
      {
        "input": [
          49,
          16,
          91,
          4,
          38,
          23,
          87,
          75
        ],
        "output": [
          50,
          83,
          8,
          95,
          61,
          76,
          12,
          24
        ]
      },
      {
        "input": [
          97,
          47,
          97,
          40,
          7,
          6,
          86
        ],
        "output": [
          2,
          52,
          2,
          59,
          92,
          93,
          13
        ]
      },
      {
        "input": [
          66,
          16,
          30,
          15,
          42,
          72
        ],
        "output": [
          33,
          83,
          69,
          84,
          57,
          27
        ]
      }
    ]
  },
  {
    "id": "c167",
    "difficulty": 233,
    "function": "def c167(x):\n    # keep only elements divisible by 3\n    return [i for i in x if i % 3 == 0]\n\n",
    "data": {
      "input": [
        82,
        3,
        4,
        68,
        56,
        5,
        94,
        54
      ],
      "output": [
        3,
        54
      ]
    },
    "demos": [
      {
        "input": [
          81,
          48,
          56,
          20,
          80,
          82,
          48
        ],
        "output": [
          81,
          48,
          48
        ]
      },
      {
        "input": [
          40,
          29,
          59,
          86,
          29,
          18,
          47,
          5
        ],
        "output": [
          18
        ]
      },
      {
        "input": [
          35,
          84,
          38,
          26,
          87,
          55,
          39
        ],
        "output": [
          84,
          87,
          39
        ]
      }
    ]
  },
  {
    "id": "c202",
    "difficulty": 234,
    "function": "def c202(x):\n    # the indices of every even number\n    return [i for i, j in enumerate(x) if j % 2 == 0]\n\n\n",
    "data": {
      "input": [
        14,
        88,
        19,
        15,
        28,
        6,
        27
      ],
      "output": [
        0,
        1,
        4,
        5
      ]
    },
    "demos": [
      {
        "input": [
          94,
          97,
          5,
          94,
          1,
          86,
          34,
          80
        ],
        "output": [
          0,
          3,
          5,
          6,
          7
        ]
      },
      {
        "input": [
          55,
          12,
          72,
          2,
          21,
          66,
          82,
          60
        ],
        "output": [
          1,
          2,
          3,
          5,
          6,
          7
        ]
      },
      {
        "input": [
          1,
          14,
          76,
          24,
          41,
          44,
          70
        ],
        "output": [
          1,
          2,
          3,
          5,
          6
        ]
      }
    ]
  },
  {
    "id": "c129",
    "difficulty": 235,
    "function": "def c129(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        0,
        6,
        63,
        36,
        37,
        66,
        51,
        34
      ],
      "output": [
        63,
        36,
        37,
        66,
        51,
        34
      ]
    },
    "demos": [
      {
        "input": [
          2,
          4,
          4,
          26,
          67,
          66,
          74,
          51
        ],
        "output": [
          67,
          66
        ]
      },
      {
        "input": [
          2,
          5,
          34,
          68,
          33,
          29,
          54
        ],
        "output": [
          33,
          29,
          54
        ]
      },
      {
        "input": [
          4,
          4,
          67,
          98,
          84,
          76,
          7,
          97,
          23,
          71
        ],
        "output": []
      }
    ]
  },
  {
    "id": "c221",
    "difficulty": 236,
    "function": "def c221(x):\n    # sum of even elements\n    return [sum(i for i in x if i % 2 == 0)]\n\n",
    "data": {
      "input": [
        39,
        2,
        48,
        9,
        5,
        31,
        45
      ],
      "output": [
        50
      ]
    },
    "demos": [
      {
        "input": [
          3,
          43,
          10,
          5,
          35,
          9,
          25
        ],
        "output": [
          10
        ]
      },
      {
        "input": [
          34,
          36,
          3,
          18,
          15,
          42
        ],
        "output": [
          130
        ]
      },
      {
        "input": [
          27,
          26,
          5,
          49,
          21,
          43,
          39
        ],
        "output": [
          26
        ]
      }
    ]
  },
  {
    "id": "c131",
    "difficulty": 237,
    "function": "def c131(x):\n    # keep only elements whose tens digit is even\n    res = []\n    for i in x:\n        if len(str(i)) < 2:\n            res.append(i)\n        elif int(str(i)[-2]) % 2 == 0:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        33,
        85,
        33,
        99,
        24,
        17,
        81,
        8
      ],
      "output": [
        85,
        24,
        81,
        8
      ]
    },
    "demos": [
      {
        "input": [
          29,
          7,
          3,
          75,
          40,
          38,
          27,
          29
        ],
        "output": [
          29,
          7,
          3,
          40,
          27,
          29
        ]
      },
      {
        "input": [
          51,
          81,
          97,
          35,
          98,
          89,
          70
        ],
        "output": [
          81,
          89
        ]
      },
      {
        "input": [
          28,
          69,
          54,
          46,
          48,
          82,
          55
        ],
        "output": [
          28,
          69,
          46,
          48,
          82
        ]
      }
    ]
  },
  {
    "id": "c180",
    "difficulty": 238,
    "function": "def c180(x):\n    # take the smallest element, append the second smallest element, prepend the third smallest element, append the fourth smallest element, and so on\n    sorted_x = sorted(x)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        73,
        75,
        32,
        82,
        77,
        76,
        70
      ],
      "output": [
        82,
        76,
        73,
        32,
        70,
        75,
        77
      ]
    },
    "demos": [
      {
        "input": [
          35,
          63,
          85,
          81,
          33,
          91
        ],
        "output": [
          85,
          63,
          33,
          35,
          81,
          91
        ]
      },
      {
        "input": [
          46,
          60,
          9,
          64,
          33,
          99,
          44,
          48
        ],
        "output": [
          64,
          48,
          44,
          9,
          33,
          46,
          60,
          99
        ]
      },
      {
        "input": [
          4,
          13,
          7,
          64,
          11,
          9
        ],
        "output": [
          13,
          9,
          4,
          7,
          11,
          64
        ]
      }
    ]
  },
  {
    "id": "c015",
    "difficulty": 239,
    "function": "def c015(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        4,
        5,
        9,
        15,
        2,
        0,
        12,
        5,
        10,
        11
      ],
      "output": [
        12
      ]
    },
    "demos": [
      {
        "input": [
          1,
          5,
          6,
          4,
          15,
          6,
          10,
          3,
          2
        ],
        "output": [
          4,
          15,
          6,
          10
        ]
      },
      {
        "input": [
          3,
          4,
          3,
          2,
          12,
          15
        ],
        "output": [
          15
        ]
      },
      {
        "input": [
          1,
          6,
          1,
          0,
          12,
          6
        ],
        "output": [
          0,
          12,
          6
        ]
      }
    ]
  },
  {
    "id": "c179",
    "difficulty": 240,
    "function": "def c179(x):\n    # take the largest element, append the second largest element, prepend the third largest element, append the fourth largest element, and so on\n    sorted_x = sorted(x, reverse=True)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        9,
        86,
        49,
        10,
        22,
        17,
        66,
        19
      ],
      "output": [
        10,
        19,
        49,
        86,
        66,
        22,
        17,
        9
      ]
    },
    "demos": [
      {
        "input": [
          60,
          67,
          85,
          36,
          52,
          15
        ],
        "output": [
          36,
          60,
          85,
          67,
          52,
          15
        ]
      },
      {
        "input": [
          74,
          28,
          70,
          45,
          37,
          95,
          22
        ],
        "output": [
          22,
          37,
          70,
          95,
          74,
          45,
          28
        ]
      },
      {
        "input": [
          92,
          48,
          75,
          14,
          3,
          44,
          36,
          56
        ],
        "output": [
          14,
          44,
          56,
          92,
          75,
          48,
          36,
          3
        ]
      }
    ]
  },
  {
    "id": "c226",
    "difficulty": 241,
    "function": "def c226(x):\n    # remove first M and last N elements, M is the first element, N is the last element\n    if x[-1] == 0:\n        return x[x[0]:]\n    return x[x[0]:-x[-1]]\n\n",
    "data": {
      "input": [
        0,
        10,
        5,
        13,
        13,
        3,
        4,
        6,
        10,
        2
      ],
      "output": [
        0,
        10,
        5,
        13,
        13,
        3,
        4,
        6
      ]
    },
    "demos": [
      {
        "input": [
          2,
          6,
          9,
          9,
          4,
          11,
          14,
          5,
          0
        ],
        "output": [
          9,
          9,
          4,
          11,
          14,
          5,
          0
        ]
      },
      {
        "input": [
          5,
          15,
          0,
          0,
          11,
          2,
          0
        ],
        "output": [
          2,
          0
        ]
      },
      {
        "input": [
          0,
          11,
          4,
          11,
          14,
          14,
          8,
          4
        ],
        "output": [
          0,
          11,
          4,
          11
        ]
      }
    ]
  },
  {
    "id": "c134",
    "difficulty": 242,
    "function": "def c134(x):\n    # remove elements M through N, M is the first element, N is the second element\n    return x[:x[0]] + x[x[1]+1:]\n\n",
    "data": {
      "input": [
        3,
        4,
        12,
        4,
        4,
        1,
        4,
        3,
        7,
        7
      ],
      "output": [
        3,
        4,
        12,
        1,
        4,
        3,
        7,
        7
      ]
    },
    "demos": [
      {
        "input": [
          3,
          7,
          6,
          11,
          7,
          15,
          4,
          1
        ],
        "output": [
          3,
          7,
          6
        ]
      },
      {
        "input": [
          0,
          1,
          13,
          3,
          0,
          6,
          2,
          13
        ],
        "output": [
          13,
          3,
          0,
          6,
          2,
          13
        ]
      },
      {
        "input": [
          2,
          6,
          15,
          10,
          10,
          3,
          10,
          12,
          11,
          14
        ],
        "output": [
          2,
          6,
          12,
          11,
          14
        ]
      }
    ]
  },
  {
    "id": "c164",
    "difficulty": 243,
    "function": "def c164(x):\n    # replace each element M with M // 4 + 5\n    return [i//4+5 for i in x]\n\n",
    "data": {
      "input": [
        51,
        27,
        33,
        11,
        59,
        21,
        0,
        22
      ],
      "output": [
        17,
        11,
        13,
        7,
        19,
        10,
        5,
        10
      ]
    },
    "demos": [
      {
        "input": [
          62,
          8,
          66,
          56,
          1,
          30
        ],
        "output": [
          20,
          7,
          21,
          19,
          5,
          12
        ]
      },
      {
        "input": [
          70,
          76,
          11,
          88,
          25,
          93
        ],
        "output": [
          22,
          24,
          7,
          27,
          11,
          28
        ]
      },
      {
        "input": [
          3,
          14,
          79,
          13,
          29,
          71
        ],
        "output": [
          5,
          8,
          24,
          8,
          12,
          22
        ]
      }
    ]
  },
  {
    "id": "c178",
    "difficulty": 244,
    "function": "def c178(x):\n    # keep only elements followed by an even number\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] % 2 == 0:\n            res.append(x[i])\n    return res \n\n",
    "data": {
      "input": [
        63,
        43,
        41,
        64,
        28,
        87,
        92
      ],
      "output": [
        41,
        64,
        87
      ]
    },
    "demos": [
      {
        "input": [
          91,
          25,
          18,
          23,
          48,
          61,
          26
        ],
        "output": [
          25,
          23,
          61
        ]
      },
      {
        "input": [
          57,
          86,
          17,
          52,
          93,
          86,
          32,
          78
        ],
        "output": [
          57,
          17,
          93,
          86,
          32
        ]
      },
      {
        "input": [
          71,
          26,
          33,
          51,
          24,
          60,
          59,
          92
        ],
        "output": [
          71,
          51,
          24,
          59
        ]
      }
    ]
  },
  {
    "id": "c113",
    "difficulty": 245,
    "function": "def c113(x):\n    # keep only elements whose ones digit is greater than the first element\n    res = []\n    for i in x:\n        if i % 10 > x[0]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        9,
        44,
        25,
        15,
        24,
        3,
        8,
        35,
        27,
        23
      ],
      "output": []
    },
    "demos": [
      {
        "input": [
          1,
          13,
          7,
          45,
          49,
          28,
          24,
          22,
          11,
          34
        ],
        "output": [
          13,
          7,
          45,
          49,
          28,
          24,
          22,
          34
        ]
      },
      {
        "input": [
          7,
          45,
          20,
          38,
          21,
          5,
          7,
          41
        ],
        "output": [
          38
        ]
      },
      {
        "input": [
          1,
          2,
          44,
          30,
          14,
          45,
          36,
          2
        ],
        "output": [
          2,
          44,
          14,
          45,
          36,
          2
        ]
      }
    ]
  },
  {
    "id": "c206",
    "difficulty": 246,
    "function": "def c206(x):\n    # keep only elements whose value is between the first and second element\n    return [i for i in x if x[0] < i < x[1]]\n\n",
    "data": {
      "input": [
        0,
        26,
        26,
        40,
        11,
        2,
        1,
        31
      ],
      "output": [
        11,
        2,
        1
      ]
    },
    "demos": [
      {
        "input": [
          1,
          31,
          5,
          22,
          9,
          23
        ],
        "output": [
          5,
          22,
          9,
          23
        ]
      },
      {
        "input": [
          14,
          49,
          35,
          16,
          41,
          25,
          34,
          12
        ],
        "output": [
          35,
          16,
          41,
          25,
          34
        ]
      },
      {
        "input": [
          5,
          24,
          3,
          39,
          42,
          18,
          13,
          16,
          12,
          2
        ],
        "output": [
          18,
          13,
          16,
          12
        ]
      }
    ]
  },
  {
    "id": "c210",
    "difficulty": 247,
    "function": "def c210(x):\n    # unique elements with last element inserted at index M, where M is the first element\n    unique = []\n    for i in x:\n        if i not in unique:\n            unique.append(i)\n    unique.insert(x[0], x[-1])\n    return unique\n\n",
    "data": {
      "input": [
        0,
        2,
        3,
        0,
        2
      ],
      "output": [
        2,
        0,
        2,
        3
      ]
    },
    "demos": [
      {
        "input": [
          4,
          3,
          8,
          3,
          9,
          8,
          6
        ],
        "output": [
          4,
          3,
          8,
          9,
          6,
          6
        ]
      },
      {
        "input": [
          1,
          2,
          2,
          7,
          1,
          4,
          0,
          2
        ],
        "output": [
          1,
          2,
          2,
          7,
          4,
          0
        ]
      },
      {
        "input": [
          0,
          7,
          5,
          3,
          4,
          7,
          0,
          2
        ],
        "output": [
          2,
          0,
          7,
          5,
          3,
          4,
          2
        ]
      }
    ]
  },
  {
    "id": "c158",
    "difficulty": 248,
    "function": "def c158(x):\n    # replace each element with 1 if element N equals N, else 0\n    res = []\n    for i, j in enumerate(x):\n        if i == j:\n            res.append(1)\n        else:\n            res.append(0)\n    return res\n\n",
    "data": {
      "input": [
        8,
        1,
        2,
        3,
        8,
        2,
        6
      ],
      "output": [
        0,
        1,
        1,
        1,
        0,
        0,
        1
      ]
    },
    "demos": [
      {
        "input": [
          5,
          5,
          7,
          3,
          4,
          3
        ],
        "output": [
          0,
          0,
          0,
          1,
          1,
          0
        ]
      },
      {
        "input": [
          0,
          1,
          1,
          5,
          1,
          5,
          0,
          4,
          7
        ],
        "output": [
          1,
          1,
          0,
          0,
          0,
          1,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          0,
          0,
          2,
          3,
          8,
          5
        ],
        "output": [
          1,
          0,
          1,
          1,
          0,
          1
        ]
      }
    ]
  },
  {
    "id": "c183",
    "difficulty": 249,
    "function": "def c183(x):\n    # list the index of second elements and following equal to first element\n    res = []\n    for i in range(1, len(x)):\n        if x[i] == x[0]:\n            res.append(i)\n    return res",
    "data": {
      "input": [
        13,
        12,
        5,
        13,
        11,
        3,
        13
      ],
      "output": [
        3,
        6
      ]
    },
    "demos": [
      {
        "input": [
          0,
          9,
          0,
          7,
          14,
          1,
          0,
          0,
          0
        ],
        "output": [
          2,
          6,
          7,
          8
        ]
      },
      {
        "input": [
          6,
          5,
          8,
          6,
          12,
          6,
          6
        ],
        "output": [
          3,
          5,
          6
        ]
      },
      {
        "input": [
          13,
          3,
          10,
          13,
          15,
          3,
          11,
          13,
          0
        ],
        "output": [
          3,
          7
        ]
      }
    ]
  },
  {
    "id": "c014",
    "difficulty": 157,
    "function": "def c014(x):\n    # remove all but elements 2 through 5\n    return x[2:5]\n\n",
    "data": {
      "input": [
        60,
        60,
        94,
        10,
        35,
        14
      ],
      "output": [
        94,
        10,
        35
      ]
    },
    "demos": [
      {
        "input": [
          59,
          55,
          87,
          33,
          99,
          41,
          74
        ],
        "output": [
          87,
          33,
          99
        ]
      },
      {
        "input": [
          27,
          38,
          37,
          92,
          77,
          95,
          16
        ],
        "output": [
          37,
          92,
          77
        ]
      },
      {
        "input": [
          88,
          11,
          12,
          78,
          84,
          91,
          67
        ],
        "output": [
          12,
          78,
          84
        ]
      }
    ]
  },
  {
    "id": "c098",
    "difficulty": 86,
    "function": "def c098(x):\n    # add the index to each element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        3,
        6,
        0,
        9,
        6,
        7,
        8,
        9
      ],
      "output": [
        3,
        7,
        2,
        12,
        10,
        12,
        14,
        16
      ]
    },
    "demos": [
      {
        "input": [
          0,
          9,
          3,
          4,
          6,
          8,
          5
        ],
        "output": [
          0,
          10,
          5,
          7,
          10,
          13,
          11
        ]
      },
      {
        "input": [
          7,
          5,
          8,
          2,
          3,
          1,
          0
        ],
        "output": [
          7,
          6,
          10,
          5,
          7,
          6,
          6
        ]
      },
      {
        "input": [
          6,
          8,
          0,
          0,
          9,
          2,
          8,
          9
        ],
        "output": [
          6,
          9,
          2,
          3,
          13,
          7,
          14,
          16
        ]
      }
    ]
  },
  {
    "id": "c209",
    "difficulty": 212,
    "function": "def c209(x):\n    # elements in ascending order, insert sum of smallest and largest element at index 3\n    x = sorted(x)\n    x.insert(3, x[0] + x[-1])\n    return x\n\n",
    "data": {
      "input": [
        28,
        0,
        22,
        11,
        19
      ],
      "output": [
        0,
        11,
        19,
        28,
        22,
        28
      ]
    },
    "demos": [
      {
        "input": [
          11,
          11,
          12,
          21,
          14,
          19,
          25
        ],
        "output": [
          11,
          11,
          12,
          36,
          14,
          19,
          21,
          25
        ]
      },
      {
        "input": [
          1,
          11,
          13,
          13,
          19,
          3,
          19,
          16
        ],
        "output": [
          1,
          3,
          11,
          20,
          13,
          13,
          16,
          19,
          19
        ]
      },
      {
        "input": [
          26,
          8,
          5,
          22,
          28,
          25
        ],
        "output": [
          5,
          8,
          22,
          33,
          25,
          26,
          28
        ]
      }
    ]
  },
  {
    "id": "c211",
    "difficulty": 104,
    "function": "def c211(x):\n    # reverse input, insert fouth element and fifth element so they are fourth and third from the end respectively\n    x = x[::-1]\n    x.insert(-3, x[3])\n    x.insert(-4, x[4])\n    return x\n\n",
    "data": {
      "input": [
        81,
        43,
        23,
        99,
        24,
        10
      ],
      "output": [
        10,
        24,
        99,
        23,
        23,
        23,
        43,
        81
      ]
    },
    "demos": [
      {
        "input": [
          84,
          4,
          34,
          33,
          29,
          20
        ],
        "output": [
          20,
          29,
          33,
          34,
          34,
          34,
          4,
          84
        ]
      },
      {
        "input": [
          66,
          19,
          84,
          13,
          55,
          44,
          67
        ],
        "output": [
          67,
          44,
          55,
          13,
          13,
          13,
          84,
          19,
          66
        ]
      },
      {
        "input": [
          42,
          94,
          71,
          44,
          50,
          49,
          35,
          13
        ],
        "output": [
          13,
          35,
          49,
          50,
          44,
          44,
          50,
          71,
          94,
          42
        ]
      }
    ]
  },
  {
    "id": "c102",
    "difficulty": 0,
    "function": "def c102(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        67,
        68,
        5,
        31,
        67,
        41,
        97
      ],
      "output": [
        67,
        68,
        5,
        31,
        67,
        41,
        97
      ]
    },
    "demos": [
      {
        "input": [
          8,
          60,
          62,
          53,
          40,
          9,
          57,
          12
        ],
        "output": [
          8,
          60,
          62,
          53,
          40,
          9,
          57,
          12
        ]
      },
      {
        "input": [
          65,
          38,
          88,
          20,
          15,
          90,
          85
        ],
        "output": [
          65,
          38,
          88,
          20,
          15,
          90,
          85
        ]
      },
      {
        "input": [
          56,
          72,
          88,
          70,
          80,
          19
        ],
        "output": [
          56,
          72,
          88,
          70,
          80,
          19
        ]
      }
    ]
  },
  {
    "id": "c170",
    "difficulty": 1,
    "function": "def c170(x):\n    # remove all but the first and last element\n    return [x[0], x[-1]]\n    \n",
    "data": {
      "input": [
        37,
        69,
        35,
        68,
        97,
        23,
        5
      ],
      "output": [
        37,
        5
      ]
    },
    "demos": [
      {
        "input": [
          57,
          13,
          29,
          16,
          93,
          76,
          24,
          93
        ],
        "output": [
          57,
          93
        ]
      },
      {
        "input": [
          61,
          83,
          22
        ],
        "output": [
          61,
          22
        ]
      },
      {
        "input": [
          68,
          26,
          100,
          46,
          16,
          40,
          45
        ],
        "output": [
          68,
          45
        ]
      }
    ]
  },
  {
    "id": "c121",
    "difficulty": 2,
    "function": "def c121(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        34,
        83,
        35,
        53,
        48,
        95
      ],
      "output": [
        95
      ]
    },
    "demos": [
      {
        "input": [
          50,
          64,
          91,
          69
        ],
        "output": [
          69
        ]
      },
      {
        "input": [
          90,
          41,
          79,
          66
        ],
        "output": [
          66
        ]
      },
      {
        "input": [
          53,
          15,
          27,
          39,
          61,
          69
        ],
        "output": [
          69
        ]
      }
    ]
  },
  {
    "id": "c045",
    "difficulty": 3,
    "function": "def c045(x):\n    # the input\n    return x\n\n",
    "data": {
      "input": [
        21,
        87,
        87,
        10,
        71
      ],
      "output": [
        21,
        87,
        87,
        10,
        71
      ]
    },
    "demos": [
      {
        "input": [
          45,
          81,
          83,
          19,
          82
        ],
        "output": [
          45,
          81,
          83,
          19,
          82
        ]
      },
      {
        "input": [
          47,
          51,
          74,
          95
        ],
        "output": [
          47,
          51,
          74,
          95
        ]
      },
      {
        "input": [
          27,
          11,
          37,
          4
        ],
        "output": [
          27,
          11,
          37,
          4
        ]
      }
    ]
  },
  {
    "id": "c072",
    "difficulty": 4,
    "function": "def c072(x):\n    # repeat every element twice\n    return [i for i in x for _ in (0, 1)]\n\n",
    "data": {
      "input": [
        33,
        42,
        39,
        63,
        17
      ],
      "output": [
        33,
        33,
        42,
        42,
        39,
        39,
        63,
        63,
        17,
        17
      ]
    },
    "demos": [
      {
        "input": [
          34,
          32,
          42
        ],
        "output": [
          34,
          34,
          32,
          32,
          42,
          42
        ]
      },
      {
        "input": [
          59,
          12,
          67
        ],
        "output": [
          59,
          59,
          12,
          12,
          67,
          67
        ]
      },
      {
        "input": [
          55,
          6,
          85,
          93,
          86,
          26,
          86
        ],
        "output": [
          55,
          55,
          6,
          6,
          85,
          85,
          93,
          93,
          86,
          86,
          26,
          26,
          86,
          86
        ]
      }
    ]
  },
  {
    "id": "c151",
    "difficulty": 5,
    "function": "def c151(x):\n    # repeat each element, M, M times, in order of appearance\n    return [i for i in x for _ in range(i)]\n\n",
    "data": {
      "input": [
        5,
        0,
        0,
        4,
        0
      ],
      "output": [
        5,
        5,
        5,
        5,
        5,
        4,
        4,
        4,
        4
      ]
    },
    "demos": [
      {
        "input": [
          5,
          3,
          1
        ],
        "output": [
          5,
          5,
          5,
          5,
          5,
          3,
          3,
          3,
          1
        ]
      },
      {
        "input": [
          3,
          5,
          1,
          0
        ],
        "output": [
          3,
          3,
          3,
          5,
          5,
          5,
          5,
          5,
          1
        ]
      },
      {
        "input": [
          5,
          3,
          0,
          0
        ],
        "output": [
          5,
          5,
          5,
          5,
          5,
          3,
          3,
          3
        ]
      }
    ]
  },
  {
    "id": "c080",
    "difficulty": 6,
    "function": "def c080(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        11,
        73,
        39
      ],
      "output": [
        39,
        73,
        11
      ]
    },
    "demos": [
      {
        "input": [
          2,
          78,
          80,
          35
        ],
        "output": [
          35,
          80,
          78,
          2
        ]
      },
      {
        "input": [
          25,
          89,
          33,
          98
        ],
        "output": [
          98,
          33,
          89,
          25
        ]
      },
      {
        "input": [
          23,
          24,
          48,
          43,
          66
        ],
        "output": [
          66,
          43,
          48,
          24,
          23
        ]
      }
    ]
  },
  {
    "id": "c061",
    "difficulty": 7,
    "function": "def c061(x):\n    # remove all but the last element\n    return [x[-1]]\n    \n",
    "data": {
      "input": [
        1,
        15,
        42,
        92,
        95,
        7,
        50,
        31
      ],
      "output": [
        31
      ]
    },
    "demos": [
      {
        "input": [
          91,
          5,
          3
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          20,
          93,
          26
        ],
        "output": [
          26
        ]
      },
      {
        "input": [
          10,
          40,
          81,
          90,
          80,
          66
        ],
        "output": [
          66
        ]
      }
    ]
  },
  {
    "id": "c189",
    "difficulty": 8,
    "function": "def c189(x):\n    # count from the smallest element to the largest element\n    return list(range(min(x), max(x)+1))\n\n",
    "data": {
      "input": [
        78,
        76,
        73
      ],
      "output": [
        73,
        74,
        75,
        76,
        77,
        78
      ]
    },
    "demos": [
      {
        "input": [
          10,
          5,
          9
        ],
        "output": [
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          31,
          30,
          27
        ],
        "output": [
          27,
          28,
          29,
          30,
          31
        ]
      },
      {
        "input": [
          47,
          50,
          48
        ],
        "output": [
          47,
          48,
          49,
          50
        ]
      }
    ]
  },
  {
    "id": "c050",
    "difficulty": 9,
    "function": "def c050(x):\n    # prepend first element to the list\n    return [x[0]] + x\n\n",
    "data": {
      "input": [
        7,
        88,
        97,
        17
      ],
      "output": [
        7,
        7,
        88,
        97,
        17
      ]
    },
    "demos": [
      {
        "input": [
          27,
          91,
          85,
          97,
          33,
          47
        ],
        "output": [
          27,
          27,
          91,
          85,
          97,
          33,
          47
        ]
      },
      {
        "input": [
          16,
          12,
          86,
          23,
          43,
          77
        ],
        "output": [
          16,
          16,
          12,
          86,
          23,
          43,
          77
        ]
      },
      {
        "input": [
          71,
          38,
          92,
          65,
          61
        ],
        "output": [
          71,
          71,
          38,
          92,
          65,
          61
        ]
      }
    ]
  },
  {
    "id": "c048",
    "difficulty": 10,
    "function": "def c048(x):\n    # remove all but the first element\n    return [x[0]]\n    \n",
    "data": {
      "input": [
        27,
        98,
        67
      ],
      "output": [
        27
      ]
    },
    "demos": [
      {
        "input": [
          42,
          42,
          27,
          94
        ],
        "output": [
          42
        ]
      },
      {
        "input": [
          67,
          91,
          43,
          90,
          39,
          78
        ],
        "output": [
          67
        ]
      },
      {
        "input": [
          81,
          69,
          21,
          8,
          95,
          46,
          59
        ],
        "output": [
          81
        ]
      }
    ]
  },
  {
    "id": "c147",
    "difficulty": 11,
    "function": "def c147(x):\n    # each element, followed by its index\n    res = []\n    for i, v in enumerate(x):\n        res.append(v)\n        res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        0,
        77,
        20,
        39
      ],
      "output": [
        0,
        0,
        77,
        1,
        20,
        2,
        39,
        3
      ]
    },
    "demos": [
      {
        "input": [
          65,
          12,
          27,
          67,
          17,
          39
        ],
        "output": [
          65,
          0,
          12,
          1,
          27,
          2,
          67,
          3,
          17,
          4,
          39,
          5
        ]
      },
      {
        "input": [
          18,
          35,
          91,
          70,
          85,
          70,
          27
        ],
        "output": [
          18,
          0,
          35,
          1,
          91,
          2,
          70,
          3,
          85,
          4,
          70,
          5,
          27,
          6
        ]
      },
      {
        "input": [
          51,
          31,
          15,
          94,
          84,
          48,
          38
        ],
        "output": [
          51,
          0,
          31,
          1,
          15,
          2,
          94,
          3,
          84,
          4,
          48,
          5,
          38,
          6
        ]
      }
    ]
  },
  {
    "id": "c120",
    "difficulty": 12,
    "function": "def c120(x):\n    # remove all but the first element\n    return [x[0]]\n\n",
    "data": {
      "input": [
        53,
        59,
        59,
        17
      ],
      "output": [
        53
      ]
    },
    "demos": [
      {
        "input": [
          64,
          81,
          30,
          56,
          61
        ],
        "output": [
          64
        ]
      },
      {
        "input": [
          27,
          89,
          97,
          83,
          83
        ],
        "output": [
          27
        ]
      },
      {
        "input": [
          12,
          92,
          76,
          3,
          98
        ],
        "output": [
          12
        ]
      }
    ]
  },
  {
    "id": "c127",
    "difficulty": 13,
    "function": "def c127(x):\n    # remove last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        72,
        77,
        53,
        64,
        66
      ],
      "output": [
        72,
        77,
        53,
        64
      ]
    },
    "demos": [
      {
        "input": [
          98,
          57,
          6,
          80,
          42
        ],
        "output": [
          98,
          57,
          6,
          80
        ]
      },
      {
        "input": [
          51,
          23,
          14,
          62,
          74,
          2
        ],
        "output": [
          51,
          23,
          14,
          62,
          74
        ]
      },
      {
        "input": [
          62,
          70,
          2,
          89
        ],
        "output": [
          62,
          70,
          2
        ]
      }
    ]
  },
  {
    "id": "c100",
    "difficulty": 14,
    "function": "def c100(x):\n    # reverse the list\n    return x[::-1]\n\n",
    "data": {
      "input": [
        28,
        86,
        6,
        74
      ],
      "output": [
        74,
        6,
        86,
        28
      ]
    },
    "demos": [
      {
        "input": [
          0,
          66,
          92
        ],
        "output": [
          92,
          66,
          0
        ]
      },
      {
        "input": [
          74,
          94,
          35,
          56
        ],
        "output": [
          56,
          35,
          94,
          74
        ]
      },
      {
        "input": [
          70,
          81,
          44,
          88,
          87,
          38,
          2
        ],
        "output": [
          2,
          38,
          87,
          88,
          44,
          81,
          70
        ]
      }
    ]
  },
  {
    "id": "c145",
    "difficulty": 15,
    "function": "def c145(x):\n    # replace every element with the first element\n    return [x[0]] * len(x)\n\n",
    "data": {
      "input": [
        35,
        99,
        22
      ],
      "output": [
        35,
        35,
        35
      ]
    },
    "demos": [
      {
        "input": [
          74,
          33,
          3,
          87,
          33
        ],
        "output": [
          74,
          74,
          74,
          74,
          74
        ]
      },
      {
        "input": [
          98,
          6,
          92,
          41,
          90,
          45,
          43
        ],
        "output": [
          98,
          98,
          98,
          98,
          98,
          98,
          98
        ]
      },
      {
        "input": [
          97,
          17,
          75,
          92,
          25,
          87
        ],
        "output": [
          97,
          97,
          97,
          97,
          97,
          97
        ]
      }
    ]
  },
  {
    "id": "c079",
    "difficulty": 16,
    "function": "def c079(x):\n    # sum of the list\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        16,
        17,
        19,
        7
      ],
      "output": [
        59
      ]
    },
    "demos": [
      {
        "input": [
          5,
          12,
          2,
          9,
          16,
          11
        ],
        "output": [
          55
        ]
      },
      {
        "input": [
          17,
          15,
          14,
          15,
          5,
          1
        ],
        "output": [
          67
        ]
      },
      {
        "input": [
          10,
          4,
          2,
          6,
          7,
          16
        ],
        "output": [
          45
        ]
      }
    ]
  },
  {
    "id": "c043",
    "difficulty": 17,
    "function": "def c043(x):\n    return [8, 2, 7, 0, 3]\n\n",
    "data": {
      "input": [
        4,
        64,
        17,
        4,
        12,
        77
      ],
      "output": [
        8,
        2,
        7,
        0,
        3
      ]
    },
    "demos": [
      {
        "input": [
          99,
          1,
          49,
          90,
          40,
          75
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          15,
          77,
          49,
          42
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      },
      {
        "input": [
          82,
          56,
          36,
          48,
          49,
          71,
          6
        ],
        "output": [
          8,
          2,
          7,
          0,
          3
        ]
      }
    ]
  },
  {
    "id": "c038",
    "difficulty": 18,
    "function": "def c038(x):\n    # append 9\n    return x + [9]\n\n",
    "data": {
      "input": [
        35,
        28,
        76
      ],
      "output": [
        35,
        28,
        76,
        9
      ]
    },
    "demos": [
      {
        "input": [
          80,
          99,
          98,
          7,
          15,
          28
        ],
        "output": [
          80,
          99,
          98,
          7,
          15,
          28,
          9
        ]
      },
      {
        "input": [
          76,
          47,
          27,
          24,
          90,
          2,
          79
        ],
        "output": [
          76,
          47,
          27,
          24,
          90,
          2,
          79,
          9
        ]
      },
      {
        "input": [
          71,
          88,
          89,
          21
        ],
        "output": [
          71,
          88,
          89,
          21,
          9
        ]
      }
    ]
  },
  {
    "id": "c042",
    "difficulty": 19,
    "function": "def c042(x):\n    return [5, 2]\n\n",
    "data": {
      "input": [
        55,
        72,
        98,
        67,
        76,
        34,
        90
      ],
      "output": [
        5,
        2
      ]
    },
    "demos": [
      {
        "input": [
          91,
          61,
          20,
          35,
          64,
          19,
          11
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          32,
          37,
          88
        ],
        "output": [
          5,
          2
        ]
      },
      {
        "input": [
          64,
          59,
          94,
          62,
          60,
          78
        ],
        "output": [
          5,
          2
        ]
      }
    ]
  },
  {
    "id": "c223",
    "difficulty": 20,
    "function": "def c223(x):\n    # swap the digits of each element\n    return [int(str(i)[::-1]) for i in x]\n\n",
    "data": {
      "input": [
        10,
        97,
        5,
        84,
        20
      ],
      "output": [
        1,
        79,
        5,
        48,
        2
      ]
    },
    "demos": [
      {
        "input": [
          91,
          77,
          57,
          99
        ],
        "output": [
          19,
          77,
          75,
          99
        ]
      },
      {
        "input": [
          70,
          14,
          44,
          15
        ],
        "output": [
          7,
          41,
          44,
          51
        ]
      },
      {
        "input": [
          97,
          7,
          93
        ],
        "output": [
          79,
          7,
          39
        ]
      }
    ]
  },
  {
    "id": "c137",
    "difficulty": 21,
    "function": "def c137(x):\n    # remove all 3\n    return [i for i in x if i != 3]\n\n",
    "data": {
      "input": [
        96,
        16,
        13,
        62,
        34,
        3,
        56,
        33
      ],
      "output": [
        96,
        16,
        13,
        62,
        34,
        56,
        33
      ]
    },
    "demos": [
      {
        "input": [
          29,
          52,
          50,
          3,
          55,
          41,
          3
        ],
        "output": [
          29,
          52,
          50,
          55,
          41
        ]
      },
      {
        "input": [
          3,
          49,
          74,
          33,
          3
        ],
        "output": [
          49,
          74,
          33
        ]
      },
      {
        "input": [
          3,
          6,
          5,
          9,
          37,
          16
        ],
        "output": [
          6,
          5,
          9,
          37,
          16
        ]
      }
    ]
  },
  {
    "id": "c238",
    "difficulty": 22,
    "function": "def c238(x):\n    # keep only elements that appear exactly once\n    return [i for i in x if x.count(i) == 1]\n\n",
    "data": {
      "input": [
        9,
        9,
        6,
        0,
        13,
        12,
        12,
        12
      ],
      "output": [
        6,
        0,
        13
      ]
    },
    "demos": [
      {
        "input": [
          3,
          3,
          3,
          4,
          5,
          6,
          3,
          3
        ],
        "output": [
          4,
          5,
          6
        ]
      },
      {
        "input": [
          11,
          5,
          4,
          1,
          5,
          2,
          2,
          2
        ],
        "output": [
          11,
          4,
          1
        ]
      },
      {
        "input": [
          12,
          34,
          12,
          56,
          78,
          12,
          34,
          34
        ],
        "output": [
          56,
          78
        ]
      }
    ]
  },
  {
    "id": "c108",
    "difficulty": 23,
    "function": "def c108(x):\n    # sum of elements\n    return [sum(x)]\n\n",
    "data": {
      "input": [
        20,
        7,
        0
      ],
      "output": [
        27
      ]
    },
    "demos": [
      {
        "input": [
          13,
          16,
          9,
          16,
          16,
          5,
          19
        ],
        "output": [
          94
        ]
      },
      {
        "input": [
          4,
          5,
          1,
          19,
          7
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          0,
          6,
          10,
          5
        ],
        "output": [
          21
        ]
      }
    ]
  },
  {
    "id": "c126",
    "difficulty": 24,
    "function": "def c126(x):\n    # remove first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        86,
        92,
        54,
        26,
        19,
        16,
        14
      ],
      "output": [
        92,
        54,
        26,
        19,
        16,
        14
      ]
    },
    "demos": [
      {
        "input": [
          60,
          62,
          58,
          90,
          25,
          97
        ],
        "output": [
          62,
          58,
          90,
          25,
          97
        ]
      },
      {
        "input": [
          99,
          11,
          36,
          23,
          75
        ],
        "output": [
          11,
          36,
          23,
          75
        ]
      },
      {
        "input": [
          8,
          74,
          99,
          16,
          64,
          12
        ],
        "output": [
          74,
          99,
          16,
          64,
          12
        ]
      }
    ]
  },
  {
    "id": "c187",
    "difficulty": 25,
    "function": "def c187(x):\n    # concatenate input with itself, separated by 0\n    return x + [0] + x\n\n",
    "data": {
      "input": [
        52,
        84,
        51
      ],
      "output": [
        52,
        84,
        51,
        0,
        52,
        84,
        51
      ]
    },
    "demos": [
      {
        "input": [
          82,
          37,
          44,
          71,
          66
        ],
        "output": [
          82,
          37,
          44,
          71,
          66,
          0,
          82,
          37,
          44,
          71,
          66
        ]
      },
      {
        "input": [
          6,
          34,
          82,
          84,
          66
        ],
        "output": [
          6,
          34,
          82,
          84,
          66,
          0,
          6,
          34,
          82,
          84,
          66
        ]
      },
      {
        "input": [
          30,
          52,
          46,
          11
        ],
        "output": [
          30,
          52,
          46,
          11,
          0,
          30,
          52,
          46,
          11
        ]
      }
    ]
  },
  {
    "id": "c022",
    "difficulty": 26,
    "function": "def c022(x):\n    # insert a 5 as element 1\n    return x[:1] + [5] + x[1:]\n\n",
    "data": {
      "input": [
        93,
        76,
        74,
        49,
        13,
        43
      ],
      "output": [
        93,
        5,
        76,
        74,
        49,
        13,
        43
      ]
    },
    "demos": [
      {
        "input": [
          70,
          37,
          93,
          6,
          46,
          7,
          17
        ],
        "output": [
          70,
          5,
          37,
          93,
          6,
          46,
          7,
          17
        ]
      },
      {
        "input": [
          22,
          63,
          33
        ],
        "output": [
          22,
          5,
          63,
          33
        ]
      },
      {
        "input": [
          64,
          11,
          53,
          74,
          30,
          38
        ],
        "output": [
          64,
          5,
          11,
          53,
          74,
          30,
          38
        ]
      }
    ]
  },
  {
    "id": "c212",
    "difficulty": 27,
    "function": "def c212(x):\n    # insert 3 at index 2, 3 times\n    return x[:3] + [3,3,3] + x[3:]\n\n",
    "data": {
      "input": [
        16,
        55,
        87,
        10,
        47,
        85
      ],
      "output": [
        16,
        55,
        87,
        3,
        3,
        3,
        10,
        47,
        85
      ]
    },
    "demos": [
      {
        "input": [
          51,
          63,
          54,
          38,
          41,
          88
        ],
        "output": [
          51,
          63,
          54,
          3,
          3,
          3,
          38,
          41,
          88
        ]
      },
      {
        "input": [
          6,
          64,
          58,
          20,
          9
        ],
        "output": [
          6,
          64,
          58,
          3,
          3,
          3,
          20,
          9
        ]
      },
      {
        "input": [
          93,
          96,
          8,
          35
        ],
        "output": [
          93,
          96,
          8,
          3,
          3,
          3,
          35
        ]
      }
    ]
  },
  {
    "id": "c101",
    "difficulty": 28,
    "function": "def c101(x):\n    return [11, 19, 24, 33, 42, 5, 82, 0, 64, 9]\n\n",
    "data": {
      "input": [
        85,
        13,
        75,
        86,
        25,
        46,
        87
      ],
      "output": [
        11,
        19,
        24,
        33,
        42,
        5,
        82,
        0,
        64,
        9
      ]
    },
    "demos": [
      {
        "input": [
          81,
          76,
          30,
          37,
          47,
          45,
          29
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          64,
          74,
          9,
          23,
          50
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      },
      {
        "input": [
          75,
          73,
          69
        ],
        "output": [
          11,
          19,
          24,
          33,
          42,
          5,
          82,
          0,
          64,
          9
        ]
      }
    ]
  },
  {
    "id": "c021",
    "difficulty": 29,
    "function": "def c021(x):\n    # insert 8 as element 1\n    return x[:1] + [8] + x[1:]\n\n",
    "data": {
      "input": [
        91,
        74,
        21,
        30,
        28
      ],
      "output": [
        91,
        8,
        74,
        21,
        30,
        28
      ]
    },
    "demos": [
      {
        "input": [
          27,
          68,
          64
        ],
        "output": [
          27,
          8,
          68,
          64
        ]
      },
      {
        "input": [
          78,
          25,
          44,
          90,
          68,
          50,
          83
        ],
        "output": [
          78,
          8,
          25,
          44,
          90,
          68,
          50,
          83
        ]
      },
      {
        "input": [
          26,
          67,
          29,
          61,
          18,
          15,
          70
        ],
        "output": [
          26,
          8,
          67,
          29,
          61,
          18,
          15,
          70
        ]
      }
    ]
  },
  {
    "id": "c105",
    "difficulty": 30,
    "function": "def c105(x):\n    # concatenate all but the last element with all but the first element\n    return x[:-1] + x[1:]\n\n",
    "data": {
      "input": [
        19,
        16,
        49,
        89,
        36
      ],
      "output": [
        19,
        16,
        49,
        89,
        16,
        49,
        89,
        36
      ]
    },
    "demos": [
      {
        "input": [
          81,
          47,
          20,
          38,
          66,
          32
        ],
        "output": [
          81,
          47,
          20,
          38,
          66,
          47,
          20,
          38,
          66,
          32
        ]
      },
      {
        "input": [
          2,
          49,
          69,
          95,
          95
        ],
        "output": [
          2,
          49,
          69,
          95,
          49,
          69,
          95,
          95
        ]
      },
      {
        "input": [
          51,
          46,
          62,
          83,
          61
        ],
        "output": [
          51,
          46,
          62,
          83,
          46,
          62,
          83,
          61
        ]
      }
    ]
  },
  {
    "id": "c041",
    "difficulty": 31,
    "function": "def c041(x):\n    return [9]\n\n",
    "data": {
      "input": [
        59,
        55,
        2,
        98,
        44,
        64,
        3
      ],
      "output": [
        9
      ]
    },
    "demos": [
      {
        "input": [
          47,
          80,
          49,
          51,
          68,
          26,
          87
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          60,
          80,
          81
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          94,
          31,
          54,
          63,
          46,
          18,
          87
        ],
        "output": [
          9
        ]
      }
    ]
  },
  {
    "id": "c070",
    "difficulty": 32,
    "function": "def c070(x):\n    # concatenate the input\n    return x + x\n\n",
    "data": {
      "input": [
        94,
        22,
        12,
        72
      ],
      "output": [
        94,
        22,
        12,
        72,
        94,
        22,
        12,
        72
      ]
    },
    "demos": [
      {
        "input": [
          26,
          3,
          14,
          57,
          3
        ],
        "output": [
          26,
          3,
          14,
          57,
          3,
          26,
          3,
          14,
          57,
          3
        ]
      },
      {
        "input": [
          27,
          24,
          55,
          74,
          4
        ],
        "output": [
          27,
          24,
          55,
          74,
          4,
          27,
          24,
          55,
          74,
          4
        ]
      },
      {
        "input": [
          13,
          98,
          97,
          47,
          75
        ],
        "output": [
          13,
          98,
          97,
          47,
          75,
          13,
          98,
          97,
          47,
          75
        ]
      }
    ]
  },
  {
    "id": "c052",
    "difficulty": 33,
    "function": "def c052(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        58,
        70,
        1,
        23,
        79,
        69,
        41
      ],
      "output": [
        58,
        58,
        58,
        58,
        58,
        58,
        58
      ]
    },
    "demos": [
      {
        "input": [
          76,
          40,
          2,
          22
        ],
        "output": [
          76,
          76,
          76,
          76,
          76,
          76,
          76
        ]
      },
      {
        "input": [
          74,
          17,
          88
        ],
        "output": [
          74,
          74,
          74,
          74,
          74,
          74,
          74
        ]
      },
      {
        "input": [
          63,
          13,
          8
        ],
        "output": [
          63,
          63,
          63,
          63,
          63,
          63,
          63
        ]
      }
    ]
  },
  {
    "id": "c044",
    "difficulty": 34,
    "function": "def c044(x):\n    return [1, 9, 4, 3, 2, 5, 8, 0, 4, 9]\n\n",
    "data": {
      "input": [
        88,
        84,
        49
      ],
      "output": [
        1,
        9,
        4,
        3,
        2,
        5,
        8,
        0,
        4,
        9
      ]
    },
    "demos": [
      {
        "input": [
          19,
          22,
          87,
          14
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          84,
          63,
          84
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      },
      {
        "input": [
          45,
          49,
          8,
          25
        ],
        "output": [
          1,
          9,
          4,
          3,
          2,
          5,
          8,
          0,
          4,
          9
        ]
      }
    ]
  },
  {
    "id": "c190",
    "difficulty": 35,
    "function": "def c190(x):\n    # count by 2 from the first element to the last element\n    if x[0] < x[-1]:\n        return list(range(x[0], x[-1]+1, 2))\n    else:\n        return list(range(x[0], x[-1]-1, -2))\n\n",
    "data": {
      "input": [
        87,
        52,
        88,
        10,
        11,
        11,
        91
      ],
      "output": [
        87,
        89,
        91
      ]
    },
    "demos": [
      {
        "input": [
          39,
          42,
          39
        ],
        "output": [
          39
        ]
      },
      {
        "input": [
          38,
          53,
          21
        ],
        "output": [
          38,
          36,
          34,
          32,
          30,
          28,
          26,
          24,
          22
        ]
      },
      {
        "input": [
          63,
          1,
          75
        ],
        "output": [
          63,
          65,
          67,
          69,
          71,
          73,
          75
        ]
      }
    ]
  },
  {
    "id": "c037",
    "difficulty": 36,
    "function": "def c037(x):\n    # append 3\n    return x + [3]\n\n",
    "data": {
      "input": [
        73,
        63,
        84,
        15,
        66
      ],
      "output": [
        73,
        63,
        84,
        15,
        66,
        3
      ]
    },
    "demos": [
      {
        "input": [
          30,
          53,
          54,
          41,
          94,
          39
        ],
        "output": [
          30,
          53,
          54,
          41,
          94,
          39,
          3
        ]
      },
      {
        "input": [
          49,
          33,
          54,
          72,
          36
        ],
        "output": [
          49,
          33,
          54,
          72,
          36,
          3
        ]
      },
      {
        "input": [
          50,
          32,
          99,
          32,
          83,
          54,
          90
        ],
        "output": [
          50,
          32,
          99,
          32,
          83,
          54,
          90,
          3
        ]
      }
    ]
  },
  {
    "id": "c222",
    "difficulty": 37,
    "function": "def c222(x):\n    # remove each element with the input length\n    return [len(x) for _ in x]\n\n",
    "data": {
      "input": [
        2,
        20,
        12,
        51,
        57,
        84
      ],
      "output": [
        6,
        6,
        6,
        6,
        6,
        6
      ]
    },
    "demos": [
      {
        "input": [
          7,
          76,
          42,
          80
        ],
        "output": [
          4,
          4,
          4,
          4
        ]
      },
      {
        "input": [
          27,
          55,
          72,
          20,
          73,
          94,
          49
        ],
        "output": [
          7,
          7,
          7,
          7,
          7,
          7,
          7
        ]
      },
      {
        "input": [
          86,
          8,
          13
        ],
        "output": [
          3,
          3,
          3
        ]
      }
    ]
  },
  {
    "id": "c107",
    "difficulty": 38,
    "function": "def c107(x):\n    # unique elements, in order of appearance\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        38,
        91,
        29,
        76,
        11,
        38,
        74,
        91,
        11,
        27
      ],
      "output": [
        38,
        91,
        29,
        76,
        11,
        74,
        27
      ]
    },
    "demos": [
      {
        "input": [
          19,
          19,
          15,
          29,
          15,
          45
        ],
        "output": [
          19,
          15,
          29,
          45
        ]
      },
      {
        "input": [
          75,
          69,
          7,
          29,
          75,
          75,
          69
        ],
        "output": [
          75,
          69,
          7,
          29
        ]
      },
      {
        "input": [
          40,
          85,
          63,
          44,
          63,
          40,
          63
        ],
        "output": [
          40,
          85,
          63,
          44
        ]
      }
    ]
  },
  {
    "id": "c011",
    "difficulty": 39,
    "function": "def c011(x):\n    # [1:4] of the input\n    return x[1:4]\n\n",
    "data": {
      "input": [
        47,
        21,
        93,
        93,
        59,
        35
      ],
      "output": [
        21,
        93,
        93
      ]
    },
    "demos": [
      {
        "input": [
          25,
          19,
          77,
          37
        ],
        "output": [
          19,
          77,
          37
        ]
      },
      {
        "input": [
          97,
          38,
          53,
          82,
          46,
          58,
          42
        ],
        "output": [
          38,
          53,
          82
        ]
      },
      {
        "input": [
          12,
          48,
          57,
          48,
          71,
          20,
          96
        ],
        "output": [
          48,
          57,
          48
        ]
      }
    ]
  },
  {
    "id": "c104",
    "difficulty": 40,
    "function": "def c104(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        21,
        56,
        63,
        86,
        47,
        2,
        50
      ],
      "output": [
        86
      ]
    },
    "demos": [
      {
        "input": [
          11,
          34,
          10,
          80,
          69
        ],
        "output": [
          80
        ]
      },
      {
        "input": [
          26,
          27,
          79,
          0,
          79,
          14
        ],
        "output": [
          79
        ]
      },
      {
        "input": [
          8,
          25,
          58,
          67,
          85,
          73
        ],
        "output": [
          85
        ]
      }
    ]
  },
  {
    "id": "c192",
    "difficulty": 41,
    "function": "def c192(x):\n    # replace each element, M, with its tens digit, if no tens digit, replace with 0\n    return [int(str(i)[-2]) if len(str(i)) > 1 else 0 for i in x]\n\n",
    "data": {
      "input": [
        30,
        40,
        94,
        57,
        7,
        73
      ],
      "output": [
        3,
        4,
        9,
        5,
        0,
        7
      ]
    },
    "demos": [
      {
        "input": [
          17,
          79,
          78,
          89,
          26,
          10,
          14
        ],
        "output": [
          1,
          7,
          7,
          8,
          2,
          1,
          1
        ]
      },
      {
        "input": [
          78,
          98,
          35,
          25
        ],
        "output": [
          7,
          9,
          3,
          2
        ]
      },
      {
        "input": [
          27,
          21,
          51,
          83,
          2,
          27,
          41
        ],
        "output": [
          2,
          2,
          5,
          8,
          0,
          2,
          4
        ]
      }
    ]
  },
  {
    "id": "c182",
    "difficulty": 42,
    "function": "def c182(x):\n    # keep every third element\n    return x[::3]\n\n",
    "data": {
      "input": [
        45,
        22,
        48,
        6,
        9,
        93
      ],
      "output": [
        45,
        6
      ]
    },
    "demos": [
      {
        "input": [
          95,
          45,
          68,
          36,
          49
        ],
        "output": [
          95,
          36
        ]
      },
      {
        "input": [
          19,
          31,
          8,
          38,
          6,
          70
        ],
        "output": [
          19,
          38
        ]
      },
      {
        "input": [
          46,
          63,
          55,
          43,
          32,
          53
        ],
        "output": [
          46,
          43
        ]
      }
    ]
  },
  {
    "id": "c006",
    "difficulty": 43,
    "function": "def c006(x):\n    # the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        24,
        46,
        44,
        23,
        98,
        38,
        16
      ],
      "output": [
        24,
        46
      ]
    },
    "demos": [
      {
        "input": [
          68,
          73,
          79,
          46,
          23,
          11
        ],
        "output": [
          68,
          73
        ]
      },
      {
        "input": [
          90,
          26,
          74,
          85,
          84
        ],
        "output": [
          90,
          26
        ]
      },
      {
        "input": [
          91,
          93,
          52,
          1,
          75,
          83,
          80
        ],
        "output": [
          91,
          93
        ]
      }
    ]
  },
  {
    "id": "c046",
    "difficulty": 44,
    "function": "def c046(x):\n    # prepend 7\n    return [7] + x\n\n",
    "data": {
      "input": [
        58,
        8,
        38,
        33,
        50,
        58
      ],
      "output": [
        7,
        58,
        8,
        38,
        33,
        50,
        58
      ]
    },
    "demos": [
      {
        "input": [
          39,
          84,
          93,
          31
        ],
        "output": [
          7,
          39,
          84,
          93,
          31
        ]
      },
      {
        "input": [
          36,
          27,
          40
        ],
        "output": [
          7,
          36,
          27,
          40
        ]
      },
      {
        "input": [
          8,
          61,
          11
        ],
        "output": [
          7,
          8,
          61,
          11
        ]
      }
    ]
  },
  {
    "id": "c106",
    "difficulty": 45,
    "function": "def c106(x):\n    # elements in ascending order\n    return sorted(x)\n\n",
    "data": {
      "input": [
        27,
        40,
        7,
        32,
        45,
        34,
        58
      ],
      "output": [
        7,
        27,
        32,
        34,
        40,
        45,
        58
      ]
    },
    "demos": [
      {
        "input": [
          71,
          31,
          57
        ],
        "output": [
          31,
          57,
          71
        ]
      },
      {
        "input": [
          79,
          35,
          20,
          61,
          65,
          69,
          93
        ],
        "output": [
          20,
          35,
          61,
          65,
          69,
          79,
          93
        ]
      },
      {
        "input": [
          62,
          95,
          41
        ],
        "output": [
          41,
          62,
          95
        ]
      }
    ]
  },
  {
    "id": "c114",
    "difficulty": 46,
    "function": "def c114(x):\n    # prepend the last element\n    return [x[-1]] + x\n\n",
    "data": {
      "input": [
        47,
        29,
        73,
        1
      ],
      "output": [
        1,
        47,
        29,
        73,
        1
      ]
    },
    "demos": [
      {
        "input": [
          70,
          63,
          40,
          3
        ],
        "output": [
          3,
          70,
          63,
          40,
          3
        ]
      },
      {
        "input": [
          63,
          3,
          14,
          83,
          43,
          52
        ],
        "output": [
          52,
          63,
          3,
          14,
          83,
          43,
          52
        ]
      },
      {
        "input": [
          69,
          68,
          53,
          83,
          72,
          32
        ],
        "output": [
          32,
          69,
          68,
          53,
          83,
          72,
          32
        ]
      }
    ]
  },
  {
    "id": "c093",
    "difficulty": 47,
    "function": "def c093(x):\n    # repeat the first element 7 times\n    return [x[0]] * 7\n\n",
    "data": {
      "input": [
        29,
        87,
        74,
        52,
        87,
        73,
        77
      ],
      "output": [
        29,
        29,
        29,
        29,
        29,
        29,
        29
      ]
    },
    "demos": [
      {
        "input": [
          32,
          0,
          35,
          37
        ],
        "output": [
          32,
          32,
          32,
          32,
          32,
          32,
          32
        ]
      },
      {
        "input": [
          55,
          42,
          3
        ],
        "output": [
          55,
          55,
          55,
          55,
          55,
          55,
          55
        ]
      },
      {
        "input": [
          25,
          85,
          82,
          16
        ],
        "output": [
          25,
          25,
          25,
          25,
          25,
          25,
          25
        ]
      }
    ]
  },
  {
    "id": "c195",
    "difficulty": 48,
    "function": "def c195(x):\n    # element 1, followed by 23, 68, 42, 99, 71, followed by last element\n    return [x[0], 23, 68, 42, 99, 71, x[-1]]\n\n",
    "data": {
      "input": [
        65,
        32,
        62,
        22,
        7,
        68
      ],
      "output": [
        65,
        23,
        68,
        42,
        99,
        71,
        68
      ]
    },
    "demos": [
      {
        "input": [
          96,
          84,
          94,
          25,
          19
        ],
        "output": [
          96,
          23,
          68,
          42,
          99,
          71,
          19
        ]
      },
      {
        "input": [
          86,
          48,
          14,
          39,
          38
        ],
        "output": [
          86,
          23,
          68,
          42,
          99,
          71,
          38
        ]
      },
      {
        "input": [
          85,
          23,
          71
        ],
        "output": [
          85,
          23,
          68,
          42,
          99,
          71,
          71
        ]
      }
    ]
  },
  {
    "id": "c196",
    "difficulty": 49,
    "function": "def c196(x):\n    # concatenate 17, 38, 82 input 1 55 27\n    return [17, 38, 82] + x + [1, 55, 27]\n\n",
    "data": {
      "input": [
        39,
        17
      ],
      "output": [
        17,
        38,
        82,
        39,
        17,
        1,
        55,
        27
      ]
    },
    "demos": [
      {
        "input": [
          3,
          44,
          13,
          90,
          5
        ],
        "output": [
          17,
          38,
          82,
          3,
          44,
          13,
          90,
          5,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          93,
          96,
          61,
          66,
          90
        ],
        "output": [
          17,
          38,
          82,
          93,
          96,
          61,
          66,
          90,
          1,
          55,
          27
        ]
      },
      {
        "input": [
          31,
          6,
          93,
          95,
          10
        ],
        "output": [
          17,
          38,
          82,
          31,
          6,
          93,
          95,
          10,
          1,
          55,
          27
        ]
      }
    ]
  },
  {
    "id": "c095",
    "difficulty": 50,
    "function": "def c095(x):\n    # remove the first element and the last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        78,
        91,
        72,
        50
      ],
      "output": [
        91,
        72
      ]
    },
    "demos": [
      {
        "input": [
          99,
          42,
          82,
          16,
          70
        ],
        "output": [
          42,
          82,
          16
        ]
      },
      {
        "input": [
          0,
          29,
          86,
          62,
          55,
          74
        ],
        "output": [
          29,
          86,
          62,
          55
        ]
      },
      {
        "input": [
          87,
          62,
          96,
          95,
          2
        ],
        "output": [
          62,
          96,
          95
        ]
      }
    ]
  },
  {
    "id": "c016",
    "difficulty": 51,
    "function": "def c016(x):\n    # replace element 1 with 8\n    return [8] + x[1:]\n\n",
    "data": {
      "input": [
        71,
        26,
        74,
        17,
        82,
        34,
        87
      ],
      "output": [
        8,
        26,
        74,
        17,
        82,
        34,
        87
      ]
    },
    "demos": [
      {
        "input": [
          54,
          10,
          24,
          51,
          4,
          27
        ],
        "output": [
          8,
          10,
          24,
          51,
          4,
          27
        ]
      },
      {
        "input": [
          94,
          18,
          47,
          11,
          86,
          55,
          15
        ],
        "output": [
          8,
          18,
          47,
          11,
          86,
          55,
          15
        ]
      },
      {
        "input": [
          85,
          18,
          81,
          53,
          53
        ],
        "output": [
          8,
          18,
          81,
          53,
          53
        ]
      }
    ]
  },
  {
    "id": "c224",
    "difficulty": 52,
    "function": "def c224(x):\n    # reverse the list, then take every other element starting from the second element, then take every other element starting from the first element\n    return x[::-2] + x[(len(x) % 2)::2]\n\n",
    "data": {
      "input": [
        99,
        14,
        23,
        73,
        77
      ],
      "output": [
        77,
        23,
        99,
        14,
        73
      ]
    },
    "demos": [
      {
        "input": [
          84,
          87,
          67,
          29,
          59,
          28,
          82
        ],
        "output": [
          82,
          59,
          67,
          84,
          87,
          29,
          28
        ]
      },
      {
        "input": [
          43,
          15,
          35,
          6,
          39,
          56
        ],
        "output": [
          56,
          6,
          15,
          43,
          35,
          39
        ]
      },
      {
        "input": [
          61,
          68,
          85,
          50
        ],
        "output": [
          50,
          68,
          61,
          85
        ]
      }
    ]
  },
  {
    "id": "c116",
    "difficulty": 53,
    "function": "def c116(x):\n    # reflect the input on itself\n    return x[::-1] + x[1:]\n\n",
    "data": {
      "input": [
        42,
        19,
        57,
        65,
        91,
        42
      ],
      "output": [
        42,
        91,
        65,
        57,
        19,
        42,
        19,
        57,
        65,
        91,
        42
      ]
    },
    "demos": [
      {
        "input": [
          23,
          59,
          53,
          72,
          21
        ],
        "output": [
          21,
          72,
          53,
          59,
          23,
          59,
          53,
          72,
          21
        ]
      },
      {
        "input": [
          75,
          70,
          36,
          28,
          59,
          0
        ],
        "output": [
          0,
          59,
          28,
          36,
          70,
          75,
          70,
          36,
          28,
          59,
          0
        ]
      },
      {
        "input": [
          94,
          7,
          77,
          71,
          37,
          50
        ],
        "output": [
          50,
          37,
          71,
          77,
          7,
          94,
          7,
          77,
          71,
          37,
          50
        ]
      }
    ]
  },
  {
    "id": "c140",
    "difficulty": 54,
    "function": "def c140(x):\n    # replace element 1 with 9\n    return x[:1] + [9] + x[2:]\n\n",
    "data": {
      "input": [
        65,
        89,
        82,
        34,
        53,
        99
      ],
      "output": [
        65,
        9,
        82,
        34,
        53,
        99
      ]
    },
    "demos": [
      {
        "input": [
          32,
          87,
          56,
          58,
          35,
          88,
          98
        ],
        "output": [
          32,
          9,
          56,
          58,
          35,
          88,
          98
        ]
      },
      {
        "input": [
          81,
          12,
          65,
          65
        ],
        "output": [
          81,
          9,
          65,
          65
        ]
      },
      {
        "input": [
          23,
          84,
          64,
          35,
          16,
          17,
          88
        ],
        "output": [
          23,
          9,
          64,
          35,
          16,
          17,
          88
        ]
      }
    ]
  },
  {
    "id": "c049",
    "difficulty": 55,
    "function": "def c049(x):\n    # remove the first element\n    return x[1:]\n\n",
    "data": {
      "input": [
        59,
        57,
        19,
        84,
        11,
        94,
        22
      ],
      "output": [
        57,
        19,
        84,
        11,
        94,
        22
      ]
    },
    "demos": [
      {
        "input": [
          68,
          85,
          54,
          7,
          15,
          70,
          24
        ],
        "output": [
          85,
          54,
          7,
          15,
          70,
          24
        ]
      },
      {
        "input": [
          88,
          85,
          27,
          44,
          95
        ],
        "output": [
          85,
          27,
          44,
          95
        ]
      },
      {
        "input": [
          90,
          21,
          43
        ],
        "output": [
          21,
          43
        ]
      }
    ]
  },
  {
    "id": "c071",
    "difficulty": 56,
    "function": "def c071(x):\n    # add 2 to each element\n    return [i+2 for i in x]\n\n",
    "data": {
      "input": [
        94,
        49,
        25,
        6,
        47
      ],
      "output": [
        96,
        51,
        27,
        8,
        49
      ]
    },
    "demos": [
      {
        "input": [
          26,
          60,
          72,
          23,
          4,
          73,
          14
        ],
        "output": [
          28,
          62,
          74,
          25,
          6,
          75,
          16
        ]
      },
      {
        "input": [
          48,
          23,
          49
        ],
        "output": [
          50,
          25,
          51
        ]
      },
      {
        "input": [
          98,
          65,
          28,
          34,
          32
        ],
        "output": [
          100,
          67,
          30,
          36,
          34
        ]
      }
    ]
  },
  {
    "id": "c161",
    "difficulty": 57,
    "function": "def c161(x):\n    # replace each element, M, with M + the input length - M index\n    return [i + len(x) - j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        59,
        66,
        88,
        92,
        94
      ],
      "output": [
        64,
        70,
        91,
        94,
        95
      ]
    },
    "demos": [
      {
        "input": [
          25,
          68,
          70,
          94,
          96,
          4,
          52
        ],
        "output": [
          32,
          74,
          75,
          98,
          99,
          6,
          53
        ]
      },
      {
        "input": [
          2,
          55,
          89
        ],
        "output": [
          5,
          57,
          90
        ]
      },
      {
        "input": [
          46,
          42,
          1,
          70
        ],
        "output": [
          50,
          45,
          3,
          71
        ]
      }
    ]
  },
  {
    "id": "c068",
    "difficulty": 58,
    "function": "def c068(x):\n    # concatenate the input with 7, 3, 8, 4, 3\n    return x + [7, 3, 8, 4, 3]\n\n",
    "data": {
      "input": [
        27,
        40,
        25,
        0,
        69
      ],
      "output": [
        27,
        40,
        25,
        0,
        69,
        7,
        3,
        8,
        4,
        3
      ]
    },
    "demos": [
      {
        "input": [
          21,
          96,
          37,
          36,
          96
        ],
        "output": [
          21,
          96,
          37,
          36,
          96,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          31,
          21,
          18,
          44,
          69,
          66
        ],
        "output": [
          31,
          21,
          18,
          44,
          69,
          66,
          7,
          3,
          8,
          4,
          3
        ]
      },
      {
        "input": [
          86,
          87,
          26,
          9,
          12
        ],
        "output": [
          86,
          87,
          26,
          9,
          12,
          7,
          3,
          8,
          4,
          3
        ]
      }
    ]
  },
  {
    "id": "c103",
    "difficulty": 59,
    "function": "def c103(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        19,
        41,
        88,
        97,
        95,
        72
      ],
      "output": [
        6
      ]
    },
    "demos": [
      {
        "input": [
          35,
          2,
          67,
          76,
          4,
          35,
          9
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          50,
          95,
          53,
          85,
          36,
          38
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          30,
          59,
          55,
          13,
          71
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c001",
    "difficulty": 60,
    "function": "def c001(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        79,
        96,
        87,
        44
      ],
      "output": [
        87
      ]
    },
    "demos": [
      {
        "input": [
          75,
          71,
          89,
          96,
          55,
          90,
          47
        ],
        "output": [
          89
        ]
      },
      {
        "input": [
          99,
          67,
          17,
          30,
          7
        ],
        "output": [
          17
        ]
      },
      {
        "input": [
          43,
          84,
          82
        ],
        "output": [
          82
        ]
      }
    ]
  },
  {
    "id": "c090",
    "difficulty": 61,
    "function": "def c090(x):\n    return [18, 42, 77, 20, 36]\n\n",
    "data": {
      "input": [
        63,
        84,
        1,
        26
      ],
      "output": [
        18,
        42,
        77,
        20,
        36
      ]
    },
    "demos": [
      {
        "input": [
          7,
          40,
          67,
          73,
          33,
          84
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          37,
          95,
          46,
          7,
          57,
          94
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      },
      {
        "input": [
          93,
          45,
          69,
          72,
          10
        ],
        "output": [
          18,
          42,
          77,
          20,
          36
        ]
      }
    ]
  },
  {
    "id": "c097",
    "difficulty": 62,
    "function": "def c097(x):\n    # concatenate 11, 21, 43 input 7 89 0\n    return [11, 21, 43] + x + [7, 89, 0]\n\n",
    "data": {
      "input": [
        52,
        16,
        62
      ],
      "output": [
        11,
        21,
        43,
        52,
        16,
        62,
        7,
        89,
        0
      ]
    },
    "demos": [
      {
        "input": [
          65,
          67,
          77
        ],
        "output": [
          11,
          21,
          43,
          65,
          67,
          77,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          20,
          63,
          97,
          66,
          52
        ],
        "output": [
          11,
          21,
          43,
          20,
          63,
          97,
          66,
          52,
          7,
          89,
          0
        ]
      },
      {
        "input": [
          44,
          80,
          40,
          41,
          47
        ],
        "output": [
          11,
          21,
          43,
          44,
          80,
          40,
          41,
          47,
          7,
          89,
          0
        ]
      }
    ]
  },
  {
    "id": "c142",
    "difficulty": 63,
    "function": "def c142(x):\n    # every digit in order of appearance\n    res = []\n    for i in x:\n        for j in str(i):\n            res.append(int(j))\n    return res\n\n",
    "data": {
      "input": [
        20,
        92,
        31,
        96
      ],
      "output": [
        2,
        0,
        9,
        2,
        3,
        1,
        9,
        6
      ]
    },
    "demos": [
      {
        "input": [
          9,
          84,
          51,
          55
        ],
        "output": [
          9,
          8,
          4,
          5,
          1,
          5,
          5
        ]
      },
      {
        "input": [
          38,
          9,
          43,
          38,
          56,
          49
        ],
        "output": [
          3,
          8,
          9,
          4,
          3,
          3,
          8,
          5,
          6,
          4,
          9
        ]
      },
      {
        "input": [
          47,
          91,
          8
        ],
        "output": [
          4,
          7,
          9,
          1,
          8
        ]
      }
    ]
  },
  {
    "id": "c091",
    "difficulty": 64,
    "function": "def c091(x):\n    return [81, 99, 41, 23, 22, 75, 68, 30]\n\n",
    "data": {
      "input": [
        86,
        12,
        29
      ],
      "output": [
        81,
        99,
        41,
        23,
        22,
        75,
        68,
        30
      ]
    },
    "demos": [
      {
        "input": [
          21,
          73,
          31,
          68
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          98,
          67,
          41
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      },
      {
        "input": [
          33,
          2,
          50
        ],
        "output": [
          81,
          99,
          41,
          23,
          22,
          75,
          68,
          30
        ]
      }
    ]
  },
  {
    "id": "c034",
    "difficulty": 65,
    "function": "def c034(x):\n    # swap element 1 and element 2\n    x[0], x[1] = x[1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        84,
        31,
        59,
        68,
        6,
        4,
        15
      ],
      "output": [
        31,
        84,
        59,
        68,
        6,
        4,
        15
      ]
    },
    "demos": [
      {
        "input": [
          62,
          3,
          83,
          39,
          75,
          58
        ],
        "output": [
          3,
          62,
          83,
          39,
          75,
          58
        ]
      },
      {
        "input": [
          2,
          45,
          35,
          99,
          2,
          54,
          40
        ],
        "output": [
          45,
          2,
          35,
          99,
          2,
          54,
          40
        ]
      },
      {
        "input": [
          40,
          5,
          50,
          92
        ],
        "output": [
          5,
          40,
          50,
          92
        ]
      }
    ]
  },
  {
    "id": "c244",
    "difficulty": 66,
    "function": "def c244(x):\n    # number of 3s\n    return [x.count(3)]\n\n",
    "data": {
      "input": [
        3,
        62,
        3,
        31,
        21
      ],
      "output": [
        2
      ]
    },
    "demos": [
      {
        "input": [
          45,
          3,
          3,
          85,
          93,
          66
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          67,
          6,
          3,
          75,
          28,
          14,
          3
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          3,
          15,
          56,
          30,
          75,
          3
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c171",
    "difficulty": 67,
    "function": "def c171(x):\n    # cumulative sum\n    res = []\n    s = 0\n    for i in x:\n        s += i\n        res.append(s)\n    return res\n\n",
    "data": {
      "input": [
        10,
        20,
        8
      ],
      "output": [
        10,
        30,
        38
      ]
    },
    "demos": [
      {
        "input": [
          13,
          2,
          5
        ],
        "output": [
          13,
          15,
          20
        ]
      },
      {
        "input": [
          18,
          16,
          15,
          10,
          8,
          0
        ],
        "output": [
          18,
          34,
          49,
          59,
          67,
          67
        ]
      },
      {
        "input": [
          6,
          7,
          3
        ],
        "output": [
          6,
          13,
          16
        ]
      }
    ]
  },
  {
    "id": "c172",
    "difficulty": 68,
    "function": "def c172(x):\n    # cumulative product\n    res = []\n    p = 1\n    for i in x:\n        p *= i\n        res.append(p)\n    return res\n\n",
    "data": {
      "input": [
        0,
        2,
        3,
        8,
        1,
        8
      ],
      "output": [
        0,
        0,
        0,
        0,
        0,
        0
      ]
    },
    "demos": [
      {
        "input": [
          9,
          4,
          3,
          2
        ],
        "output": [
          9,
          36,
          108,
          216
        ]
      },
      {
        "input": [
          2,
          0,
          10,
          8,
          4,
          1
        ],
        "output": [
          2,
          0,
          0,
          0,
          0,
          0
        ]
      },
      {
        "input": [
          5,
          7,
          2,
          9,
          8
        ],
        "output": [
          5,
          35,
          70,
          630,
          5040
        ]
      }
    ]
  },
  {
    "id": "c062",
    "difficulty": 69,
    "function": "def c062(x):\n    # remove the last element\n    return x[:-1]\n\n",
    "data": {
      "input": [
        49,
        50,
        1
      ],
      "output": [
        49,
        50
      ]
    },
    "demos": [
      {
        "input": [
          52,
          70,
          78,
          30,
          11
        ],
        "output": [
          52,
          70,
          78,
          30
        ]
      },
      {
        "input": [
          78,
          32,
          80,
          25,
          67,
          55
        ],
        "output": [
          78,
          32,
          80,
          25,
          67
        ]
      },
      {
        "input": [
          23,
          7,
          78,
          34
        ],
        "output": [
          23,
          7,
          78
        ]
      }
    ]
  },
  {
    "id": "c096",
    "difficulty": 70,
    "function": "def c096(x):\n    # prepend 98 and append 37\n    return [98] + x + [37]\n\n",
    "data": {
      "input": [
        21,
        73,
        24,
        30,
        8
      ],
      "output": [
        98,
        21,
        73,
        24,
        30,
        8,
        37
      ]
    },
    "demos": [
      {
        "input": [
          41,
          89,
          98
        ],
        "output": [
          98,
          41,
          89,
          98,
          37
        ]
      },
      {
        "input": [
          14,
          42,
          10,
          20,
          37,
          98,
          99
        ],
        "output": [
          98,
          14,
          42,
          10,
          20,
          37,
          98,
          99,
          37
        ]
      },
      {
        "input": [
          86,
          85,
          29,
          46,
          18
        ],
        "output": [
          98,
          86,
          85,
          29,
          46,
          18,
          37
        ]
      }
    ]
  },
  {
    "id": "c081",
    "difficulty": 71,
    "function": "def c081(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        3,
        47,
        71,
        33,
        78,
        9
      ],
      "output": [
        71
      ]
    },
    "demos": [
      {
        "input": [
          48,
          45,
          81,
          34,
          87
        ],
        "output": [
          81
        ]
      },
      {
        "input": [
          63,
          10,
          69
        ],
        "output": [
          69
        ]
      },
      {
        "input": [
          77,
          36,
          71,
          90
        ],
        "output": [
          71
        ]
      }
    ]
  },
  {
    "id": "c109",
    "difficulty": 72,
    "function": "def c109(x):\n    # product of elements\n    p = 1\n    for i in x:\n        p *= i\n    return [p]\n\n",
    "data": {
      "input": [
        3,
        1,
        4,
        3
      ],
      "output": [
        36
      ]
    },
    "demos": [
      {
        "input": [
          0,
          3,
          2,
          2,
          2,
          9,
          10
        ],
        "output": [
          0
        ]
      },
      {
        "input": [
          6,
          10,
          2,
          3,
          6,
          2
        ],
        "output": [
          4320
        ]
      },
      {
        "input": [
          8,
          0,
          10,
          3
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c002",
    "difficulty": 73,
    "function": "def c002(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        97,
        59,
        44,
        53,
        12
      ],
      "output": [
        44
      ]
    },
    "demos": [
      {
        "input": [
          80,
          80,
          11,
          85,
          71
        ],
        "output": [
          11
        ]
      },
      {
        "input": [
          82,
          5,
          63,
          11,
          16
        ],
        "output": [
          63
        ]
      },
      {
        "input": [
          48,
          8,
          60
        ],
        "output": [
          60
        ]
      }
    ]
  },
  {
    "id": "c132",
    "difficulty": 74,
    "function": "def c132(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        37,
        26,
        37,
        70,
        43,
        12,
        7
      ],
      "output": [
        37,
        26,
        70,
        43,
        12,
        7
      ]
    },
    "demos": [
      {
        "input": [
          85,
          93,
          27,
          80,
          50,
          22,
          85
        ],
        "output": [
          85,
          93,
          80,
          50,
          22,
          85
        ]
      },
      {
        "input": [
          51,
          76,
          30,
          73,
          36,
          54
        ],
        "output": [
          51,
          76,
          73,
          36,
          54
        ]
      },
      {
        "input": [
          97,
          91,
          11,
          98
        ],
        "output": [
          97,
          91,
          98
        ]
      }
    ]
  },
  {
    "id": "c153",
    "difficulty": 75,
    "function": "def c153(x):\n    # each unique element followed by its number of occurrences\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    out = []\n    for k, v in res.items():\n        out.append(k)\n        out.append(v)\n    return out\n\n",
    "data": {
      "input": [
        88,
        52,
        36,
        23,
        49,
        36,
        52,
        23
      ],
      "output": [
        88,
        1,
        52,
        2,
        36,
        2,
        23,
        2,
        49,
        1
      ]
    },
    "demos": [
      {
        "input": [
          89,
          61,
          44,
          61
        ],
        "output": [
          89,
          1,
          61,
          2,
          44,
          1
        ]
      },
      {
        "input": [
          32,
          34,
          34,
          37,
          32,
          73,
          3,
          32
        ],
        "output": [
          32,
          3,
          34,
          2,
          37,
          1,
          73,
          1,
          3,
          1
        ]
      },
      {
        "input": [
          4,
          36,
          63,
          4,
          4,
          4
        ],
        "output": [
          4,
          4,
          36,
          1,
          63,
          1
        ]
      }
    ]
  },
  {
    "id": "c051",
    "difficulty": 76,
    "function": "def c051(x):\n    # prepend first element 4 times\n    return [x[0]] * 4 + x\n\n",
    "data": {
      "input": [
        15,
        27,
        40,
        81,
        70
      ],
      "output": [
        15,
        15,
        15,
        15,
        15,
        27,
        40,
        81,
        70
      ]
    },
    "demos": [
      {
        "input": [
          24,
          28,
          69,
          46,
          24,
          60
        ],
        "output": [
          24,
          24,
          24,
          24,
          24,
          28,
          69,
          46,
          24,
          60
        ]
      },
      {
        "input": [
          3,
          45,
          78
        ],
        "output": [
          3,
          3,
          3,
          3,
          3,
          45,
          78
        ]
      },
      {
        "input": [
          84,
          32,
          8,
          23,
          43,
          14,
          3
        ],
        "output": [
          84,
          84,
          84,
          84,
          84,
          32,
          8,
          23,
          43,
          14,
          3
        ]
      }
    ]
  },
  {
    "id": "c225",
    "difficulty": 77,
    "function": "def c225(x):\n    # remove first and last two elements\n    return x[2:-2]\n\n",
    "data": {
      "input": [
        8,
        68,
        86,
        46,
        64,
        73,
        36
      ],
      "output": [
        86,
        46,
        64
      ]
    },
    "demos": [
      {
        "input": [
          4,
          4,
          68,
          80,
          49,
          46
        ],
        "output": [
          68,
          80
        ]
      },
      {
        "input": [
          76,
          75,
          70,
          7,
          79,
          12,
          11,
          23
        ],
        "output": [
          70,
          7,
          79,
          12
        ]
      },
      {
        "input": [
          89,
          57,
          42,
          29,
          36,
          4,
          50,
          33
        ],
        "output": [
          42,
          29,
          36,
          4
        ]
      }
    ]
  },
  {
    "id": "c067",
    "difficulty": 78,
    "function": "def c067(x):\n    # swap the first and last element\n    x[0], x[-1] = x[-1], x[0]\n    return x\n\n",
    "data": {
      "input": [
        85,
        53,
        45,
        0
      ],
      "output": [
        0,
        53,
        45,
        85
      ]
    },
    "demos": [
      {
        "input": [
          20,
          37,
          59,
          72,
          45
        ],
        "output": [
          45,
          37,
          59,
          72,
          20
        ]
      },
      {
        "input": [
          87,
          63,
          61
        ],
        "output": [
          61,
          63,
          87
        ]
      },
      {
        "input": [
          77,
          29,
          21,
          88,
          87,
          67,
          47
        ],
        "output": [
          47,
          29,
          21,
          88,
          87,
          67,
          77
        ]
      }
    ]
  },
  {
    "id": "c112",
    "difficulty": 79,
    "function": "def c112(x):\n    # count from 1 to the last element\n    return list(range(1, x[-1]+1))\n\n",
    "data": {
      "input": [
        92,
        33,
        34,
        64,
        34,
        99,
        3
      ],
      "output": [
        1,
        2,
        3
      ]
    },
    "demos": [
      {
        "input": [
          12,
          59,
          96,
          45,
          58,
          85,
          10
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          16,
          57,
          26,
          14,
          33,
          13
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ]
      },
      {
        "input": [
          69,
          87,
          41,
          97,
          74,
          3
        ],
        "output": [
          1,
          2,
          3
        ]
      }
    ]
  },
  {
    "id": "c030",
    "difficulty": 80,
    "function": "def c030(x):\n    # remove the last 2 elements\n    return x[:-2]\n\n",
    "data": {
      "input": [
        54,
        60,
        21
      ],
      "output": [
        54
      ]
    },
    "demos": [
      {
        "input": [
          32,
          54,
          31,
          50
        ],
        "output": [
          32,
          54
        ]
      },
      {
        "input": [
          33,
          43,
          23,
          70,
          73,
          33,
          40
        ],
        "output": [
          33,
          43,
          23,
          70,
          73
        ]
      },
      {
        "input": [
          77,
          26,
          74,
          48,
          45,
          73
        ],
        "output": [
          77,
          26,
          74,
          48
        ]
      }
    ]
  },
  {
    "id": "c149",
    "difficulty": 81,
    "function": "def c149(x):\n    # replace each element, M with M * first element; remove the first element\n    return [i*x[0] for i in x[1:]]\n\n",
    "data": {
      "input": [
        18,
        16,
        18,
        18,
        20,
        10
      ],
      "output": [
        288,
        324,
        324,
        360,
        180
      ]
    },
    "demos": [
      {
        "input": [
          18,
          8,
          8
        ],
        "output": [
          144,
          144
        ]
      },
      {
        "input": [
          12,
          19,
          9
        ],
        "output": [
          228,
          108
        ]
      },
      {
        "input": [
          4,
          18,
          13,
          11,
          16
        ],
        "output": [
          72,
          52,
          44,
          64
        ]
      }
    ]
  },
  {
    "id": "c148",
    "difficulty": 82,
    "function": "def c148(x):\n    # count from 1 to each element\n    res = []\n    for i in x:\n        res += list(range(1, i+1))\n    return res\n\n",
    "data": {
      "input": [
        2,
        0,
        4,
        1,
        1,
        3
      ],
      "output": [
        1,
        2,
        1,
        2,
        3,
        4,
        1,
        1,
        1,
        2,
        3
      ]
    },
    "demos": [
      {
        "input": [
          2,
          1,
          2
        ],
        "output": [
          1,
          2,
          1,
          1,
          2
        ]
      },
      {
        "input": [
          3,
          1,
          3,
          5
        ],
        "output": [
          1,
          2,
          3,
          1,
          1,
          2,
          3,
          1,
          2,
          3,
          4,
          5
        ]
      },
      {
        "input": [
          0,
          5,
          4,
          2,
          2,
          2
        ],
        "output": [
          1,
          2,
          3,
          4,
          5,
          1,
          2,
          3,
          4,
          1,
          2,
          1,
          2,
          1,
          2
        ]
      }
    ]
  },
  {
    "id": "c017",
    "difficulty": 83,
    "function": "def c017(x):\n    # replace x[1] with 8\n    x[1] = 8\n    return x\n\n",
    "data": {
      "input": [
        24,
        68,
        66
      ],
      "output": [
        24,
        8,
        66
      ]
    },
    "demos": [
      {
        "input": [
          88,
          16,
          60
        ],
        "output": [
          88,
          8,
          60
        ]
      },
      {
        "input": [
          19,
          21,
          99,
          86,
          9,
          33
        ],
        "output": [
          19,
          8,
          99,
          86,
          9,
          33
        ]
      },
      {
        "input": [
          53,
          63,
          0,
          93,
          27,
          14
        ],
        "output": [
          53,
          8,
          0,
          93,
          27,
          14
        ]
      }
    ]
  },
  {
    "id": "c092",
    "difficulty": 84,
    "function": "def c092(x):\n    # concatenate 92, 63, 34, 18, 55\n    return x + [92, 63, 34, 18, 55]\n\n",
    "data": {
      "input": [
        6,
        96,
        6
      ],
      "output": [
        6,
        96,
        6,
        92,
        63,
        34,
        18,
        55
      ]
    },
    "demos": [
      {
        "input": [
          90,
          56,
          37,
          40,
          12,
          95
        ],
        "output": [
          90,
          56,
          37,
          40,
          12,
          95,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          83,
          1,
          90,
          62
        ],
        "output": [
          83,
          1,
          90,
          62,
          92,
          63,
          34,
          18,
          55
        ]
      },
      {
        "input": [
          64,
          80,
          42,
          37,
          90
        ],
        "output": [
          64,
          80,
          42,
          37,
          90,
          92,
          63,
          34,
          18,
          55
        ]
      }
    ]
  },
  {
    "id": "c077",
    "difficulty": 85,
    "function": "def c077(x):\n    # input length\n    return [len(x)]\n\n",
    "data": {
      "input": [
        29,
        0,
        21,
        77,
        60,
        37,
        43
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          92,
          19,
          41,
          76,
          70,
          35
        ],
        "output": [
          6
        ]
      },
      {
        "input": [
          98,
          82,
          21,
          95,
          64,
          16,
          76
        ],
        "output": [
          7
        ]
      },
      {
        "input": [
          59,
          14,
          3,
          21,
          73,
          78,
          65
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c248",
    "difficulty": 87,
    "function": "def c248(x):\n    # elements after the first 0\n    return x[x.index(0)+1:]\n\n",
    "data": {
      "input": [
        0,
        73,
        55,
        22,
        59,
        9
      ],
      "output": [
        73,
        55,
        22,
        59,
        9
      ]
    },
    "demos": [
      {
        "input": [
          63,
          0,
          53,
          49,
          37
        ],
        "output": [
          53,
          49,
          37
        ]
      },
      {
        "input": [
          20,
          89,
          0,
          53,
          73
        ],
        "output": [
          53,
          73
        ]
      },
      {
        "input": [
          0,
          95,
          3,
          22,
          50,
          70
        ],
        "output": [
          95,
          3,
          22,
          50,
          70
        ]
      }
    ]
  },
  {
    "id": "c199",
    "difficulty": 88,
    "function": "def c199(x):\n    # elements in ascending order, each preceded by its rank\n    res = []\n    for i, v in enumerate(sorted(x)):\n        res.append(i+1)\n        res.append(v)\n    return res\n\n",
    "data": {
      "input": [
        41,
        74,
        13,
        49,
        10,
        13,
        51
      ],
      "output": [
        1,
        10,
        2,
        13,
        3,
        13,
        4,
        41,
        5,
        49,
        6,
        51,
        7,
        74
      ]
    },
    "demos": [
      {
        "input": [
          27,
          14,
          8,
          85,
          23,
          60
        ],
        "output": [
          1,
          8,
          2,
          14,
          3,
          23,
          4,
          27,
          5,
          60,
          6,
          85
        ]
      },
      {
        "input": [
          91,
          77,
          62,
          83,
          5,
          96,
          98
        ],
        "output": [
          1,
          5,
          2,
          62,
          3,
          77,
          4,
          83,
          5,
          91,
          6,
          96,
          7,
          98
        ]
      },
      {
        "input": [
          84,
          99,
          35,
          55,
          85,
          46
        ],
        "output": [
          1,
          35,
          2,
          46,
          3,
          55,
          4,
          84,
          5,
          85,
          6,
          99
        ]
      }
    ]
  },
  {
    "id": "c007",
    "difficulty": 89,
    "function": "def c007(x):\n    # remove all but the first 2 elements\n    return x[:2]\n\n",
    "data": {
      "input": [
        10,
        5,
        69,
        85,
        21,
        0
      ],
      "output": [
        10,
        5
      ]
    },
    "demos": [
      {
        "input": [
          67,
          42,
          45,
          63,
          53,
          89
        ],
        "output": [
          67,
          42
        ]
      },
      {
        "input": [
          99,
          77,
          50
        ],
        "output": [
          99,
          77
        ]
      },
      {
        "input": [
          96,
          96,
          58
        ],
        "output": [
          96,
          96
        ]
      }
    ]
  },
  {
    "id": "c176",
    "difficulty": 90,
    "function": "def c176(x):\n    # sum of each consecutive pair of elements\n    return [x[i] + x[i+1] for i in range(0, len(x)-1)]\n\n",
    "data": {
      "input": [
        47,
        67,
        78,
        32,
        34,
        89
      ],
      "output": [
        114,
        145,
        110,
        66,
        123
      ]
    },
    "demos": [
      {
        "input": [
          61,
          70,
          18,
          31,
          90,
          66,
          60
        ],
        "output": [
          131,
          88,
          49,
          121,
          156,
          126
        ]
      },
      {
        "input": [
          31,
          17,
          60,
          15,
          42
        ],
        "output": [
          48,
          77,
          75,
          57
        ]
      },
      {
        "input": [
          53,
          21,
          70
        ],
        "output": [
          74,
          91
        ]
      }
    ]
  },
  {
    "id": "c066",
    "difficulty": 91,
    "function": "def c066(x):\n    # left rotate the list by 1\n    return x[1:] + x[:1]\n\n",
    "data": {
      "input": [
        13,
        34,
        56,
        6,
        23
      ],
      "output": [
        34,
        56,
        6,
        23,
        13
      ]
    },
    "demos": [
      {
        "input": [
          61,
          65,
          63,
          39,
          63,
          45
        ],
        "output": [
          65,
          63,
          39,
          63,
          45,
          61
        ]
      },
      {
        "input": [
          47,
          83,
          43
        ],
        "output": [
          83,
          43,
          47
        ]
      },
      {
        "input": [
          87,
          78,
          58,
          20,
          38,
          20
        ],
        "output": [
          78,
          58,
          20,
          38,
          20,
          87
        ]
      }
    ]
  },
  {
    "id": "c053",
    "difficulty": 92,
    "function": "def c053(x):\n    # replace x[1] with x[0]\n    x[1] = x[0]\n    return x\n\n",
    "data": {
      "input": [
        44,
        16,
        47,
        84,
        70
      ],
      "output": [
        44,
        44,
        47,
        84,
        70
      ]
    },
    "demos": [
      {
        "input": [
          65,
          96,
          6,
          56,
          96,
          54,
          53
        ],
        "output": [
          65,
          65,
          6,
          56,
          96,
          54,
          53
        ]
      },
      {
        "input": [
          4,
          31,
          8
        ],
        "output": [
          4,
          4,
          8
        ]
      },
      {
        "input": [
          6,
          71,
          80
        ],
        "output": [
          6,
          6,
          80
        ]
      }
    ]
  },
  {
    "id": "c047",
    "difficulty": 93,
    "function": "def c047(x):\n    # concatenate 9, 6, 3, 8, 5\n    return [9, 6, 3, 8, 5] + x\n\n",
    "data": {
      "input": [
        81,
        49,
        59,
        20,
        60,
        24,
        89
      ],
      "output": [
        9,
        6,
        3,
        8,
        5,
        81,
        49,
        59,
        20,
        60,
        24,
        89
      ]
    },
    "demos": [
      {
        "input": [
          27,
          30,
          72,
          58,
          8,
          7
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          27,
          30,
          72,
          58,
          8,
          7
        ]
      },
      {
        "input": [
          40,
          54,
          15,
          97,
          35,
          2,
          70
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          40,
          54,
          15,
          97,
          35,
          2,
          70
        ]
      },
      {
        "input": [
          42,
          71,
          14,
          96
        ],
        "output": [
          9,
          6,
          3,
          8,
          5,
          42,
          71,
          14,
          96
        ]
      }
    ]
  },
  {
    "id": "c064",
    "difficulty": 94,
    "function": "def c064(x):\n    # remove the first and last element\n    return x[1:-1]\n\n",
    "data": {
      "input": [
        48,
        15,
        83,
        54
      ],
      "output": [
        15,
        83
      ]
    },
    "demos": [
      {
        "input": [
          62,
          69,
          40
        ],
        "output": [
          69
        ]
      },
      {
        "input": [
          26,
          63,
          69,
          42
        ],
        "output": [
          63,
          69
        ]
      },
      {
        "input": [
          94,
          62,
          61
        ],
        "output": [
          62
        ]
      }
    ]
  },
  {
    "id": "c078",
    "difficulty": 95,
    "function": "def c078(x):\n    # maximum element\n    return [max(x)]\n\n",
    "data": {
      "input": [
        29,
        81,
        29,
        37,
        55,
        84
      ],
      "output": [
        84
      ]
    },
    "demos": [
      {
        "input": [
          63,
          46,
          34
        ],
        "output": [
          63
        ]
      },
      {
        "input": [
          88,
          94,
          69,
          75,
          98,
          4
        ],
        "output": [
          98
        ]
      },
      {
        "input": [
          71,
          43,
          47
        ],
        "output": [
          71
        ]
      }
    ]
  },
  {
    "id": "c119",
    "difficulty": 96,
    "function": "def c119(x):\n    # make the list begin and ends with 8\n    if x[0] != 8:\n        x = [8] + x\n    if x[-1] != 8:\n        x = x + [8]\n    return x\n\n",
    "data": {
      "input": [
        57,
        9,
        66,
        99,
        25
      ],
      "output": [
        8,
        57,
        9,
        66,
        99,
        25,
        8
      ]
    },
    "demos": [
      {
        "input": [
          92,
          33,
          47,
          84,
          77
        ],
        "output": [
          8,
          92,
          33,
          47,
          84,
          77,
          8
        ]
      },
      {
        "input": [
          65,
          50,
          20,
          54
        ],
        "output": [
          8,
          65,
          50,
          20,
          54,
          8
        ]
      },
      {
        "input": [
          57,
          81,
          14,
          22,
          15
        ],
        "output": [
          8,
          57,
          81,
          14,
          22,
          15,
          8
        ]
      }
    ]
  },
  {
    "id": "c135",
    "difficulty": 97,
    "function": "def c135(x):\n    # remove the first 7\n    x.remove(7)\n    return x\n\n",
    "data": {
      "input": [
        5,
        7,
        6,
        5,
        5,
        7
      ],
      "output": [
        5,
        6,
        5,
        5,
        7
      ]
    },
    "demos": [
      {
        "input": [
          3,
          7,
          5,
          2,
          7,
          7
        ],
        "output": [
          3,
          5,
          2,
          7,
          7
        ]
      },
      {
        "input": [
          1,
          8,
          6,
          3,
          7
        ],
        "output": [
          1,
          8,
          6,
          3
        ]
      },
      {
        "input": [
          8,
          1,
          5,
          5,
          7
        ],
        "output": [
          8,
          1,
          5,
          5
        ]
      }
    ]
  },
  {
    "id": "c198",
    "difficulty": 98,
    "function": "def c198(x):\n    # unique elements in descending order\n    res = set(x)\n    return sorted(res, reverse=True)\n\n",
    "data": {
      "input": [
        24,
        71,
        71,
        16
      ],
      "output": [
        71,
        24,
        16
      ]
    },
    "demos": [
      {
        "input": [
          83,
          10,
          44,
          10
        ],
        "output": [
          83,
          44,
          10
        ]
      },
      {
        "input": [
          28,
          27,
          28,
          28,
          53,
          73
        ],
        "output": [
          73,
          53,
          28,
          27
        ]
      },
      {
        "input": [
          31,
          84,
          59,
          12,
          65,
          65,
          61,
          9,
          59
        ],
        "output": [
          84,
          65,
          61,
          59,
          31,
          12,
          9
        ]
      }
    ]
  },
  {
    "id": "c219",
    "difficulty": 99,
    "function": "def c219(x):\n    # keep only every other element\n    return x[::2]\n\n",
    "data": {
      "input": [
        21,
        97,
        50,
        18,
        28,
        44
      ],
      "output": [
        21,
        50,
        28
      ]
    },
    "demos": [
      {
        "input": [
          40,
          43,
          71,
          63
        ],
        "output": [
          40,
          71
        ]
      },
      {
        "input": [
          22,
          99,
          67,
          34,
          82,
          3,
          13,
          65
        ],
        "output": [
          22,
          67,
          82,
          13
        ]
      },
      {
        "input": [
          77,
          73,
          32,
          75,
          25,
          67
        ],
        "output": [
          77,
          32,
          25
        ]
      }
    ]
  },
  {
    "id": "c075",
    "difficulty": 100,
    "function": "def c075(x):\n    # remove even index\n    return x[1::2]\n\n",
    "data": {
      "input": [
        0,
        84,
        80,
        46,
        87,
        94,
        77,
        82
      ],
      "output": [
        84,
        46,
        94,
        82
      ]
    },
    "demos": [
      {
        "input": [
          34,
          57,
          38,
          47
        ],
        "output": [
          57,
          47
        ]
      },
      {
        "input": [
          39,
          32,
          68,
          0,
          33,
          75
        ],
        "output": [
          32,
          0,
          75
        ]
      },
      {
        "input": [
          86,
          73,
          39,
          3,
          78,
          18,
          6,
          26,
          36
        ],
        "output": [
          73,
          3,
          18,
          26
        ]
      }
    ]
  },
  {
    "id": "c177",
    "difficulty": 101,
    "function": "def c177(x):\n    # interleave the input and the reversed input\n    return [i for pair in zip(x, x[::-1]) for i in pair]\n\n",
    "data": {
      "input": [
        52,
        23,
        42,
        65,
        99,
        15
      ],
      "output": [
        52,
        15,
        23,
        99,
        42,
        65,
        65,
        42,
        99,
        23,
        15,
        52
      ]
    },
    "demos": [
      {
        "input": [
          86,
          74,
          2,
          75,
          74
        ],
        "output": [
          86,
          74,
          74,
          75,
          2,
          2,
          75,
          74,
          74,
          86
        ]
      },
      {
        "input": [
          92,
          4,
          96,
          42,
          61
        ],
        "output": [
          92,
          61,
          4,
          42,
          96,
          96,
          42,
          4,
          61,
          92
        ]
      },
      {
        "input": [
          45,
          92,
          75,
          46,
          7,
          95,
          32
        ],
        "output": [
          45,
          32,
          92,
          95,
          75,
          7,
          46,
          46,
          7,
          75,
          95,
          92,
          32,
          45
        ]
      }
    ]
  },
  {
    "id": "c025",
    "difficulty": 102,
    "function": "def c025(x):\n    # remove element 1\n    return x[:1] + x[2:]\n\n",
    "data": {
      "input": [
        61,
        54,
        89,
        43,
        25,
        8
      ],
      "output": [
        61,
        89,
        43,
        25,
        8
      ]
    },
    "demos": [
      {
        "input": [
          35,
          48,
          45,
          10
        ],
        "output": [
          35,
          45,
          10
        ]
      },
      {
        "input": [
          1,
          38,
          42,
          3,
          56,
          46,
          42
        ],
        "output": [
          1,
          42,
          3,
          56,
          46,
          42
        ]
      },
      {
        "input": [
          21,
          97,
          11,
          34,
          36,
          85
        ],
        "output": [
          21,
          11,
          34,
          36,
          85
        ]
      }
    ]
  },
  {
    "id": "c125",
    "difficulty": 103,
    "function": "def c125(x):\n    # keep only elements whose tens digit equals the tens digit of the first element\n    return [i for i in x if len(str(i)) > 1 and str(i)[-2] == str(x[0])[-2]]\n\n",
    "data": {
      "input": [
        31,
        31,
        12,
        17,
        78,
        63,
        37
      ],
      "output": [
        31,
        31,
        37
      ]
    },
    "demos": [
      {
        "input": [
          80,
          4,
          19,
          85,
          11,
          85,
          92,
          67,
          88
        ],
        "output": [
          80,
          85,
          85,
          88
        ]
      },
      {
        "input": [
          96,
          102,
          104,
          1,
          105,
          78,
          97,
          39
        ],
        "output": [
          96,
          97
        ]
      },
      {
        "input": [
          25,
          27,
          47,
          84,
          26,
          29,
          47,
          1
        ],
        "output": [
          25,
          27,
          26,
          29
        ]
      }
    ]
  },
  {
    "id": "c087",
    "difficulty": 105,
    "function": "def c087(x):\n    # swap second and third element\n    x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        69,
        22,
        54,
        38
      ],
      "output": [
        69,
        54,
        22,
        38
      ]
    },
    "demos": [
      {
        "input": [
          37,
          44,
          19,
          71
        ],
        "output": [
          37,
          19,
          44,
          71
        ]
      },
      {
        "input": [
          99,
          15,
          25,
          25,
          29,
          94
        ],
        "output": [
          99,
          25,
          15,
          25,
          29,
          94
        ]
      },
      {
        "input": [
          65,
          79,
          23
        ],
        "output": [
          65,
          23,
          79
        ]
      }
    ]
  },
  {
    "id": "c013",
    "difficulty": 106,
    "function": "def c013(x):\n    # element 2 through 6\n    return x[2:6]\n\n",
    "data": {
      "input": [
        28,
        3,
        29,
        8,
        9,
        71,
        31,
        67
      ],
      "output": [
        29,
        8,
        9,
        71
      ]
    },
    "demos": [
      {
        "input": [
          68,
          65,
          99,
          84,
          99,
          61
        ],
        "output": [
          99,
          84,
          99,
          61
        ]
      },
      {
        "input": [
          65,
          93,
          15,
          18,
          25,
          39,
          5,
          92
        ],
        "output": [
          15,
          18,
          25,
          39
        ]
      },
      {
        "input": [
          83,
          26,
          43,
          97,
          86,
          91,
          25,
          74,
          47
        ],
        "output": [
          43,
          97,
          86,
          91
        ]
      }
    ]
  },
  {
    "id": "c069",
    "difficulty": 107,
    "function": "def c069(x):\n    # 9,3,4,0, input, 7,2,9,1\n    return [9,3,4,0] + x + [7,2,9,1]\n\n",
    "data": {
      "input": [
        0,
        84,
        63,
        52
      ],
      "output": [
        9,
        3,
        4,
        0,
        0,
        84,
        63,
        52,
        7,
        2,
        9,
        1
      ]
    },
    "demos": [
      {
        "input": [
          12,
          42,
          69,
          41,
          42
        ],
        "output": [
          9,
          3,
          4,
          0,
          12,
          42,
          69,
          41,
          42,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          64,
          12,
          98
        ],
        "output": [
          9,
          3,
          4,
          0,
          64,
          12,
          98,
          7,
          2,
          9,
          1
        ]
      },
      {
        "input": [
          15,
          44,
          85,
          54,
          12,
          80
        ],
        "output": [
          9,
          3,
          4,
          0,
          15,
          44,
          85,
          54,
          12,
          80,
          7,
          2,
          9,
          1
        ]
      }
    ]
  },
  {
    "id": "c117",
    "difficulty": 108,
    "function": "def c117(x):\n    # left rotate by 3\n    return x[3:] + x[:3]\n\n",
    "data": {
      "input": [
        42,
        8,
        94,
        13,
        40
      ],
      "output": [
        13,
        40,
        42,
        8,
        94
      ]
    },
    "demos": [
      {
        "input": [
          95,
          45,
          70,
          19
        ],
        "output": [
          19,
          95,
          45,
          70
        ]
      },
      {
        "input": [
          83,
          52,
          86,
          34
        ],
        "output": [
          34,
          83,
          52,
          86
        ]
      },
      {
        "input": [
          53,
          53,
          93,
          40,
          23
        ],
        "output": [
          40,
          23,
          53,
          53,
          93
        ]
      }
    ]
  },
  {
    "id": "c228",
    "difficulty": 109,
    "function": "def c228(x):\n    # replace each element with the number of occurrences of that element so far\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        49,
        68,
        92,
        22,
        93,
        65,
        93,
        34,
        80
      ],
      "output": [
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          81,
          81,
          81,
          24,
          13
        ],
        "output": [
          1,
          2,
          3,
          1,
          1
        ]
      },
      {
        "input": [
          6,
          6,
          42,
          62,
          23,
          9,
          77,
          6
        ],
        "output": [
          1,
          2,
          1,
          1,
          1,
          1,
          1,
          3
        ]
      },
      {
        "input": [
          92,
          92,
          69,
          54,
          98,
          92
        ],
        "output": [
          1,
          2,
          1,
          1,
          1,
          3
        ]
      }
    ]
  },
  {
    "id": "c197",
    "difficulty": 110,
    "function": "def c197(x):\n    # replace each element with the number of occurrences of that element\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in x:\n        out.append(res[i])\n    return out\n\n",
    "data": {
      "input": [
        40,
        60,
        60,
        84,
        67,
        40
      ],
      "output": [
        2,
        2,
        2,
        1,
        1,
        2
      ]
    },
    "demos": [
      {
        "input": [
          71,
          80,
          68,
          50,
          50,
          69,
          47,
          61
        ],
        "output": [
          1,
          1,
          1,
          2,
          2,
          1,
          1,
          1
        ]
      },
      {
        "input": [
          60,
          25,
          3,
          62,
          39,
          60,
          39
        ],
        "output": [
          2,
          1,
          1,
          1,
          2,
          2,
          2
        ]
      },
      {
        "input": [
          79,
          43,
          79,
          37,
          79,
          54
        ],
        "output": [
          3,
          1,
          3,
          1,
          3,
          1
        ]
      }
    ]
  },
  {
    "id": "c065",
    "difficulty": 111,
    "function": "def c065(x):\n    # prepend 9 and append 7\n    return [9] + x + [7]\n\n",
    "data": {
      "input": [
        75,
        13,
        86,
        19
      ],
      "output": [
        9,
        75,
        13,
        86,
        19,
        7
      ]
    },
    "demos": [
      {
        "input": [
          76,
          44,
          18,
          36,
          4,
          26,
          19
        ],
        "output": [
          9,
          76,
          44,
          18,
          36,
          4,
          26,
          19,
          7
        ]
      },
      {
        "input": [
          80,
          93,
          5,
          54,
          83,
          89
        ],
        "output": [
          9,
          80,
          93,
          5,
          54,
          83,
          89,
          7
        ]
      },
      {
        "input": [
          10,
          53,
          34,
          77
        ],
        "output": [
          9,
          10,
          53,
          34,
          77,
          7
        ]
      }
    ]
  },
  {
    "id": "c156",
    "difficulty": 112,
    "function": "def c156(x):\n    # reverse the input and add each element to its new index\n    x = x[::-1]\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        80,
        61,
        21,
        56
      ],
      "output": [
        56,
        22,
        63,
        83
      ]
    },
    "demos": [
      {
        "input": [
          66,
          10,
          94,
          92,
          73,
          10
        ],
        "output": [
          10,
          74,
          94,
          97,
          14,
          71
        ]
      },
      {
        "input": [
          71,
          32,
          99,
          42
        ],
        "output": [
          42,
          100,
          34,
          74
        ]
      },
      {
        "input": [
          72,
          80,
          14,
          76,
          76,
          33
        ],
        "output": [
          33,
          77,
          78,
          17,
          84,
          77
        ]
      }
    ]
  },
  {
    "id": "c110",
    "difficulty": 113,
    "function": "def c110(x):\n    # three largest elements in descending order\n    return sorted(x, reverse=True)[:3]\n\n",
    "data": {
      "input": [
        9,
        64,
        2,
        91
      ],
      "output": [
        91,
        64,
        9
      ]
    },
    "demos": [
      {
        "input": [
          94,
          29,
          52
        ],
        "output": [
          94,
          52,
          29
        ]
      },
      {
        "input": [
          99,
          12,
          23,
          69,
          85,
          47,
          99
        ],
        "output": [
          99,
          99,
          85
        ]
      },
      {
        "input": [
          4,
          56,
          86,
          47,
          29,
          43,
          45
        ],
        "output": [
          86,
          56,
          47
        ]
      }
    ]
  },
  {
    "id": "c233",
    "difficulty": 114,
    "function": "def c233(x):\n    # number of occurrences of each unique element, in order of appearance\n    numbers = []\n    res = []\n    for i in x:\n        if i not in numbers:\n            numbers.append(i)\n            res.append(x.count(i))\n    return res\n\n",
    "data": {
      "input": [
        3,
        6,
        4,
        8,
        3,
        6
      ],
      "output": [
        2,
        2,
        1,
        1
      ]
    },
    "demos": [
      {
        "input": [
          10,
          4,
          10,
          4,
          8,
          4,
          2
        ],
        "output": [
          2,
          3,
          1,
          1
        ]
      },
      {
        "input": [
          7,
          6,
          8,
          2,
          8
        ],
        "output": [
          1,
          1,
          2,
          1
        ]
      },
      {
        "input": [
          7,
          9,
          3,
          8,
          3,
          3,
          0,
          9,
          6
        ],
        "output": [
          1,
          2,
          3,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c003",
    "difficulty": 115,
    "function": "def c003(x):\n    # remove all but seventh element\n    return [x[6]]\n\n",
    "data": {
      "input": [
        94,
        58,
        46,
        63,
        73,
        66,
        83,
        60
      ],
      "output": [
        83
      ]
    },
    "demos": [
      {
        "input": [
          51,
          68,
          51,
          97,
          88,
          47,
          88,
          38,
          97,
          57
        ],
        "output": [
          88
        ]
      },
      {
        "input": [
          35,
          65,
          26,
          21,
          94,
          38,
          57,
          41,
          84,
          67
        ],
        "output": [
          57
        ]
      },
      {
        "input": [
          58,
          52,
          38,
          19,
          11,
          26,
          12,
          61
        ],
        "output": [
          12
        ]
      }
    ]
  },
  {
    "id": "c230",
    "difficulty": 116,
    "function": "def c230(x):\n    # count by 2 from the smallest element to the largest element\n    return list(range(min(x), max(x)+1, 2))\n\n",
    "data": {
      "input": [
        69,
        88,
        71
      ],
      "output": [
        69,
        71,
        73,
        75,
        77,
        79,
        81,
        83,
        85,
        87
      ]
    },
    "demos": [
      {
        "input": [
          43,
          42,
          30
        ],
        "output": [
          30,
          32,
          34,
          36,
          38,
          40,
          42
        ]
      },
      {
        "input": [
          79,
          84,
          73
        ],
        "output": [
          73,
          75,
          77,
          79,
          81,
          83
        ]
      },
      {
        "input": [
          61,
          61,
          77
        ],
        "output": [
          61,
          63,
          65,
          67,
          69,
          71,
          73,
          75,
          77
        ]
      }
    ]
  },
  {
    "id": "c122",
    "difficulty": 117,
    "function": "def c122(x):\n    # remove all but penultimate element\n    return [x[-2]]\n\n",
    "data": {
      "input": [
        61,
        61,
        37,
        71,
        17,
        16,
        61
      ],
      "output": [
        16
      ]
    },
    "demos": [
      {
        "input": [
          7,
          44,
          41,
          69,
          51,
          80
        ],
        "output": [
          51
        ]
      },
      {
        "input": [
          37,
          15,
          60,
          70,
          41,
          56,
          2
        ],
        "output": [
          56
        ]
      },
      {
        "input": [
          91,
          25,
          31,
          61,
          61,
          94,
          89
        ],
        "output": [
          94
        ]
      }
    ]
  },
  {
    "id": "c020",
    "difficulty": 118,
    "function": "def c020(x):\n    # replace the first element with the last element\n    x[0] = x[-1]\n    return x\n\n",
    "data": {
      "input": [
        81,
        43,
        72,
        58,
        32,
        13,
        56
      ],
      "output": [
        56,
        43,
        72,
        58,
        32,
        13,
        56
      ]
    },
    "demos": [
      {
        "input": [
          73,
          0,
          22,
          78,
          93,
          35
        ],
        "output": [
          35,
          0,
          22,
          78,
          93,
          35
        ]
      },
      {
        "input": [
          5,
          64,
          38,
          7,
          96,
          70
        ],
        "output": [
          70,
          64,
          38,
          7,
          96,
          70
        ]
      },
      {
        "input": [
          87,
          67,
          49,
          62
        ],
        "output": [
          62,
          67,
          49,
          62
        ]
      }
    ]
  },
  {
    "id": "c235",
    "difficulty": 119,
    "function": "def c235(x):\n    # count up and down between elements\n    res = []\n    for i in range(len(x)-1):\n        if x[i] < x[i+1]:\n            res += list(range(x[i], x[i+1]+1))\n        else:\n            res += list(range(x[i], x[i+1]-1, -1))\n    return res\n\n",
    "data": {
      "input": [
        66,
        65,
        66
      ],
      "output": [
        66,
        65,
        65,
        66
      ]
    },
    "demos": [
      {
        "input": [
          32,
          35,
          34
        ],
        "output": [
          32,
          33,
          34,
          35,
          35,
          34
        ]
      },
      {
        "input": [
          65,
          67,
          70
        ],
        "output": [
          65,
          66,
          67,
          67,
          68,
          69,
          70
        ]
      },
      {
        "input": [
          9,
          13,
          14
        ],
        "output": [
          9,
          10,
          11,
          12,
          13,
          13,
          14
        ]
      }
    ]
  },
  {
    "id": "c157",
    "difficulty": 120,
    "function": "def c157(x):\n    # each element followed by 0 if even, 1 if odd\n    res = []\n    for i in x:\n        res.append(i)\n        res.append(i % 2)\n    return res\n\n",
    "data": {
      "input": [
        4,
        11,
        92
      ],
      "output": [
        4,
        0,
        11,
        1,
        92,
        0
      ]
    },
    "demos": [
      {
        "input": [
          53,
          29,
          72,
          84,
          67
        ],
        "output": [
          53,
          1,
          29,
          1,
          72,
          0,
          84,
          0,
          67,
          1
        ]
      },
      {
        "input": [
          78,
          4,
          43,
          45,
          36,
          7
        ],
        "output": [
          78,
          0,
          4,
          0,
          43,
          1,
          45,
          1,
          36,
          0,
          7,
          1
        ]
      },
      {
        "input": [
          60,
          9,
          51,
          96,
          59,
          29,
          45
        ],
        "output": [
          60,
          0,
          9,
          1,
          51,
          1,
          96,
          0,
          59,
          1,
          29,
          1,
          45,
          1
        ]
      }
    ]
  },
  {
    "id": "c185",
    "difficulty": 121,
    "function": "def c185(x):\n    # replace the sublist between the first and last with its sum\n    return x[:1] + [sum(x[1:-1])] + x[-1:]\n\n",
    "data": {
      "input": [
        7,
        1,
        19,
        20
      ],
      "output": [
        7,
        20,
        20
      ]
    },
    "demos": [
      {
        "input": [
          10,
          0,
          17,
          17,
          16,
          13
        ],
        "output": [
          10,
          50,
          13
        ]
      },
      {
        "input": [
          5,
          17,
          12,
          7,
          20,
          11
        ],
        "output": [
          5,
          56,
          11
        ]
      },
      {
        "input": [
          3,
          0,
          3,
          12
        ],
        "output": [
          3,
          3,
          12
        ]
      }
    ]
  },
  {
    "id": "c213",
    "difficulty": 122,
    "function": "def c213(x):\n    # three smallest elements in ascending order\n    return sorted(x)[:3]\n\n",
    "data": {
      "input": [
        4,
        15,
        14,
        65
      ],
      "output": [
        4,
        14,
        15
      ]
    },
    "demos": [
      {
        "input": [
          22,
          48,
          28,
          80,
          93,
          70
        ],
        "output": [
          22,
          28,
          48
        ]
      },
      {
        "input": [
          64,
          89,
          25,
          66,
          95,
          52
        ],
        "output": [
          25,
          52,
          64
        ]
      },
      {
        "input": [
          59,
          42,
          44,
          74
        ],
        "output": [
          42,
          44,
          59
        ]
      }
    ]
  },
  {
    "id": "c184",
    "difficulty": 123,
    "function": "def c184(x):\n    # keep only odd elements with an even index\n    return [i for i in x if i % 2 == 1 and x.index(i) % 2 == 0]\n\n",
    "data": {
      "input": [
        55,
        15,
        17,
        79,
        47,
        75,
        40
      ],
      "output": [
        55,
        17,
        47
      ]
    },
    "demos": [
      {
        "input": [
          56,
          81,
          80,
          35,
          68,
          82,
          77,
          49
        ],
        "output": [
          77
        ]
      },
      {
        "input": [
          99,
          40,
          5,
          66,
          72,
          57,
          53,
          71
        ],
        "output": [
          99,
          5,
          53
        ]
      },
      {
        "input": [
          3,
          55,
          61,
          83,
          80,
          27,
          18
        ],
        "output": [
          3,
          61
        ]
      }
    ]
  },
  {
    "id": "c155",
    "difficulty": 124,
    "function": "def c155(x):\n    # multiply each element by its index\n    return [i*j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        79,
        51,
        36,
        80
      ],
      "output": [
        0,
        51,
        72,
        240
      ]
    },
    "demos": [
      {
        "input": [
          11,
          70,
          19,
          18
        ],
        "output": [
          0,
          70,
          38,
          54
        ]
      },
      {
        "input": [
          78,
          69,
          68
        ],
        "output": [
          0,
          69,
          136
        ]
      },
      {
        "input": [
          19,
          28,
          84,
          6
        ],
        "output": [
          0,
          28,
          168,
          18
        ]
      }
    ]
  },
  {
    "id": "c082",
    "difficulty": 125,
    "function": "def c082(x):\n    # remove all but element 2\n    return [x[2]]\n\n",
    "data": {
      "input": [
        69,
        50,
        42,
        96
      ],
      "output": [
        42
      ]
    },
    "demos": [
      {
        "input": [
          27,
          78,
          8
        ],
        "output": [
          8
        ]
      },
      {
        "input": [
          22,
          59,
          15
        ],
        "output": [
          15
        ]
      },
      {
        "input": [
          12,
          96,
          54,
          92,
          3,
          47,
          16
        ],
        "output": [
          54
        ]
      }
    ]
  },
  {
    "id": "c231",
    "difficulty": 126,
    "function": "def c231(x):\n    # the number of occurrences of each unique element in ascending order\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    return sorted(res.values())\n\n",
    "data": {
      "input": [
        6,
        5,
        7,
        9,
        8,
        5,
        6,
        7,
        3,
        5
      ],
      "output": [
        1,
        1,
        1,
        2,
        2,
        3
      ]
    },
    "demos": [
      {
        "input": [
          9,
          1,
          10,
          9,
          10,
          10,
          10,
          8,
          10
        ],
        "output": [
          1,
          1,
          2,
          5
        ]
      },
      {
        "input": [
          9,
          5,
          9,
          4,
          5,
          1,
          5,
          5,
          4,
          5,
          5
        ],
        "output": [
          1,
          2,
          2,
          6
        ]
      },
      {
        "input": [
          5,
          7,
          4,
          10,
          4,
          5,
          5,
          6,
          7
        ],
        "output": [
          1,
          1,
          2,
          2,
          3
        ]
      }
    ]
  },
  {
    "id": "c099",
    "difficulty": 127,
    "function": "def c099(x):\n    # remove the lower half of the list\n    median = sorted(x)[len(x)//2]\n    return [i for i in x if i >= median]\n\n",
    "data": {
      "input": [
        11,
        10,
        54,
        45,
        85,
        46,
        7
      ],
      "output": [
        54,
        45,
        85,
        46
      ]
    },
    "demos": [
      {
        "input": [
          22,
          91,
          39,
          76,
          25,
          54
        ],
        "output": [
          91,
          76,
          54
        ]
      },
      {
        "input": [
          93,
          36,
          68,
          88,
          54,
          21
        ],
        "output": [
          93,
          68,
          88
        ]
      },
      {
        "input": [
          67,
          53,
          38,
          24,
          77,
          38
        ],
        "output": [
          67,
          53,
          77
        ]
      }
    ]
  },
  {
    "id": "c247",
    "difficulty": 128,
    "function": "def c247(x):\n    # elements before the first 0\n    return x[:x.index(0)]\n\n",
    "data": {
      "input": [
        27,
        19,
        74,
        17,
        0,
        0,
        42
      ],
      "output": [
        27,
        19,
        74,
        17
      ]
    },
    "demos": [
      {
        "input": [
          68,
          90,
          94,
          0,
          6,
          0,
          93
        ],
        "output": [
          68,
          90,
          94
        ]
      },
      {
        "input": [
          59,
          11,
          0,
          0,
          39,
          0,
          27
        ],
        "output": [
          59,
          11
        ]
      },
      {
        "input": [
          59,
          0,
          41,
          0,
          66,
          81,
          66
        ],
        "output": [
          59
        ]
      }
    ]
  },
  {
    "id": "c008",
    "difficulty": 129,
    "function": "def c008(x):\n    # the first 5 elements\n    return x[:5]\n\n",
    "data": {
      "input": [
        39,
        41,
        52,
        44,
        62,
        7,
        10,
        85
      ],
      "output": [
        39,
        41,
        52,
        44,
        62
      ]
    },
    "demos": [
      {
        "input": [
          14,
          29,
          76,
          13,
          61
        ],
        "output": [
          14,
          29,
          76,
          13,
          61
        ]
      },
      {
        "input": [
          79,
          55,
          76,
          90,
          63,
          89,
          72,
          59
        ],
        "output": [
          79,
          55,
          76,
          90,
          63
        ]
      },
      {
        "input": [
          10,
          34,
          16,
          4,
          78
        ],
        "output": [
          10,
          34,
          16,
          4,
          78
        ]
      }
    ]
  },
  {
    "id": "c055",
    "difficulty": 130,
    "function": "def c055(x):\n    # swap x[0], x[2] and x[1], x[3]\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        48,
        72,
        31,
        25,
        55
      ],
      "output": [
        31,
        25,
        48,
        72,
        55
      ]
    },
    "demos": [
      {
        "input": [
          71,
          53,
          10,
          37,
          33,
          75,
          98
        ],
        "output": [
          10,
          37,
          71,
          53,
          33,
          75,
          98
        ]
      },
      {
        "input": [
          57,
          36,
          59,
          85
        ],
        "output": [
          59,
          85,
          57,
          36
        ]
      },
      {
        "input": [
          94,
          3,
          94,
          55
        ],
        "output": [
          94,
          55,
          94,
          3
        ]
      }
    ]
  },
  {
    "id": "c029",
    "difficulty": 131,
    "function": "def c029(x):\n    # remove the first 2 elements\n    return x[2:]\n\n",
    "data": {
      "input": [
        29,
        69,
        93,
        52,
        65,
        74
      ],
      "output": [
        93,
        52,
        65,
        74
      ]
    },
    "demos": [
      {
        "input": [
          57,
          35,
          32,
          31,
          50
        ],
        "output": [
          32,
          31,
          50
        ]
      },
      {
        "input": [
          49,
          79,
          45,
          30,
          4,
          14
        ],
        "output": [
          45,
          30,
          4,
          14
        ]
      },
      {
        "input": [
          17,
          9,
          23,
          42
        ],
        "output": [
          23,
          42
        ]
      }
    ]
  },
  {
    "id": "c168",
    "difficulty": 132,
    "function": "def c168(x):\n    # count from 1 to 10, skipping the length of the input\n    return [i for i in range(1, 11) if i != len(x)]\n\n",
    "data": {
      "input": [
        89,
        58,
        25,
        49,
        5
      ],
      "output": [
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10
      ]
    },
    "demos": [
      {
        "input": [
          40,
          76,
          24,
          64
        ],
        "output": [
          1,
          2,
          3,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          79,
          44,
          78
        ],
        "output": [
          1,
          2,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ]
      },
      {
        "input": [
          64,
          30,
          15,
          8,
          79
        ],
        "output": [
          1,
          2,
          3,
          4,
          6,
          7,
          8,
          9,
          10
        ]
      }
    ]
  },
  {
    "id": "c009",
    "difficulty": 133,
    "function": "def c009(x):\n    # remove all but the first 3 elements\n    return x[:3]\n\n",
    "data": {
      "input": [
        18,
        32,
        64,
        76,
        95
      ],
      "output": [
        18,
        32,
        64
      ]
    },
    "demos": [
      {
        "input": [
          23,
          37,
          21,
          57,
          19
        ],
        "output": [
          23,
          37,
          21
        ]
      },
      {
        "input": [
          26,
          88,
          79,
          5
        ],
        "output": [
          26,
          88,
          79
        ]
      },
      {
        "input": [
          18,
          44,
          53,
          17
        ],
        "output": [
          18,
          44,
          53
        ]
      }
    ]
  },
  {
    "id": "c133",
    "difficulty": 134,
    "function": "def c133(x):\n    # remove elements 1 through 4\n    return x[:1] + x[5:]\n\n",
    "data": {
      "input": [
        2,
        71,
        94,
        62,
        16,
        52,
        16
      ],
      "output": [
        2,
        52,
        16
      ]
    },
    "demos": [
      {
        "input": [
          40,
          2,
          9,
          20,
          49,
          65,
          83,
          67
        ],
        "output": [
          40,
          65,
          83,
          67
        ]
      },
      {
        "input": [
          68,
          27,
          60,
          70,
          31,
          97
        ],
        "output": [
          68,
          97
        ]
      },
      {
        "input": [
          36,
          64,
          70,
          89,
          58
        ],
        "output": [
          36
        ]
      }
    ]
  },
  {
    "id": "c146",
    "difficulty": 135,
    "function": "def c146(x):\n    # absolute difference between each consecutive pair of elements\n    return [abs(x[i] - x[i+1]) for i in range(len(x)-1)]\n\n",
    "data": {
      "input": [
        12,
        50,
        92,
        94,
        72,
        10,
        63,
        12,
        48
      ],
      "output": [
        38,
        42,
        2,
        22,
        62,
        53,
        51,
        36
      ]
    },
    "demos": [
      {
        "input": [
          1,
          43,
          40,
          53,
          87,
          74,
          63
        ],
        "output": [
          42,
          3,
          13,
          34,
          13,
          11
        ]
      },
      {
        "input": [
          99,
          57,
          9,
          75,
          26,
          25,
          69,
          34,
          63
        ],
        "output": [
          42,
          48,
          66,
          49,
          1,
          44,
          35,
          29
        ]
      },
      {
        "input": [
          64,
          41,
          72,
          43,
          84,
          36,
          51
        ],
        "output": [
          23,
          31,
          29,
          41,
          48,
          15
        ]
      }
    ]
  },
  {
    "id": "c004",
    "difficulty": 136,
    "function": "def c004(x):\n    # remove all but element 3\n    return [x[2]]\n\n",
    "data": {
      "input": [
        29,
        0,
        29
      ],
      "output": [
        29
      ]
    },
    "demos": [
      {
        "input": [
          3,
          56,
          82,
          27,
          52,
          90
        ],
        "output": [
          82
        ]
      },
      {
        "input": [
          0,
          71,
          93,
          7,
          59,
          66,
          40
        ],
        "output": [
          93
        ]
      },
      {
        "input": [
          39,
          68,
          99,
          7,
          21,
          54,
          5
        ],
        "output": [
          99
        ]
      }
    ]
  },
  {
    "id": "c240",
    "difficulty": 137,
    "function": "def c240(x):\n    # number of elements equal to the input length\n    return [x.count(len(x))]\n\n",
    "data": {
      "input": [
        8,
        11,
        86,
        87,
        21,
        47,
        8,
        8
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          27,
          4,
          31,
          9
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          13,
          6,
          6,
          90,
          35,
          94
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          8,
          80,
          8,
          20,
          8,
          39,
          33,
          8
        ],
        "output": [
          4
        ]
      }
    ]
  },
  {
    "id": "c239",
    "difficulty": 138,
    "function": "def c239(x):\n    # number of repetitions in the input\n    res = {}\n    out = 0\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out += 1\n    return [out]\n\n",
    "data": {
      "input": [
        7,
        6,
        4,
        6,
        0,
        4,
        7,
        4
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          7,
          10,
          5,
          10,
          9,
          10,
          9,
          2,
          9,
          10
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          5,
          5,
          4,
          5,
          5,
          5
        ],
        "output": [
          1
        ]
      },
      {
        "input": [
          3,
          1,
          3,
          0,
          5,
          10,
          10,
          3,
          5
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c246",
    "difficulty": 139,
    "function": "def c246(x):\n    # number of unique elements\n    return [len(set(x))]\n\n",
    "data": {
      "input": [
        26,
        94,
        80,
        26,
        6,
        94,
        6
      ],
      "output": [
        4
      ]
    },
    "demos": [
      {
        "input": [
          24,
          46,
          68,
          24,
          24,
          68,
          89,
          24,
          29,
          24
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          54,
          1,
          54,
          13,
          1,
          60
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          47,
          26,
          94,
          55,
          59,
          94,
          81,
          55,
          59,
          8
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c138",
    "difficulty": 140,
    "function": "def c138(x):\n    # remove all occurrences of the first element\n    return [i for i in x if i != x[0]]\n\n",
    "data": {
      "input": [
        55,
        90,
        81,
        59
      ],
      "output": [
        90,
        81,
        59
      ]
    },
    "demos": [
      {
        "input": [
          46,
          58,
          20,
          22,
          46,
          46,
          48,
          46,
          79
        ],
        "output": [
          58,
          20,
          22,
          48,
          79
        ]
      },
      {
        "input": [
          44,
          83,
          84,
          68
        ],
        "output": [
          83,
          84,
          68
        ]
      },
      {
        "input": [
          12,
          6,
          6,
          16,
          6,
          0,
          6,
          33,
          41
        ],
        "output": [
          6,
          6,
          16,
          6,
          0,
          6,
          33,
          41
        ]
      }
    ]
  },
  {
    "id": "c018",
    "difficulty": 141,
    "function": "def c018(x):\n    # replace element 1 with 9\n    x[1] = 9\n    return x\n\n",
    "data": {
      "input": [
        25,
        38,
        22,
        60,
        85,
        78,
        27
      ],
      "output": [
        25,
        9,
        22,
        60,
        85,
        78,
        27
      ]
    },
    "demos": [
      {
        "input": [
          44,
          5,
          4
        ],
        "output": [
          44,
          9,
          4
        ]
      },
      {
        "input": [
          52,
          10,
          28,
          85,
          28,
          2,
          74
        ],
        "output": [
          52,
          9,
          28,
          85,
          28,
          2,
          74
        ]
      },
      {
        "input": [
          0,
          34,
          54,
          62,
          93,
          90,
          77
        ],
        "output": [
          0,
          9,
          54,
          62,
          93,
          90,
          77
        ]
      }
    ]
  },
  {
    "id": "c012",
    "difficulty": 142,
    "function": "def c012(x):\n    # remove all but elements 1 through 3\n    return x[1:4]\n\n",
    "data": {
      "input": [
        80,
        59,
        74,
        80,
        84,
        40
      ],
      "output": [
        59,
        74,
        80
      ]
    },
    "demos": [
      {
        "input": [
          61,
          91,
          85,
          68,
          44
        ],
        "output": [
          91,
          85,
          68
        ]
      },
      {
        "input": [
          26,
          6,
          64,
          33,
          96,
          38
        ],
        "output": [
          6,
          64,
          33
        ]
      },
      {
        "input": [
          28,
          50,
          54,
          77,
          36,
          3,
          43
        ],
        "output": [
          50,
          54,
          77
        ]
      }
    ]
  },
  {
    "id": "c232",
    "difficulty": 143,
    "function": "def c232(x):\n    # mean of the list, rounded to the nearest integer\n    return [round(sum(x)/len(x))]\n\n",
    "data": {
      "input": [
        54,
        13,
        68,
        42
      ],
      "output": [
        44
      ]
    },
    "demos": [
      {
        "input": [
          87,
          80,
          0,
          37,
          55,
          26,
          14
        ],
        "output": [
          43
        ]
      },
      {
        "input": [
          29,
          89,
          79
        ],
        "output": [
          66
        ]
      },
      {
        "input": [
          49,
          35,
          61,
          83
        ],
        "output": [
          57
        ]
      }
    ]
  },
  {
    "id": "c094",
    "difficulty": 144,
    "function": "def c094(x):\n    # swap 0,2 and 1,3\n    x[0], x[2] = x[2], x[0]\n    x[1], x[3] = x[3], x[1]\n    return x\n\n",
    "data": {
      "input": [
        32,
        12,
        84,
        18,
        22,
        24
      ],
      "output": [
        84,
        18,
        32,
        12,
        22,
        24
      ]
    },
    "demos": [
      {
        "input": [
          28,
          38,
          68,
          37,
          14,
          21
        ],
        "output": [
          68,
          37,
          28,
          38,
          14,
          21
        ]
      },
      {
        "input": [
          70,
          43,
          6,
          2,
          72,
          6
        ],
        "output": [
          6,
          2,
          70,
          43,
          72,
          6
        ]
      },
      {
        "input": [
          84,
          23,
          93,
          50,
          73
        ],
        "output": [
          93,
          50,
          84,
          23,
          73
        ]
      }
    ]
  },
  {
    "id": "c086",
    "difficulty": 145,
    "function": "def c086(x):\n    # swap elements 0 and 3\n    x[0], x[3] = x[3], x[0]\n    return x\n\n",
    "data": {
      "input": [
        73,
        9,
        25,
        73,
        30,
        20
      ],
      "output": [
        73,
        9,
        25,
        73,
        30,
        20
      ]
    },
    "demos": [
      {
        "input": [
          77,
          70,
          49,
          91,
          18,
          16,
          1
        ],
        "output": [
          91,
          70,
          49,
          77,
          18,
          16,
          1
        ]
      },
      {
        "input": [
          23,
          25,
          87,
          64,
          98
        ],
        "output": [
          64,
          25,
          87,
          23,
          98
        ]
      },
      {
        "input": [
          49,
          44,
          79,
          18,
          69,
          64
        ],
        "output": [
          18,
          44,
          79,
          49,
          69,
          64
        ]
      }
    ]
  },
  {
    "id": "c193",
    "difficulty": 146,
    "function": "def c193(x):\n    # remove the smallest element and the largest element, output in ascending order\n    return sorted(x[1:-1])\n\n",
    "data": {
      "input": [
        13,
        18,
        54,
        28,
        50,
        32
      ],
      "output": [
        18,
        28,
        50,
        54
      ]
    },
    "demos": [
      {
        "input": [
          7,
          99,
          86,
          11,
          95,
          87
        ],
        "output": [
          11,
          86,
          95,
          99
        ]
      },
      {
        "input": [
          12,
          82,
          41,
          71,
          36,
          58,
          72
        ],
        "output": [
          36,
          41,
          58,
          71,
          82
        ]
      },
      {
        "input": [
          45,
          39,
          63,
          75,
          63,
          4
        ],
        "output": [
          39,
          63,
          63,
          75
        ]
      }
    ]
  },
  {
    "id": "c056",
    "difficulty": 147,
    "function": "def c056(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        67,
        51,
        55,
        1,
        55,
        36,
        77
      ],
      "output": [
        67,
        51,
        1,
        55,
        36,
        77
      ]
    },
    "demos": [
      {
        "input": [
          0,
          74,
          89,
          90,
          17,
          76,
          25
        ],
        "output": [
          0,
          74,
          90,
          17,
          76,
          25
        ]
      },
      {
        "input": [
          97,
          47,
          11,
          85,
          99,
          20
        ],
        "output": [
          97,
          47,
          85,
          99,
          20
        ]
      },
      {
        "input": [
          41,
          12,
          80,
          77
        ],
        "output": [
          41,
          12,
          77
        ]
      }
    ]
  },
  {
    "id": "c028",
    "difficulty": 148,
    "function": "def c028(x):\n    # remove element 1 if element 0 > element 1, else remove element 2\n    if x[0] > x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        2,
        11,
        29,
        21,
        48,
        32
      ],
      "output": [
        2,
        11,
        21,
        48,
        32
      ]
    },
    "demos": [
      {
        "input": [
          92,
          79,
          37,
          29,
          42
        ],
        "output": [
          92,
          37,
          29,
          42
        ]
      },
      {
        "input": [
          13,
          90,
          25,
          58,
          0
        ],
        "output": [
          13,
          90,
          58,
          0
        ]
      },
      {
        "input": [
          38,
          78,
          96,
          46
        ],
        "output": [
          38,
          78,
          46
        ]
      }
    ]
  },
  {
    "id": "c220",
    "difficulty": 149,
    "function": "def c220(x):\n    # if input length is even, double each element, else triple each element\n    if len(x) % 2 == 0:\n        return [i*2 for i in x]\n    else:\n        return [i*3 for i in x]\n\n",
    "data": {
      "input": [
        50,
        77,
        31,
        41,
        99,
        49
      ],
      "output": [
        100,
        154,
        62,
        82,
        198,
        98
      ]
    },
    "demos": [
      {
        "input": [
          29,
          44,
          43,
          81,
          11,
          88,
          98
        ],
        "output": [
          87,
          132,
          129,
          243,
          33,
          264,
          294
        ]
      },
      {
        "input": [
          13,
          30,
          62,
          75,
          56
        ],
        "output": [
          39,
          90,
          186,
          225,
          168
        ]
      },
      {
        "input": [
          87,
          23,
          88,
          88,
          11
        ],
        "output": [
          261,
          69,
          264,
          264,
          33
        ]
      }
    ]
  },
  {
    "id": "c241",
    "difficulty": 150,
    "function": "def c241(x):\n    # number of even elements\n    return [len([i for i in x if i % 2 == 0])]\n\n",
    "data": {
      "input": [
        3,
        88,
        78,
        60,
        7
      ],
      "output": [
        3
      ]
    },
    "demos": [
      {
        "input": [
          70,
          3,
          98,
          78,
          77
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          2,
          50,
          3,
          9,
          25
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          50,
          26,
          12,
          7,
          1
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c060",
    "difficulty": 151,
    "function": "def c060(x):\n    # element 2,1,0,3,4,6 remove the rest\n    return [x[2], x[1], x[0], x[3], x[4], x[6]]\n\n",
    "data": {
      "input": [
        72,
        69,
        85,
        22,
        1,
        85,
        5,
        65
      ],
      "output": [
        85,
        69,
        72,
        22,
        1,
        5
      ]
    },
    "demos": [
      {
        "input": [
          83,
          29,
          27,
          93,
          47,
          38,
          80,
          24,
          81
        ],
        "output": [
          27,
          29,
          83,
          93,
          47,
          80
        ]
      },
      {
        "input": [
          91,
          14,
          82,
          30,
          13,
          14,
          27,
          86,
          28
        ],
        "output": [
          82,
          14,
          91,
          30,
          13,
          27
        ]
      },
      {
        "input": [
          94,
          17,
          32,
          48,
          97,
          18,
          24,
          95,
          27
        ],
        "output": [
          32,
          17,
          94,
          48,
          97,
          24
        ]
      }
    ]
  },
  {
    "id": "c169",
    "difficulty": 152,
    "function": "def c169(x):\n    # second largest element\n    return [sorted(x)[-2]]\n\n",
    "data": {
      "input": [
        59,
        95,
        9,
        65
      ],
      "output": [
        65
      ]
    },
    "demos": [
      {
        "input": [
          77,
          82,
          85,
          36,
          63,
          27
        ],
        "output": [
          82
        ]
      },
      {
        "input": [
          84,
          1,
          38,
          79,
          78,
          35
        ],
        "output": [
          79
        ]
      },
      {
        "input": [
          93,
          44,
          74,
          38
        ],
        "output": [
          74
        ]
      }
    ]
  },
  {
    "id": "c057",
    "difficulty": 153,
    "function": "def c057(x):\n    # insert a 4 as element 2\n    return x[:2] + [4] + x[2:]\n\n",
    "data": {
      "input": [
        63,
        19,
        8,
        37,
        4
      ],
      "output": [
        63,
        19,
        4,
        8,
        37,
        4
      ]
    },
    "demos": [
      {
        "input": [
          24,
          22,
          33,
          51
        ],
        "output": [
          24,
          22,
          4,
          33,
          51
        ]
      },
      {
        "input": [
          99,
          36,
          12,
          90,
          29
        ],
        "output": [
          99,
          36,
          4,
          12,
          90,
          29
        ]
      },
      {
        "input": [
          79,
          39,
          74,
          66
        ],
        "output": [
          79,
          39,
          4,
          74,
          66
        ]
      }
    ]
  },
  {
    "id": "c150",
    "difficulty": 154,
    "function": "def c150(x):\n    # count from first element to each element if the element is greater than the first element\n    res = []\n    for i in x:\n        if i > x[0]:\n            res += list(range(x[0], i+1))\n        else:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        33,
        32,
        20,
        36,
        38
      ],
      "output": [
        33,
        32,
        20,
        33,
        34,
        35,
        36,
        33,
        34,
        35,
        36,
        37,
        38
      ]
    },
    "demos": [
      {
        "input": [
          37,
          20,
          47,
          8,
          5
        ],
        "output": [
          37,
          20,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          8,
          5
        ]
      },
      {
        "input": [
          24,
          26,
          27,
          4
        ],
        "output": [
          24,
          24,
          25,
          26,
          24,
          25,
          26,
          27,
          4
        ]
      },
      {
        "input": [
          89,
          50,
          91,
          75
        ],
        "output": [
          89,
          50,
          89,
          90,
          91,
          75
        ]
      }
    ]
  },
  {
    "id": "c033",
    "difficulty": 155,
    "function": "def c033(x):\n    # swap element 0 and 2\n    x[0], x[2] = x[2], x[0]\n    return x\n\n",
    "data": {
      "input": [
        23,
        16,
        22,
        11,
        83,
        16,
        81
      ],
      "output": [
        22,
        16,
        23,
        11,
        83,
        16,
        81
      ]
    },
    "demos": [
      {
        "input": [
          44,
          61,
          69,
          1,
          11,
          83
        ],
        "output": [
          69,
          61,
          44,
          1,
          11,
          83
        ]
      },
      {
        "input": [
          75,
          76,
          9,
          40,
          23,
          37,
          34
        ],
        "output": [
          9,
          76,
          75,
          40,
          23,
          37,
          34
        ]
      },
      {
        "input": [
          89,
          18,
          76,
          80,
          75,
          32,
          68
        ],
        "output": [
          76,
          18,
          89,
          80,
          75,
          32,
          68
        ]
      }
    ]
  },
  {
    "id": "c218",
    "difficulty": 156,
    "function": "def c218(x):\n    # keep only second element and following equal to the first element\n    return [x[1]] + [i for i in x[2:] if i == x[0]]\n\n",
    "data": {
      "input": [
        65,
        16,
        65,
        65,
        65,
        6,
        13,
        99,
        32,
        25
      ],
      "output": [
        16,
        65,
        65,
        65
      ]
    },
    "demos": [
      {
        "input": [
          28,
          62,
          99,
          28,
          79,
          10,
          28,
          70,
          8,
          26
        ],
        "output": [
          62,
          28,
          28
        ]
      },
      {
        "input": [
          36,
          36,
          61,
          79,
          13,
          39,
          92,
          37
        ],
        "output": [
          36
        ]
      },
      {
        "input": [
          67,
          14,
          71,
          67,
          67,
          62,
          24,
          86,
          45
        ],
        "output": [
          14,
          67,
          67
        ]
      }
    ]
  },
  {
    "id": "c136",
    "difficulty": 158,
    "function": "def c136(x):\n    # remove the first occurrence of the largest element, keep the rest\n    x.remove(max(x))\n    return x\n\n",
    "data": {
      "input": [
        0,
        83,
        60,
        42,
        74,
        15,
        18,
        72
      ],
      "output": [
        0,
        60,
        42,
        74,
        15,
        18,
        72
      ]
    },
    "demos": [
      {
        "input": [
          16,
          44,
          8,
          59,
          63,
          63
        ],
        "output": [
          16,
          44,
          8,
          59,
          63
        ]
      },
      {
        "input": [
          50,
          87,
          48,
          96,
          0,
          38
        ],
        "output": [
          50,
          87,
          48,
          0,
          38
        ]
      },
      {
        "input": [
          22,
          55,
          32,
          18,
          77,
          75
        ],
        "output": [
          22,
          55,
          32,
          18,
          75
        ]
      }
    ]
  },
  {
    "id": "c083",
    "difficulty": 159,
    "function": "def c083(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        59,
        53,
        7,
        79,
        52,
        1,
        78
      ],
      "output": [
        78
      ]
    },
    "demos": [
      {
        "input": [
          34,
          10,
          17,
          59,
          99,
          43,
          27,
          23
        ],
        "output": [
          27
        ]
      },
      {
        "input": [
          8,
          62,
          99,
          1,
          35,
          30,
          19,
          85,
          90
        ],
        "output": [
          19
        ]
      },
      {
        "input": [
          96,
          56,
          12,
          93,
          37,
          32,
          61,
          18
        ],
        "output": [
          61
        ]
      }
    ]
  },
  {
    "id": "c019",
    "difficulty": 160,
    "function": "def c019(x):\n    # replace element 5 with a 3 if there is an element 5\n    if len(x) > 5:\n        x[4] = 3\n    return x\n\n",
    "data": {
      "input": [
        41,
        0,
        49,
        17,
        50
      ],
      "output": [
        41,
        0,
        49,
        17,
        50
      ]
    },
    "demos": [
      {
        "input": [
          45,
          3,
          18,
          5,
          65,
          38
        ],
        "output": [
          45,
          3,
          18,
          5,
          3,
          38
        ]
      },
      {
        "input": [
          54,
          13,
          87,
          74,
          25
        ],
        "output": [
          54,
          13,
          87,
          74,
          25
        ]
      },
      {
        "input": [
          4,
          33,
          60,
          77,
          96
        ],
        "output": [
          4,
          33,
          60,
          77,
          96
        ]
      }
    ]
  },
  {
    "id": "c203",
    "difficulty": 161,
    "function": "def c203(x):\n    # the first M positive multiples of the smallest element, M is the length of the input\n    return [min(x)*i for i in range(1, len(x)+1)]\n\n",
    "data": {
      "input": [
        4,
        18,
        3,
        4,
        16
      ],
      "output": [
        3,
        6,
        9,
        12,
        15
      ]
    },
    "demos": [
      {
        "input": [
          6,
          23,
          13,
          25,
          17,
          3
        ],
        "output": [
          3,
          6,
          9,
          12,
          15,
          18
        ]
      },
      {
        "input": [
          3,
          20,
          1,
          23
        ],
        "output": [
          1,
          2,
          3,
          4
        ]
      },
      {
        "input": [
          20,
          15,
          2,
          23,
          5,
          19,
          17
        ],
        "output": [
          2,
          4,
          6,
          8,
          10,
          12,
          14
        ]
      }
    ]
  },
  {
    "id": "c115",
    "difficulty": 162,
    "function": "def c115(x):\n    # the unique elements, prepended and appended by their sum\n    res = list(set(x))\n    return [sum(res)] + res + [sum(res)]\n\n",
    "data": {
      "input": [
        1,
        21,
        25,
        25
      ],
      "output": [
        47,
        1,
        21,
        25,
        47
      ]
    },
    "demos": [
      {
        "input": [
          12,
          6,
          14,
          12,
          5,
          26,
          14
        ],
        "output": [
          63,
          5,
          6,
          12,
          14,
          26,
          63
        ]
      },
      {
        "input": [
          28,
          19,
          7,
          19
        ],
        "output": [
          54,
          19,
          28,
          7,
          54
        ]
      },
      {
        "input": [
          6,
          6,
          2,
          23,
          6,
          20,
          8,
          17,
          4
        ],
        "output": [
          80,
          2,
          4,
          6,
          8,
          17,
          20,
          23,
          80
        ]
      }
    ]
  },
  {
    "id": "c207",
    "difficulty": 163,
    "function": "def c207(x):\n    # element-wise sum of the input and the reverse of the input\n    return [i+j for i, j in zip(x, x[::-1])]\n\n",
    "data": {
      "input": [
        48,
        10,
        47,
        44
      ],
      "output": [
        92,
        57,
        57,
        92
      ]
    },
    "demos": [
      {
        "input": [
          22,
          50,
          23,
          5,
          14
        ],
        "output": [
          36,
          55,
          46,
          55,
          36
        ]
      },
      {
        "input": [
          10,
          13,
          2,
          24,
          22,
          39,
          29
        ],
        "output": [
          39,
          52,
          24,
          48,
          24,
          52,
          39
        ]
      },
      {
        "input": [
          31,
          30,
          25,
          12,
          33,
          47,
          26
        ],
        "output": [
          57,
          77,
          58,
          24,
          58,
          77,
          57
        ]
      }
    ]
  },
  {
    "id": "c088",
    "difficulty": 164,
    "function": "def c088(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        56,
        30,
        30,
        57,
        28,
        7,
        67
      ],
      "output": [
        57,
        30,
        30,
        56,
        28,
        7,
        67
      ]
    },
    "demos": [
      {
        "input": [
          14,
          65,
          65,
          4,
          69
        ],
        "output": [
          4,
          65,
          65,
          14,
          69
        ]
      },
      {
        "input": [
          63,
          41,
          87,
          80,
          29,
          73,
          57
        ],
        "output": [
          63,
          87,
          41,
          80,
          29,
          73,
          57
        ]
      },
      {
        "input": [
          36,
          32,
          28,
          47,
          17,
          43,
          27
        ],
        "output": [
          36,
          28,
          32,
          47,
          17,
          43,
          27
        ]
      }
    ]
  },
  {
    "id": "c040",
    "difficulty": 165,
    "function": "def c040(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        26,
        15,
        11,
        11,
        14,
        19,
        4
      ],
      "output": [
        26,
        15,
        11,
        11,
        14,
        19,
        4
      ]
    },
    "demos": [
      {
        "input": [
          16,
          20,
          29,
          20,
          9,
          22,
          8,
          9
        ],
        "output": [
          16,
          20,
          29,
          20,
          9,
          22,
          8,
          9,
          9
        ]
      },
      {
        "input": [
          25,
          8,
          3,
          20,
          20
        ],
        "output": [
          25,
          8,
          3,
          20,
          20,
          3
        ]
      },
      {
        "input": [
          9,
          13,
          27,
          18,
          8,
          24,
          9
        ],
        "output": [
          9,
          13,
          27,
          18,
          8,
          24,
          9,
          9
        ]
      }
    ]
  },
  {
    "id": "c085",
    "difficulty": 166,
    "function": "def c085(x):\n    # remove all but element N, N=first element\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        0,
        21,
        5,
        15
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          2,
          41,
          33,
          34
        ],
        "output": [
          33
        ]
      },
      {
        "input": [
          3,
          32,
          24,
          8
        ],
        "output": [
          8
        ]
      },
      {
        "input": [
          5,
          44,
          12,
          42,
          4,
          37
        ],
        "output": [
          37
        ]
      }
    ]
  },
  {
    "id": "c111",
    "difficulty": 167,
    "function": "def c111(x):\n    # repeat the largest element N times, where N is the smallest element\n    return [max(x)] * min(x)\n\n",
    "data": {
      "input": [
        14,
        24,
        6,
        9,
        23
      ],
      "output": [
        24,
        24,
        24,
        24,
        24,
        24
      ]
    },
    "demos": [
      {
        "input": [
          5,
          5,
          14,
          18,
          9
        ],
        "output": [
          18,
          18,
          18,
          18,
          18
        ]
      },
      {
        "input": [
          1,
          9,
          21,
          10,
          26,
          16,
          6
        ],
        "output": [
          26
        ]
      },
      {
        "input": [
          28,
          10,
          16,
          10,
          19,
          17,
          4,
          15
        ],
        "output": [
          28,
          28,
          28,
          28
        ]
      }
    ]
  },
  {
    "id": "c073",
    "difficulty": 168,
    "function": "def c073(x):\n    # add the index to every element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        23,
        30,
        3,
        22
      ],
      "output": [
        23,
        31,
        5,
        25
      ]
    },
    "demos": [
      {
        "input": [
          28,
          26,
          31,
          0,
          34,
          9,
          43
        ],
        "output": [
          28,
          27,
          33,
          3,
          38,
          14,
          49
        ]
      },
      {
        "input": [
          12,
          34,
          28,
          49,
          30,
          41
        ],
        "output": [
          12,
          35,
          30,
          52,
          34,
          46
        ]
      },
      {
        "input": [
          23,
          50,
          26,
          40,
          28,
          7
        ],
        "output": [
          23,
          51,
          28,
          43,
          32,
          12
        ]
      }
    ]
  },
  {
    "id": "c027",
    "difficulty": 169,
    "function": "def c027(x):\n    # remove element 1 if element 0 = element 1, else remove element 2\n    if x[0] == x[1]:\n        return x[:1] + x[2:]\n    else:\n        return x[:2] + x[3:]\n    \n",
    "data": {
      "input": [
        12,
        12,
        94,
        71,
        82
      ],
      "output": [
        12,
        94,
        71,
        82
      ]
    },
    "demos": [
      {
        "input": [
          12,
          75,
          67,
          82,
          40
        ],
        "output": [
          12,
          75,
          82,
          40
        ]
      },
      {
        "input": [
          91,
          91,
          80,
          90,
          85,
          77
        ],
        "output": [
          91,
          80,
          90,
          85,
          77
        ]
      },
      {
        "input": [
          48,
          48,
          71,
          80,
          34,
          8
        ],
        "output": [
          48,
          71,
          80,
          34,
          8
        ]
      }
    ]
  },
  {
    "id": "c234",
    "difficulty": 170,
    "function": "def c234(x):\n    # repetitions in order of first appearance\n    res = {}\n    out = []\n    for i in x:\n        if i not in res:\n            res[i] = 0\n        res[i] += 1\n    for i in res:\n        if res[i] > 1:\n            out.append(i)\n    return out\n\n",
    "data": {
      "input": [
        89,
        39,
        7,
        89,
        71,
        75,
        36,
        39
      ],
      "output": [
        89,
        39
      ]
    },
    "demos": [
      {
        "input": [
          9,
          59,
          87,
          80,
          9,
          12,
          12
        ],
        "output": [
          9,
          12
        ]
      },
      {
        "input": [
          35,
          35,
          12,
          53,
          7,
          53,
          97,
          12,
          28
        ],
        "output": [
          35,
          12,
          53
        ]
      },
      {
        "input": [
          61,
          32,
          87,
          32,
          65,
          3,
          74,
          74,
          45
        ],
        "output": [
          32,
          74
        ]
      }
    ]
  },
  {
    "id": "c165",
    "difficulty": 171,
    "function": "def c165(x):\n    # reverse the input and keep only even elements\n    return [i for i in x[::-1] if i % 2 == 0]\n\n",
    "data": {
      "input": [
        57,
        58,
        90,
        78,
        35,
        24
      ],
      "output": [
        24,
        78,
        90,
        58
      ]
    },
    "demos": [
      {
        "input": [
          29,
          38,
          69,
          1,
          65,
          47,
          28,
          85
        ],
        "output": [
          28,
          38
        ]
      },
      {
        "input": [
          41,
          27,
          40,
          18,
          41,
          2,
          2,
          95
        ],
        "output": [
          2,
          2,
          18,
          40
        ]
      },
      {
        "input": [
          14,
          93,
          41,
          77,
          55,
          7,
          87
        ],
        "output": [
          14
        ]
      }
    ]
  },
  {
    "id": "c191",
    "difficulty": 172,
    "function": "def c191(x):\n    # repeat each element N times, where N is its tens digit\n    out = []\n    for i in x:\n        if len(str(i)) > 1:\n            out += [i] * int(str(i)[-2])\n    return out\n\n",
    "data": {
      "input": [
        25,
        24,
        35,
        22,
        6,
        4,
        28
      ],
      "output": [
        25,
        25,
        24,
        24,
        35,
        35,
        35,
        22,
        22,
        28,
        28
      ]
    },
    "demos": [
      {
        "input": [
          20,
          21,
          21,
          13
        ],
        "output": [
          20,
          20,
          21,
          21,
          21,
          21,
          13
        ]
      },
      {
        "input": [
          30,
          3,
          11,
          11
        ],
        "output": [
          30,
          30,
          30,
          11,
          11
        ]
      },
      {
        "input": [
          18,
          18,
          35,
          37,
          26
        ],
        "output": [
          18,
          18,
          35,
          35,
          35,
          37,
          37,
          37,
          26,
          26
        ]
      }
    ]
  },
  {
    "id": "c026",
    "difficulty": 173,
    "function": "def c026(x):\n    # remove element 2\n    return x[:2] + x[3:]\n\n",
    "data": {
      "input": [
        16,
        75,
        90,
        60
      ],
      "output": [
        16,
        75,
        60
      ]
    },
    "demos": [
      {
        "input": [
          79,
          64,
          43,
          53,
          60,
          87
        ],
        "output": [
          79,
          64,
          53,
          60,
          87
        ]
      },
      {
        "input": [
          48,
          98,
          27,
          2,
          97,
          39
        ],
        "output": [
          48,
          98,
          2,
          97,
          39
        ]
      },
      {
        "input": [
          94,
          69,
          24,
          9
        ],
        "output": [
          94,
          69,
          9
        ]
      }
    ]
  },
  {
    "id": "c059",
    "difficulty": 174,
    "function": "def c059(x):\n    # swap element 2 and element 5\n    x[2], x[5] = x[5], x[2]\n    return x\n\n",
    "data": {
      "input": [
        83,
        45,
        20,
        8,
        41,
        42,
        44
      ],
      "output": [
        83,
        45,
        42,
        8,
        41,
        20,
        44
      ]
    },
    "demos": [
      {
        "input": [
          53,
          21,
          23,
          26,
          14,
          75,
          79
        ],
        "output": [
          53,
          21,
          75,
          26,
          14,
          23,
          79
        ]
      },
      {
        "input": [
          50,
          27,
          30,
          76,
          70,
          9,
          98,
          52
        ],
        "output": [
          50,
          27,
          9,
          76,
          70,
          30,
          98,
          52
        ]
      },
      {
        "input": [
          28,
          8,
          34,
          14,
          13,
          37,
          13
        ],
        "output": [
          28,
          8,
          37,
          14,
          13,
          34,
          13
        ]
      }
    ]
  },
  {
    "id": "c074",
    "difficulty": 175,
    "function": "def c074(x):\n    # remove every element whose value < 8\n    return [i for i in x if i >= 8]\n\n",
    "data": {
      "input": [
        11,
        7,
        14,
        15,
        23
      ],
      "output": [
        11,
        14,
        15,
        23
      ]
    },
    "demos": [
      {
        "input": [
          4,
          16,
          24,
          25,
          25,
          11
        ],
        "output": [
          16,
          24,
          25,
          25,
          11
        ]
      },
      {
        "input": [
          16,
          0,
          13,
          12,
          8,
          24,
          7
        ],
        "output": [
          16,
          13,
          12,
          8,
          24
        ]
      },
      {
        "input": [
          21,
          28,
          7,
          23,
          20,
          30
        ],
        "output": [
          21,
          28,
          23,
          20,
          30
        ]
      }
    ]
  },
  {
    "id": "c173",
    "difficulty": 176,
    "function": "def c173(x):\n    # replace element N with the largest element in element 0 through N\n    for i in range(len(x)):\n        x[i] = max(x[:i+1])\n    return x\n\n",
    "data": {
      "input": [
        13,
        83,
        4,
        56,
        97
      ],
      "output": [
        13,
        83,
        83,
        83,
        97
      ]
    },
    "demos": [
      {
        "input": [
          33,
          2,
          25,
          24,
          81,
          58
        ],
        "output": [
          33,
          33,
          33,
          33,
          81,
          81
        ]
      },
      {
        "input": [
          0,
          90,
          57,
          97,
          18,
          46
        ],
        "output": [
          0,
          90,
          90,
          97,
          97,
          97
        ]
      },
      {
        "input": [
          0,
          48,
          9,
          14,
          43,
          1,
          1
        ],
        "output": [
          0,
          48,
          48,
          48,
          48,
          48,
          48
        ]
      }
    ]
  },
  {
    "id": "c175",
    "difficulty": 177,
    "function": "def c175(x):\n    # keep only elements larger than any preceding element\n    res = [x[0]]\n    for i in x[1:]:\n        if i > res[-1]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        90,
        50,
        34,
        31,
        10,
        55,
        80,
        69
      ],
      "output": [
        90
      ]
    },
    "demos": [
      {
        "input": [
          49,
          45,
          82,
          60,
          73,
          54,
          82
        ],
        "output": [
          49,
          82
        ]
      },
      {
        "input": [
          25,
          44,
          0,
          36,
          31
        ],
        "output": [
          25,
          44
        ]
      },
      {
        "input": [
          46,
          79,
          72,
          83,
          41,
          49,
          47
        ],
        "output": [
          46,
          79,
          83
        ]
      }
    ]
  },
  {
    "id": "c204",
    "difficulty": 178,
    "function": "def c204(x):\n    # keep only elements followed by 0\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] == 0:\n            res.append(x[i])\n    return res\n\n",
    "data": {
      "input": [
        23,
        21,
        21,
        0,
        27,
        13,
        3,
        0
      ],
      "output": [
        21,
        3
      ]
    },
    "demos": [
      {
        "input": [
          29,
          26,
          29,
          3,
          28,
          18,
          24,
          0
        ],
        "output": [
          24
        ]
      },
      {
        "input": [
          29,
          0,
          19,
          26,
          0,
          18,
          0,
          0,
          4,
          0
        ],
        "output": [
          29,
          26,
          18,
          0,
          4
        ]
      },
      {
        "input": [
          12,
          0,
          0,
          4,
          0,
          16,
          15,
          30,
          0,
          6
        ],
        "output": [
          12,
          0,
          4,
          30
        ]
      }
    ]
  },
  {
    "id": "c031",
    "difficulty": 179,
    "function": "def c031(x):\n    # remove whichever are equal, the first 2 elements or the last 2 elements\n    if x[0] == x[1]:\n        return x[2:]\n    elif x[-1] == x[-2]:\n        return x[:-2]\n    return x\n\n",
    "data": {
      "input": [
        77,
        8,
        81,
        22,
        86,
        9
      ],
      "output": [
        77,
        8,
        81,
        22,
        86,
        9
      ]
    },
    "demos": [
      {
        "input": [
          80,
          56,
          60,
          55,
          52,
          59,
          59
        ],
        "output": [
          80,
          56,
          60,
          55,
          52
        ]
      },
      {
        "input": [
          64,
          15,
          97,
          42,
          18,
          47,
          68,
          68
        ],
        "output": [
          64,
          15,
          97,
          42,
          18,
          47
        ]
      },
      {
        "input": [
          25,
          25,
          25,
          20,
          55,
          76,
          37
        ],
        "output": [
          25,
          20,
          55,
          76,
          37
        ]
      }
    ]
  },
  {
    "id": "c236",
    "difficulty": 180,
    "function": "def c236(x):\n    # even elements divided by 2\n    return [i//2 for i in x if i % 2 == 0]\n\n",
    "data": {
      "input": [
        17,
        6,
        50,
        60,
        89,
        38
      ],
      "output": [
        3,
        25,
        30,
        19
      ]
    },
    "demos": [
      {
        "input": [
          72,
          61,
          95,
          59,
          97,
          47,
          74
        ],
        "output": [
          36,
          37
        ]
      },
      {
        "input": [
          20,
          2,
          51,
          25,
          21,
          68,
          51,
          93,
          63
        ],
        "output": [
          10,
          1,
          34
        ]
      },
      {
        "input": [
          13,
          93,
          35,
          44,
          29,
          84,
          67,
          66,
          55
        ],
        "output": [
          22,
          42,
          33
        ]
      }
    ]
  },
  {
    "id": "c054",
    "difficulty": 181,
    "function": "def c054(x):\n    # replace element 0 and 1 with element 2\n    x[0] = x[2]\n    x[1] = x[2]\n    return x\n\n",
    "data": {
      "input": [
        27,
        23,
        65,
        52
      ],
      "output": [
        65,
        65,
        65,
        52
      ]
    },
    "demos": [
      {
        "input": [
          78,
          37,
          28,
          43,
          22,
          4,
          21
        ],
        "output": [
          28,
          28,
          28,
          43,
          22,
          4,
          21
        ]
      },
      {
        "input": [
          89,
          10,
          83,
          28,
          65,
          89,
          71
        ],
        "output": [
          83,
          83,
          83,
          28,
          65,
          89,
          71
        ]
      },
      {
        "input": [
          66,
          54,
          39,
          87,
          29,
          28
        ],
        "output": [
          39,
          39,
          39,
          87,
          29,
          28
        ]
      }
    ]
  },
  {
    "id": "c227",
    "difficulty": 182,
    "function": "def c227(x):\n    # interleave the input and reversed input, keep only unique elements in order of appearance\n    res = []\n    mid = len(x) // 2\n    for i in range(mid):\n        if x[i] not in res:\n            res.append(x[i])\n        if x[-i-1] not in res:\n            res.append(x[-i-1])\n    if len(x) % 2 == 1 and x[mid] not in res:\n        res.append(x[mid])\n    return res\n\n",
    "data": {
      "input": [
        21,
        68,
        16,
        28,
        85,
        73
      ],
      "output": [
        21,
        73,
        68,
        85,
        16,
        28
      ]
    },
    "demos": [
      {
        "input": [
          32,
          39,
          15,
          56,
          64
        ],
        "output": [
          32,
          64,
          39,
          56,
          15
        ]
      },
      {
        "input": [
          0,
          15,
          0,
          53,
          5,
          30,
          42,
          0,
          50
        ],
        "output": [
          0,
          50,
          15,
          42,
          53,
          30,
          5
        ]
      },
      {
        "input": [
          37,
          45,
          36,
          24,
          55,
          36,
          27,
          55
        ],
        "output": [
          37,
          55,
          45,
          27,
          36,
          24
        ]
      }
    ]
  },
  {
    "id": "c024",
    "difficulty": 183,
    "function": "def c024(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        12,
        16,
        16,
        15,
        16,
        9,
        12,
        20
      ],
      "output": [
        12,
        8,
        16,
        16,
        15,
        16,
        9,
        12,
        20
      ]
    },
    "demos": [
      {
        "input": [
          3,
          3,
          7,
          14,
          3,
          3,
          17
        ],
        "output": [
          3,
          5,
          3,
          7,
          14,
          3,
          3,
          17
        ]
      },
      {
        "input": [
          3,
          0,
          13,
          20,
          14,
          4,
          18
        ],
        "output": [
          3,
          5,
          0,
          13,
          20,
          14,
          4,
          18
        ]
      },
      {
        "input": [
          11,
          4,
          14,
          2,
          2,
          4
        ],
        "output": [
          11,
          8,
          4,
          14,
          2,
          2,
          4
        ]
      }
    ]
  },
  {
    "id": "c200",
    "difficulty": 184,
    "function": "def c200(x):\n    # tens digits of the elements in ascending order\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append(int(str(i)[-2]))\n        else:\n            res.append(0)\n    return sorted(res)\n\n",
    "data": {
      "input": [
        99,
        99,
        20,
        58,
        81,
        10,
        92,
        6
      ],
      "output": [
        0,
        1,
        2,
        5,
        8,
        9,
        9,
        9
      ]
    },
    "demos": [
      {
        "input": [
          20,
          24,
          0,
          2,
          47,
          76
        ],
        "output": [
          0,
          0,
          2,
          2,
          4,
          7
        ]
      },
      {
        "input": [
          82,
          16,
          16,
          79,
          85,
          41,
          88
        ],
        "output": [
          1,
          1,
          4,
          7,
          8,
          8,
          8
        ]
      },
      {
        "input": [
          9,
          90,
          37,
          23,
          74,
          94
        ],
        "output": [
          0,
          2,
          3,
          7,
          9,
          9
        ]
      }
    ]
  },
  {
    "id": "c010",
    "difficulty": 185,
    "function": "def c010(x):\n    # elements 1 through N + 1, N is the first element\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        3,
        7,
        17,
        18,
        8
      ],
      "output": [
        7,
        17,
        18
      ]
    },
    "demos": [
      {
        "input": [
          2,
          4,
          10,
          19,
          11
        ],
        "output": [
          4,
          10
        ]
      },
      {
        "input": [
          6,
          14,
          8,
          13,
          17,
          11,
          18
        ],
        "output": [
          14,
          8,
          13,
          17,
          11,
          18
        ]
      },
      {
        "input": [
          2,
          13,
          8,
          3,
          1,
          4
        ],
        "output": [
          13,
          8
        ]
      }
    ]
  },
  {
    "id": "c123",
    "difficulty": 186,
    "function": "def c123(x):\n    # remove all but element N, N is the last element\n    return [x[x[-1]]]\n\n",
    "data": {
      "input": [
        17,
        10,
        0,
        15,
        8,
        1
      ],
      "output": [
        10
      ]
    },
    "demos": [
      {
        "input": [
          9,
          8,
          20,
          13,
          3
        ],
        "output": [
          13
        ]
      },
      {
        "input": [
          3,
          9,
          3,
          19,
          4
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          0,
          7,
          19,
          20,
          1,
          0
        ],
        "output": [
          0
        ]
      }
    ]
  },
  {
    "id": "c023",
    "difficulty": 187,
    "function": "def c023(x):\n    # insert 8 as element 1 if element 0 > 5 else insert 5 as element 1\n    if x[0] > 5:\n        return x[:1] + [8] + x[1:]\n    else:\n        return x[:1] + [5] + x[1:]\n    \n",
    "data": {
      "input": [
        18,
        10,
        8,
        9,
        20,
        4
      ],
      "output": [
        18,
        8,
        10,
        8,
        9,
        20,
        4
      ]
    },
    "demos": [
      {
        "input": [
          0,
          17,
          4,
          13,
          4,
          13,
          20,
          17
        ],
        "output": [
          0,
          5,
          17,
          4,
          13,
          4,
          13,
          20,
          17
        ]
      },
      {
        "input": [
          14,
          2,
          11,
          0,
          1,
          13,
          7,
          10
        ],
        "output": [
          14,
          8,
          2,
          11,
          0,
          1,
          13,
          7,
          10
        ]
      },
      {
        "input": [
          20,
          3,
          18,
          14
        ],
        "output": [
          20,
          8,
          3,
          18,
          14
        ]
      }
    ]
  },
  {
    "id": "c194",
    "difficulty": 188,
    "function": "def c194(x):\n    # reverse the input; prepend and append the length of the input\n    return [len(x)] + x[::-1] + [len(x)]\n\n",
    "data": {
      "input": [
        16,
        8,
        3,
        4,
        18
      ],
      "output": [
        5,
        18,
        4,
        3,
        8,
        16,
        5
      ]
    },
    "demos": [
      {
        "input": [
          4,
          11,
          12,
          9,
          14
        ],
        "output": [
          5,
          14,
          9,
          12,
          11,
          4,
          5
        ]
      },
      {
        "input": [
          20,
          6,
          11,
          12,
          5,
          14,
          11
        ],
        "output": [
          7,
          11,
          14,
          5,
          12,
          11,
          6,
          20,
          7
        ]
      },
      {
        "input": [
          18,
          12,
          14,
          10,
          0
        ],
        "output": [
          5,
          0,
          10,
          14,
          12,
          18,
          5
        ]
      }
    ]
  },
  {
    "id": "c245",
    "difficulty": 189,
    "function": "def c245(x):\n    # number of times element 0 appears in the following elements\n    return [x[1:].count(x[0])]\n\n",
    "data": {
      "input": [
        9,
        7,
        7,
        13,
        15,
        11,
        10
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          10,
          10,
          13,
          14,
          18,
          10,
          10
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          9,
          9,
          11,
          20,
          13,
          5,
          18,
          9
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          12,
          2,
          12,
          4,
          2,
          12,
          19
        ],
        "output": [
          2
        ]
      }
    ]
  },
  {
    "id": "c032",
    "difficulty": 190,
    "function": "def c032(x):\n    # remove first 2 elements if element 0 > last element, else remove last 2 elements\n    if x[0] > x[-1]:\n        return x[2:]\n    else:\n        return x[:-2]\n    \n",
    "data": {
      "input": [
        17,
        51,
        59,
        67,
        1
      ],
      "output": [
        59,
        67,
        1
      ]
    },
    "demos": [
      {
        "input": [
          24,
          5,
          17,
          8,
          52,
          0,
          14
        ],
        "output": [
          17,
          8,
          52,
          0,
          14
        ]
      },
      {
        "input": [
          55,
          29,
          20,
          8,
          99,
          87,
          14
        ],
        "output": [
          20,
          8,
          99,
          87,
          14
        ]
      },
      {
        "input": [
          5,
          74,
          66,
          31,
          71,
          1
        ],
        "output": [
          66,
          31,
          71,
          1
        ]
      }
    ]
  },
  {
    "id": "c058",
    "difficulty": 191,
    "function": "def c058(x):\n    # remove the first 5 elements\n    return x[5:]\n\n",
    "data": {
      "input": [
        6,
        12,
        97,
        1,
        10,
        96,
        55,
        77
      ],
      "output": [
        96,
        55,
        77
      ]
    },
    "demos": [
      {
        "input": [
          90,
          33,
          9,
          34,
          19
        ],
        "output": []
      },
      {
        "input": [
          85,
          61,
          53,
          29
        ],
        "output": []
      },
      {
        "input": [
          26,
          26,
          39,
          48,
          92,
          8
        ],
        "output": [
          8
        ]
      }
    ]
  },
  {
    "id": "c174",
    "difficulty": 192,
    "function": "def c174(x):\n    # keep the first M elements, where M is the number of unique elements\n    return x[:len(set(x))]\n\n",
    "data": {
      "input": [
        35,
        57,
        4,
        55,
        20
      ],
      "output": [
        35,
        57,
        4,
        55,
        20
      ]
    },
    "demos": [
      {
        "input": [
          44,
          73,
          61,
          73,
          95,
          34,
          95,
          95,
          81
        ],
        "output": [
          44,
          73,
          61,
          73,
          95,
          34
        ]
      },
      {
        "input": [
          40,
          82,
          8,
          65,
          65,
          47,
          32
        ],
        "output": [
          40,
          82,
          8,
          65,
          65,
          47
        ]
      },
      {
        "input": [
          48,
          44,
          44,
          9,
          0,
          24,
          63,
          44
        ],
        "output": [
          48,
          44,
          44,
          9,
          0,
          24
        ]
      }
    ]
  },
  {
    "id": "c229",
    "difficulty": 193,
    "function": "def c229(x):\n    # keep only first N elements of the reversed input, N is the first element\n    length = x[0]\n    return x[::-1][:length]\n\n",
    "data": {
      "input": [
        1,
        24,
        73,
        74,
        85,
        18,
        40
      ],
      "output": [
        40
      ]
    },
    "demos": [
      {
        "input": [
          3,
          98,
          81,
          45,
          90,
          77,
          78
        ],
        "output": [
          78,
          77,
          90
        ]
      },
      {
        "input": [
          6,
          22,
          97,
          11,
          29,
          41
        ],
        "output": [
          41,
          29,
          11,
          97,
          22,
          6
        ]
      },
      {
        "input": [
          2,
          50,
          69,
          41,
          78
        ],
        "output": [
          78,
          41
        ]
      }
    ]
  },
  {
    "id": "c162",
    "difficulty": 194,
    "function": "def c162(x):\n    # replace each element M with 3 * M + 7\n    return [3*i+7 for i in x]\n\n",
    "data": {
      "input": [
        7,
        18,
        22,
        21,
        15
      ],
      "output": [
        28,
        61,
        73,
        70,
        52
      ]
    },
    "demos": [
      {
        "input": [
          2,
          22,
          7,
          3,
          12,
          0
        ],
        "output": [
          13,
          73,
          28,
          16,
          43,
          7
        ]
      },
      {
        "input": [
          2,
          22,
          12,
          18,
          4,
          0
        ],
        "output": [
          13,
          73,
          43,
          61,
          19,
          7
        ]
      },
      {
        "input": [
          10,
          11,
          7,
          28,
          12,
          28,
          8
        ],
        "output": [
          37,
          40,
          28,
          91,
          43,
          91,
          31
        ]
      }
    ]
  },
  {
    "id": "c039",
    "difficulty": 195,
    "function": "def c039(x):\n    # append 3 if the list contains a 3, else append 9 if the list contains a 9\n    if 3 in x:\n        return x + [3]\n    elif 9 in x:\n        return x + [9]\n    return x\n\n",
    "data": {
      "input": [
        3,
        40,
        20,
        43,
        23,
        10
      ],
      "output": [
        3,
        40,
        20,
        43,
        23,
        10,
        3
      ]
    },
    "demos": [
      {
        "input": [
          25,
          3,
          19,
          9,
          3,
          17,
          3,
          1
        ],
        "output": [
          25,
          3,
          19,
          9,
          3,
          17,
          3,
          1,
          3
        ]
      },
      {
        "input": [
          18,
          35,
          50,
          45,
          33,
          14,
          24
        ],
        "output": [
          18,
          35,
          50,
          45,
          33,
          14,
          24
        ]
      },
      {
        "input": [
          12,
          50,
          17,
          18,
          18,
          23,
          31,
          3
        ],
        "output": [
          12,
          50,
          17,
          18,
          18,
          23,
          31,
          3,
          3
        ]
      }
    ]
  },
  {
    "id": "c181",
    "difficulty": 196,
    "function": "def c181(x):\n    # reverse the order of elements with even index\n    return [x[i] if i % 2 == 1 else x[-i-1] for i in range(len(x))]\n\n",
    "data": {
      "input": [
        15,
        21,
        18,
        82,
        9,
        5,
        35,
        70
      ],
      "output": [
        70,
        21,
        5,
        82,
        82,
        5,
        21,
        70
      ]
    },
    "demos": [
      {
        "input": [
          50,
          28,
          36,
          1,
          6,
          73,
          46,
          30
        ],
        "output": [
          30,
          28,
          73,
          1,
          1,
          73,
          28,
          30
        ]
      },
      {
        "input": [
          84,
          85,
          92,
          73,
          76,
          19,
          52
        ],
        "output": [
          52,
          85,
          76,
          73,
          92,
          19,
          84
        ]
      },
      {
        "input": [
          98,
          3,
          14,
          72,
          42
        ],
        "output": [
          42,
          3,
          14,
          72,
          98
        ]
      }
    ]
  },
  {
    "id": "c163",
    "difficulty": 197,
    "function": "def c163(x):\n    # replace each element M with 2 * M - 10\n    return [2*i-10 for i in x]\n\n",
    "data": {
      "input": [
        85,
        26,
        32,
        25,
        27,
        14,
        13,
        39
      ],
      "output": [
        160,
        42,
        54,
        40,
        44,
        18,
        16,
        68
      ]
    },
    "demos": [
      {
        "input": [
          26,
          90,
          30,
          77,
          43,
          32,
          98,
          12
        ],
        "output": [
          42,
          170,
          50,
          144,
          76,
          54,
          186,
          14
        ]
      },
      {
        "input": [
          35,
          64,
          35,
          55,
          91,
          26,
          95,
          94
        ],
        "output": [
          60,
          118,
          60,
          100,
          172,
          42,
          180,
          178
        ]
      },
      {
        "input": [
          35,
          71,
          12,
          42,
          82,
          62,
          20
        ],
        "output": [
          60,
          132,
          14,
          74,
          154,
          114,
          30
        ]
      }
    ]
  },
  {
    "id": "c154",
    "difficulty": 198,
    "function": "def c154(x):\n    # triple each even element\n    return [i*3 if i % 2 == 0 else i for i in x]\n\n",
    "data": {
      "input": [
        5,
        0,
        30,
        24,
        29
      ],
      "output": [
        5,
        0,
        90,
        72,
        29
      ]
    },
    "demos": [
      {
        "input": [
          1,
          15,
          28,
          1,
          18,
          14,
          1,
          32
        ],
        "output": [
          1,
          15,
          84,
          1,
          54,
          42,
          1,
          96
        ]
      },
      {
        "input": [
          31,
          9,
          1,
          4,
          1,
          0
        ],
        "output": [
          31,
          9,
          1,
          12,
          1,
          0
        ]
      },
      {
        "input": [
          23,
          30,
          1,
          32,
          17
        ],
        "output": [
          23,
          90,
          1,
          96,
          17
        ]
      }
    ]
  },
  {
    "id": "c166",
    "difficulty": 199,
    "function": "def c166(x):\n    # unique elements in ascending order by the sum of their digits\n    res = {}\n    for i in x:\n        if i not in res:\n            res[i] = sum(map(int, str(i)))\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        68,
        46,
        96,
        96,
        51,
        24,
        68
      ],
      "output": [
        51,
        24,
        46,
        68,
        96
      ]
    },
    "demos": [
      {
        "input": [
          83,
          65,
          31,
          68,
          13,
          7
        ],
        "output": [
          31,
          13,
          7,
          83,
          65,
          68
        ]
      },
      {
        "input": [
          3,
          39,
          97,
          48,
          39
        ],
        "output": [
          3,
          39,
          48,
          97
        ]
      },
      {
        "input": [
          92,
          26,
          12,
          45,
          12,
          80,
          10,
          91
        ],
        "output": [
          10,
          12,
          26,
          80,
          45,
          91,
          92
        ]
      }
    ]
  },
  {
    "id": "c084",
    "difficulty": 200,
    "function": "def c084(x):\n    # remove all but element 6\n    return [x[6]]\n\n",
    "data": {
      "input": [
        51,
        10,
        6,
        23,
        60,
        11,
        32,
        66
      ],
      "output": [
        32
      ]
    },
    "demos": [
      {
        "input": [
          40,
          67,
          23,
          93,
          53,
          66,
          26,
          90
        ],
        "output": [
          26
        ]
      },
      {
        "input": [
          57,
          72,
          74,
          56,
          66,
          20,
          94,
          96,
          36,
          75
        ],
        "output": [
          94
        ]
      },
      {
        "input": [
          38,
          98,
          84,
          16,
          20,
          26,
          16,
          90
        ],
        "output": [
          16
        ]
      }
    ]
  },
  {
    "id": "c249",
    "difficulty": 201,
    "function": "def c249(x):\n    # use 0s to delimit sublists, give the first element of each sublist\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            if sublist:\n                res.append(sublist[0])\n                sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res.append(sublist[0])\n    return res\n\n",
    "data": {
      "input": [
        93,
        11,
        30,
        0,
        0,
        96,
        1,
        27,
        51
      ],
      "output": [
        93,
        96
      ]
    },
    "demos": [
      {
        "input": [
          0,
          0,
          87,
          0,
          36,
          63,
          79,
          76,
          55,
          72,
          52
        ],
        "output": [
          87,
          36
        ]
      },
      {
        "input": [
          73,
          71,
          72,
          54,
          29,
          59,
          86,
          17
        ],
        "output": [
          73
        ]
      },
      {
        "input": [
          0,
          58,
          5,
          12,
          75,
          11,
          0,
          73,
          98,
          0
        ],
        "output": [
          58,
          73
        ]
      }
    ]
  },
  {
    "id": "c118",
    "difficulty": 202,
    "function": "def c118(x):\n    # left rotate by N elements, N is the last element\n    return x[x[-1]:] + x[:x[-1]]\n\n",
    "data": {
      "input": [
        12,
        33,
        18,
        22,
        4,
        18,
        38,
        30,
        7
      ],
      "output": [
        30,
        7,
        12,
        33,
        18,
        22,
        4,
        18,
        38
      ]
    },
    "demos": [
      {
        "input": [
          14,
          43,
          28,
          55,
          34,
          29,
          73,
          44,
          8
        ],
        "output": [
          8,
          14,
          43,
          28,
          55,
          34,
          29,
          73,
          44
        ]
      },
      {
        "input": [
          69,
          89,
          28,
          46,
          1,
          23,
          39,
          1
        ],
        "output": [
          89,
          28,
          46,
          1,
          23,
          39,
          1,
          69
        ]
      },
      {
        "input": [
          3,
          41,
          55,
          32,
          45,
          6,
          4
        ],
        "output": [
          45,
          6,
          4,
          3,
          41,
          55,
          32
        ]
      }
    ]
  },
  {
    "id": "c152",
    "difficulty": 203,
    "function": "def c152(x):\n    # replace each element with the product of its digits\n    res = []\n    for i in x:\n        if i < 10:\n            res.append(0)\n        else:\n            res.append(int(str(i)[0]) * int(str(i)[1]))\n    return res\n\n",
    "data": {
      "input": [
        91,
        44,
        34,
        35,
        90,
        24,
        67,
        71
      ],
      "output": [
        9,
        16,
        12,
        15,
        0,
        8,
        42,
        7
      ]
    },
    "demos": [
      {
        "input": [
          32,
          93,
          9,
          7,
          84,
          83,
          95
        ],
        "output": [
          6,
          27,
          0,
          0,
          32,
          24,
          45
        ]
      },
      {
        "input": [
          18,
          96,
          30,
          91,
          58,
          52
        ],
        "output": [
          8,
          54,
          0,
          9,
          40,
          10
        ]
      },
      {
        "input": [
          89,
          78,
          7,
          40,
          27,
          80
        ],
        "output": [
          72,
          56,
          0,
          0,
          14,
          0
        ]
      }
    ]
  },
  {
    "id": "c237",
    "difficulty": 204,
    "function": "def c237(x):\n    # cumulative sum of unique elements\n    res = []\n    s = 0\n    for i in x:\n        if i not in res:\n            res.append(i)\n    for i in range(len(res)):\n        s += res[i]\n        res[i] = s\n    return res\n\n",
    "data": {
      "input": [
        16,
        3,
        14,
        30,
        14
      ],
      "output": [
        16,
        19,
        33,
        63
      ]
    },
    "demos": [
      {
        "input": [
          7,
          27,
          25,
          12,
          25
        ],
        "output": [
          7,
          34,
          59,
          71
        ]
      },
      {
        "input": [
          6,
          25,
          7,
          25,
          25,
          15,
          18
        ],
        "output": [
          6,
          31,
          38,
          53,
          71
        ]
      },
      {
        "input": [
          17,
          17,
          11,
          17,
          23,
          11,
          6,
          23,
          17
        ],
        "output": [
          17,
          28,
          51,
          57
        ]
      }
    ]
  },
  {
    "id": "c243",
    "difficulty": 205,
    "function": "def c243(x):\n    # number of odd elements\n    return [len([i for i in x if i % 2 == 1])]\n\n",
    "data": {
      "input": [
        14,
        77,
        66,
        66,
        26,
        86
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          51,
          88,
          12,
          70,
          64,
          83
        ],
        "output": [
          2
        ]
      },
      {
        "input": [
          46,
          82,
          51,
          74,
          55,
          55
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          34,
          73,
          26,
          41,
          18,
          19
        ],
        "output": [
          3
        ]
      }
    ]
  },
  {
    "id": "c188",
    "difficulty": 206,
    "function": "def c188(x):\n    # replace each element with 1 if it is divisible by 3, else replace with 0\n    return [1 if i % 3 == 0 else 0 for i in x]\n\n",
    "data": {
      "input": [
        25,
        39,
        87,
        92,
        17,
        85
      ],
      "output": [
        0,
        1,
        1,
        0,
        0,
        0
      ]
    },
    "demos": [
      {
        "input": [
          26,
          18,
          12,
          4,
          7,
          90,
          96
        ],
        "output": [
          0,
          1,
          1,
          0,
          0,
          1,
          1
        ]
      },
      {
        "input": [
          9,
          43,
          26,
          82,
          50,
          97,
          93
        ],
        "output": [
          1,
          0,
          0,
          0,
          0,
          0,
          1
        ]
      },
      {
        "input": [
          80,
          31,
          72,
          8,
          89,
          76,
          12,
          4
        ],
        "output": [
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0
        ]
      }
    ]
  },
  {
    "id": "c139",
    "difficulty": 207,
    "function": "def c139(x):\n    # remove all occurrences of the smallest element and the largest element\n    min_val = min(x)\n    max_val = max(x)\n    return [i for i in x if i != min_val and i != max_val]\n\n",
    "data": {
      "input": [
        1,
        4,
        8,
        6,
        9
      ],
      "output": [
        4,
        8,
        6
      ]
    },
    "demos": [
      {
        "input": [
          5,
          10,
          5,
          4,
          4,
          3
        ],
        "output": [
          5,
          5,
          4,
          4
        ]
      },
      {
        "input": [
          4,
          8,
          2,
          0,
          2
        ],
        "output": [
          4,
          2,
          2
        ]
      },
      {
        "input": [
          2,
          5,
          3,
          3,
          9,
          1
        ],
        "output": [
          2,
          5,
          3,
          3
        ]
      }
    ]
  },
  {
    "id": "c036",
    "difficulty": 208,
    "function": "def c036(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        9,
        8,
        4,
        3,
        10
      ],
      "output": [
        9,
        8,
        3,
        4,
        10
      ]
    },
    "demos": [
      {
        "input": [
          8,
          2,
          10,
          2,
          3,
          1
        ],
        "output": [
          8,
          2,
          2,
          10,
          3,
          1
        ]
      },
      {
        "input": [
          3,
          8,
          9,
          9,
          1,
          1,
          9,
          3
        ],
        "output": [
          3,
          1,
          9,
          9,
          8,
          1,
          9,
          3
        ]
      },
      {
        "input": [
          10,
          2,
          9,
          0,
          10,
          8
        ],
        "output": [
          10,
          2,
          0,
          9,
          10,
          8
        ]
      }
    ]
  },
  {
    "id": "c201",
    "difficulty": 209,
    "function": "def c201(x):\n    # elements > first element, followed by elements < first element\n    return [i for i in x if i > x[0]] + [i for i in x if i < x[0]]\n\n",
    "data": {
      "input": [
        60,
        57,
        13,
        87,
        96
      ],
      "output": [
        87,
        96,
        57,
        13
      ]
    },
    "demos": [
      {
        "input": [
          35,
          36,
          7,
          40,
          23,
          32,
          78
        ],
        "output": [
          36,
          40,
          78,
          7,
          23,
          32
        ]
      },
      {
        "input": [
          95,
          16,
          26,
          87,
          2,
          8,
          45,
          21
        ],
        "output": [
          16,
          26,
          87,
          2,
          8,
          45,
          21
        ]
      },
      {
        "input": [
          8,
          54,
          77,
          80,
          80,
          82,
          87,
          84
        ],
        "output": [
          54,
          77,
          80,
          80,
          82,
          87,
          84
        ]
      }
    ]
  },
  {
    "id": "c217",
    "difficulty": 210,
    "function": "def c217(x):\n    # elements in ascending order by ones digit\n    return sorted(x, key=lambda i: i % 10)\n\n",
    "data": {
      "input": [
        20,
        84,
        15,
        25,
        17,
        28,
        43
      ],
      "output": [
        20,
        43,
        84,
        15,
        25,
        17,
        28
      ]
    },
    "demos": [
      {
        "input": [
          28,
          98,
          32,
          31,
          82,
          2,
          74,
          54
        ],
        "output": [
          31,
          32,
          82,
          2,
          74,
          54,
          28,
          98
        ]
      },
      {
        "input": [
          15,
          22,
          83,
          13,
          34,
          34,
          79
        ],
        "output": [
          22,
          83,
          13,
          34,
          34,
          15,
          79
        ]
      },
      {
        "input": [
          65,
          18,
          99,
          18,
          76,
          44,
          21,
          28
        ],
        "output": [
          21,
          44,
          65,
          76,
          18,
          18,
          28,
          99
        ]
      }
    ]
  },
  {
    "id": "c005",
    "difficulty": 211,
    "function": "def c005(x):\n    # remove all but element N + 1, N is the first element\n    return [x[x[0]+1]]\n\n",
    "data": {
      "input": [
        1,
        5,
        46,
        35,
        58
      ],
      "output": [
        46
      ]
    },
    "demos": [
      {
        "input": [
          0,
          4,
          39,
          22,
          49,
          22
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          2,
          96,
          32,
          44,
          82
        ],
        "output": [
          44
        ]
      },
      {
        "input": [
          6,
          65,
          46,
          78,
          11,
          81,
          5,
          40
        ],
        "output": [
          40
        ]
      }
    ]
  },
  {
    "id": "c063",
    "difficulty": 213,
    "function": "def c063(x):\n    # remove the first N + 1 elements, N is the first element\n    return x[x[0]+1:]\n\n",
    "data": {
      "input": [
        3,
        1,
        2,
        7,
        3,
        9,
        5
      ],
      "output": [
        3,
        9,
        5
      ]
    },
    "demos": [
      {
        "input": [
          2,
          6,
          8,
          4,
          3
        ],
        "output": [
          4,
          3
        ]
      },
      {
        "input": [
          4,
          10,
          1,
          6,
          8,
          3
        ],
        "output": [
          3
        ]
      },
      {
        "input": [
          2,
          10,
          2,
          3,
          10
        ],
        "output": [
          3,
          10
        ]
      }
    ]
  },
  {
    "id": "c141",
    "difficulty": 214,
    "function": "def c141(x):\n    # replace element M + 2 with N, M = element 0, N = element 1; remove elements 0 and 1\n    x[x[0]+2] = x[1]\n    return x[2:]\n\n",
    "data": {
      "input": [
        0,
        2,
        6,
        7,
        4
      ],
      "output": [
        2,
        7,
        4
      ]
    },
    "demos": [
      {
        "input": [
          1,
          6,
          8,
          7,
          8
        ],
        "output": [
          8,
          6,
          8
        ]
      },
      {
        "input": [
          2,
          8,
          1,
          5,
          4,
          1,
          3
        ],
        "output": [
          1,
          5,
          8,
          1,
          3
        ]
      },
      {
        "input": [
          3,
          1,
          6,
          2,
          2,
          0,
          8,
          7
        ],
        "output": [
          6,
          2,
          2,
          1,
          8,
          7
        ]
      }
    ]
  },
  {
    "id": "c089",
    "difficulty": 215,
    "function": "def c089(x):\n    # swap elements 2 and 3 if element 2 > element 3, else swap elements 1 and 4\n    if x[2] > x[3]:\n        x[2], x[3] = x[3], x[2]\n    else:\n        x[1], x[4] = x[4], x[1]\n    return x\n\n",
    "data": {
      "input": [
        65,
        83,
        47,
        62,
        80
      ],
      "output": [
        65,
        80,
        47,
        62,
        83
      ]
    },
    "demos": [
      {
        "input": [
          33,
          60,
          38,
          10,
          23,
          68,
          87,
          18
        ],
        "output": [
          33,
          60,
          10,
          38,
          23,
          68,
          87,
          18
        ]
      },
      {
        "input": [
          86,
          87,
          13,
          44,
          75,
          57,
          2
        ],
        "output": [
          86,
          75,
          13,
          44,
          87,
          57,
          2
        ]
      },
      {
        "input": [
          55,
          69,
          60,
          1,
          33,
          98,
          74
        ],
        "output": [
          55,
          69,
          1,
          60,
          33,
          98,
          74
        ]
      }
    ]
  },
  {
    "id": "c124",
    "difficulty": 216,
    "function": "def c124(x):\n    # element M, M = element N, N = element 0\n    return [x[x[0]]]\n\n",
    "data": {
      "input": [
        8,
        8,
        6,
        4,
        2,
        6,
        3,
        8,
        7,
        1
      ],
      "output": [
        7
      ]
    },
    "demos": [
      {
        "input": [
          3,
          2,
          8,
          9,
          5,
          3,
          6,
          1,
          7,
          8
        ],
        "output": [
          9
        ]
      },
      {
        "input": [
          5,
          4,
          2,
          0,
          2,
          4,
          4,
          1,
          3
        ],
        "output": [
          4
        ]
      },
      {
        "input": [
          2,
          6,
          5,
          8,
          4,
          3,
          8,
          8,
          5,
          3
        ],
        "output": [
          5
        ]
      }
    ]
  },
  {
    "id": "c216",
    "difficulty": 217,
    "function": "def c216(x):\n    # elements in ascending order by tens digit\n    res = []\n    for i in x:\n        if len(str(i)) > 1:\n            res.append([i, int(str(i)[-2])])\n        else:\n            res.append([i, 0])\n    return [i[0] for i in sorted(res, key=lambda i: i[1])]\n\n",
    "data": {
      "input": [
        93,
        94,
        41,
        11,
        39,
        33,
        75,
        0
      ],
      "output": [
        0,
        11,
        39,
        33,
        41,
        75,
        93,
        94
      ]
    },
    "demos": [
      {
        "input": [
          61,
          8,
          27,
          30,
          57,
          97
        ],
        "output": [
          8,
          27,
          30,
          57,
          61,
          97
        ]
      },
      {
        "input": [
          46,
          13,
          71,
          30,
          40
        ],
        "output": [
          13,
          30,
          46,
          40,
          71
        ]
      },
      {
        "input": [
          77,
          49,
          20,
          41,
          39,
          93,
          46,
          47
        ],
        "output": [
          20,
          39,
          49,
          41,
          46,
          47,
          77,
          93
        ]
      }
    ]
  },
  {
    "id": "c143",
    "difficulty": 218,
    "function": "def c143(x):\n    # replace every occurrence of the largest element with the smallest element\n    max_val = max(x)\n    min_val = min(x)\n    return [min_val if i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        1,
        5,
        6,
        3,
        10,
        4,
        0,
        7
      ],
      "output": [
        1,
        5,
        6,
        3,
        0,
        4,
        0,
        7
      ]
    },
    "demos": [
      {
        "input": [
          6,
          2,
          3,
          5,
          6,
          6,
          2,
          1
        ],
        "output": [
          1,
          2,
          3,
          5,
          1,
          1,
          2,
          1
        ]
      },
      {
        "input": [
          6,
          10,
          7,
          5,
          8,
          7
        ],
        "output": [
          6,
          5,
          7,
          5,
          8,
          7
        ]
      },
      {
        "input": [
          1,
          7,
          1,
          6,
          0,
          4
        ],
        "output": [
          1,
          0,
          1,
          6,
          0,
          4
        ]
      }
    ]
  },
  {
    "id": "c215",
    "difficulty": 219,
    "function": "def c215(x):\n    # elements in ascending order by hundreds digit\n    res = {}\n    for i in x:\n        if len(str(i)) > 2:\n            res[i] = int(str(i)[-3])\n        else:\n            res[i] = 0\n    return sorted(res, key=res.get)\n\n",
    "data": {
      "input": [
        690,
        937,
        267,
        250,
        56,
        807
      ],
      "output": [
        56,
        267,
        250,
        690,
        807,
        937
      ]
    },
    "demos": [
      {
        "input": [
          173,
          726,
          14,
          89,
          789
        ],
        "output": [
          14,
          89,
          173,
          726,
          789
        ]
      },
      {
        "input": [
          908,
          897,
          950,
          44,
          117,
          177,
          340,
          821
        ],
        "output": [
          44,
          117,
          177,
          340,
          897,
          821,
          908,
          950
        ]
      },
      {
        "input": [
          936,
          371,
          23,
          381,
          268,
          651,
          441
        ],
        "output": [
          23,
          268,
          371,
          381,
          441,
          651,
          936
        ]
      }
    ]
  },
  {
    "id": "c144",
    "difficulty": 220,
    "function": "def c144(x):\n    # replace every occurrence of the largest or smallest element with their absolute difference\n    max_val = max(x)\n    min_val = min(x)\n    return [abs(min_val - max_val) if i == min_val or i == max_val else i for i in x]\n\n",
    "data": {
      "input": [
        39
      ],
      "output": [
        0
      ]
    },
    "demos": [
      {
        "input": [
          7,
          71,
          44
        ],
        "output": [
          64,
          64,
          44
        ]
      },
      {
        "input": [
          2,
          12,
          75,
          45,
          63
        ],
        "output": [
          73,
          12,
          73,
          45,
          63
        ]
      },
      {
        "input": [
          15,
          91,
          87,
          2,
          66
        ],
        "output": [
          15,
          89,
          87,
          89,
          66
        ]
      }
    ]
  },
  {
    "id": "c128",
    "difficulty": 221,
    "function": "def c128(x):\n    # elements in ascending order after removing elements 0,1,and 4\n    x = x[2:4] + x[5:]\n    return sorted(x)\n\n",
    "data": {
      "input": [
        88,
        62,
        22,
        94,
        13
      ],
      "output": [
        22,
        94
      ]
    },
    "demos": [
      {
        "input": [
          38,
          82,
          28,
          87,
          99
        ],
        "output": [
          28,
          87
        ]
      },
      {
        "input": [
          42,
          79,
          61,
          48,
          65
        ],
        "output": [
          48,
          61
        ]
      },
      {
        "input": [
          19,
          65,
          61,
          12,
          86,
          98,
          5,
          43
        ],
        "output": [
          5,
          12,
          43,
          61,
          98
        ]
      }
    ]
  },
  {
    "id": "c208",
    "difficulty": 222,
    "function": "def c208(x):\n    # keep only last N elements, N is the last element\n    return x[-x[-1]:]\n\n",
    "data": {
      "input": [
        0,
        3,
        9,
        9,
        9,
        6,
        6
      ],
      "output": [
        3,
        9,
        9,
        9,
        6,
        6
      ]
    },
    "demos": [
      {
        "input": [
          9,
          7,
          1,
          6,
          4,
          3,
          3,
          5
        ],
        "output": [
          6,
          4,
          3,
          3,
          5
        ]
      },
      {
        "input": [
          1,
          9,
          3,
          9,
          1,
          7,
          3
        ],
        "output": [
          1,
          7,
          3
        ]
      },
      {
        "input": [
          9,
          8,
          7,
          3,
          7,
          3
        ],
        "output": [
          3,
          7,
          3
        ]
      }
    ]
  },
  {
    "id": "c035",
    "difficulty": 223,
    "function": "def c035(x):\n    # swap elements 0 and 3 if element 1 = element 2, else swap elements 1 and 2\n    if x[1] == x[2]:\n        x[0], x[3] = x[3], x[0]\n    else:\n        x[1], x[2] = x[2], x[1]\n    return x\n\n",
    "data": {
      "input": [
        3,
        10,
        6,
        8,
        6,
        6,
        8,
        2
      ],
      "output": [
        3,
        6,
        10,
        8,
        6,
        6,
        8,
        2
      ]
    },
    "demos": [
      {
        "input": [
          7,
          2,
          2,
          7,
          5
        ],
        "output": [
          7,
          2,
          2,
          7,
          5
        ]
      },
      {
        "input": [
          5,
          5,
          5,
          9,
          7,
          6,
          7
        ],
        "output": [
          9,
          5,
          5,
          5,
          7,
          6,
          7
        ]
      },
      {
        "input": [
          8,
          6,
          1,
          10,
          10,
          4,
          9,
          4
        ],
        "output": [
          8,
          1,
          6,
          10,
          10,
          4,
          9,
          4
        ]
      }
    ]
  },
  {
    "id": "c214",
    "difficulty": 224,
    "function": "def c214(x):\n    # remove elements 0 and N + 1, N is the first element\n    x = x[1:x[0]+1] + x[x[0]+2:]\n    return x\n\n",
    "data": {
      "input": [
        2,
        25,
        67,
        96,
        70,
        37,
        89
      ],
      "output": [
        25,
        67,
        70,
        37,
        89
      ]
    },
    "demos": [
      {
        "input": [
          1,
          46,
          66,
          37,
          29,
          3,
          24,
          62
        ],
        "output": [
          46,
          37,
          29,
          3,
          24,
          62
        ]
      },
      {
        "input": [
          0,
          78,
          43,
          14,
          61,
          28,
          69,
          63
        ],
        "output": [
          43,
          14,
          61,
          28,
          69,
          63
        ]
      },
      {
        "input": [
          2,
          68,
          37,
          22,
          14,
          24,
          38
        ],
        "output": [
          68,
          37,
          14,
          24,
          38
        ]
      }
    ]
  },
  {
    "id": "c130",
    "difficulty": 225,
    "function": "def c130(x):\n    # elements 1 through N + 1, N = element 0\n    return x[1:x[0]+1]\n\n",
    "data": {
      "input": [
        1,
        55,
        71,
        91,
        56
      ],
      "output": [
        55
      ]
    },
    "demos": [
      {
        "input": [
          1,
          89,
          5,
          11,
          90,
          70,
          19,
          69
        ],
        "output": [
          89
        ]
      },
      {
        "input": [
          7,
          9,
          84,
          7,
          36,
          16,
          35,
          15
        ],
        "output": [
          9,
          84,
          7,
          36,
          16,
          35,
          15
        ]
      },
      {
        "input": [
          0,
          22,
          53,
          13,
          4,
          59,
          91,
          31
        ],
        "output": []
      }
    ]
  },
  {
    "id": "c159",
    "difficulty": 226,
    "function": "def c159(x):\n    # element N counts the number of occurrences of N, up to the largest element\n    out = []\n    for i, j in enumerate(range(max(x)+1)):\n        out.append(x.count(j))\n    return out\n\n",
    "data": {
      "input": [
        9,
        1,
        1,
        9,
        0,
        5,
        7,
        8
      ],
      "output": [
        1,
        2,
        0,
        0,
        0,
        1,
        0,
        1,
        1,
        2
      ]
    },
    "demos": [
      {
        "input": [
          7,
          5,
          6,
          7,
          8,
          5,
          3,
          8
        ],
        "output": [
          0,
          0,
          0,
          1,
          0,
          2,
          1,
          2,
          2
        ]
      },
      {
        "input": [
          7,
          0,
          5,
          9,
          0,
          7,
          2
        ],
        "output": [
          2,
          0,
          1,
          0,
          0,
          1,
          0,
          2,
          0,
          1
        ]
      },
      {
        "input": [
          8,
          0,
          3,
          7,
          7,
          3
        ],
        "output": [
          1,
          0,
          0,
          2,
          0,
          0,
          0,
          2,
          1
        ]
      }
    ]
  },
  {
    "id": "c205",
    "difficulty": 227,
    "function": "def c205(x):\n    # product of elements divisible by 4\n    res = 1\n    for i in x:\n        if i % 4 == 0:\n            res *= i\n    return [res]\n\n",
    "data": {
      "input": [
        17,
        10,
        2,
        18,
        7,
        7
      ],
      "output": [
        1
      ]
    },
    "demos": [
      {
        "input": [
          10,
          12,
          8,
          15,
          7,
          1
        ],
        "output": [
          96
        ]
      },
      {
        "input": [
          5,
          8,
          15,
          17,
          12,
          9,
          14
        ],
        "output": [
          96
        ]
      },
      {
        "input": [
          1,
          12,
          19,
          15,
          20,
          15
        ],
        "output": [
          240
        ]
      }
    ]
  },
  {
    "id": "c076",
    "difficulty": 228,
    "function": "def c076(x):\n    # the max, last, length, first, and min elements\n    return [max(x), x[-1], len(x), x[0], min(x)]\n\n",
    "data": {
      "input": [
        45,
        82,
        30,
        74,
        20,
        77,
        7,
        75
      ],
      "output": [
        82,
        75,
        8,
        45,
        7
      ]
    },
    "demos": [
      {
        "input": [
          24,
          63,
          57,
          67,
          22,
          46
        ],
        "output": [
          67,
          46,
          6,
          24,
          22
        ]
      },
      {
        "input": [
          96,
          52,
          52,
          17,
          50,
          86,
          59,
          89
        ],
        "output": [
          96,
          89,
          8,
          96,
          17
        ]
      },
      {
        "input": [
          41,
          64,
          45,
          95,
          37,
          55,
          65
        ],
        "output": [
          95,
          65,
          7,
          41,
          37
        ]
      }
    ]
  },
  {
    "id": "c250",
    "difficulty": 229,
    "function": "def c250(x):\n    # use 0s to delimit sublists, concatenate reversed sublists\n    res = []\n    sublist = []\n    for i in x:\n        if i == 0:\n            res += sublist[::-1]\n            sublist = []\n        else:\n            sublist.append(i)\n    if sublist:\n        res += sublist[::-1]\n    return res\n\n",
    "data": {
      "input": [
        72,
        42,
        26,
        14,
        57,
        16,
        0,
        35,
        8
      ],
      "output": [
        16,
        57,
        14,
        26,
        42,
        72,
        8,
        35
      ]
    },
    "demos": [
      {
        "input": [
          26,
          63,
          0,
          30,
          0,
          50,
          75,
          0,
          70
        ],
        "output": [
          63,
          26,
          30,
          75,
          50,
          70
        ]
      },
      {
        "input": [
          31,
          17,
          32,
          62,
          0,
          44,
          80,
          93
        ],
        "output": [
          62,
          32,
          17,
          31,
          93,
          80,
          44
        ]
      },
      {
        "input": [
          0,
          75,
          0,
          22,
          13,
          0,
          75,
          25,
          36
        ],
        "output": [
          75,
          13,
          22,
          36,
          25,
          75
        ]
      }
    ]
  },
  {
    "id": "c186",
    "difficulty": 230,
    "function": "def c186(x):\n    # keep only elements greater than element 0\n    return [i for i in x if i > x[0]]\n\n",
    "data": {
      "input": [
        32,
        8,
        93,
        15,
        46,
        49
      ],
      "output": [
        93,
        46,
        49
      ]
    },
    "demos": [
      {
        "input": [
          57,
          5,
          69,
          31,
          69,
          81,
          52,
          26
        ],
        "output": [
          69,
          69,
          81
        ]
      },
      {
        "input": [
          76,
          90,
          30,
          89,
          52,
          60,
          97
        ],
        "output": [
          90,
          89,
          97
        ]
      },
      {
        "input": [
          57,
          13,
          65,
          68,
          40,
          24,
          14
        ],
        "output": [
          65,
          68
        ]
      }
    ]
  },
  {
    "id": "c242",
    "difficulty": 231,
    "function": "def c242(x):\n    # take the largest unique element, append the second largest unique element, prepend the third largest unique element, append the fourth largest unique element, and so on\n    unique = sorted(set(x), reverse=True)\n    res = [max(unique)]\n    unique.remove(max(unique))\n    for i in range(len(unique)):\n        if i % 2 == 0:\n            res.append(unique[i])\n        else:\n            res.insert(0, unique[i])\n    return res\n\n",
    "data": {
      "input": [
        1,
        4,
        5,
        9,
        1,
        6,
        1,
        5
      ],
      "output": [
        1,
        5,
        9,
        6,
        4
      ]
    },
    "demos": [
      {
        "input": [
          5,
          1,
          6,
          7,
          0,
          8,
          9
        ],
        "output": [
          0,
          5,
          7,
          9,
          8,
          6,
          1
        ]
      },
      {
        "input": [
          5,
          5,
          5,
          1,
          4,
          1,
          3,
          7
        ],
        "output": [
          1,
          4,
          7,
          5,
          3
        ]
      },
      {
        "input": [
          6,
          2,
          9,
          2,
          3,
          2,
          6,
          7
        ],
        "output": [
          2,
          6,
          9,
          7,
          3
        ]
      }
    ]
  },
  {
    "id": "c160",
    "difficulty": 232,
    "function": "def c160(x):\n    # replace each element with 99 - element\n    return [99-i for i in x]\n\n",
    "data": {
      "input": [
        92,
        83,
        57,
        44,
        79,
        15,
        61,
        3
      ],
      "output": [
        7,
        16,
        42,
        55,
        20,
        84,
        38,
        96
      ]
    },
    "demos": [
      {
        "input": [
          0,
          65,
          84,
          86,
          45,
          10,
          96
        ],
        "output": [
          99,
          34,
          15,
          13,
          54,
          89,
          3
        ]
      },
      {
        "input": [
          97,
          47,
          97,
          40,
          7,
          6,
          86
        ],
        "output": [
          2,
          52,
          2,
          59,
          92,
          93,
          13
        ]
      },
      {
        "input": [
          66,
          16,
          30,
          15,
          42,
          72
        ],
        "output": [
          33,
          83,
          69,
          84,
          57,
          27
        ]
      }
    ]
  },
  {
    "id": "c167",
    "difficulty": 233,
    "function": "def c167(x):\n    # keep only elements divisible by 3\n    return [i for i in x if i % 3 == 0]\n\n",
    "data": {
      "input": [
        40,
        29,
        59,
        86,
        29,
        18,
        47,
        5
      ],
      "output": [
        18
      ]
    },
    "demos": [
      {
        "input": [
          5,
          74,
          60,
          81,
          52,
          26
        ],
        "output": [
          60,
          81
        ]
      },
      {
        "input": [
          30,
          56,
          14,
          78,
          21,
          90,
          29
        ],
        "output": [
          30,
          78,
          21,
          90
        ]
      },
      {
        "input": [
          25,
          35,
          54,
          37,
          75,
          7
        ],
        "output": [
          54,
          75
        ]
      }
    ]
  },
  {
    "id": "c202",
    "difficulty": 234,
    "function": "def c202(x):\n    # the indices of every even number\n    return [i for i, j in enumerate(x) if j % 2 == 0]\n\n\n",
    "data": {
      "input": [
        13,
        84,
        12,
        82,
        80,
        46,
        4
      ],
      "output": [
        1,
        2,
        3,
        4,
        5,
        6
      ]
    },
    "demos": [
      {
        "input": [
          74,
          41,
          70,
          53,
          19,
          57,
          78,
          86
        ],
        "output": [
          0,
          2,
          6,
          7
        ]
      },
      {
        "input": [
          75,
          72,
          36,
          97,
          9,
          82
        ],
        "output": [
          1,
          2,
          5
        ]
      },
      {
        "input": [
          28,
          57,
          64,
          9,
          80,
          20
        ],
        "output": [
          0,
          2,
          4,
          5
        ]
      }
    ]
  },
  {
    "id": "c129",
    "difficulty": 235,
    "function": "def c129(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        6,
        7,
        66,
        74,
        24,
        90,
        25,
        12,
        39
      ],
      "output": [
        39
      ]
    },
    "demos": [
      {
        "input": [
          2,
          5,
          34,
          68,
          33,
          29,
          54
        ],
        "output": [
          33,
          29,
          54
        ]
      },
      {
        "input": [
          4,
          5,
          77,
          75,
          83,
          4,
          14,
          71,
          72,
          23
        ],
        "output": [
          14
        ]
      },
      {
        "input": [
          2,
          1,
          2,
          33,
          38,
          45,
          26
        ],
        "output": []
      }
    ]
  },
  {
    "id": "c221",
    "difficulty": 236,
    "function": "def c221(x):\n    # sum of even elements\n    return [sum(i for i in x if i % 2 == 0)]\n\n",
    "data": {
      "input": [
        6,
        14,
        43,
        6,
        24,
        31,
        5
      ],
      "output": [
        50
      ]
    },
    "demos": [
      {
        "input": [
          21,
          36,
          11,
          30,
          0,
          43,
          27,
          4
        ],
        "output": [
          70
        ]
      },
      {
        "input": [
          49,
          6,
          33,
          3,
          21,
          38,
          21,
          23
        ],
        "output": [
          44
        ]
      },
      {
        "input": [
          31,
          37,
          5,
          5,
          38,
          42,
          49
        ],
        "output": [
          80
        ]
      }
    ]
  },
  {
    "id": "c131",
    "difficulty": 237,
    "function": "def c131(x):\n    # keep only elements whose tens digit is even\n    res = []\n    for i in x:\n        if len(str(i)) < 2:\n            res.append(i)\n        elif int(str(i)[-2]) % 2 == 0:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        66,
        3,
        40,
        52,
        45,
        83
      ],
      "output": [
        66,
        3,
        40,
        45,
        83
      ]
    },
    "demos": [
      {
        "input": [
          29,
          7,
          3,
          75,
          40,
          38,
          27,
          29
        ],
        "output": [
          29,
          7,
          3,
          40,
          27,
          29
        ]
      },
      {
        "input": [
          63,
          10,
          68,
          90,
          36,
          65,
          85,
          87
        ],
        "output": [
          63,
          68,
          65,
          85,
          87
        ]
      },
      {
        "input": [
          28,
          69,
          54,
          46,
          48,
          82,
          55
        ],
        "output": [
          28,
          69,
          46,
          48,
          82
        ]
      }
    ]
  },
  {
    "id": "c180",
    "difficulty": 238,
    "function": "def c180(x):\n    # take the smallest element, append the second smallest element, prepend the third smallest element, append the fourth smallest element, and so on\n    sorted_x = sorted(x)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        4,
        13,
        7,
        64,
        11,
        9
      ],
      "output": [
        13,
        9,
        4,
        7,
        11,
        64
      ]
    },
    "demos": [
      {
        "input": [
          46,
          60,
          9,
          64,
          33,
          99,
          44,
          48
        ],
        "output": [
          64,
          48,
          44,
          9,
          33,
          46,
          60,
          99
        ]
      },
      {
        "input": [
          81,
          83,
          6,
          3,
          52,
          61,
          11
        ],
        "output": [
          83,
          61,
          11,
          3,
          6,
          52,
          81
        ]
      },
      {
        "input": [
          28,
          2,
          8,
          12,
          73,
          71,
          94,
          97
        ],
        "output": [
          94,
          71,
          12,
          2,
          8,
          28,
          73,
          97
        ]
      }
    ]
  },
  {
    "id": "c015",
    "difficulty": 239,
    "function": "def c015(x):\n    # elements M+2 through N+2, M is the first element, N is the second element\n    return x[x[0]+2:x[1]+2]\n\n",
    "data": {
      "input": [
        0,
        4,
        15,
        13,
        7,
        5,
        2,
        14,
        13
      ],
      "output": [
        15,
        13,
        7,
        5
      ]
    },
    "demos": [
      {
        "input": [
          4,
          4,
          5,
          15,
          11,
          13,
          8,
          11
        ],
        "output": []
      },
      {
        "input": [
          3,
          5,
          13,
          3,
          9,
          8,
          15,
          6
        ],
        "output": [
          8,
          15
        ]
      },
      {
        "input": [
          0,
          3,
          3,
          1,
          8,
          10
        ],
        "output": [
          3,
          1,
          8
        ]
      }
    ]
  },
  {
    "id": "c179",
    "difficulty": 240,
    "function": "def c179(x):\n    # take the largest element, append the second largest element, prepend the third largest element, append the fourth largest element, and so on\n    sorted_x = sorted(x, reverse=True)\n    res = [sorted_x[0]]\n    for i in range(1, len(sorted_x)):\n        if i % 2 == 1:\n            res.append(sorted_x[i])\n        else:\n            res.insert(0, sorted_x[i])\n    return res\n\n",
    "data": {
      "input": [
        95,
        57,
        59,
        33,
        36,
        3
      ],
      "output": [
        33,
        57,
        95,
        59,
        36,
        3
      ]
    },
    "demos": [
      {
        "input": [
          84,
          91,
          44,
          83,
          1,
          72,
          55
        ],
        "output": [
          1,
          55,
          83,
          91,
          84,
          72,
          44
        ]
      },
      {
        "input": [
          10,
          59,
          88,
          59,
          56,
          18
        ],
        "output": [
          18,
          59,
          88,
          59,
          56,
          10
        ]
      },
      {
        "input": [
          35,
          73,
          38,
          59,
          86,
          75,
          91
        ],
        "output": [
          35,
          59,
          75,
          91,
          86,
          73,
          38
        ]
      }
    ]
  },
  {
    "id": "c226",
    "difficulty": 241,
    "function": "def c226(x):\n    # remove first M and last N elements, M is the first element, N is the last element\n    if x[-1] == 0:\n        return x[x[0]:]\n    return x[x[0]:-x[-1]]\n\n",
    "data": {
      "input": [
        2,
        6,
        9,
        9,
        4,
        11,
        14,
        5,
        0
      ],
      "output": [
        9,
        9,
        4,
        11,
        14,
        5,
        0
      ]
    },
    "demos": [
      {
        "input": [
          4,
          9,
          13,
          11,
          0,
          7,
          10,
          11,
          8,
          1
        ],
        "output": [
          0,
          7,
          10,
          11,
          8
        ]
      },
      {
        "input": [
          2,
          6,
          5,
          12,
          9,
          3
        ],
        "output": [
          5
        ]
      },
      {
        "input": [
          1,
          11,
          14,
          10,
          15,
          4,
          9,
          8,
          3
        ],
        "output": [
          11,
          14,
          10,
          15,
          4
        ]
      }
    ]
  },
  {
    "id": "c134",
    "difficulty": 242,
    "function": "def c134(x):\n    # remove elements M through N, M is the first element, N is the second element\n    return x[:x[0]] + x[x[1]+1:]\n\n",
    "data": {
      "input": [
        2,
        6,
        15,
        10,
        10,
        3,
        10,
        12,
        11,
        14
      ],
      "output": [
        2,
        6,
        12,
        11,
        14
      ]
    },
    "demos": [
      {
        "input": [
          1,
          6,
          9,
          12,
          8,
          14,
          8,
          11,
          14,
          6
        ],
        "output": [
          1,
          11,
          14,
          6
        ]
      },
      {
        "input": [
          0,
          6,
          15,
          2,
          14,
          6,
          15,
          12
        ],
        "output": [
          12
        ]
      },
      {
        "input": [
          3,
          9,
          11,
          11,
          9,
          6,
          4,
          3,
          9,
          1
        ],
        "output": [
          3,
          9,
          11
        ]
      }
    ]
  },
  {
    "id": "c164",
    "difficulty": 243,
    "function": "def c164(x):\n    # replace each element M with M // 4 + 5\n    return [i//4+5 for i in x]\n\n",
    "data": {
      "input": [
        2,
        34,
        51,
        32,
        87,
        30
      ],
      "output": [
        5,
        13,
        17,
        13,
        26,
        12
      ]
    },
    "demos": [
      {
        "input": [
          62,
          84,
          85,
          97,
          75,
          23
        ],
        "output": [
          20,
          26,
          26,
          29,
          23,
          10
        ]
      },
      {
        "input": [
          3,
          14,
          79,
          13,
          29,
          71
        ],
        "output": [
          5,
          8,
          24,
          8,
          12,
          22
        ]
      },
      {
        "input": [
          51,
          27,
          33,
          11,
          59,
          21,
          0,
          22
        ],
        "output": [
          17,
          11,
          13,
          7,
          19,
          10,
          5,
          10
        ]
      }
    ]
  },
  {
    "id": "c178",
    "difficulty": 244,
    "function": "def c178(x):\n    # keep only elements followed by an even number\n    res = []\n    for i in range(len(x)-1):\n        if x[i+1] % 2 == 0:\n            res.append(x[i])\n    return res \n\n",
    "data": {
      "input": [
        86,
        48,
        54,
        69,
        5,
        79
      ],
      "output": [
        86,
        48
      ]
    },
    "demos": [
      {
        "input": [
          63,
          43,
          41,
          64,
          28,
          87,
          92
        ],
        "output": [
          41,
          64,
          87
        ]
      },
      {
        "input": [
          91,
          25,
          18,
          23,
          48,
          61,
          26
        ],
        "output": [
          25,
          23,
          61
        ]
      },
      {
        "input": [
          59,
          99,
          76,
          99,
          7,
          94,
          41,
          67
        ],
        "output": [
          99,
          7
        ]
      }
    ]
  },
  {
    "id": "c113",
    "difficulty": 245,
    "function": "def c113(x):\n    # keep only elements whose ones digit is greater than the first element\n    res = []\n    for i in x:\n        if i % 10 > x[0]:\n            res.append(i)\n    return res\n\n",
    "data": {
      "input": [
        7,
        32,
        6,
        19,
        44,
        45,
        31,
        12,
        26,
        33
      ],
      "output": [
        19
      ]
    },
    "demos": [
      {
        "input": [
          9,
          44,
          25,
          15,
          24,
          3,
          8,
          35,
          27,
          23
        ],
        "output": []
      },
      {
        "input": [
          7,
          45,
          20,
          38,
          21,
          5,
          7,
          41
        ],
        "output": [
          38
        ]
      },
      {
        "input": [
          5,
          49,
          19,
          15,
          11,
          35,
          3,
          39,
          16,
          4
        ],
        "output": [
          49,
          19,
          39,
          16
        ]
      }
    ]
  },
  {
    "id": "c206",
    "difficulty": 246,
    "function": "def c206(x):\n    # keep only elements whose value is between the first and second element\n    return [i for i in x if x[0] < i < x[1]]\n\n",
    "data": {
      "input": [
        1,
        31,
        5,
        22,
        9,
        23
      ],
      "output": [
        5,
        22,
        9,
        23
      ]
    },
    "demos": [
      {
        "input": [
          3,
          35,
          26,
          18,
          32,
          37,
          3,
          42
        ],
        "output": [
          26,
          18,
          32
        ]
      },
      {
        "input": [
          5,
          52,
          49,
          19,
          5,
          22,
          16,
          25,
          0
        ],
        "output": [
          49,
          19,
          22,
          16,
          25
        ]
      },
      {
        "input": [
          6,
          12,
          20,
          46,
          46,
          7,
          1
        ],
        "output": [
          7
        ]
      }
    ]
  },
  {
    "id": "c210",
    "difficulty": 247,
    "function": "def c210(x):\n    # unique elements with last element inserted at index M, where M is the first element\n    unique = []\n    for i in x:\n        if i not in unique:\n            unique.append(i)\n    unique.insert(x[0], x[-1])\n    return unique\n\n",
    "data": {
      "input": [
        1,
        0,
        7,
        0,
        1,
        3,
        0
      ],
      "output": [
        1,
        0,
        0,
        7,
        3
      ]
    },
    "demos": [
      {
        "input": [
          2,
          5,
          1,
          4,
          7,
          7
        ],
        "output": [
          2,
          5,
          7,
          1,
          4,
          7
        ]
      },
      {
        "input": [
          0,
          2,
          7,
          4,
          2,
          1,
          0
        ],
        "output": [
          0,
          0,
          2,
          7,
          4,
          1
        ]
      },
      {
        "input": [
          0,
          7,
          5,
          3,
          4,
          7,
          0,
          2
        ],
        "output": [
          2,
          0,
          7,
          5,
          3,
          4,
          2
        ]
      }
    ]
  },
  {
    "id": "c158",
    "difficulty": 248,
    "function": "def c158(x):\n    # replace each element with 1 if element N equals N, else 0\n    res = []\n    for i, j in enumerate(x):\n        if i == j:\n            res.append(1)\n        else:\n            res.append(0)\n    return res\n\n",
    "data": {
      "input": [
        0,
        0,
        2,
        3,
        8,
        5
      ],
      "output": [
        1,
        0,
        1,
        1,
        0,
        1
      ]
    },
    "demos": [
      {
        "input": [
          6,
          1,
          2,
          3,
          4,
          5,
          6,
          0,
          8,
          7
        ],
        "output": [
          0,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          1,
          0
        ]
      },
      {
        "input": [
          8,
          1,
          1,
          3,
          4,
          2,
          6,
          7
        ],
        "output": [
          0,
          1,
          0,
          1,
          1,
          0,
          1,
          1
        ]
      },
      {
        "input": [
          0,
          1,
          6,
          3,
          6,
          5,
          6,
          7,
          8,
          9
        ],
        "output": [
          1,
          1,
          0,
          1,
          0,
          1,
          1,
          1,
          1,
          1
        ]
      }
    ]
  },
  {
    "id": "c183",
    "difficulty": 249,
    "function": "def c183(x):\n    # list the index of second elements and following equal to first element\n    res = []\n    for i in range(1, len(x)):\n        if x[i] == x[0]:\n            res.append(i)\n    return res",
    "data": {
      "input": [
        0,
        9,
        0,
        7,
        14,
        1,
        0,
        0,
        0
      ],
      "output": [
        2,
        6,
        7,
        8
      ]
    },
    "demos": [
      {
        "input": [
          0,
          0,
          7,
          13,
          5,
          2,
          9,
          3,
          10,
          0
        ],
        "output": [
          1,
          9
        ]
      },
      {
        "input": [
          3,
          7,
          2,
          4,
          15,
          4,
          1
        ],
        "output": []
      },
      {
        "input": [
          8,
          8,
          13,
          10,
          2,
          15
        ],
        "output": [
          1
        ]
      }
    ]
  },
  {
    "id": "c014",
    "difficulty": 157,
    "function": "def c014(x):\n    # remove all but elements 2 through 5\n    return x[2:5]\n\n",
    "data": {
      "input": [
        29,
        35,
        46,
        5,
        63,
        5
      ],
      "output": [
        46,
        5,
        63
      ]
    },
    "demos": [
      {
        "input": [
          60,
          60,
          94,
          10,
          35,
          14
        ],
        "output": [
          94,
          10,
          35
        ]
      },
      {
        "input": [
          42,
          76,
          32,
          90,
          96,
          7
        ],
        "output": [
          32,
          90,
          96
        ]
      },
      {
        "input": [
          82,
          10,
          65,
          94,
          90,
          78
        ],
        "output": [
          65,
          94,
          90
        ]
      }
    ]
  },
  {
    "id": "c098",
    "difficulty": 86,
    "function": "def c098(x):\n    # add the index to each element\n    return [i+j for j, i in enumerate(x)]\n\n",
    "data": {
      "input": [
        7,
        5,
        6,
        1,
        0,
        1,
        6,
        8
      ],
      "output": [
        7,
        6,
        8,
        4,
        4,
        6,
        12,
        15
      ]
    },
    "demos": [
      {
        "input": [
          0,
          9,
          3,
          4,
          6,
          8,
          5
        ],
        "output": [
          0,
          10,
          5,
          7,
          10,
          13,
          11
        ]
      },
      {
        "input": [
          7,
          4,
          4,
          8,
          1,
          6,
          4,
          5
        ],
        "output": [
          7,
          5,
          6,
          11,
          5,
          11,
          10,
          12
        ]
      },
      {
        "input": [
          4,
          4,
          4,
          6,
          1,
          1,
          5
        ],
        "output": [
          4,
          5,
          6,
          9,
          5,
          6,
          11
        ]
      }
    ]
  },
  {
    "id": "c209",
    "difficulty": 212,
    "function": "def c209(x):\n    # elements in ascending order, insert sum of smallest and largest element at index 3\n    x = sorted(x)\n    x.insert(3, x[0] + x[-1])\n    return x\n\n",
    "data": {
      "input": [
        26,
        8,
        5,
        22,
        28,
        25
      ],
      "output": [
        5,
        8,
        22,
        33,
        25,
        26,
        28
      ]
    },
    "demos": [
      {
        "input": [
          22,
          7,
          17,
          16,
          14
        ],
        "output": [
          7,
          14,
          16,
          29,
          17,
          22
        ]
      },
      {
        "input": [
          13,
          3,
          16,
          14,
          20,
          25
        ],
        "output": [
          3,
          13,
          14,
          28,
          16,
          20,
          25
        ]
      },
      {
        "input": [
          15,
          22,
          14,
          24,
          24,
          30,
          8
        ],
        "output": [
          8,
          14,
          15,
          38,
          22,
          24,
          24,
          30
        ]
      }
    ]
  },
  {
    "id": "c211",
    "difficulty": 104,
    "function": "def c211(x):\n    # reverse input, insert fouth element and fifth element so they are fourth and third from the end respectively\n    x = x[::-1]\n    x.insert(-3, x[3])\n    x.insert(-4, x[4])\n    return x\n\n",
    "data": {
      "input": [
        4,
        18,
        60,
        48,
        48,
        39,
        83,
        6
      ],
      "output": [
        6,
        83,
        39,
        48,
        48,
        48,
        48,
        60,
        18,
        4
      ]
    },
    "demos": [
      {
        "input": [
          84,
          4,
          34,
          33,
          29,
          20
        ],
        "output": [
          20,
          29,
          33,
          34,
          34,
          34,
          4,
          84
        ]
      },
      {
        "input": [
          42,
          94,
          71,
          44,
          50,
          49,
          35,
          13
        ],
        "output": [
          13,
          35,
          49,
          50,
          44,
          44,
          50,
          71,
          94,
          42
        ]
      },
      {
        "input": [
          66,
          19,
          84,
          13,
          55,
          44,
          67
        ],
        "output": [
          67,
          44,
          55,
          13,
          13,
          13,
          84,
          19,
          66
        ]
      }
    ]
  }
]